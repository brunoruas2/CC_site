{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"hljs.initHighlightingOnLoad(); Eu me chamo Bruno de Melo Ruas. Sou Economista pela Universidade do Estado do Amazonas (UEA). Especialista em Gest\u00e3o Financeira pela Funda\u00e7\u00e3o Get\u00falio Vargas (FGV). Atualmente curso o tecn\u00f3logo de An\u00e1lise e Desenvolvimento de Sistemas da Pontif\u00edcia Universidade Cat\u00f3lica de Minas Gerais (PUC-MG). Minhas Redes: Linkedin Twitter Github Eu tenho um m\u00e9todo de estudar: fingindo que estou dando aula . Ao longo dos anos, percebi que eu havia escrito tanto material, que poderia ajudar outras pessoas com meus textos. Esse site \u00e9 justamente o reposit\u00f3rio p\u00fablico dos conte\u00fados que venho estudando sobre Ci\u00eancia da Computa\u00e7\u00e3o seguindo duas fontes: O conte\u00fado da forma\u00e7\u00e3o em Tecn\u00f3logo em An\u00e1lise e Desenvolvimento de Sistemas pela PUC Minas Gerais . Os cursos da Open Source Society University - OSSU . Originalmente, eu escrevia minhas notas de estudos em LaTeX mas o eu percebi que Markdown aliado ao mkdocs e github pages era uma maneira mais simples de manter o projeto a medida que a quantidade de p\u00e1ginas foram se aproximando das centenas. Dessa feita, os reposit\u00f3rios antigos em pdf v\u00e3o ser todos migrados para esse projeto. Cada palavra que voc\u00ea ler nesse projeto foi escrita por mim. Espero que esse material sirva a voc\u00eas tanto quanto serviu para mim. O conjunto de tecnologias usadas para constru\u00e7\u00e3o desse site est\u00e1 na aba Tech no menu superior. O link para o reposit\u00f3rio desse projeto tamb\u00e9m. Pontif\u00edcia Universidade Cat\u00f3lica (PUC-MG) O Tecn\u00f3logo foi iniciado em 2022/01 e deve terminar em 2024/2. Ao todo, o curso \u00e9 divido em 3 ciclos e 5 semestres (chamados de Eixos Tem\u00e1ticos). O conte\u00fado do curso est\u00e1 abaixo. O checklist indicar\u00e1 quais mat\u00e9rias (que na PUC s\u00e3o chamadas de Microfundamentos) est\u00e3o completas. Per\u00edodo 1: Implementa\u00e7\u00e3o de Sistemas de Software Algoritmos e Abstra\u00e7\u00e3o de Dados Algoritmos e L\u00f3gica de Programa\u00e7\u00e3o Desenvolvimento Web Front-End Matem\u00e1tica B\u00e1sica Organiza\u00e7\u00e3o de Computadores Fundamentos de Engenharia de Software Pensamento Computacional L\u00f3gica Computacional Per\u00edodo 2: An\u00e1lise e Projeto de Sistemas de Software Algoritmos e Estruturas de Dados Modelagem de Dados Engenharia de Requisitos de Software Design de Intera\u00e7\u00e3o Programa\u00e7\u00e3o Modular Desenvolvimento Web Back-End Fundamentos de Redes de Computadores Manipula\u00e7\u00e3o de Dados com SQL Per\u00edodo 3: Processos de Neg\u00f3cio e de Desenvolvimento de Software Modelagem e Gest\u00e3o de Processos de Neg\u00f3cios Estat\u00edstica Descritiva Desenvolvimento de Aplica\u00e7\u00f5es M\u00f3veis Ger\u00eancia de Projetos de TI Ger\u00eancia de Configura\u00e7\u00e3o Qualidade de Processos de Software Ger\u00eancia de Requisitos de Software Per\u00edodo 4: Infraestrutura para Sistemas de Software Cloud Computing Projeto de Software Arquitetura de Software Distribu\u00eddo APIs e Web Services Teste de Software Banco de Dados NoSQL Per\u00edodo 5: Empreendedorismo e Inova\u00e7\u00e3o com Sistemas de Software Seguran\u00e7a Aplicada ao Desenvolvimento Compliance em TI Implanta\u00e7\u00e3o de Solu\u00e7\u00e3o de TI","title":"Bem Vindos"},{"location":"#pontificia-universidade-catolica-puc-mg","text":"O Tecn\u00f3logo foi iniciado em 2022/01 e deve terminar em 2024/2. Ao todo, o curso \u00e9 divido em 3 ciclos e 5 semestres (chamados de Eixos Tem\u00e1ticos). O conte\u00fado do curso est\u00e1 abaixo. O checklist indicar\u00e1 quais mat\u00e9rias (que na PUC s\u00e3o chamadas de Microfundamentos) est\u00e3o completas. Per\u00edodo 1: Implementa\u00e7\u00e3o de Sistemas de Software Algoritmos e Abstra\u00e7\u00e3o de Dados Algoritmos e L\u00f3gica de Programa\u00e7\u00e3o Desenvolvimento Web Front-End Matem\u00e1tica B\u00e1sica Organiza\u00e7\u00e3o de Computadores Fundamentos de Engenharia de Software Pensamento Computacional L\u00f3gica Computacional Per\u00edodo 2: An\u00e1lise e Projeto de Sistemas de Software Algoritmos e Estruturas de Dados Modelagem de Dados Engenharia de Requisitos de Software Design de Intera\u00e7\u00e3o Programa\u00e7\u00e3o Modular Desenvolvimento Web Back-End Fundamentos de Redes de Computadores Manipula\u00e7\u00e3o de Dados com SQL Per\u00edodo 3: Processos de Neg\u00f3cio e de Desenvolvimento de Software Modelagem e Gest\u00e3o de Processos de Neg\u00f3cios Estat\u00edstica Descritiva Desenvolvimento de Aplica\u00e7\u00f5es M\u00f3veis Ger\u00eancia de Projetos de TI Ger\u00eancia de Configura\u00e7\u00e3o Qualidade de Processos de Software Ger\u00eancia de Requisitos de Software Per\u00edodo 4: Infraestrutura para Sistemas de Software Cloud Computing Projeto de Software Arquitetura de Software Distribu\u00eddo APIs e Web Services Teste de Software Banco de Dados NoSQL Per\u00edodo 5: Empreendedorismo e Inova\u00e7\u00e3o com Sistemas de Software Seguran\u00e7a Aplicada ao Desenvolvimento Compliance em TI Implanta\u00e7\u00e3o de Solu\u00e7\u00e3o de TI","title":"Pontif\u00edcia Universidade Cat\u00f3lica (PUC-MG)"},{"location":"nav/tech/","text":"Aqui eu coloco o conjunto de ferramentas que usei para construir esse portal. Links mkdocs para construir um repo local que pode ser facilmente convertido em um site. simple-blog theme para esse tema simplesmente maravilho. mkdocs-material para expandir algumas funcionalidades importantes do mkdocs. Tecnicamente, \u00e9 um outro tema, mas o material de refer\u00eancia deles \u00e9 \u00f3timo. markdown Extensions para expandir a capacidade do markdown no projeto. S\u00e9rio, existem muitas . github pages para hospedagem gratuita do site.","title":"Tech"},{"location":"nav/tech/#links","text":"mkdocs para construir um repo local que pode ser facilmente convertido em um site. simple-blog theme para esse tema simplesmente maravilho. mkdocs-material para expandir algumas funcionalidades importantes do mkdocs. Tecnicamente, \u00e9 um outro tema, mas o material de refer\u00eancia deles \u00e9 \u00f3timo. markdown Extensions para expandir a capacidade do markdown no projeto. S\u00e9rio, existem muitas . github pages para hospedagem gratuita do site.","title":"Links"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/","text":"hljs.initHighlightingOnLoad(); Assuntos Estrutura de Dados Homog\u00eaneas e Heterog\u00eaneas Estrutura de Dados Homog\u00eaneas Estrutura de Dados Heterog\u00eaneas Tipos Abstratos de Dados, Classes e Implementa\u00e7\u00e3o Defini\u00e7\u00e3o de um TAD - Classes e Objetos Atributos, Propriedades e M\u00e9todos de Classe Mecanismos de Visibilidade/Acessibilidade Construtores e Destrutores de Classe Bibliografia Introdu\u00e7\u00e3o Durante o processo de constru\u00e7\u00e3o de software, a manipula\u00e7\u00e3o de informa\u00e7\u00e3o em mem\u00f3ria \u00e9 tarefa fundamental para que a solu\u00e7\u00e3o de software seja \u00fatil e satisfat\u00f3ria. As linguagens de programa\u00e7\u00e3o possuem especifica\u00e7\u00f5es sobre as caracter\u00edsticas que cada grupo de vari\u00e1veis pode ter, esse controle de propriedade das vari\u00e1veis e das limita\u00e7\u00f5es relacionadas a cada tipo \u00e9 chamado de Tipo de Dado . Dizemos que um Tipo Abstrato de Dado (TAD) \u00e9 a defini\u00e7\u00e3o por parte do programador de uma nova classe de dado otimizada para a resolu\u00e7\u00e3o do problema a ser trabalhado com o software em desenvolvimento. Cont\u00e9m tanto a estrutura da informa\u00e7\u00e3o a ser trabalhada quanto as opera\u00e7\u00f5es, procedimentos e fun\u00e7\u00f5es que podem ser aplicadas a esse tipo de dado novo. A constru\u00e7\u00e3o de TADs passa pela identifica\u00e7\u00e3o das entidades de um problema computacional e a defini\u00e7\u00e3o e desenvolvimento do modelo de dados adequado para a solu\u00e7\u00e3o proposta. Primeiramente, vamos aprender sobre os tipos de dados normalmente existente nas linguagens de programa\u00e7\u00e3o mais comuns do mercado. Podemos dividir os tipos de dados em dois grandes grupos: Homog\u00eaneos e Heterog\u00eaneos. Coment\u00e1rio: Esse microfundamento deve ser estudado somente ap\u00f3s o microfundamento de Algoritmo e L\u00f3gica de Programa\u00e7\u00e3o . Como esse material \u00e9 de refer\u00eancia, ele n\u00e3o deve ser lido, necessariamente, como se fosse um livro. Estrutura de Dados Homog\u00eaneas e Heterog\u00eaneas Estrutura de Dados Homog\u00eaneas Os dois tipos de TAs Homog\u00eaneos mais comuns s\u00e3o os vetores (tamb\u00e9m chamados de arrays), que s\u00e3o formados por uma lista de \\(n\\) elementos de mesmo tipo e as matrizes, que podem ser entendidas como um empilhamento de vetores ou um tipo de vetor de duas dimens\u00f5es. Vetores \u00c9 uma vari\u00e1vel composta, homog\u00eanea e unidimensional. Podemos pensar em um vetor como uma lista com \\(n\\) elementos do mesmo tipo. Como todos os valores de um vetor possuem o mesmo nome (o nome da vari\u00e1vel), para acessarmos algum valor espec\u00edfico de um elemento, precisaremos de um \u00edndice que fa\u00e7a refer\u00eancia ao local na lista onde o valor desejado se encontra. Para criarmos um vetor em c#, usamos a declara\u00e7\u00e3o da vari\u00e1vel com um par de colchetes vazio e a defini\u00e7\u00e3o da quantidade de posi\u00e7\u00f5es (ou lugares) que o nosso vetor ter\u00e1. Abaixo podemos ver um exemplo disso. // c# int [] Idades = new int [ 100 ]; // Vetor de int com 100 places double [] Alt = new double [ 20 ]; // Vetor de double com 20 string [] Nomes = new string [ 10 ]; // Vetor de string com 10 No exemplo acima, podemos ver que criamos um vetor denominado Idades que receber\u00e1 apenas valores do tipo inteiro. Um vetor de doubles (que \u00e9 um float com mais casas de precis\u00e3o) chamado salario. E, por fim, um vetor de strings chamado Nomes. Coment\u00e1rio: Existe uma classe que permite a cria\u00e7\u00e3o de um tipo de vetor gen\u00e9rico sem tamanho definido em c# chamado Lista. O curso n\u00e3o entrou nesse assunto mas eu vou deixar esse exemplo de lista aqui. // c# using System.Collections.Generic ; List < int > lista = new List < int > (); List . add ( 1 ); List . add ( 2 ); List . remove ( 2 ); Agora que sabemos como criar um vetor. O pr\u00f3ximo passo \u00e9 aprendermos como inserir informa\u00e7\u00e3o nele. Para a nossa sorte, \u00e9 bem simples. Basta colocarmos o nome do vetor seguido da posi\u00e7\u00e3o a ser preenchida entre colchetes. // c# Idades [ 20 ] = 10 ; // Valor 10 na posi\u00e7\u00e3o 19 Alt [ 0 ] = 1.2 ; // Valor 1.2 na posi\u00e7\u00e3o 1 S\u00f3 temos que ter cuidado com uma coisa. Existem linguagens (como C#, Java, Python e outras) que colocam o index da primeira posi\u00e7\u00e3o de um vetor como sendo o valor 0. Outras linguagens (como R) usam o numero 1 para essa primeira posi\u00e7\u00e3o. Com base no que aprendemos em Algoritmos e L\u00f3gica da Programa\u00e7\u00e3o , somos capazes de entender o c\u00f3digo abaixo a respeito do uso de um la\u00e7o de repeti\u00e7\u00e3o para preenchimento de um vetor de 5 posi\u00e7\u00f5es. // c# int i ; int [] Valores = new int [ 5 ]; // Input dos dados for ( i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( $\"Digite o valor {i + 1}: \" ); Valores [ i ] = int . Parse ( Console . ReadLine ()); }; Desafio O professor prop\u00f5e o seguinte desafio para fixa\u00e7\u00e3o do conceito de vetor: \"Criaremos um vetor de n\u00fameros inteiros com 5 posi\u00e7\u00f5es e ler cada um de seus valores. Criaremos duas fun\u00e7\u00f5es que, tomando esse vetor como par\u00e2metro, ir\u00e3o retornar a soma dos n\u00fameros pares contidos no vetor e a quantidade de n\u00fameros \u00edmpares que ele possui.\" Minha resolu\u00e7\u00e3o desse problema segue abaixo. // c# int [] vetor = new int [ 5 ]; int somaPar = 0 ; int contaImpar = 0 ; int input ; // Soma de dois valores int soma ( int valor1 , int valor2 ) { return valor1 + valor2 ; }; // Itera\u00e7\u00e3o para lan\u00e7amento dos valores e somas for ( int i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( $\" Valor da Posi\u00e7\u00e3o n\u00ba: {i + 1}\" ); input = int . Parse ( Console . ReadLine ()); vetor [ i ] = input ; if ( input % 2 == 0 ) { somaPar = soma ( somaPar , input ); } else { contaImpar += 1 ; } }; Console . WriteLine ( $\" SomaPar = {somaPar}, ContaImpar = {contaImpar}\" ); Console . WriteLine ( $\"({vetor[0]},{vetor[1]},{vetor[2]},{ vetor[3]},{vetor[4]})\" ); Que produz o seguinte resultado para o input (1,2,1,2,1) . Matrizes Como dito no in\u00edcio dessa se\u00e7\u00e3o. Podemos pensar que matrizes s\u00e3o vetores de duas dimens\u00f5es. Por causa disso, a declara\u00e7\u00e3o da vari\u00e1vel \u00e9 um pouco diferente. // c# double [,] Notas = new double [ 4 , 5 ]; // 4 linhas e 5 colunas Por ser uma vari\u00e1vel de duas dimens\u00f5es, a maneira como atribu\u00edmos valores \u00e0 cada posi\u00e7\u00e3o \u00e9 um pouco diferente do caso com vetor. Para cada atribui\u00e7\u00e3o de valor, temos que indicar a linha e coluna que nosso dado ser\u00e1 salvo. // c# Notas [ 0 , 0 ] = 1 ; // Linha 1 coluna 1 Notas [ 0 , 1 ] = 1 ; // Linha 1 coluna 2 Notas [ 2 , 3 ] = 1 ; // Linha 3 coluna 4 Notas [ 3 , 4 ] = 1 ; // Linha 4 coluna 5 Devemos sempre lembrar que c# usa a posi\u00e7\u00e3o de numeral 0 para o index inicial de vetores e matrizes. Agora vamos ver um programa simples que exemplifica o que acabamos de aprender. A leitura dele n\u00e3o deve ser dif\u00edcil. Se est\u00e1 tendo dificuldade, volte no microfundamento de l\u00f3gica da programa\u00e7\u00e3o. // c# int i , j ; int [,] Valor = new int [ 10 , 3 ]; // Loop para entrada de valores na matriz for ( i = 0 ; i < 10 ; i ++ ) // Loop para linhas { for ( j = 0 ; j < 3 ; j ++ ) // Loop para colunas { Console . WriteLine ( $\"Valor Linha:{i+1} Coluna{j+1}\" ); Valor [ i , j ] = int . Parse ( Console . ReadLine ()); } } Desafio Para a fixa\u00e7\u00e3o do conceito de matrizes, o professor faz o seguinte desafio: \"Vamos fazer um programa que ir\u00e1 ler os dados de uma matriz de inteiros de ordem 5, ou seja, de dimens\u00f5es 5x5. Matematicamente ela \u00e9 chama de matriz quadrada, porque o n\u00famero de \u201clinhas\u201d \u00e9 igual ao n\u00famero de \u201ccolunas\u201d. Depois de darmos entrada nos valores da matriz chamaremos uma fun\u00e7\u00e3o que, tomando essa matriz como par\u00e2metro, retornar\u00e1 um vetor composto pelos elementos da diagonal principal dessa matriz quando, ent\u00e3o, os listaremos.\" // c# // Aqui vai ficar o cogido da solu\u00e7\u00e3o do desafio // quando eu tiver vontade de fazer Vetores e Matrizes s\u00e3o os principais tipos homog\u00eaneos de dados. A partir de agora, estudaremos estruturas que nos permitem alocar valores de tipos diferentes em uma mesma vari\u00e1vel. A compreens\u00e3o correta dos tipos de dados \u00e9 a pedra fundamental do paradigma de desenvolvimento chamado de Programa\u00e7\u00e3o Orientada \u00e0 Objetos . Estrutura de Dados Heterog\u00eaneas Registros Na defini\u00e7\u00e3o de um tipo de dado, n\u00f3s definimos precisamente a faixa de valores que podem ser atribu\u00eddos e os m\u00e9todos nativos do tipo de dado. Chamamos de tipo simples de dados os grupos de valores do mesmo tipo (inteiros, reais, string ou booleanos). Por outro lado, chamamos de tipo estruturado de dados os modelos que comportam valores de tipagem diferentes na mesma vari\u00e1vel. Um registro \u00e9 um tipo de dado estruturado. N\u00f3s j\u00e1 estamos familiarizados com as defini\u00e7\u00f5es de vari\u00e1veis em c# para os tipos nativos de dados. // c# int x ; double Result ; string Name ; A essa altura do aprendizado, as linhas acima s\u00e3o simples de serem compreendidas. S\u00e3o apenas declara\u00e7\u00f5es do tipos de 3 vari\u00e1veis simples. Mas vejam s\u00f3 o que podemos fazer abaixo. // c# Aluno xAlu ; Estranho, n\u00e9?! Estamos declarando a vari\u00e1vel xAlu como sendo do tipo...\"Aluno\"? Sim, \u00e9 isso mesmo! N\u00f3s podemos usar um token dedicado na linguagem para a cria\u00e7\u00e3o de tipos novos de dados que sirvam melhor para solu\u00e7\u00e3o dos problemas que queremos resolver como nosso c\u00f3digo. O token dedicado para constru\u00e7\u00e3o de tipos de dados em c# \u00e9 o struct . Mas para usa-lo bem, temos que aprender os conceitos de tipos de dados heterog\u00eaneos e, no futuro, avan\u00e7aremos para o conceito de classes. O comando struct \u00e9 pensado para o encapsulamento de pequenos conjuntos de vari\u00e1veis relacionadas. No exemplo do tipo Aluno, podemos pensar que todos os alunos devem ter um nome, um cpf e uma data de nascimento, por exemplo. Como essas caracter\u00edsticas se repetem para todos, podemos definir um tipo de dado espec\u00edfico para lidarmos com as informa\u00e7\u00f5es dos alunos. Implementa\u00e7\u00e3o de um Registro A cria\u00e7\u00e3o de um tipo de dado \u00e9 simples. Basta definirmos o nome do tipo de dado e declararmos o conjunto de vari\u00e1veis que far\u00e3o parte dele. No exemplo abaixo, n\u00f3s criamos o tipo \"Funcion\u00e1rio\" com as informa\u00e7\u00f5es que ser\u00e3o usadas. // c# struct Funcionario { public string CPF ; public string Name ; public double Salary ; public string dataNasc ; } Podemos ver que a declara\u00e7\u00e3o das vari\u00e1veis dentro do bloco de c\u00f3digo est\u00e3o com o token public antes da declara\u00e7\u00e3o do tipo de dado. Isso ocorre porque precisamos dizer ao compilador da linguagem que essas vari\u00e1veis ser\u00e3o acess\u00edveis fora do bloco de c\u00f3digo em que elas s\u00e3o criadas. Isso tem rela\u00e7\u00e3o direta com o conceito de m\u00e9todo e procedimento que aprendemos no curso de Algoritmo e L\u00f3gica Computacional. Agora que temos o nosso novo tipo de dado criado, podemos usar esse recurso para a defini\u00e7\u00e3o de novas vari\u00e1veis. // c# static void Main ( string []) args ) { Funcionario xFunc ; xFunc . CPF = \"1234\" ; xFunc . Name = \"Bruce Wanne\" ; xFunc . Salary = 1234 , 33 ; xFunc . dataNasc = \"31/08/1993\" ; } N\u00e3o precisamos nos preocupar com a primeira linha agora. Basta saber que todo programa em c# \u00e9 um procedimento em algum n\u00edvel. Podemos focar apenas no que est\u00e1 dentro dos colchetes. Com o tipo de dado criado. Podemos criar a vari\u00e1vel xFunc e acessar seus par\u00e2metros usando um ponto ap\u00f3s o seu nome. A atribui\u00e7\u00e3o \u00e9 feita como antes mas agora n\u00e3o precisamos declarar os tipos porque eles est\u00e3o definidos dentro do tipo de dado. J\u00e1 aprendemos no come\u00e7o desse microfundamento que a cria\u00e7\u00e3o de vetores (que s\u00e3o listas de elementos do mesmo tipo) s\u00e3o feitas em c# pela adi\u00e7\u00e3o de colchetes vazios na declara\u00e7\u00e3o das vari\u00e1veis. Por exemplo, um vetor de inteiros \u00e9 definido por int[] . Pois bem, podemos usar a mesma l\u00f3gica e criar um vetor do tipo que acabamos de criar 1 . Analogamente, como nosso tipo de dado \u00e9 Funcionario , seu vetor que conter\u00e1 v\u00e1rios funcion\u00e1rios diferentes ser\u00e1 criado por Funcionario[] . // c# Funcionario [] xFunc = new Funcionario [ 5 ]; for ( int i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( \"CPF do funcion\u00e1rio: \" ); xFunc [ i ]. CPF = Console . readLine (); Console . WriteLine ( \"Nome do funcion\u00e1rio: \" ); xFunc [ i ]. Name = Console . readLine (); Console . WriteLine ( \"Sal\u00e1rio: \" ); xFunc [ i ]. Salary = Console . readLine (); Console . WriteLine ( \"Data de Nascimento: \" ); xFunc [ i ]. dataNasc = Console . readLine (); } Acima, temos a cria\u00e7\u00e3o de um vetor de 5 posi\u00e7\u00f5es onde cada elemento \u00e9 do tipo Funcionario. Logo abaixo, temos um loop para facilitar o preenchimento das informa\u00e7\u00f5es de cada elemento do vetor. Estamos come\u00e7ando a nos aproximar do conceito de banco de dados. Mas n\u00e3o veremos isso agora. Tipos de Dados Aninhados N\u00e3o precisamos parar por aqui, \u00e9 plenamente poss\u00edvel criarmos um tipo de dados que use outro tipo de dados criado fora dele. Por exemplo, ao inv\u00e9s de salvarmos a data de nascimento como uma string, podemos criar um tipo de dados chamado Data que recebe 3 informa\u00e7\u00f5es: dia, m\u00eas e ano. // c# struct Funcionario { public string CPF ; public string Name ; public double Salary ; public Data dataNasc ; } struct Data { public string day ; public string month ; public string year ; } Dentro do tipo funcion\u00e1rio, temos a declara\u00e7\u00e3o de um vari\u00e1vel do tipo data. Para aproveitarmos o c\u00f3digo de cria\u00e7\u00e3o de um vetor Funcionario. Podemos fazer apenas uma pequena altera\u00e7\u00e3o. // c# Funcionario [] xFunc = new Funcionario [ 5 ]; for ( int i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( \"CPF do funcion\u00e1rio: \" ); xFunc [ i ]. CPF = Console . readLine (); Console . WriteLine ( \"Nome do funcion\u00e1rio: \" ); xFunc [ i ]. Name = Console . readLine (); // Parte que foi substitu\u00edda // Console.WriteLine(\"Sal\u00e1rio: \"); // xFunc[i].Salary = Console.readLine(); Console . WriteLine ( \"Data de Nascimento - Dia: \" ); xFunc [ i ]. dataNasc . day = Console . readLine (); Console . WriteLine ( \"Data de Nascimento - M\u00eas: \" ); xFunc [ i ]. dataNasc . month = Console . readLine (); Console . WriteLine ( \"Data de Nascimento - Ano: \" ); xFunc [ i ]. dataNasc . year = Console . readLine (); } A cria\u00e7\u00e3o de tipos eficientes de dados \u00e9 uma ferramenta muito eficiente para padroniza\u00e7\u00e3o e manuten\u00e7\u00e3o de solu\u00e7\u00f5es de software. \u00c9 sempre bom entendermos bem o problema proposto e quais tipos de dados podem ser criados para a cria\u00e7\u00e3o de uma resposta adequada a ele. TAD, Classes e Implementa\u00e7\u00e3o Defini\u00e7\u00e3o de um TAD - Classes e Objetos Um tipo abstrato de dado ou TAD \u00e9 um \"padr\u00e3o\" ou \"modelo\" que rege as caracter\u00edsticas que determinada estrutura de dado criada bem como suas fun\u00e7\u00f5es (que chamamos de m\u00e9todos) internas. Ou seja, um TAD \u00e9 a defini\u00e7\u00e3o das informa\u00e7\u00f5es contidas e as opera\u00e7\u00f5es execut\u00e1veis por uma vari\u00e1vel de um determinado modelo. N\u00f3s estamos usando isso o tempo todo sem perceber. Por exemplo, quando usamos a fun\u00e7\u00e3o Math.Pow(a,b) n\u00f3s estamos, na verdade, executando um m\u00e9todo chamamo Pow dentro do objeto Math . Exatamente o mesmo pensamento \u00e9 aplicado ao Console.Write() ou Console.ReadLine() . Agora que estamos avan\u00e7ando mais no nosso conhecimento sobre desenvolvimento de software, come\u00e7amos a entender mais sobre as estruturas que nos permitem realizar os nossos trabalhos, ou no jarg\u00e3o, estamos come\u00e7ando a ver \"de baixo do cap\u00f4\". At\u00e9 agora, n\u00f3s temos definido os nossos TADs atrav\u00e9s da defini\u00e7\u00e3o de sua estrutura (pelo token struct ), mas as linguagens que utilizam o paradigma orientado \u00e0 objeto atuais usam o conceito de classes para defini\u00e7\u00e3o dos seus TADs. Implementando TADs usando Classes J\u00e1 aprendemos a implementar um TAD por estrutura. // c# // Definindo o TAD struct Produto { public string Nome ; public double PrecoUnd ; } // Criando uma vari\u00e1vel com TAD Produto xProd ; // Usando o TAD xProd . Nome = \"PS5\" ; xProd . PrecoUnd = 8000.99 ; Podemos construir uma solu\u00e7\u00e3o an\u00e1loga a essa pelo token de cria\u00e7\u00e3o de classes. // c# // Definindo o TAD class Produto { public string Nome ; public double PrecoUnd ; } // Criando a classe Produto xProd = new Produto (); // Usando o TAD xProd . Nome = \"Xbox One\" ; xProd . PrecoUnd = 9999.99 ; Em uma primeira vista, parecem ser abordagens equivalentes. Mas existem algumas diferen\u00e7as importantes que merecem a nossa aten\u00e7\u00e3o. Para entender bem a diferen\u00e7a entre essas constru\u00e7\u00f5es, vamos ter que aprender um pouco mais sobre como o computador guarda informa\u00e7\u00f5es. O layout de mem\u00f3ria de programas em C s\u00e3o separados em 5 n\u00edveis : Text segment (instructions) Initializes data segment Uninitialized data segment (bss) Heap Stack (Inline) N\u00f3s n\u00e3o vamos nos atentar muito aos detalhes agora. Mas agora que sabemos um pouco das diferentes aloca\u00e7\u00f5es poss\u00edveis na mem\u00f3ria durante a execu\u00e7\u00e3o de um programa. Podemos focar no que for necess\u00e1rio para diferenciarmos o struct do class . Os valores do tipo struct s\u00e3o alocados na mem\u00f3ria stack. Essa parte de mem\u00f3ria grava temporariamente as vari\u00e1veis criadas por uma fun\u00e7\u00e3o. No stack, as vari\u00e1veis s\u00e3o declaras, guardadas e inicializadas durante a execu\u00e7\u00e3o do programa e apagadas na sua conclus\u00e3o. A mem\u00f3ria \u00e9 alocada em um bloco cont\u00edguos. \u00c9 mais limitada e de r\u00e1pido acesso. Os valores do tipo class s\u00e3o alocados no heap. Essa \u00e9 a parte da mem\u00f3ria usada pelas linguagens de programa\u00e7\u00e3o para suas vari\u00e1veis de escopo global. A mem\u00f3ria \u00e9 alocada de maneira aleat\u00f3ria e \u00e9 mais abundante se comparada com a stack. Sempre que criamos uma nova inst\u00e2ncia como fizemos em Produto xProd = new Produto() n\u00f3s estamos apontando um novo endere\u00e7o de mem\u00f3ria para ser usado. Desafio Cadastrar objetos em um vetor usando uma classe. // c# using System ; namespace WorkSpace { // Criando o TAD do tipo class class carro { public string name ; public string marca ; public string anoFab ; public string placa ; public double precoFip ; }; class Program { static void Main ( string [] args ) { // Criando um vetor do tipo carro carro [] cadCarro = new carro [ 3 ]; // Loop para inserir o input no vetor for ( int i = 0 ; i < 2 ; i ++ ) { carro x = new carro (); Console . Write ( $\"\\n Qual o nome? \" ); x . name = Console . ReadLine (); Console . Write ( $\" Qual a marca? \" ); x . marca = Console . ReadLine (); Console . Write ( $\" Qual o ano de fabrica\u00e7\u00e3o? \" ); x . anoFab = Console . ReadLine (); Console . Write ( $\" Qual a placa? \" ); x . placa = Console . ReadLine (); Console . Write ( $\" Qual o pre\u00e7o da tabela FIP? \" ); x . precoFip = double . Parse ( Console . ReadLine ()); // Salvando o x no vetor cadCarro cadCarro [ i ] = x ; }; Console . Clear (); // Mostrando o resultado foreach ( carro C in cadCarro ) { Console . WriteLine ( $\"\\n Carro: {C.name},Marca:{C.marca}\" ); Console . WriteLine ( $\" Placa: {C.placa}, Ano:{C.anoFab}\" ); Console . WriteLine ( $\" Pre\u00e7o da Tabela Fip: {C.precoFip}\" ); }; Console . ReadKey (); } } } \u00c9 muito mais comum se achar situa\u00e7\u00f5es de constru\u00e7\u00e3o de TADs por uso de classes ao inv\u00e9s de estruturas. Vale a pena estudar mais para sabermos exatamente quando cada uma dessas op\u00e7\u00f5es \u00e9 a adequada. Mas no come\u00e7o, as classes nos servir\u00e3o muito bem. Aqui \u00e9 importante frisarmos uma coisa. Quando instanciamos um objeto (ou seja, quando usamos o token new ) o nome que passamos a esse objeto \u00e9 apenas uma refer\u00eancia . Isso quer dizer que, no exemplo acima, cadCarro n\u00e3o \u00e9 o nosso objeto em si e sim uma refer\u00eancia a ele. Alguns de voc\u00eas podem estar questionando o motivo desse aviso. Sabendo que cadCarro n\u00e3o \u00e9 o objeto em si e sim apenas uma refer\u00eancia que aponta para o endere\u00e7o na mem\u00f3ria em que o objeto est\u00e1 salvo, ao criarmos uma nova linha no nosso c\u00f3digo do tipo cadCarro2 = cadCarro estamos criando uma nova refer\u00eancia para o mesmo objeto alocado na mem\u00f3ria. Ou seja, qualquer manipula\u00e7\u00e3o feita usando a refer\u00eancia cadCarro tamb\u00e9m ser\u00e1 refletida em cadCarro2 . Abaixo temos um programa simples que usa essa rela\u00e7\u00e3o de refer\u00eancia. // c# using System ; class Program { class carro { public string name ; public string marca ; public string anoFab ; public string placa ; public double precoFip ; }; public static void Main ( string [] args ) { // Criando um vetor do tipo carro carro cadCarro = new carro (); carro cadCarro2 = null ; cadCarro . name = \"carro Nome\" ; cadCarro . marca = \"marca\" ; cadCarro . anoFab = \"2022\" ; cadCarro . placa = \"placa\" ; cadCarro . precoFip = 22.22 ; Console . WriteLine ( $\"{cadCarro.name}\" ); cadCarro2 = cadCarro ; Console . WriteLine ( $\"{cadCarro2.name}\" ); cadCarro2 . name = \"carro nome 2\" ; Console . WriteLine ( $\"{cadCarro.name}\" ); } } Atributos, Propriedades e M\u00e9todos de Classe Vamos analisar com calma essas duas cita\u00e7\u00f5es do texto: \"Uma classe especifica uma estrutura de dados e os seus m\u00e9todos operacionais permiss\u00edveis que se aplicam a cada um dos seus objetos\" (MARTIN e ODELL, 1995). \"Um objeto \u00e9 qualquer coisa, real ou abstrata, a respeito da qual armazenamos os dados e os m\u00e9todos que os manipulam\" (MARTIN e ODELL, 1995). Em ambas as cita\u00e7\u00f5es temos as figuras dos dados e dos m\u00e9todos. A estrutura dos dados n\u00f3s j\u00e1 vimos na se\u00e7\u00e3o passada quando lidamos com defini\u00e7\u00e3o de TADs declarando os tipos das vari\u00e1veis tanto na declara\u00e7\u00e3o via estrutura quanto por classe. Agora, vamos expandir um pouco mais o poder dos TADs nos permitindo definir, al\u00e9m das regras de quais dados ser\u00e3o armazenados, quais opera\u00e7\u00f5es e fun\u00e7\u00f5es ser\u00e3o executadas internamente por nossos objetos. Ao construir um tipo abstrato de dados, nos perguntamos quais informa\u00e7\u00f5es ser\u00e3o necess\u00e1rias e, al\u00e9m disso, quais opera\u00e7\u00f5es ser\u00e3o usadas para resolu\u00e7\u00e3o do nosso problema. Indo um pouco mais fundo Vejamos o seguinte TAD criado apenas com a defini\u00e7\u00e3o da estrutura de dados: // c# class pessoa { public string name ; public double salary ; } Dizemos que as informa\u00e7\u00f5es sobre nome e sal\u00e1rio s\u00e3o atributos do nosso objeto pessoa . Eles definem a estrutura do tipo abstrato de dados que definimos. Tamb\u00e9m podemos chama-los de vari\u00e1veis da classe pessoa . Mesmo que o exemplo acima funcione. Uma maneira mais apropriada de reconstruir essa solu\u00e7\u00e3o pode ser vista abaixo. // c# class pessoa { private string _name ; public string name { get { return _name ;} set { _name = value ;} } private double _salary ; public double salary { get { return _salary ;} set { _salary = value ;} } } Os campos _name e _salary s\u00e3o definidos com o escopo privado e podem ser acessados somente internamente ao objeto. Para podermos acessar fora do escopo do objeto, usamos as fun\u00e7\u00f5es nativas get e set . Os nomes das fun\u00e7\u00f5es deixam claro o que cada uma faz. set \u00e9 usado para atribui\u00e7\u00e3o de um valor passado (que chamamos de value) e get \u00e9 usado para retorno de valor salvo no objeto. Vamos ver um programa simples que utiliza esses conceitos. // c# namespace WorkSpace { class pessoa { private string _name ; public string name { get { return _name ;} set { _name = value ;} } private double _salary ; public double salary { get { return _salary ;} set { _salary = value ;} } }; class Program { static void Main ( string [] args ) { pessoa xpes = new pessoa (); xpes . name = \"Clark Kent\" ; xpes . salary = 1234.56 ; Console . WriteLine ( $\"Nome: {xpes.name}\" ); Console . WriteLine ( $\"Sal\u00e1rio: R$ {xpes.salary}\" ); } } } Na linha xpes.name = \"Clark Kent\" vemos como a fun\u00e7\u00e3o interna set funciona. Ela recebe o valor e atribui \u00e0 vari\u00e1vel provada _name . Quando definimos um atributo privado e fun\u00e7\u00f5es ( get e set ) que manipulam esse atributo dentro da classe, podemos dizer que criamos uma propriedade do objeto. J\u00e1 temos os conceitos de objeto, atributo e propriedade bem definidos. Agora vamos aprender sobre as fun\u00e7\u00f5es dentro de um objeto. A essas fun\u00e7\u00f5es, damos o nome de m\u00e9todos ou servi\u00e7os do objeto . // c# class circulo { private double _raio ; public double raio { get { return _raio ; } set { _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } Aqui temos um atributo chamado _raio . Uma propriedade chamada raio . E, por fim, temos tamb\u00e9m um m\u00e9todo chamado calcArea . Abaixo temos um exemplo de como usar esses conceitos na pr\u00e1tica. // c# namespace WorkSpace { class circulo { private double _raio ; public double raio { get { return _raio ; } set { _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } class Program { static void Main ( string [] args ) { double area ; circulo xcirculo = new circulo (); xcirculo . raio = 2.5 ; area = xcirculo . calcArea (); Console . WriteLine ( $\"A \u00e1rea \u00e9 igual a {area:F2}\" ); Console . ReadKey (); } } } Coment\u00e1rio: Eu n\u00e3o sei voc\u00ea, mas eu fiquei com d\u00favidas sobre essa parte do area:F2 . Isso \u00e9 muito simples. Como o valor area \u00e9 do tipo double, ele possui v\u00e1rias casas ap\u00f3s a v\u00edrgula. Esse par\u00e2metro \u00e9 a defini\u00e7\u00e3o da quantidade de casas ap\u00f3s a v\u00edrgula. Nesse caso, o resultado ter\u00e1 2 casas ap\u00f3s a v\u00edrgula. Quando encapsulamos as propriedades e os m\u00e9todos dentro de um objeto, estamos omitindo os detalhes de como objeto faz as transforma\u00e7\u00f5es e armazena os dados. A essa t\u00e9cnica damos o nome de oculta\u00e7\u00e3o da informa\u00e7\u00e3o . Isso \u00e9 \u00fatil para garantir a integridade da manipula\u00e7\u00e3o dos dados por parte dos usu\u00e1rios e aumenta a seguran\u00e7a quanto a l\u00f3gica implementada no c\u00f3digo. Podemos definir a l\u00f3gica tamb\u00e9m dentro das fun\u00e7\u00f5es de set e get . // c# namespace WorkSpace { class circulo { private double _raio ; public double raio { get { return _raio ; } set { if ( value < 0 ) _raio = 0 ; else _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } class Program { static void Main ( string [] args ) { double area ; circulo xcir = new circulo (); xcir . raio = - 2.5 ; area = xcir . calcArea (); Console . WriteLine ( $\"Area: {area:F2}\" ); } } } Desse modo, podemos ver que caso o valor inputado no raio for negativo, o resultado da \u00e1rea ser\u00e1 0. Caso for positivo, o valor da \u00e1rea ser\u00e1 calculado normalmente. Se import\u00e1ssemos esse objeto sem saber o que acontece por dentro dele, n\u00e3o entender\u00edamos o que acontece exatamente dentro do objeto circulo . Mecanismos de Visibilidade/Acessibilidade Os modificadores de acesso ou mecanismos de visibilidade s\u00e3o os m\u00e9todos de acesso \u00e0s classes e seus, atributos, propriedades e m\u00e9todos. Existem v\u00e1rios tipos de modificadores de acesso ( protected , internal , protected internal e etc), mas por agora, vamos estudar somente o public e o private . Observemos novamente o c\u00f3digo da \u00faltima se\u00e7\u00e3o com algumas anota\u00e7\u00f5es adicionais. // c# // Bloco contendo todo o programa namespace WorkSpace { // Defini\u00e7\u00e3o do TAD circulo class circulo { private double _raio ; public double raio { get { return _raio ; } set { if ( value < 0 ) _raio = 0 ; else _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } // Bloco contendo o programa class Program { // Procedimento do programa static void Main ( string [] args ) { double area ; circulo xcir = new circulo (); xcir . raio = - 2.5 ; area = xcir . calcArea (); Console . WriteLine ( $\"Area: {area:F2}\" ); } } } Podemos ver que a classe circulo \u00e9 criada antes do bloco que cont\u00e9m o programa propriamente dito. Ou seja, est\u00e3o em escopos diferentes. Desse modo, um comando contido no procedimento Main n\u00e3o tem acesso a nenhuma propriedade ou atributos com o par\u00e2metro private nele somente os de par\u00e2metro public ou atrav\u00e9s das fun\u00e7\u00f5es set e get . Aten\u00e7\u00e3o: Na cria\u00e7\u00e3o da classe circulo n\u00e3o foi dito se ela seria acess\u00edvel fora do seu escopo original, ou seja, n\u00e3o usamos o comando public class circulo e sim o comando class circulo . Em c#, quando se cria uma classe sem a defini\u00e7\u00e3o expl\u00edcita da sua visibilidade, o padr\u00e3o da linguagem \u00e9 deixar a classe como public . Qualidade e Robustez de Software Esses conceitos de controle de acesso s\u00e3o importantes porque nosso c\u00f3digo precisa fazer o que foi planejado, da maneira planejada. Quando n\u00e3o limitamos a capacidade do usu\u00e1rio inserir dados, podemos cair em situa\u00e7\u00f5es n\u00e3o previstas que podem comprometer a execu\u00e7\u00e3o do nosso programa. Um conceito que nos ajuda a entender melhor essa situa\u00e7\u00e3o \u00e9 o robustez do software . Esse conceito \u00e9 usado pelos profissionais de qualidade de software e que \u00e9 referente a capacidade do programa em funcionar da maneira correta em diferentes cen\u00e1rios e condi\u00e7\u00f5es adversas. Outro conceito \u00fatil dessa \u00e1rea \u00e9 o corre\u00e7\u00e3o de software que \u00e9 a qualidade referente a capacidade do nosso programa funcionar da maneira prevista e especificada. A t\u00e9cnica da omiss\u00e3o da informa\u00e7\u00e3o nos ajuda a garantir o cumprimento desses requisitos. Construtores e Destrutores de Classe Um construtor de classe \u00e9 usado para cria\u00e7\u00e3o de um objeto e pela inicializa\u00e7\u00e3o dos seus atributos. Sempre que instanciamos um objeto, o seu construtor entra em a\u00e7\u00e3o. Coment\u00e1rio: N\u00e3o entraremos a fundo no conceito de Common Language Runtime (CLR) agora. Talvez mais pra frente a gente veja isso. Se um construtor n\u00e3o for declarado explicitamente, o c# cria a classe usando algumas conven\u00e7\u00f5es de modo a colocar o objeto dispon\u00edvel para uso. Esses padr\u00f5es de construtores s\u00e3o definidos de acordo com o tipo primitivo das vari\u00e1veis contidas no nosso objeto (que sabemos que se chamam atributos). Por padr\u00e3o, o CLR atribui os seguintes valores para os atributos dos objetos: 0 para vari\u00e1veis do tipo int, double e float false para vari\u00e1veis booleanas '\\0' para vari\u00e1veis do tipo string Definindo Construtores Para n\u00e3o usarmos as conven\u00e7\u00f5es padr\u00e3o do CLR. Podemos, n\u00f3s mesmo, atribuir os construtores dos atributos dos nossos objetos. Para isso, usamos um m\u00e9todo (ou seja, uma fun\u00e7\u00e3o interna do objeto) com o mesmo nome do objeto . Esse m\u00e9todo n\u00e3o possui retorno e s\u00e3o declarados como public . // c# [...] // C\u00f3digo com o namespasce class circulo { private double _raio ; public double raio { get { return _raio ;} set { _raio = value ;} } public circulo () // construtor { _raio = 0 ; } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } A partir de agora, sempre que executarmos um instanciamento atrav\u00e9s do comando // c# circulo xcir = new circulo (); O construtor ser\u00e1 chamado e executar\u00e1 as instru\u00e7\u00f5es contidas no construtor. No caso de exemplo, o valor default para o atributo _raio ser\u00e1 0. N\u00e3o \u00e9 dif\u00edcil pensar em situa\u00e7\u00f5es onde precisar\u00edamos usar diferentes m\u00e9todos de constru\u00e7\u00e3o em um objeto. Para isso, podemos ter mais de um construtor no mesmo objeto, chamamos isso de sobrecarregamento . A condi\u00e7\u00e3o \u00e9 que esses construtores sejam diferentes em termos de par\u00e2metros ou ordem dos par\u00e2metros. // c# [...] // C\u00f3digo com o namespasce class circulo { private double _raio ; public double raio { get { return _raio ;} set { _raio = value ;} } public circulo () // construtor { _raio = 0 ; } public circulo ( int R ) { _raio = R ; } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } Para executar o segundo construtor, basta passarmos um par\u00e2metro no momento do instanciamento do nosso novo objeto. // c# circulo xcirc = new circulo ( 2.3 ); Como fizemos um instanciamento com valor, o c# saber\u00e1 que queremos usar o segundo construtor ao inv\u00e9s do primeiro. Destrutores Ao contr\u00e1rio do que podemos pensar pelo nome, os destrutores n\u00e3o s\u00e3o usados para \"destruir\" os objetos. Eles s\u00e3o usados definir um comportamento espec\u00edfico no momento da destrui\u00e7\u00e3o de um objeto. Ou seja, eles s\u00e3o acionados na destrui\u00e7\u00e3o e n\u00e3o s\u00e3o os destruidores. N\u00e3o precisam ser chamados ou referenciados pois s\u00e3o invocados automaticamente. O normal \u00e9 n\u00e3o se usar destrutores no dia a dia visto que o CLR j\u00e1 faz o trabalho de padroniza\u00e7\u00e3o para elimina\u00e7\u00e3o de um objeto. Diferente dos construtores, uma classe pode ter apenas um destrutor . E a sua cria\u00e7\u00e3o \u00e9 parecida com a do construtor, uma vez que s\u00e3o m\u00e9todos sem retorno. A \u00fanica diferen\u00e7a \u00e9 que sua nota\u00e7\u00e3o come\u00e7a com o til. // c# [...] // C\u00f3digo com o namespasce class circulo { private double _raio ; public double raio { get { return _raio ;} set { _raio = value ;} } public circulo () // construtor 1 { _raio = 0 ; } public circulo ( int R ) // construtor 2 { _raio = R ; } ~ circulo { Console . WriteLine ( \"Adeus, mundo cruel!\" ); } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } Os detalhes de como um computador funciona s\u00e3o estudados em Estrutura de Computadores mas, para adiantar, algumas linguagens tem um programa chamado garbage colector que \u00e9 respons\u00e1vel pela reutiliza\u00e7\u00e3o de slots de mem\u00f3ria que est\u00e3o sendo usados por objetos que n\u00e3o tem mais utiliza\u00e7\u00e3o no c\u00f3digo. Em c# n\u00f3s n\u00e3o precisamos explicitamente eliminar um objeto porque o pr\u00f3prio garbage colector faz esse trabalho. Bibliografia ASCENCIO, Ana Fernanda Gomes; CAMPOS, Edilene Aparecida Veneruchi de. Fundamentos da programa\u00e7\u00e3o de computadores . S\u00e3o Paulo: Pearson, 2012. ISBN 9788564574168 SOUZA, Marco A. Furlan de; GOMES, Marcelo Marques; SOARES, Marcio Vieira; CONC\u00cdLIO, Ricardo. Algoritmos e l\u00f3gica de programa\u00e7\u00e3o: um texto introdut\u00f3rio para a engenharia . S\u00e3o Paulo: Cengage Learning, 2019. ISBN: 9788522128150 AGUILAR, Luis Joyanes. Fundamentos de programa\u00e7\u00e3o algoritmos, estruturas de dados e objetos . 3. ed. Porto Alegre: AMGH, 2008. ISBN: 9788580550146 DEITEL, Harvey M; DEITEL, Paul J. Java - como programar . 8. ed. S\u00e3o Paulo: Pearson, 2010. ISBN 9788576055631 GRIFFITHS, Ian. Programming C# 8.0 . O'Reilly Media, Inc. 2019. ISBN 9781492056812 MANZANO, Jos\u00e9 Augusto N. G; OLIVEIRA, Jayr Figueiredo de. Algoritmos: l\u00f3gica para desenvolvimento de programa\u00e7\u00e3o de computadores . 28. ed. rev. e atual. S\u00e3o Paulo, SP: \u00c9rica, 2016. E-book. ISBN 9788536518657 PRICE, Mark J. C# 8.0 and T Core 3.0 - Modern Cross - Platform Development . O'Reilly Media; 2019. ISBN 9781788478120 PUGA, Sandra; RISSETTI, Gerson. L\u00f3gica de programa\u00e7\u00e3o e estruturas de dados com aplica\u00e7\u00f5es em Java . 2. ed. S\u00e3o Paulo: Prentice Hall, 2009. ISBN 9788576052074 Isso \u00e9 muito legal! \u21a9","title":"Algoritmo e Abstra\u00e7\u00e3o"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#assuntos","text":"Estrutura de Dados Homog\u00eaneas e Heterog\u00eaneas Estrutura de Dados Homog\u00eaneas Estrutura de Dados Heterog\u00eaneas Tipos Abstratos de Dados, Classes e Implementa\u00e7\u00e3o Defini\u00e7\u00e3o de um TAD - Classes e Objetos Atributos, Propriedades e M\u00e9todos de Classe Mecanismos de Visibilidade/Acessibilidade Construtores e Destrutores de Classe Bibliografia","title":"Assuntos"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#introducao","text":"Durante o processo de constru\u00e7\u00e3o de software, a manipula\u00e7\u00e3o de informa\u00e7\u00e3o em mem\u00f3ria \u00e9 tarefa fundamental para que a solu\u00e7\u00e3o de software seja \u00fatil e satisfat\u00f3ria. As linguagens de programa\u00e7\u00e3o possuem especifica\u00e7\u00f5es sobre as caracter\u00edsticas que cada grupo de vari\u00e1veis pode ter, esse controle de propriedade das vari\u00e1veis e das limita\u00e7\u00f5es relacionadas a cada tipo \u00e9 chamado de Tipo de Dado . Dizemos que um Tipo Abstrato de Dado (TAD) \u00e9 a defini\u00e7\u00e3o por parte do programador de uma nova classe de dado otimizada para a resolu\u00e7\u00e3o do problema a ser trabalhado com o software em desenvolvimento. Cont\u00e9m tanto a estrutura da informa\u00e7\u00e3o a ser trabalhada quanto as opera\u00e7\u00f5es, procedimentos e fun\u00e7\u00f5es que podem ser aplicadas a esse tipo de dado novo. A constru\u00e7\u00e3o de TADs passa pela identifica\u00e7\u00e3o das entidades de um problema computacional e a defini\u00e7\u00e3o e desenvolvimento do modelo de dados adequado para a solu\u00e7\u00e3o proposta. Primeiramente, vamos aprender sobre os tipos de dados normalmente existente nas linguagens de programa\u00e7\u00e3o mais comuns do mercado. Podemos dividir os tipos de dados em dois grandes grupos: Homog\u00eaneos e Heterog\u00eaneos. Coment\u00e1rio: Esse microfundamento deve ser estudado somente ap\u00f3s o microfundamento de Algoritmo e L\u00f3gica de Programa\u00e7\u00e3o . Como esse material \u00e9 de refer\u00eancia, ele n\u00e3o deve ser lido, necessariamente, como se fosse um livro.","title":"Introdu\u00e7\u00e3o"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#estrutura-de-dados-homogeneas-e-heterogeneas","text":"","title":"Estrutura de Dados Homog\u00eaneas e Heterog\u00eaneas"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#estrutura-de-dados-homogeneas","text":"Os dois tipos de TAs Homog\u00eaneos mais comuns s\u00e3o os vetores (tamb\u00e9m chamados de arrays), que s\u00e3o formados por uma lista de \\(n\\) elementos de mesmo tipo e as matrizes, que podem ser entendidas como um empilhamento de vetores ou um tipo de vetor de duas dimens\u00f5es.","title":"Estrutura de Dados Homog\u00eaneas"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#vetores","text":"\u00c9 uma vari\u00e1vel composta, homog\u00eanea e unidimensional. Podemos pensar em um vetor como uma lista com \\(n\\) elementos do mesmo tipo. Como todos os valores de um vetor possuem o mesmo nome (o nome da vari\u00e1vel), para acessarmos algum valor espec\u00edfico de um elemento, precisaremos de um \u00edndice que fa\u00e7a refer\u00eancia ao local na lista onde o valor desejado se encontra. Para criarmos um vetor em c#, usamos a declara\u00e7\u00e3o da vari\u00e1vel com um par de colchetes vazio e a defini\u00e7\u00e3o da quantidade de posi\u00e7\u00f5es (ou lugares) que o nosso vetor ter\u00e1. Abaixo podemos ver um exemplo disso. // c# int [] Idades = new int [ 100 ]; // Vetor de int com 100 places double [] Alt = new double [ 20 ]; // Vetor de double com 20 string [] Nomes = new string [ 10 ]; // Vetor de string com 10 No exemplo acima, podemos ver que criamos um vetor denominado Idades que receber\u00e1 apenas valores do tipo inteiro. Um vetor de doubles (que \u00e9 um float com mais casas de precis\u00e3o) chamado salario. E, por fim, um vetor de strings chamado Nomes. Coment\u00e1rio: Existe uma classe que permite a cria\u00e7\u00e3o de um tipo de vetor gen\u00e9rico sem tamanho definido em c# chamado Lista. O curso n\u00e3o entrou nesse assunto mas eu vou deixar esse exemplo de lista aqui. // c# using System.Collections.Generic ; List < int > lista = new List < int > (); List . add ( 1 ); List . add ( 2 ); List . remove ( 2 ); Agora que sabemos como criar um vetor. O pr\u00f3ximo passo \u00e9 aprendermos como inserir informa\u00e7\u00e3o nele. Para a nossa sorte, \u00e9 bem simples. Basta colocarmos o nome do vetor seguido da posi\u00e7\u00e3o a ser preenchida entre colchetes. // c# Idades [ 20 ] = 10 ; // Valor 10 na posi\u00e7\u00e3o 19 Alt [ 0 ] = 1.2 ; // Valor 1.2 na posi\u00e7\u00e3o 1 S\u00f3 temos que ter cuidado com uma coisa. Existem linguagens (como C#, Java, Python e outras) que colocam o index da primeira posi\u00e7\u00e3o de um vetor como sendo o valor 0. Outras linguagens (como R) usam o numero 1 para essa primeira posi\u00e7\u00e3o. Com base no que aprendemos em Algoritmos e L\u00f3gica da Programa\u00e7\u00e3o , somos capazes de entender o c\u00f3digo abaixo a respeito do uso de um la\u00e7o de repeti\u00e7\u00e3o para preenchimento de um vetor de 5 posi\u00e7\u00f5es. // c# int i ; int [] Valores = new int [ 5 ]; // Input dos dados for ( i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( $\"Digite o valor {i + 1}: \" ); Valores [ i ] = int . Parse ( Console . ReadLine ()); };","title":"Vetores"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#desafio","text":"O professor prop\u00f5e o seguinte desafio para fixa\u00e7\u00e3o do conceito de vetor: \"Criaremos um vetor de n\u00fameros inteiros com 5 posi\u00e7\u00f5es e ler cada um de seus valores. Criaremos duas fun\u00e7\u00f5es que, tomando esse vetor como par\u00e2metro, ir\u00e3o retornar a soma dos n\u00fameros pares contidos no vetor e a quantidade de n\u00fameros \u00edmpares que ele possui.\" Minha resolu\u00e7\u00e3o desse problema segue abaixo. // c# int [] vetor = new int [ 5 ]; int somaPar = 0 ; int contaImpar = 0 ; int input ; // Soma de dois valores int soma ( int valor1 , int valor2 ) { return valor1 + valor2 ; }; // Itera\u00e7\u00e3o para lan\u00e7amento dos valores e somas for ( int i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( $\" Valor da Posi\u00e7\u00e3o n\u00ba: {i + 1}\" ); input = int . Parse ( Console . ReadLine ()); vetor [ i ] = input ; if ( input % 2 == 0 ) { somaPar = soma ( somaPar , input ); } else { contaImpar += 1 ; } }; Console . WriteLine ( $\" SomaPar = {somaPar}, ContaImpar = {contaImpar}\" ); Console . WriteLine ( $\"({vetor[0]},{vetor[1]},{vetor[2]},{ vetor[3]},{vetor[4]})\" ); Que produz o seguinte resultado para o input (1,2,1,2,1) .","title":"Desafio"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#matrizes","text":"Como dito no in\u00edcio dessa se\u00e7\u00e3o. Podemos pensar que matrizes s\u00e3o vetores de duas dimens\u00f5es. Por causa disso, a declara\u00e7\u00e3o da vari\u00e1vel \u00e9 um pouco diferente. // c# double [,] Notas = new double [ 4 , 5 ]; // 4 linhas e 5 colunas Por ser uma vari\u00e1vel de duas dimens\u00f5es, a maneira como atribu\u00edmos valores \u00e0 cada posi\u00e7\u00e3o \u00e9 um pouco diferente do caso com vetor. Para cada atribui\u00e7\u00e3o de valor, temos que indicar a linha e coluna que nosso dado ser\u00e1 salvo. // c# Notas [ 0 , 0 ] = 1 ; // Linha 1 coluna 1 Notas [ 0 , 1 ] = 1 ; // Linha 1 coluna 2 Notas [ 2 , 3 ] = 1 ; // Linha 3 coluna 4 Notas [ 3 , 4 ] = 1 ; // Linha 4 coluna 5 Devemos sempre lembrar que c# usa a posi\u00e7\u00e3o de numeral 0 para o index inicial de vetores e matrizes. Agora vamos ver um programa simples que exemplifica o que acabamos de aprender. A leitura dele n\u00e3o deve ser dif\u00edcil. Se est\u00e1 tendo dificuldade, volte no microfundamento de l\u00f3gica da programa\u00e7\u00e3o. // c# int i , j ; int [,] Valor = new int [ 10 , 3 ]; // Loop para entrada de valores na matriz for ( i = 0 ; i < 10 ; i ++ ) // Loop para linhas { for ( j = 0 ; j < 3 ; j ++ ) // Loop para colunas { Console . WriteLine ( $\"Valor Linha:{i+1} Coluna{j+1}\" ); Valor [ i , j ] = int . Parse ( Console . ReadLine ()); } }","title":"Matrizes"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#desafio_1","text":"Para a fixa\u00e7\u00e3o do conceito de matrizes, o professor faz o seguinte desafio: \"Vamos fazer um programa que ir\u00e1 ler os dados de uma matriz de inteiros de ordem 5, ou seja, de dimens\u00f5es 5x5. Matematicamente ela \u00e9 chama de matriz quadrada, porque o n\u00famero de \u201clinhas\u201d \u00e9 igual ao n\u00famero de \u201ccolunas\u201d. Depois de darmos entrada nos valores da matriz chamaremos uma fun\u00e7\u00e3o que, tomando essa matriz como par\u00e2metro, retornar\u00e1 um vetor composto pelos elementos da diagonal principal dessa matriz quando, ent\u00e3o, os listaremos.\" // c# // Aqui vai ficar o cogido da solu\u00e7\u00e3o do desafio // quando eu tiver vontade de fazer Vetores e Matrizes s\u00e3o os principais tipos homog\u00eaneos de dados. A partir de agora, estudaremos estruturas que nos permitem alocar valores de tipos diferentes em uma mesma vari\u00e1vel. A compreens\u00e3o correta dos tipos de dados \u00e9 a pedra fundamental do paradigma de desenvolvimento chamado de Programa\u00e7\u00e3o Orientada \u00e0 Objetos .","title":"Desafio"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#estrutura-de-dados-heterogeneas","text":"","title":"Estrutura de Dados Heterog\u00eaneas"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#registros","text":"Na defini\u00e7\u00e3o de um tipo de dado, n\u00f3s definimos precisamente a faixa de valores que podem ser atribu\u00eddos e os m\u00e9todos nativos do tipo de dado. Chamamos de tipo simples de dados os grupos de valores do mesmo tipo (inteiros, reais, string ou booleanos). Por outro lado, chamamos de tipo estruturado de dados os modelos que comportam valores de tipagem diferentes na mesma vari\u00e1vel. Um registro \u00e9 um tipo de dado estruturado. N\u00f3s j\u00e1 estamos familiarizados com as defini\u00e7\u00f5es de vari\u00e1veis em c# para os tipos nativos de dados. // c# int x ; double Result ; string Name ; A essa altura do aprendizado, as linhas acima s\u00e3o simples de serem compreendidas. S\u00e3o apenas declara\u00e7\u00f5es do tipos de 3 vari\u00e1veis simples. Mas vejam s\u00f3 o que podemos fazer abaixo. // c# Aluno xAlu ; Estranho, n\u00e9?! Estamos declarando a vari\u00e1vel xAlu como sendo do tipo...\"Aluno\"? Sim, \u00e9 isso mesmo! N\u00f3s podemos usar um token dedicado na linguagem para a cria\u00e7\u00e3o de tipos novos de dados que sirvam melhor para solu\u00e7\u00e3o dos problemas que queremos resolver como nosso c\u00f3digo. O token dedicado para constru\u00e7\u00e3o de tipos de dados em c# \u00e9 o struct . Mas para usa-lo bem, temos que aprender os conceitos de tipos de dados heterog\u00eaneos e, no futuro, avan\u00e7aremos para o conceito de classes. O comando struct \u00e9 pensado para o encapsulamento de pequenos conjuntos de vari\u00e1veis relacionadas. No exemplo do tipo Aluno, podemos pensar que todos os alunos devem ter um nome, um cpf e uma data de nascimento, por exemplo. Como essas caracter\u00edsticas se repetem para todos, podemos definir um tipo de dado espec\u00edfico para lidarmos com as informa\u00e7\u00f5es dos alunos.","title":"Registros"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#implementacao-de-um-registro","text":"A cria\u00e7\u00e3o de um tipo de dado \u00e9 simples. Basta definirmos o nome do tipo de dado e declararmos o conjunto de vari\u00e1veis que far\u00e3o parte dele. No exemplo abaixo, n\u00f3s criamos o tipo \"Funcion\u00e1rio\" com as informa\u00e7\u00f5es que ser\u00e3o usadas. // c# struct Funcionario { public string CPF ; public string Name ; public double Salary ; public string dataNasc ; } Podemos ver que a declara\u00e7\u00e3o das vari\u00e1veis dentro do bloco de c\u00f3digo est\u00e3o com o token public antes da declara\u00e7\u00e3o do tipo de dado. Isso ocorre porque precisamos dizer ao compilador da linguagem que essas vari\u00e1veis ser\u00e3o acess\u00edveis fora do bloco de c\u00f3digo em que elas s\u00e3o criadas. Isso tem rela\u00e7\u00e3o direta com o conceito de m\u00e9todo e procedimento que aprendemos no curso de Algoritmo e L\u00f3gica Computacional. Agora que temos o nosso novo tipo de dado criado, podemos usar esse recurso para a defini\u00e7\u00e3o de novas vari\u00e1veis. // c# static void Main ( string []) args ) { Funcionario xFunc ; xFunc . CPF = \"1234\" ; xFunc . Name = \"Bruce Wanne\" ; xFunc . Salary = 1234 , 33 ; xFunc . dataNasc = \"31/08/1993\" ; } N\u00e3o precisamos nos preocupar com a primeira linha agora. Basta saber que todo programa em c# \u00e9 um procedimento em algum n\u00edvel. Podemos focar apenas no que est\u00e1 dentro dos colchetes. Com o tipo de dado criado. Podemos criar a vari\u00e1vel xFunc e acessar seus par\u00e2metros usando um ponto ap\u00f3s o seu nome. A atribui\u00e7\u00e3o \u00e9 feita como antes mas agora n\u00e3o precisamos declarar os tipos porque eles est\u00e3o definidos dentro do tipo de dado. J\u00e1 aprendemos no come\u00e7o desse microfundamento que a cria\u00e7\u00e3o de vetores (que s\u00e3o listas de elementos do mesmo tipo) s\u00e3o feitas em c# pela adi\u00e7\u00e3o de colchetes vazios na declara\u00e7\u00e3o das vari\u00e1veis. Por exemplo, um vetor de inteiros \u00e9 definido por int[] . Pois bem, podemos usar a mesma l\u00f3gica e criar um vetor do tipo que acabamos de criar 1 . Analogamente, como nosso tipo de dado \u00e9 Funcionario , seu vetor que conter\u00e1 v\u00e1rios funcion\u00e1rios diferentes ser\u00e1 criado por Funcionario[] . // c# Funcionario [] xFunc = new Funcionario [ 5 ]; for ( int i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( \"CPF do funcion\u00e1rio: \" ); xFunc [ i ]. CPF = Console . readLine (); Console . WriteLine ( \"Nome do funcion\u00e1rio: \" ); xFunc [ i ]. Name = Console . readLine (); Console . WriteLine ( \"Sal\u00e1rio: \" ); xFunc [ i ]. Salary = Console . readLine (); Console . WriteLine ( \"Data de Nascimento: \" ); xFunc [ i ]. dataNasc = Console . readLine (); } Acima, temos a cria\u00e7\u00e3o de um vetor de 5 posi\u00e7\u00f5es onde cada elemento \u00e9 do tipo Funcionario. Logo abaixo, temos um loop para facilitar o preenchimento das informa\u00e7\u00f5es de cada elemento do vetor. Estamos come\u00e7ando a nos aproximar do conceito de banco de dados. Mas n\u00e3o veremos isso agora.","title":"Implementa\u00e7\u00e3o de um Registro"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#tipos-de-dados-aninhados","text":"N\u00e3o precisamos parar por aqui, \u00e9 plenamente poss\u00edvel criarmos um tipo de dados que use outro tipo de dados criado fora dele. Por exemplo, ao inv\u00e9s de salvarmos a data de nascimento como uma string, podemos criar um tipo de dados chamado Data que recebe 3 informa\u00e7\u00f5es: dia, m\u00eas e ano. // c# struct Funcionario { public string CPF ; public string Name ; public double Salary ; public Data dataNasc ; } struct Data { public string day ; public string month ; public string year ; } Dentro do tipo funcion\u00e1rio, temos a declara\u00e7\u00e3o de um vari\u00e1vel do tipo data. Para aproveitarmos o c\u00f3digo de cria\u00e7\u00e3o de um vetor Funcionario. Podemos fazer apenas uma pequena altera\u00e7\u00e3o. // c# Funcionario [] xFunc = new Funcionario [ 5 ]; for ( int i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( \"CPF do funcion\u00e1rio: \" ); xFunc [ i ]. CPF = Console . readLine (); Console . WriteLine ( \"Nome do funcion\u00e1rio: \" ); xFunc [ i ]. Name = Console . readLine (); // Parte que foi substitu\u00edda // Console.WriteLine(\"Sal\u00e1rio: \"); // xFunc[i].Salary = Console.readLine(); Console . WriteLine ( \"Data de Nascimento - Dia: \" ); xFunc [ i ]. dataNasc . day = Console . readLine (); Console . WriteLine ( \"Data de Nascimento - M\u00eas: \" ); xFunc [ i ]. dataNasc . month = Console . readLine (); Console . WriteLine ( \"Data de Nascimento - Ano: \" ); xFunc [ i ]. dataNasc . year = Console . readLine (); } A cria\u00e7\u00e3o de tipos eficientes de dados \u00e9 uma ferramenta muito eficiente para padroniza\u00e7\u00e3o e manuten\u00e7\u00e3o de solu\u00e7\u00f5es de software. \u00c9 sempre bom entendermos bem o problema proposto e quais tipos de dados podem ser criados para a cria\u00e7\u00e3o de uma resposta adequada a ele.","title":"Tipos de Dados Aninhados"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#tad-classes-e-implementacao","text":"","title":"TAD, Classes e Implementa\u00e7\u00e3o"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#definicao-de-um-tad-classes-e-objetos","text":"Um tipo abstrato de dado ou TAD \u00e9 um \"padr\u00e3o\" ou \"modelo\" que rege as caracter\u00edsticas que determinada estrutura de dado criada bem como suas fun\u00e7\u00f5es (que chamamos de m\u00e9todos) internas. Ou seja, um TAD \u00e9 a defini\u00e7\u00e3o das informa\u00e7\u00f5es contidas e as opera\u00e7\u00f5es execut\u00e1veis por uma vari\u00e1vel de um determinado modelo. N\u00f3s estamos usando isso o tempo todo sem perceber. Por exemplo, quando usamos a fun\u00e7\u00e3o Math.Pow(a,b) n\u00f3s estamos, na verdade, executando um m\u00e9todo chamamo Pow dentro do objeto Math . Exatamente o mesmo pensamento \u00e9 aplicado ao Console.Write() ou Console.ReadLine() . Agora que estamos avan\u00e7ando mais no nosso conhecimento sobre desenvolvimento de software, come\u00e7amos a entender mais sobre as estruturas que nos permitem realizar os nossos trabalhos, ou no jarg\u00e3o, estamos come\u00e7ando a ver \"de baixo do cap\u00f4\". At\u00e9 agora, n\u00f3s temos definido os nossos TADs atrav\u00e9s da defini\u00e7\u00e3o de sua estrutura (pelo token struct ), mas as linguagens que utilizam o paradigma orientado \u00e0 objeto atuais usam o conceito de classes para defini\u00e7\u00e3o dos seus TADs.","title":"Defini\u00e7\u00e3o de um TAD - Classes e Objetos"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#implementando-tads-usando-classes","text":"J\u00e1 aprendemos a implementar um TAD por estrutura. // c# // Definindo o TAD struct Produto { public string Nome ; public double PrecoUnd ; } // Criando uma vari\u00e1vel com TAD Produto xProd ; // Usando o TAD xProd . Nome = \"PS5\" ; xProd . PrecoUnd = 8000.99 ; Podemos construir uma solu\u00e7\u00e3o an\u00e1loga a essa pelo token de cria\u00e7\u00e3o de classes. // c# // Definindo o TAD class Produto { public string Nome ; public double PrecoUnd ; } // Criando a classe Produto xProd = new Produto (); // Usando o TAD xProd . Nome = \"Xbox One\" ; xProd . PrecoUnd = 9999.99 ; Em uma primeira vista, parecem ser abordagens equivalentes. Mas existem algumas diferen\u00e7as importantes que merecem a nossa aten\u00e7\u00e3o. Para entender bem a diferen\u00e7a entre essas constru\u00e7\u00f5es, vamos ter que aprender um pouco mais sobre como o computador guarda informa\u00e7\u00f5es. O layout de mem\u00f3ria de programas em C s\u00e3o separados em 5 n\u00edveis : Text segment (instructions) Initializes data segment Uninitialized data segment (bss) Heap Stack (Inline) N\u00f3s n\u00e3o vamos nos atentar muito aos detalhes agora. Mas agora que sabemos um pouco das diferentes aloca\u00e7\u00f5es poss\u00edveis na mem\u00f3ria durante a execu\u00e7\u00e3o de um programa. Podemos focar no que for necess\u00e1rio para diferenciarmos o struct do class . Os valores do tipo struct s\u00e3o alocados na mem\u00f3ria stack. Essa parte de mem\u00f3ria grava temporariamente as vari\u00e1veis criadas por uma fun\u00e7\u00e3o. No stack, as vari\u00e1veis s\u00e3o declaras, guardadas e inicializadas durante a execu\u00e7\u00e3o do programa e apagadas na sua conclus\u00e3o. A mem\u00f3ria \u00e9 alocada em um bloco cont\u00edguos. \u00c9 mais limitada e de r\u00e1pido acesso. Os valores do tipo class s\u00e3o alocados no heap. Essa \u00e9 a parte da mem\u00f3ria usada pelas linguagens de programa\u00e7\u00e3o para suas vari\u00e1veis de escopo global. A mem\u00f3ria \u00e9 alocada de maneira aleat\u00f3ria e \u00e9 mais abundante se comparada com a stack. Sempre que criamos uma nova inst\u00e2ncia como fizemos em Produto xProd = new Produto() n\u00f3s estamos apontando um novo endere\u00e7o de mem\u00f3ria para ser usado.","title":"Implementando TADs usando Classes"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#desafio_2","text":"Cadastrar objetos em um vetor usando uma classe. // c# using System ; namespace WorkSpace { // Criando o TAD do tipo class class carro { public string name ; public string marca ; public string anoFab ; public string placa ; public double precoFip ; }; class Program { static void Main ( string [] args ) { // Criando um vetor do tipo carro carro [] cadCarro = new carro [ 3 ]; // Loop para inserir o input no vetor for ( int i = 0 ; i < 2 ; i ++ ) { carro x = new carro (); Console . Write ( $\"\\n Qual o nome? \" ); x . name = Console . ReadLine (); Console . Write ( $\" Qual a marca? \" ); x . marca = Console . ReadLine (); Console . Write ( $\" Qual o ano de fabrica\u00e7\u00e3o? \" ); x . anoFab = Console . ReadLine (); Console . Write ( $\" Qual a placa? \" ); x . placa = Console . ReadLine (); Console . Write ( $\" Qual o pre\u00e7o da tabela FIP? \" ); x . precoFip = double . Parse ( Console . ReadLine ()); // Salvando o x no vetor cadCarro cadCarro [ i ] = x ; }; Console . Clear (); // Mostrando o resultado foreach ( carro C in cadCarro ) { Console . WriteLine ( $\"\\n Carro: {C.name},Marca:{C.marca}\" ); Console . WriteLine ( $\" Placa: {C.placa}, Ano:{C.anoFab}\" ); Console . WriteLine ( $\" Pre\u00e7o da Tabela Fip: {C.precoFip}\" ); }; Console . ReadKey (); } } } \u00c9 muito mais comum se achar situa\u00e7\u00f5es de constru\u00e7\u00e3o de TADs por uso de classes ao inv\u00e9s de estruturas. Vale a pena estudar mais para sabermos exatamente quando cada uma dessas op\u00e7\u00f5es \u00e9 a adequada. Mas no come\u00e7o, as classes nos servir\u00e3o muito bem. Aqui \u00e9 importante frisarmos uma coisa. Quando instanciamos um objeto (ou seja, quando usamos o token new ) o nome que passamos a esse objeto \u00e9 apenas uma refer\u00eancia . Isso quer dizer que, no exemplo acima, cadCarro n\u00e3o \u00e9 o nosso objeto em si e sim uma refer\u00eancia a ele. Alguns de voc\u00eas podem estar questionando o motivo desse aviso. Sabendo que cadCarro n\u00e3o \u00e9 o objeto em si e sim apenas uma refer\u00eancia que aponta para o endere\u00e7o na mem\u00f3ria em que o objeto est\u00e1 salvo, ao criarmos uma nova linha no nosso c\u00f3digo do tipo cadCarro2 = cadCarro estamos criando uma nova refer\u00eancia para o mesmo objeto alocado na mem\u00f3ria. Ou seja, qualquer manipula\u00e7\u00e3o feita usando a refer\u00eancia cadCarro tamb\u00e9m ser\u00e1 refletida em cadCarro2 . Abaixo temos um programa simples que usa essa rela\u00e7\u00e3o de refer\u00eancia. // c# using System ; class Program { class carro { public string name ; public string marca ; public string anoFab ; public string placa ; public double precoFip ; }; public static void Main ( string [] args ) { // Criando um vetor do tipo carro carro cadCarro = new carro (); carro cadCarro2 = null ; cadCarro . name = \"carro Nome\" ; cadCarro . marca = \"marca\" ; cadCarro . anoFab = \"2022\" ; cadCarro . placa = \"placa\" ; cadCarro . precoFip = 22.22 ; Console . WriteLine ( $\"{cadCarro.name}\" ); cadCarro2 = cadCarro ; Console . WriteLine ( $\"{cadCarro2.name}\" ); cadCarro2 . name = \"carro nome 2\" ; Console . WriteLine ( $\"{cadCarro.name}\" ); } }","title":"Desafio"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#atributos-propriedades-e-metodos-de-classe","text":"Vamos analisar com calma essas duas cita\u00e7\u00f5es do texto: \"Uma classe especifica uma estrutura de dados e os seus m\u00e9todos operacionais permiss\u00edveis que se aplicam a cada um dos seus objetos\" (MARTIN e ODELL, 1995). \"Um objeto \u00e9 qualquer coisa, real ou abstrata, a respeito da qual armazenamos os dados e os m\u00e9todos que os manipulam\" (MARTIN e ODELL, 1995). Em ambas as cita\u00e7\u00f5es temos as figuras dos dados e dos m\u00e9todos. A estrutura dos dados n\u00f3s j\u00e1 vimos na se\u00e7\u00e3o passada quando lidamos com defini\u00e7\u00e3o de TADs declarando os tipos das vari\u00e1veis tanto na declara\u00e7\u00e3o via estrutura quanto por classe. Agora, vamos expandir um pouco mais o poder dos TADs nos permitindo definir, al\u00e9m das regras de quais dados ser\u00e3o armazenados, quais opera\u00e7\u00f5es e fun\u00e7\u00f5es ser\u00e3o executadas internamente por nossos objetos. Ao construir um tipo abstrato de dados, nos perguntamos quais informa\u00e7\u00f5es ser\u00e3o necess\u00e1rias e, al\u00e9m disso, quais opera\u00e7\u00f5es ser\u00e3o usadas para resolu\u00e7\u00e3o do nosso problema.","title":"Atributos, Propriedades e M\u00e9todos de Classe"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#indo-um-pouco-mais-fundo","text":"Vejamos o seguinte TAD criado apenas com a defini\u00e7\u00e3o da estrutura de dados: // c# class pessoa { public string name ; public double salary ; } Dizemos que as informa\u00e7\u00f5es sobre nome e sal\u00e1rio s\u00e3o atributos do nosso objeto pessoa . Eles definem a estrutura do tipo abstrato de dados que definimos. Tamb\u00e9m podemos chama-los de vari\u00e1veis da classe pessoa . Mesmo que o exemplo acima funcione. Uma maneira mais apropriada de reconstruir essa solu\u00e7\u00e3o pode ser vista abaixo. // c# class pessoa { private string _name ; public string name { get { return _name ;} set { _name = value ;} } private double _salary ; public double salary { get { return _salary ;} set { _salary = value ;} } } Os campos _name e _salary s\u00e3o definidos com o escopo privado e podem ser acessados somente internamente ao objeto. Para podermos acessar fora do escopo do objeto, usamos as fun\u00e7\u00f5es nativas get e set . Os nomes das fun\u00e7\u00f5es deixam claro o que cada uma faz. set \u00e9 usado para atribui\u00e7\u00e3o de um valor passado (que chamamos de value) e get \u00e9 usado para retorno de valor salvo no objeto. Vamos ver um programa simples que utiliza esses conceitos. // c# namespace WorkSpace { class pessoa { private string _name ; public string name { get { return _name ;} set { _name = value ;} } private double _salary ; public double salary { get { return _salary ;} set { _salary = value ;} } }; class Program { static void Main ( string [] args ) { pessoa xpes = new pessoa (); xpes . name = \"Clark Kent\" ; xpes . salary = 1234.56 ; Console . WriteLine ( $\"Nome: {xpes.name}\" ); Console . WriteLine ( $\"Sal\u00e1rio: R$ {xpes.salary}\" ); } } } Na linha xpes.name = \"Clark Kent\" vemos como a fun\u00e7\u00e3o interna set funciona. Ela recebe o valor e atribui \u00e0 vari\u00e1vel provada _name . Quando definimos um atributo privado e fun\u00e7\u00f5es ( get e set ) que manipulam esse atributo dentro da classe, podemos dizer que criamos uma propriedade do objeto. J\u00e1 temos os conceitos de objeto, atributo e propriedade bem definidos. Agora vamos aprender sobre as fun\u00e7\u00f5es dentro de um objeto. A essas fun\u00e7\u00f5es, damos o nome de m\u00e9todos ou servi\u00e7os do objeto . // c# class circulo { private double _raio ; public double raio { get { return _raio ; } set { _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } Aqui temos um atributo chamado _raio . Uma propriedade chamada raio . E, por fim, temos tamb\u00e9m um m\u00e9todo chamado calcArea . Abaixo temos um exemplo de como usar esses conceitos na pr\u00e1tica. // c# namespace WorkSpace { class circulo { private double _raio ; public double raio { get { return _raio ; } set { _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } class Program { static void Main ( string [] args ) { double area ; circulo xcirculo = new circulo (); xcirculo . raio = 2.5 ; area = xcirculo . calcArea (); Console . WriteLine ( $\"A \u00e1rea \u00e9 igual a {area:F2}\" ); Console . ReadKey (); } } } Coment\u00e1rio: Eu n\u00e3o sei voc\u00ea, mas eu fiquei com d\u00favidas sobre essa parte do area:F2 . Isso \u00e9 muito simples. Como o valor area \u00e9 do tipo double, ele possui v\u00e1rias casas ap\u00f3s a v\u00edrgula. Esse par\u00e2metro \u00e9 a defini\u00e7\u00e3o da quantidade de casas ap\u00f3s a v\u00edrgula. Nesse caso, o resultado ter\u00e1 2 casas ap\u00f3s a v\u00edrgula. Quando encapsulamos as propriedades e os m\u00e9todos dentro de um objeto, estamos omitindo os detalhes de como objeto faz as transforma\u00e7\u00f5es e armazena os dados. A essa t\u00e9cnica damos o nome de oculta\u00e7\u00e3o da informa\u00e7\u00e3o . Isso \u00e9 \u00fatil para garantir a integridade da manipula\u00e7\u00e3o dos dados por parte dos usu\u00e1rios e aumenta a seguran\u00e7a quanto a l\u00f3gica implementada no c\u00f3digo. Podemos definir a l\u00f3gica tamb\u00e9m dentro das fun\u00e7\u00f5es de set e get . // c# namespace WorkSpace { class circulo { private double _raio ; public double raio { get { return _raio ; } set { if ( value < 0 ) _raio = 0 ; else _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } class Program { static void Main ( string [] args ) { double area ; circulo xcir = new circulo (); xcir . raio = - 2.5 ; area = xcir . calcArea (); Console . WriteLine ( $\"Area: {area:F2}\" ); } } } Desse modo, podemos ver que caso o valor inputado no raio for negativo, o resultado da \u00e1rea ser\u00e1 0. Caso for positivo, o valor da \u00e1rea ser\u00e1 calculado normalmente. Se import\u00e1ssemos esse objeto sem saber o que acontece por dentro dele, n\u00e3o entender\u00edamos o que acontece exatamente dentro do objeto circulo .","title":"Indo um pouco mais fundo"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#mecanismos-de-visibilidadeacessibilidade","text":"Os modificadores de acesso ou mecanismos de visibilidade s\u00e3o os m\u00e9todos de acesso \u00e0s classes e seus, atributos, propriedades e m\u00e9todos. Existem v\u00e1rios tipos de modificadores de acesso ( protected , internal , protected internal e etc), mas por agora, vamos estudar somente o public e o private . Observemos novamente o c\u00f3digo da \u00faltima se\u00e7\u00e3o com algumas anota\u00e7\u00f5es adicionais. // c# // Bloco contendo todo o programa namespace WorkSpace { // Defini\u00e7\u00e3o do TAD circulo class circulo { private double _raio ; public double raio { get { return _raio ; } set { if ( value < 0 ) _raio = 0 ; else _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } // Bloco contendo o programa class Program { // Procedimento do programa static void Main ( string [] args ) { double area ; circulo xcir = new circulo (); xcir . raio = - 2.5 ; area = xcir . calcArea (); Console . WriteLine ( $\"Area: {area:F2}\" ); } } } Podemos ver que a classe circulo \u00e9 criada antes do bloco que cont\u00e9m o programa propriamente dito. Ou seja, est\u00e3o em escopos diferentes. Desse modo, um comando contido no procedimento Main n\u00e3o tem acesso a nenhuma propriedade ou atributos com o par\u00e2metro private nele somente os de par\u00e2metro public ou atrav\u00e9s das fun\u00e7\u00f5es set e get . Aten\u00e7\u00e3o: Na cria\u00e7\u00e3o da classe circulo n\u00e3o foi dito se ela seria acess\u00edvel fora do seu escopo original, ou seja, n\u00e3o usamos o comando public class circulo e sim o comando class circulo . Em c#, quando se cria uma classe sem a defini\u00e7\u00e3o expl\u00edcita da sua visibilidade, o padr\u00e3o da linguagem \u00e9 deixar a classe como public .","title":"Mecanismos de Visibilidade/Acessibilidade"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#qualidade-e-robustez-de-software","text":"Esses conceitos de controle de acesso s\u00e3o importantes porque nosso c\u00f3digo precisa fazer o que foi planejado, da maneira planejada. Quando n\u00e3o limitamos a capacidade do usu\u00e1rio inserir dados, podemos cair em situa\u00e7\u00f5es n\u00e3o previstas que podem comprometer a execu\u00e7\u00e3o do nosso programa. Um conceito que nos ajuda a entender melhor essa situa\u00e7\u00e3o \u00e9 o robustez do software . Esse conceito \u00e9 usado pelos profissionais de qualidade de software e que \u00e9 referente a capacidade do programa em funcionar da maneira correta em diferentes cen\u00e1rios e condi\u00e7\u00f5es adversas. Outro conceito \u00fatil dessa \u00e1rea \u00e9 o corre\u00e7\u00e3o de software que \u00e9 a qualidade referente a capacidade do nosso programa funcionar da maneira prevista e especificada. A t\u00e9cnica da omiss\u00e3o da informa\u00e7\u00e3o nos ajuda a garantir o cumprimento desses requisitos.","title":"Qualidade e Robustez de Software"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#construtores-e-destrutores-de-classe","text":"Um construtor de classe \u00e9 usado para cria\u00e7\u00e3o de um objeto e pela inicializa\u00e7\u00e3o dos seus atributos. Sempre que instanciamos um objeto, o seu construtor entra em a\u00e7\u00e3o. Coment\u00e1rio: N\u00e3o entraremos a fundo no conceito de Common Language Runtime (CLR) agora. Talvez mais pra frente a gente veja isso. Se um construtor n\u00e3o for declarado explicitamente, o c# cria a classe usando algumas conven\u00e7\u00f5es de modo a colocar o objeto dispon\u00edvel para uso. Esses padr\u00f5es de construtores s\u00e3o definidos de acordo com o tipo primitivo das vari\u00e1veis contidas no nosso objeto (que sabemos que se chamam atributos). Por padr\u00e3o, o CLR atribui os seguintes valores para os atributos dos objetos: 0 para vari\u00e1veis do tipo int, double e float false para vari\u00e1veis booleanas '\\0' para vari\u00e1veis do tipo string","title":"Construtores e Destrutores de Classe"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#definindo-construtores","text":"Para n\u00e3o usarmos as conven\u00e7\u00f5es padr\u00e3o do CLR. Podemos, n\u00f3s mesmo, atribuir os construtores dos atributos dos nossos objetos. Para isso, usamos um m\u00e9todo (ou seja, uma fun\u00e7\u00e3o interna do objeto) com o mesmo nome do objeto . Esse m\u00e9todo n\u00e3o possui retorno e s\u00e3o declarados como public . // c# [...] // C\u00f3digo com o namespasce class circulo { private double _raio ; public double raio { get { return _raio ;} set { _raio = value ;} } public circulo () // construtor { _raio = 0 ; } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } A partir de agora, sempre que executarmos um instanciamento atrav\u00e9s do comando // c# circulo xcir = new circulo (); O construtor ser\u00e1 chamado e executar\u00e1 as instru\u00e7\u00f5es contidas no construtor. No caso de exemplo, o valor default para o atributo _raio ser\u00e1 0. N\u00e3o \u00e9 dif\u00edcil pensar em situa\u00e7\u00f5es onde precisar\u00edamos usar diferentes m\u00e9todos de constru\u00e7\u00e3o em um objeto. Para isso, podemos ter mais de um construtor no mesmo objeto, chamamos isso de sobrecarregamento . A condi\u00e7\u00e3o \u00e9 que esses construtores sejam diferentes em termos de par\u00e2metros ou ordem dos par\u00e2metros. // c# [...] // C\u00f3digo com o namespasce class circulo { private double _raio ; public double raio { get { return _raio ;} set { _raio = value ;} } public circulo () // construtor { _raio = 0 ; } public circulo ( int R ) { _raio = R ; } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } Para executar o segundo construtor, basta passarmos um par\u00e2metro no momento do instanciamento do nosso novo objeto. // c# circulo xcirc = new circulo ( 2.3 ); Como fizemos um instanciamento com valor, o c# saber\u00e1 que queremos usar o segundo construtor ao inv\u00e9s do primeiro.","title":"Definindo Construtores"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#destrutores","text":"Ao contr\u00e1rio do que podemos pensar pelo nome, os destrutores n\u00e3o s\u00e3o usados para \"destruir\" os objetos. Eles s\u00e3o usados definir um comportamento espec\u00edfico no momento da destrui\u00e7\u00e3o de um objeto. Ou seja, eles s\u00e3o acionados na destrui\u00e7\u00e3o e n\u00e3o s\u00e3o os destruidores. N\u00e3o precisam ser chamados ou referenciados pois s\u00e3o invocados automaticamente. O normal \u00e9 n\u00e3o se usar destrutores no dia a dia visto que o CLR j\u00e1 faz o trabalho de padroniza\u00e7\u00e3o para elimina\u00e7\u00e3o de um objeto. Diferente dos construtores, uma classe pode ter apenas um destrutor . E a sua cria\u00e7\u00e3o \u00e9 parecida com a do construtor, uma vez que s\u00e3o m\u00e9todos sem retorno. A \u00fanica diferen\u00e7a \u00e9 que sua nota\u00e7\u00e3o come\u00e7a com o til. // c# [...] // C\u00f3digo com o namespasce class circulo { private double _raio ; public double raio { get { return _raio ;} set { _raio = value ;} } public circulo () // construtor 1 { _raio = 0 ; } public circulo ( int R ) // construtor 2 { _raio = R ; } ~ circulo { Console . WriteLine ( \"Adeus, mundo cruel!\" ); } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } Os detalhes de como um computador funciona s\u00e3o estudados em Estrutura de Computadores mas, para adiantar, algumas linguagens tem um programa chamado garbage colector que \u00e9 respons\u00e1vel pela reutiliza\u00e7\u00e3o de slots de mem\u00f3ria que est\u00e3o sendo usados por objetos que n\u00e3o tem mais utiliza\u00e7\u00e3o no c\u00f3digo. Em c# n\u00f3s n\u00e3o precisamos explicitamente eliminar um objeto porque o pr\u00f3prio garbage colector faz esse trabalho.","title":"Destrutores"},{"location":"nav/PUC/periodo1/algoritmos_e_abstracao/#bibliografia","text":"ASCENCIO, Ana Fernanda Gomes; CAMPOS, Edilene Aparecida Veneruchi de. Fundamentos da programa\u00e7\u00e3o de computadores . S\u00e3o Paulo: Pearson, 2012. ISBN 9788564574168 SOUZA, Marco A. Furlan de; GOMES, Marcelo Marques; SOARES, Marcio Vieira; CONC\u00cdLIO, Ricardo. Algoritmos e l\u00f3gica de programa\u00e7\u00e3o: um texto introdut\u00f3rio para a engenharia . S\u00e3o Paulo: Cengage Learning, 2019. ISBN: 9788522128150 AGUILAR, Luis Joyanes. Fundamentos de programa\u00e7\u00e3o algoritmos, estruturas de dados e objetos . 3. ed. Porto Alegre: AMGH, 2008. ISBN: 9788580550146 DEITEL, Harvey M; DEITEL, Paul J. Java - como programar . 8. ed. S\u00e3o Paulo: Pearson, 2010. ISBN 9788576055631 GRIFFITHS, Ian. Programming C# 8.0 . O'Reilly Media, Inc. 2019. ISBN 9781492056812 MANZANO, Jos\u00e9 Augusto N. G; OLIVEIRA, Jayr Figueiredo de. Algoritmos: l\u00f3gica para desenvolvimento de programa\u00e7\u00e3o de computadores . 28. ed. rev. e atual. S\u00e3o Paulo, SP: \u00c9rica, 2016. E-book. ISBN 9788536518657 PRICE, Mark J. C# 8.0 and T Core 3.0 - Modern Cross - Platform Development . O'Reilly Media; 2019. ISBN 9781788478120 PUGA, Sandra; RISSETTI, Gerson. L\u00f3gica de programa\u00e7\u00e3o e estruturas de dados com aplica\u00e7\u00f5es em Java . 2. ed. S\u00e3o Paulo: Prentice Hall, 2009. ISBN 9788576052074 Isso \u00e9 muito legal! \u21a9","title":"Bibliografia"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/","text":"hljs.initHighlightingOnLoad(); Assuntos L\u00f3gica de Programa\u00e7\u00e3o e Estrutura de Controle, Fun\u00e7\u00f5es e Procedimentos Conceito de Algoritmo Vari\u00e1veis Etapas de um Algoritmo e Operador de Atribui\u00e7\u00e3o Estrutura Sequencial Estrutura Condicional Estrutura de Repeti\u00e7\u00e3o Manipula\u00e7\u00e3o de Dados em Mem\u00f3ria Prim\u00e1ria e Secund\u00e1ria Criando e Usando Fun\u00e7\u00f5es e Procedimentos Passagem de Par\u00e2metros Manipula\u00e7\u00e3o de Arquivos em C# Bibliografia L\u00f3gica de Programa\u00e7\u00e3o e Estrutura de Controle, Fun\u00e7\u00f5es e Procedimentos Conceito de Algoritmo Em resumo, um algoritmo \u00e9 uma sequ\u00eancia de ordens que, se seguidas, deve gerar um resultado previsto e desejado. N\u00e3o vale muito a pena aprofundar al\u00e9m disso agora. Vari\u00e1veis Uma vari\u00e1vel \u00e9 uma posi\u00e7\u00e3o na mem\u00f3ria do computador. Isso mesmo, \u00e9 algo com endere\u00e7o definido, nada solto no universo ou obscuro dentro da m\u00e1quina. Esse dado \u00e9 gravado para posterior leitura por parte do programa que est\u00e1 sendo executado. Podemos ter como origem do dado o pr\u00f3prio programa que est\u00e1 sendo executado ou o usu\u00e1rio por meio da entrada de dados ou, ainda, a leitura de dados previamente armazenados na mem\u00f3ria do computador. Cada vari\u00e1vel possui v\u00e1rios tipos de atributos que podemos elencar na lista abaixo: Tem um endere\u00e7o na mem\u00f3ria Possui um nome de identifica\u00e7\u00e3o Armazena um valor Possui um tipo de dados: Num\u00e9rico - Inteiros e Reais (Double ou Ponto Flutuante) 1 N\u00e3o num\u00e9rico - L\u00f3gico e Caractere Arranjos - Vetores e Matrizes Arquivos etc O endere\u00e7o da mem\u00f3ria \u00e9 feita pelos endere\u00e7os que possuem apenas 2 est\u00e1gios de registro: 0 ou 1. Um bit \u00e9 exatamente essa medida de registo. 1 byte \u00e9 composto de 8bits. 1 kilobyte cont\u00e9m 1024bytes ( \\(2^{10}\\) ). 1 megabyte cont\u00e9m 1024KB ( \\(2^{20}\\) ). 1 gigabyte cont\u00e9m 1024MB ( \\(2^{30}\\) ). 1 terabyte possui 1024GB ( \\(2^{40}\\) ). Ou seja, se um computador possui 3 gigas de mem\u00f3ria RAM, ele tem 3 bilh\u00f5es de bytes como endere\u00e7os dispon\u00edveis para um registro na mem\u00f3ria 2 . Cada byte possui um endere\u00e7o \u00fanico. Na mem\u00f3ria RAM costuma-se usar a base Hexadecimal para definir os endere\u00e7os. Vamos ver isso melhor na mat\u00e9ria de Arquitetura de Computadores. Tamb\u00e9m vimos que as vari\u00e1veis possuem identificadores. Em c# existem regras para a cria\u00e7\u00e3o dos identificadores: Devem come\u00e7ar com uma letra N\u00e3o podem ter espa\u00e7os N\u00e3o podem usar uma das palavras reservadas pela linguagem \u00c9 case sensitive, ou seja, o nome \"Var\" \u00e9 diferente do nome \"var\" O identificador deve sempre ter algum sentido que permita a r\u00e1pida interpreta\u00e7\u00e3o por parte de algum leitor do c\u00f3digo fonte da aplica\u00e7\u00e3o. Isso \u00e9 fundamental para manuten\u00e7\u00e3o de c\u00f3digos produzidos por v\u00e1rias pessoas diferentes. Entretanto, devemos evitar nomes de vari\u00e1veis muito grandes. Na verdade, quanto menor o nome, mantido o sentido na leitura, melhor. Outra boa pr\u00e1tica \u00e9 usar o camelCase para vari\u00e1veis com mais de uma palavra. Esse padr\u00e3o \u00e9 bem simples: primeira palavra em min\u00fasculo e a segunda com a primeira letra em mai\u00fascula. Declara\u00e7\u00e3o de Vari\u00e1veis em c# Vamos aprender agora como declarar os 4 tipos mais simples de vari\u00e1veis: int para definir inteiros double ou float para definir n\u00fameros reais string para cadeia de caracteres bool para as vari\u00e1veis booleanas ( true ou false ) Coment\u00e1rio: c# \u00e9 uma linguagem fortemente tipada, entretanto, existe um tipo de tipagem impl\u00edcita que \u00e9 muito usado na pr\u00e1tica onde o pr\u00f3prio compilador \"interpreta\" o tipo de vari\u00e1vel. Ao longo desse microfundamento n\u00f3s vamos usar apenas os tokens de tipagem expl\u00edcita. Mas vale muito a pena a leitura da documenta\u00e7\u00e3o oficial nesse link . // c# static void Main ( string [] args ) { int idade , numero ; double peso , salario ; string nomePai , rua , dtNasc ; bool temCasa ; } Nesse c\u00f3digo acima temos a declara\u00e7\u00e3o de v\u00e1rias vari\u00e1veis de cada tipo. Basta colocar o tipo da vari\u00e1vel seguido do nome de cada uma delas separadas por v\u00edrgula. Coment\u00e1rio: Em c# todas as linhas precisam conter um car\u00e1cter de encerramento que \u00e9 o ponto e v\u00edrgula ; . Sem esse token, o computador vai interpretar a pr\u00f3xima linha como sendo a continua\u00e7\u00e3o da anterior. Etapas de um Algoritmo e Operador de Atribui\u00e7\u00e3o Podemos resumir um algoritmo simples como contendo apenas 3 etapas: 1) A entrada de dados; 2) O processamento e 3) A sa\u00edda de dados. Na etapa de processamento, podemos precisar de grande criatividade e esfor\u00e7o para produzir a sa\u00edda de dados desejada. Como ferramenta para alcance desse objetivo, temos as estruturas b\u00e1sicas que s\u00e3o: Estrutura Sequencial - Usada para garantir a ordem correta dos passos Estrutura Condicional - Usada para permitir contexto ou cen\u00e1rios Estrutura de Repeti\u00e7\u00e3o - Usada para evitar repetir c\u00f3digo sequencial Operador de Atribui\u00e7\u00e3o Uma vez que j\u00e1 sabemos como atribuir uma vari\u00e1vel ao seu tipo, precisamos aprender a como atribuir um valor a essas vari\u00e1veis. Em c# a atribui\u00e7\u00e3o de valor \u00e9 feita do seguinte modo: // c# idade = 28 ; numero = 9992233 ; \u00c9 poss\u00edvel fazer 3 tipos de atribui\u00e7\u00e3o de valor para uma vari\u00e1vel: Valor fixo; Conte\u00fado de outra vari\u00e1vel e Express\u00e3o aritm\u00e9tica ou booliana. Abaixo temos 3 exemplo disso. // c# idade = 28 ; // Valor fixo numero = idade ; // Valor de outra vari\u00e1vel idadeNum = idade + numero ; // Valor por express\u00e3o idadeEqNum = idade == numero ; // Valor por express\u00e3o booliana Nesse ponto vale uma reflex\u00e3o. Ser\u00e1 que sempre precisamos separar as etapas de atribui\u00e7\u00e3o do tipo de dados e do valor? Ou podemos, no mesmo momento, definir o tipo de dados e o valor da vari\u00e1vel? A resposta, para nossa sorte, \u00e9 que \u00e9 poss\u00edvel em c# atribui\u00e7\u00e3o de tipo e valor ao mesmo tempo. A sintaxe fica desse modo: // c# int idade = 28 ; int numero = idade ; double = 2.3 ; string nome = \"bruno\" ; int idadeNum = idade + numero ; bool idadeEqNum = idade == numero ; Sa\u00eddas de Dados Agora que fizemos esse pequeno desvio no assunto, vamos retornar para as estruturas. Por incr\u00edvel que pare\u00e7a, \u00e9 melhor a gente come\u00e7ar pelo final. A etapa de sa\u00edda de dados. Em c# temos duas maneiras de sa\u00edda de dados: // c# // Imprime a informa\u00e7\u00e3o e cursor fica na mesma linha Console . Write ( ' string ' ); // Imprime a info mas o curso vai pra proxima linha Console . WriteLine ( ' string ' + var1 + ' string ' ); Nesses exemplos a gente pode perceber que podemos concatenar textos e vari\u00e1veis textuais por meio do operador de soma. Al\u00e9m dessa forma, podemos fazer uso de PlaceHolders ou Interpola\u00e7\u00e3o de string como nos exemplos abaixo. // c# string nome = \"Bruno\" ; // Concatena\u00e7\u00e3o Console . WriteLine ( \"Meu nome \u00e9 \" + nome + \", obrigado!\" ); // PlaceHolder Console . WriteLine ( \"Meu nome \u00e9 {0}, obrigado!\" , nome ); // Interpola\u00e7\u00e3o Console . WriteLine ( $\"Meu nome \u00e9 {nome}, obrigado!\" ); Os tr\u00eas exemplos geram o mesmo resultado mas s\u00e3o consideravelmente diferentes no m\u00e9todo. Podemos usar o que for mais agrad\u00e1vel para uma leitura do c\u00f3digo e posterior manuten\u00e7\u00e3o do mesmo. Entrada de Dados Agora que sabemos como fazer nosso programa imprimir resultados, vamos aprender como inputar dados nele. Em c# podemos inserir dados com o seguinte comando: // c# variavel = Console . ReadLine (); O input captado por esse comando sempre retorna uma string . Mas as vezes precisamos nos certificar que o input foi feito da maneira correta. Para isso podemos manipular os dados inseridos do seguinte modo: // c# // Valores Inteiros variavel = int . Parse ( Console . ReaLine ()); variavel = Convert . ToInt32 ( Console . ReadLine ()); // Valores Reais variavel = double . Parse ( Console . ReadLine ()); variavel = float . Parse ( Console . ReadLine ()); variavel = Convert . ToDouble ( Console . ReadLine ()); // Valores Booleanos variavel = bool . Parse ( Console . ReadLine ()); // Valores String variavel = Console . ReadLine (); Depois que executamos um dessas maneiras de coletar os dados, \u00e9 de boa pr\u00e1tica fornecermos um output logo ap\u00f3s a entrada do dado. Isso evita aquela sensa\u00e7\u00e3o de d\u00favida se o programa est\u00e1 sendo executado ou n\u00e3o. Ou seja, \u00e9 bom sempre manter a dupla ReadLine() com o WriteLine() . O nome que damos para essa dupla \u00e9 \"Prompt\". Outra dica boa \u00e9 usar o comando Console.ReadKey() no final do programa. Isso faz com que o console aguarde alguma tecla para finalizar. Evita que a aplica\u00e7\u00e3o abra e feche sem que o user consiga enxergar o resultado do processo. Estrutura Sequencial Agora que sabemos como receber valores do usu\u00e1rio e como devolver nova informa\u00e7\u00e3o a partir do processamento, vamos come\u00e7ar a estudar a etapa de processamento atrav\u00e9s do estudo das estruturas sequenciais. Operadores e Fun\u00e7\u00f5es Aritm\u00e9ticas Em c# n\u00f3s temos os seguintes tokens para realizar as opera\u00e7\u00f5es aritm\u00e9ticas: + Soma - Subtra\u00e7\u00e3o * Multiplica\u00e7\u00e3o / Divis\u00e3o % Resto da Divis\u00e3o inteira Al\u00e9m disso, temos a presen\u00e7a do que podemos chamar de operadores de atribui\u00e7\u00e3o combinada . Que faz a atribui\u00e7\u00e3o de valor com alguma opera\u00e7\u00e3o aritm\u00e9tica: soma += 100 \u00e9 igual a soma = soma + 100 subtracao -= 10 \u00e9 igual a subtracao = subtracao - 10 multiplica *= 2 \u00e9 igual a multiplica = multiplica * 2 divide /= 3 \u00e9 igual a divide = divide / 3 resto \\%= 2 \u00e9 igual a resto = resto / 2 N\u00e3o bastando essa grande variedade, temos os operadores de incremento e decremento : Pr\u00e9-incremento ( ++x ) - Usa x + 1 antes do processamento P\u00f3s-incremento ( x++ ) - Usa x + 1 ap\u00f3s o processamento Pr\u00e9-decr\u00e9scimo ( --x ) - Usa x - 1 antes do processamento P\u00f3s-decr\u00e9scimo ( x-- ) - Usa x -1 ap\u00f3s o processamento Essa diferen\u00e7a de pre e p\u00f3s \u00e9 importante para as estruturas de repeti\u00e7\u00e3o, porque podemos lidar com \u00edndices de tabelas que come\u00e7am com valores diferentes. Mas, no geral, devemos olhar cada caso para escolher o que usar. Existem outras opera\u00e7\u00f5es que est\u00e3o contidas em um objeto nativo chamado Math . Para fazermos potencia\u00e7\u00e3o usamos o m\u00e9todo Math.Pow() . Para fazermos raiz quadrada podemos usar Math.Sqrt() 3 . Express\u00f5es Aritm\u00e9ticas Agora podemos juntar tudo que vimos em um programa simples de c\u00e1lculo da m\u00e9dia de 5 valores. O c\u00f3digo e o seu resultado podem ser vistos abaixo. // c# // Declara\u00e7\u00e3o dos tipos das vari\u00e1veis int n1 , n2 , n3 , n4 , n5 , soma ; float media ; // Input dos dados Console . WriteLine ( \"Programa para c\u00e1lculo da m\u00e9dia de 5 valores.\" ); Console . WriteLine ( \"Por favor, forne\u00e7a o primeiro n\u00famero\" ); n1 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o segundo n\u00famero\" ); n2 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o terceiro n\u00famero\" ); n3 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o quarto n\u00famero\" ); n4 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o quinto n\u00famero\" ); n5 = Convert . ToInt32 ( Console . ReadLine ()); // Processamento soma = n1 + n2 + n3 + n4 + n5 ; media = soma / 5 ; // Output dos dados Console . WriteLine ( \"Os n\u00fameros fornecidos foram:\" ); Console . WriteLine ( \"N1={0},N2={1},N3={2},N4={3},N5={4}\" , n1 , n2 , n3 , n4 , n5 ); Console . WriteLine ( \"Cuja m\u00e9dia \u00e9 igual a {0}\" , media ); Outro exemplo que podemos usar \u00e9 o do c\u00e1lculo das ra\u00edzes de uma fun\u00e7\u00e3o de segundo grau 4 . O programa abaixo recebe 3 valores e calcula as ra\u00edzes, a imagem logo ap\u00f3s nos mostra o resultado no prompt de comando. // c# // Programa para calcular o valor de x em uma equa\u00e7\u00e3o de segundo grau // Declara\u00e7\u00e3o das vari\u00e1veis double a , b , c , x1 , x2 ; Console . WriteLine ( \"Vamos resolver uma equa\u00e7\u00e3o do tipo ax^2 + bx + c = 0\" ); // Input das variaveis Console . WriteLine ( \"Qual o valor de a? \" ); a = Convert . ToDouble ( Console . ReadLine ()); Console . WriteLine ( \"Qual o valor de b? \" ); b = Convert . ToDouble ( Console . ReadLine ()); Console . WriteLine ( \"Qual o valor de c? \" ); c = Convert . ToDouble ( Console . ReadLine ()); x1 = ( - b + Math . Sqrt ( Math . Pow ( b , 2 ) - 4 * a * c )) / 2 * a ; x2 = ( - b - Math . Sqrt ( Math . Pow ( b , 2 ) - 4 * a * c )) / 2 * a ; // Output dos resultados Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( \"Resultado: x1 = {0} e x2 = {1}\" , x1 , x2 ); A essa altura j\u00e1 aprendemos como criar programas inteiros com as etapas de software que vimos anteriormente: input, processamento e output. Tudo isso em c#. Entretanto, no estado atual do c\u00f3digo, nossos programas n\u00e3o est\u00e3o muito competentes em se adaptar a diferentes tipos de inputs ou resultados. Um exemplo pr\u00e1tico \u00e9 que, nesse segundo programa, podemos ter inputs que retornem um resultado indesejado como podemos ver na imagem abaixo. Estrutura Condicional A necessidade de lidarmos com diferentes situa\u00e7\u00f5es ou contextos \u00e9 o que nos leva a estudarmos as estruturas condicionais . Por meio dessas estruturas, podemos construir diferentes outputs de acordo com qualquer l\u00f3gica que implementarmos e, com isso, evitar v\u00e1rios bugs nos nossos programas. Operadores Relacionais Ao lidarmos com estrutura condicionais n\u00f3s temos alguns operadores que nada mais s\u00e3o do que express\u00f5es l\u00f3gicas que retornam apenas 2 resultados poss\u00edveis: true ou false. Esses operadores s\u00e3o como \"gatilhos\"\\ que s\u00e3o usados para controle do fluxo de processamento do c\u00f3digo. Operador Opera\u00e7\u00e3o Exemplo == Igualdade n1 == n2 < Menor a < 10 > Maio b > 1 <= Menor igual c <= 2 >= Maior igual d >= 22 != Desigualdade e != 100 Na tabela acima, temos os operadores relacionais que s\u00e3o usados ao longo das estruturas condicionais simples e compostas. Tome cuidado com o operador de igualdade == e o de atribui\u00e7\u00e3o = , afinal, eles usam o sinal de igualdade mas significam coisas diferentes. Condi\u00e7\u00e3o Simples e Composta Em c# o comando usado para criar uma condi\u00e7\u00e3o simples \u00e9 o if . Se a condi\u00e7\u00e3o que colocarmos atrelada ao comando if retornar um true, o bloco de c\u00f3digo atribu\u00eddo a ele ser\u00e1 executar, caso contr\u00e1rio, o c\u00f3digo do bloco ser\u00e1 ignorado. // c# // Parte condicional no calculo da equa\u00e7\u00e3o de segundo grau delta = ( Math . Pow ( b , 2 ) - 4 * a * c ); // Output dos resultados com condi\u00e7\u00e3o if ( delta >= 0 ) { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: x1 = {0} e x2 = {1}\" , x1 , x2 ); }; if ( delta < 0 ) { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: X n\u00e3o possui raiz real! \" ); }; Com essa adapta\u00e7\u00e3o, nosso c\u00f3digo estar\u00e1 preparado para o caso onde o interior da raiz (que chamamos de delta) seja negativo. Mas podemos ver que o nosso c\u00f3digo ficou um pouco esquisito. Criamos dois blocos de c\u00f3digo que s\u00e3o, claramente, relacionados entre si: Se um bloco for executado, o outro n\u00e3o ser\u00e1. Para facilitar o trabalho com essas situa\u00e7\u00f5es, as linguagens de programa\u00e7\u00e3o possuem as estruturas de condi\u00e7\u00e3o compostas. Esses s\u00e3o os casos onde, se o teste l\u00f3gico retorna true, executamos um bloco, ou o outro bloco ser\u00e1 executado caso o resultado l\u00f3gico seja false. Com isso evitamos ter que criar dois testes com if . O token usado em c# para uma condi\u00e7\u00e3o com dois blocos de c\u00f3digos (ou seja, uma condicional composta) \u00e9 o if-else . Abaixo n\u00f3s reescrevemos a solu\u00e7\u00e3o anterior mas agora fazendo uso do condional composto. // c# // Parte condicional no calculo da equa\u00e7\u00e3o de segundo grau delta = ( Math . Pow ( b , 2 ) - 4 * a * c ); // Output dos resultados com condi\u00e7\u00e3o if ( delta >= 0 ) { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: x1 = {0} e x2 = {1}\" , x1 , x2 ); } else { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: X n\u00e3o possui raiz real! \" ); }; Agora sim nosso c\u00f3digo est\u00e1 elegante e adaptado para as duas sa\u00eddas poss\u00edveis de resultado para os inputs do usu\u00e1rio. Operadores Booleanos e Comandos IF Aninhados N\u00f3s aprendemos que o bloco de c\u00f3digo ser\u00e1 executado sempre que a express\u00e3o l\u00f3gica retornar um resultado true. Tamb\u00e9m vimos que existem os operadores relacionais que nos ajudam a construir essas express\u00f5es. Agora, vamos aprender os operadores booleanos que nada mais s\u00e3o do que os operadores l\u00f3gicos cl\u00e1ssicos ( \\(\\land, \\lor, \\neg\\) ). Operador Opera\u00e7\u00e3o Exemplo && (AND) true se tudo for true if (a > 2 && b == 1) | | (OR) true se um for true if (a < 2 | | b != 0) ! (NOT) false se true if (!(x==y)) Existem problemas que requerem mais de dois resultados no output. Nesse caso, n\u00e3o \u00e9 suficiente usarmos apenas os tokens de condicional composto if-else da maneira como aprendemos at\u00e9 agora. Para resolver esse problema temos a t\u00e9cnica de IF aninhados (nested) e a de IF escada (ladder). As duas formas produzem o mesmo resultado mas mudam significativamente legibilidade do nosso c\u00f3digo. Abaixo temos um exemplo de cada. // c# // Leadder IF if ( condicao1 ) comando1 ; else if ( condicao2 ) comando2 ; else if ( condicao3 ) comando3 ; ... else if ( condicao_n - 1 ) comando_n - 1 ; else comando_n ; // c# // Nested IF if ( condicao1 ) comando1 ; else if ( condicao2 ) comando2 ; else if ( condicao3 ) comando3 ; else if ( condicao4 ) comando4 ; ... else if ( condicao_n - 1 ) comando_n - 1 ; else comando_n ; O Comando Switch e o Operador Tern\u00e1rio Agora que aprendemos a lidar com v\u00e1rios casos condicionais encadeados, podemos construir solu\u00e7\u00f5es relativamente complexas com v\u00e1rias sa\u00eddas diferentes. Entretanto, quando tempos muitas situa\u00e7\u00f5es poss\u00edveis, o nosso c\u00f3digo pode ficar um pouco ruim de ser lido por outras pessoas. Pensando nessa necessidade, os criadores do c# criaram um operador que simplifica ainda mais nosso trabalho. Sim, \u00e9 isso mesmo, n\u00f3s acabamos de aprender IFs aninhados e em escada e j\u00e1 vamos aprender uma maneira melhor de fazer exatamente o que eles fazem. Se acostume com isso. Em tecnologia existem quase sempre v\u00e1rias maneiras de se chegar no mesmo resultado. O operador que \u00e9 mais indicado para lidar com v\u00e1rias situa\u00e7\u00f5es de sa\u00edda \u00e9 o switch-case . Cuja constru\u00e7\u00e3o \u00e9 bem mais leg\u00edvel que os IFs anteriores. Abaixo temos um exemplo. // c# // Lidando com varias condi\u00e7\u00f5es com switch/case switch ( opcao ) { case op1 : comandos1 ; break ; case op2 : comandos2 ; break ; case op3 : comandos3 ; break ; ... case op_n : comandos_n ; break ; default : // bloco que sera executado se nenhuma // das anteriores for escolhida; } Coment\u00e1rio: Existem v\u00e1rias maneiras de se usar o switch. Eu n\u00e3o vou me aprofundar agora em todas elas. Mas vale muito a pena fazer uso dessa ferramenta para cen\u00e1rios de v\u00e1rias intera\u00e7\u00f5es poss\u00edveis ou m\u00faltiplas sa\u00eddas contextuais. Para finalizar o nosso estudo das estruturas condicionais, vamos aprender como trabalhar com o Operador tern\u00e1rio . Esse nome \u00e9 relativo ao n\u00famero de operandos que esse comando usa (no caso, 3). // c# condicao ? expressao_true : expressao_false A condi\u00e7\u00e3o \u00e9 uma express\u00e3o l\u00f3gica (que usa operadores relacionais e booleanos) que s\u00f3 pode retornar true ou false. A express\u00e3o logo ap\u00f3s o ponto de interroga\u00e7\u00e3o ser\u00e1 o retorno do operador em caso de true. A express\u00e3o ap\u00f3s os dois pontos \u00e9 o retorno em caso de false. Sim, \u00e9 exatamente um caso de if-else s\u00f3 que em apenas uma linha. Como as solu\u00e7\u00f5es podem ficar muito grandes, \u00e9 sempre bom termos em mente que quanto menos linhas, mais f\u00e1cil ser\u00e1 fazer manuten\u00e7\u00e3o nos nossos programas. O operador tern\u00e1rio \u00e9 muito usado por programadores mais experientes. Abaixo temos um exemplo comparando as duas maneiras. // c# // Compara\u00e7\u00e3o entre if-else e operador tern\u00e1rio bool passou ; double nota ; // if-else if ( nota >= 60 ) passou = true ; else passou = false ; // operador ternario passou = nota >= 60 ? true : false // maneira 1 passou = ( nota >= 60 ) ? true : false // maneira 2 Agora podemos ver claramente a vantagem do uso do operador tern\u00e1rio. Estrutura de Repeti\u00e7\u00e3o Como sabemos, ainda temos mais um tipo de estrutura para estudarmos. At\u00e9 agora, aprendemos como estruturar um c\u00f3digo sequencialmente e como criar blocos de c\u00f3digo que s\u00f3 ser\u00e3o executados se determinadas condi\u00e7\u00f5es previamente definidas forem satisfeitas. Agora, vamos aprender como evitar ter que repetir blocos de c\u00f3digos. O c# possui 3 operadores de repeti\u00e7\u00e3o: // c# // tipo 01 while ( condicao ) comando ; // tipo 02 do comando ; while ( condicao ); // tipo 03 for ( inicial ; expressao logica ; atualizacao ) comando ; Vamos ver um exemplo de como nosso c\u00f3digo pode ser reduzir com o uso da estrutura de repeti\u00e7\u00e3o. Primeiro, vamos ver um exemplo onde o programa recebe uma lista de 3 palavras (nome, nome do meio e sobrenome) e depois faz o print. // c# // Programa que recebe nome completo e // depois devolve uma mensagem de boas vindas string nome , mid , last ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Qual seu primeiro nome?\" ); nome = Console . ReadLine (); Console . WriteLine ( \" Qual seu nome do meio?\" ); mid = Console . ReadLine (); Console . WriteLine ( \" Qual seu sobrenome?\" ); last = Console . ReadLine (); Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" ); Agora vamos refazer esse programa usando os 3 tokens de estrutura de repeti\u00e7\u00e3o que o c# nos d\u00e1. Vamos usar a mesma ordem em que elas foram apresentadas. Os Comandos WHILE, DO WHILE e FOR Repeti\u00e7\u00e3o usando WHILE A repeti\u00e7\u00e3o usando o token while \u00e9 condicionada ao resultado de uma express\u00e3o l\u00f3gica. Caso a express\u00e3o l\u00f3gica retorne true, o bloco de c\u00f3digo ser\u00e1 executado at\u00e9 o seu final. Ap\u00f3s a execu\u00e7\u00e3o, \u00e9 feita uma nova verifica\u00e7\u00e3o da express\u00e3o l\u00f3gica. O processo de loop s\u00f3 ser\u00e1 finalizado caso a express\u00e3o l\u00f3gica retorne o valor false. Abaixo temos a refatora\u00e7\u00e3o 5 evitando a repeti\u00e7\u00e3o de partes de partes do c\u00f3digo anterior. // c# // Programa de nomes refatorado com while string nome , mid , last ; int contador ; // nome default nome = \"\" ; mid = \"\" ; last = \"\" ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Por favor, insira o seu nome completo.\" ); Console . WriteLine ( \" Obs. No m\u00e1ximo 3 palavras\" ); contador = 1 ; while ( contador <= 3 ) { Console . WriteLine ( $\" Palavra n\u00ba {contador} do seu nome?\" ); if ( contador == 1 ) nome = Console . ReadLine (); else if ( contador == 2 ) mid = Console . ReadLine (); else if ( contador == 3 ) last = Console . ReadLine (); contador += 1 ; }; Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" ); Agora n\u00f3s temos um loop usando a express\u00e3o \"a vari\u00e1vel contador \u00e9 menor igual a 3?\" sempre que a resposta for sim, o programa perguntar\u00e1 qual a n-\u00e9sima palavra do nome da pessoa. Pode parecer que nesse exemplo o uso do loop mais complicou do que facilitou. Mas o objetivo aqui \u00e9 exercitar o uso desse operador, ent\u00e3o devemos focar em compreender como usar o while. Repeti\u00e7\u00e3o usando DO-WHILE Para a nossa sorte, o operador DO WHILE \u00e9 muito similar ao WHILE. A \u00fanica diferen\u00e7a \u00e9 que primeiro declaramos o bloco de c\u00f3digo e, no final, colocamos a condi\u00e7\u00e3o para sua execu\u00e7\u00e3o. No exemplo abaixo temos o mesmo resultado que o de cima mas usando essa outra estrutura de operador. // c# // Programa de nomes refatorado com do-while string nome , mid , last ; int contador ; // nome default nome = \"\" ; mid = \"\" ; last = \"\" ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Por favor, insira o seu nome completo.\" ); Console . WriteLine ( \" Obs. No m\u00e1ximo 3 palavras\" ); contador = 1 ; do { Console . WriteLine ( $\" Palavra n\u00ba {contador} do seu nome?\" ); if ( contador == 1 ) nome = Console . ReadLine (); else if ( contador == 2 ) mid = Console . ReadLine (); else if ( contador == 3 ) last = Console . ReadLine (); contador += 1 ; } while ( contador <= 3 ); Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" ); Repeti\u00e7\u00e3o usando FOR Quando usamos nosso operador while, foi criada uma vari\u00e1vel contador que era incrementada a cada itera\u00e7\u00e3o at\u00e9 que o teste l\u00f3gico \"menor igual a 3\"\\ retorne false. A vantagem do operador de loop for \u00e9 que podemos fazer isso diretamente no par\u00e2metro da fun\u00e7\u00e3o. O operador de loop for recebe 3 par\u00e2metros, na ordem: condi\u00e7\u00e3o inicial da vari\u00e1vel de controle; express\u00e3o l\u00f3gica (que retorna true ou false) e, por fim, um incremento ou decremento. // c# // Programa de nomes refatorado com for string nome , mid , last ; int contador ; // nome default nome = \"\" ; mid = \"\" ; last = \"\" ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Por favor, insira o seu nome completo.\" ); Console . WriteLine ( \" Obs. No m\u00e1ximo 3 palavras\" ); contador = 1 ; for ( contador = 1 ; contador <= 3 ; contador ++ ) { Console . WriteLine ( $\" Qual a palavra n\u00ba {contador} do seu nome?\" ); if ( contador == 1 ) nome = Console . ReadLine (); else if ( contador == 2 ) mid = Console . ReadLine (); else if ( contador == 3 ) last = Console . ReadLine (); }; Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" ); Contadores e Acumuladores Agora sabemos reduzir nossos c\u00f3digos usando 3 tipos de tokens fornecidos pelo c#. Vamos ver um pouquinho mais a respeito do atributo de contador do loop for . Um contador nada mais \u00e9 do que uma vari\u00e1vel do tipo constante que receber\u00e1 a atualiza\u00e7\u00e3o do seu valor a cada loop. Se a situa\u00e7\u00e3o inicial do nosso contador for igual a 1, a cada itera\u00e7\u00e3o ele receber\u00e1 a express\u00e3o contador = contador + 1 . Podemos criar um contador diretamente no c\u00f3digo atrav\u00e9s da atribui\u00e7\u00e3o do valor pela soma. Ou, podemos usar os operadores de incremento e decremento que aprendemos anteriormente. A cada itera\u00e7\u00e3o em uma estrutura de loop, a vari\u00e1vel receber\u00e1 +1 como incremento ou -1 no caso do decremento. Podemos usar o operador de incremento tanto no bloco de c\u00f3digo de um loop quanto como par\u00e2metro. Em um for , quando colocamos o terceiro par\u00e2metro igual a contador++ , a cada itera\u00e7\u00e3o teremos +1 atribu\u00eddo ao contador. Um acumulador \u00e9 muito parecido com um contador, a diferen\u00e7a \u00e9 que a cada itera\u00e7\u00e3o n\u00f3s podemos adicionar qualquer valor ao acumulador. Por exemplo, se queremos calcular a m\u00e9dia de uma turma, teremos que somar todas as notas e dividir pelo quantitativo dos alunos da turma. Para isso, podemos criar um acumulador chamado soma_notas que recebe, para cada aluno, a nota atrav\u00e9s de um comando parecido com o exemplo a baixo. // c# double soma_notas = 0 ; for ( n_aluno = 0 ; n_alunos <= qtd ; n_aluno ++ ) { soma_notas = soma_notas + nota }; A cada itera\u00e7\u00e3o, somamos o valor da vari\u00e1vel nota \u00e0 vari\u00e1vel soma_notas . Manipula\u00e7\u00e3o de Dados em Mem\u00f3ria Prim\u00e1ria e Secund\u00e1ria Ao longo do material n\u00f3s usamos v\u00e1rias vezes frases como \"a medida que nosso c\u00f3digo cresce\" ou \"para manter a simplicidade no processo de atualiza\u00e7\u00e3o\" e outras frases de mesmo teor. Isso n\u00e3o \u00e9 em v\u00e3o. Quando olhamos os c\u00f3digos dos sistemas operacionais, por exemplo, podemos ver que a quantidade de linhas de c\u00f3digo passam da casa do milh\u00e3o. Manter tudo isso funcionando de modo coeso e atualiz\u00e1vel \u00e9 uma tarefa que demanda muita habilidade e planejamento. Para nos ajudar nesse trabalho, vamos aprender sobre m\u00e9todos de organiza\u00e7\u00e3o de c\u00f3digo atrav\u00e9s do uso de fun\u00e7\u00f5es e procedimentos. Criando e Usando Fun\u00e7\u00f5es e Procedimentos Normalmente, quando estamos desenvolvendo uma solu\u00e7\u00e3o de software, primeiro n\u00f3s criamos um algoritmo que descreve os pormenores o que ser\u00e1 feito e como ser\u00e1 feito. Essa primeira etapa \u00e9 focada na solu\u00e7\u00e3o do problema. A partir dela, devemos pensar em encontrar procedimentos que se repetem ao longo do c\u00f3digo ou que podem ser usados para outros trabalhos similares. Sempre que identificarmos padr\u00f5es que podem ser reutilizados, estamos diante de uma melhoria por modulariza\u00e7\u00e3o. A modulariza\u00e7\u00e3o (tamb\u00e9m chamada de sub-rotinas ou sub-programas) \u00e9 a pr\u00e1tica de reduzir o nosso c\u00f3digo em partes menores que recebem nomes diferentes dependendo da linguagem. Em linguagens orientadas \u00e0 objeto como o c# n\u00f3s chamamos de modulariza\u00e7\u00e3o. A ideia \u00e9 simples: menos linhas, mais f\u00e1cil ser\u00e1 a manuten\u00e7\u00e3o. Esse \u00e9 um valor muito caro no meio do desenvolvimento profissional de software e devemos ter sempre essa postura em mente. Existem dois tipos de m\u00e9todos para modulariza\u00e7\u00e3o: fun\u00e7\u00f5es , que sempre retornam algum valor, e procedimentos que n\u00e3o retornam nenhum valor. Abaixo vemos como criar esses dois tipos. // c# // criando uma fun\u00e7\u00e3o que retorna um inteiro int nome_metodo ( string par1 , float par2 ,..., int parn ) { int valor_resultado ; comando1 ; ... return valor_retorno ; }; // criando um procedimento static void nome_procedimento ( string par1 , double par2 ,..., int parn ) { comando1 ; ... }; Podemos ver que um procedimento em c# recebe esse token void antes de ser criado (ainda n\u00e3o aprenderemos o que significa esse termo static ). Para usarmos um par\u00e2metro n\u00e3o precisamos fazer nenhuma atribui\u00e7\u00e3o, basta chamar-lo com os seus par\u00e2metros preenchidos e atribu\u00eddos ao tipo de vari\u00e1vel correto. No caso de uma fun\u00e7\u00e3o, como ela retorna um resultado, precisamos atribuir o resultado a alguma vari\u00e1vel. Abaixo temos um exemplo de como usar cada um desses m\u00e9todos. // c# // chamando um procedimento nome_procedimento ( par1 , par2 ); // chamando um m\u00e9todo resultado = nome_metodo ( par1 , par2 ); Coment\u00e1rio: Se n\u00e3o queremos usar nenhum par\u00e2metro, basta definir o procedimento ou o m\u00e9todo com os par\u00eanteses vazios, por exemplo, nome_procedimento() . A essa altura voc\u00ea j\u00e1 deve ter percebido que um procedimento nada mais \u00e9 que um tipo de m\u00e9todo. S\u00f3 que ele possui uma regra diferente na hora da cria\u00e7\u00e3o e n\u00e3o pode ter seu resultado atribu\u00eddo a nenhuma vari\u00e1vel. Desse modo, a modulariza\u00e7\u00e3o faz uso de dois m\u00e9todos poss\u00edveis. Passagem de Par\u00e2metros Os par\u00e2metros s\u00e3o vari\u00e1veis que podem ser transferidos (tamb\u00e9m dizemos que eles s\u00e3o \"passados\") para que o nosso m\u00e9todo seja executado. Esses ser\u00e3o os valores que o nosso m\u00e9todo vai receber e processar. Podemos classificar os par\u00e2metros em dois tipos: Formais , que s\u00e3o definidos na declara\u00e7\u00e3o (ou cria\u00e7\u00e3o) do m\u00e9todo e s\u00e3o trabalhados dentro do bloco de c\u00f3digo interno a ele como se fossem vari\u00e1veis novas; e os Reais , que s\u00e3o passados para o m\u00e9todo no momento da invoca\u00e7\u00e3o e ser\u00e3o atribu\u00eddos aos par\u00e2metros formal como representantes das vari\u00e1veis reais. Quanto a passagem desses par\u00e2metros, tamb\u00e9m temos duas nomenclaturas: Passagem por valor que \u00e9 quando o par\u00e2metro real \u00e9 compilado para o par\u00e2metro formal sem altera\u00e7\u00e3o do seu valor original e a Passagem por refer\u00eancia em que a manipula\u00e7\u00e3o feita dentro do bloco de c\u00f3digo \u00e9 espelhada nas vari\u00e1veis de refer\u00eancia fora do nosso m\u00e9todo. Quando usamos a passagem por valor, estamos usando os par\u00e2metros do tipo formais. Quando usamos a passagem por refer\u00eancia estamos usando os par\u00e2metros reais. // c# int a = 5 , b = 7 ; // exemplo de passagem por valor static void passagemValor ( int x , int y ) { int temp = x ; x = y ; x = temp } passagemValor ( a , b ); Console . Write ( $\"a = {a} e b = {b}\" ); > a = 5 e b = 7 // exemplo de passagem por refer\u00eancia static void passagemRef ( ref int x , ref int y ) { int temp = x ; x = y ; y = temp ; } passagemRef ( ref a , ref b ); Console . Write ( $\"a = {a} e b = {b}\" ); > a = 7 e b = 5 Dicas e Boas Pr\u00e1ticas o m\u00e9todo Main() \u00e9 uma fun\u00e7\u00e3o especial de um programa escrito em c#. Ele \u00e9 automaticamente executado quando o programa \u00e9 iniciado e todos os outros m\u00e9todos est\u00e3o contidos dentro dele. Um m\u00e9todo deve ser o menor poss\u00edvel . Se o objetivo \u00e9 simplificar, devemos evitar ao m\u00e1ximo ter grandes blocos de c\u00f3digo dentro de um m\u00e9todo. Se est\u00e1 grande demais, n\u00e3o seria melhor quebrar em m\u00e9todos menores? Sempre devemos colocar nomes relevantes e esclarecedores. Devemos evitar ter m\u00e9todos com um n\u00famero muito elevado de par\u00e2metros. Cabe a mesma l\u00f3gica sobre o tamanho: n\u00e3o seria melhor quebrar em mais m\u00e9todos? Agora que aprendemos mais sobre o m\u00e9todos e boas pr\u00e1ticas, podemos entender bem melhor a estrutura padr\u00e3o de uma aplica\u00e7\u00e3o em c#. // c# using System ; public class Program { public static void Main () { Console . WriteLine ( \"Hello World\" ); } } Ainda n\u00e3o sabemos tudo que est\u00e1 nesse template padr\u00e3o de programa em c# mas, definitivamente, j\u00e1 podemos dizer que entendemos algumas coisas desse c\u00f3digo. Manipula\u00e7\u00e3o de Arquivos em C# Aprendemos que um programa pode ser separado em 3 etapas e, at\u00e9 agora, todo o input da informa\u00e7\u00e3o bem como o output est\u00e1 sendo feito via janela do terminal ou prompt de comando. Mas na vida real, \u00e9 super raro (se \u00e9 que acontece) de um usu\u00e1rio leigo ter que ficar usando o terminal para interagir com aplica\u00e7\u00f5es. Uma outra maneira de coletarmos informa\u00e7\u00e3o como input para o nosso processamento \u00e9 por meio da leitura de arquivos e, consequentemente, tamb\u00e9m podemos ter como output do nosso c\u00f3digo a escrita de um arquivo na mem\u00f3ria do computador. Para facilitar nossa vida, o c# j\u00e1 possui algumas classes (que podemos pensar como se fossem sin\u00f4nimos de objetos) que foram criadas especialmente para lidar com esse trabalho. Essas classes de manipula\u00e7\u00e3o de arquivos est\u00e3o guardadas em um namespace chamado System.IO 6 As classes que aprenderemos aqui s\u00e3o: StreamReader - Para cria\u00e7\u00e3o de um fluxo de leitura do arquivo para o programa StreamWriter - Para cria\u00e7\u00e3o de um fluxo de sa\u00edda ou grava\u00e7\u00e3o do programa para o arquivo A manipula\u00e7\u00e3o feita por um programa em um arquivo \u00e9, basicamente uma dessas opera\u00e7\u00f5es abaixo: Abrir para escrita Abrir para leitura Escrever dados no arquivo Ler dados Fechar o arquivo Agora o termo \"fluxo\" come\u00e7a a ficar mais claro. Para um programa trabalhar um arquivo, ele precisa sinalizar para o sistema operacional que aquele arquivo est\u00e1 sendo trabalhado por ele. Por isso existe esse fluxo de abrir o fluxo, ler ou gravar dados e, por fim, fechar o fluxo. Isso libera o arquivo para ser usado por outros programas. Abrir um arquivo para leitura Um arquivo n\u00e3o pode ser lido usando um instanciamento (que \u00e9 a cria\u00e7\u00e3o de uma vari\u00e1vel do tipo de um objeto definido previamente) atrav\u00e9s do objeto StreamReader . Esse objeto \u00e9 nativo e pode ser invocado sem precisar ser criado anteriormente. E, como todo objeto, possui m\u00e9todos dentro dele (10 pra ser mais preciso) mas n\u00f3s s\u00f3 vamos usar o mais b\u00e1sico. // c# // abrindo um arquivo para a leitura StreamReader NOME = new StreamReader ( \"path.txt\" ); StreamReader NOME = new StreamReader ( \"c:\\temp\\path.txt\" ); StreamReader NOME = new StreamReader ( @\"c: emp\\path.txt\" ); Agora que temos nosso objeto criado, para lermos o conte\u00fado s\u00f3 precisamos usar um dos m\u00e9todos contidos nesse objeto criado. // c# // obtendo o texto string linha = NOME . ReadLine (); // ler todas as linhas de um arquivo linha = NOME . ReadLine (); while ( linha != null ) { ... linha = NOME . ReadLine (); }; Abrir um arquivo para escrita // c# // criando o objeto de leitura em diferentes modos StreamWriter NOME = new StreamWriter ( \"path.txt\" ); StreamWriter NOME = new StreamWriter ( \"c:\\temp\\path.txt\" ); StreamWriter NOME = new StreamWriter ( @\"c: emp\\path.txt\" ); Qualquer arquivo que possa ser lida em um editor de texto (como o notepad) pode ser lida por esse m\u00e9todo. Independente da extens\u00e3o. // c# // usando o par\u00e2metro append (true ou false) // conte\u00fado existente sera apagado StreamWriter NOME = new StreamWriter ( \"path.txt\" , false ); // conte\u00fado existente sera mantido StreamWriter NOME = new StreamWriter ( \"path.txt\" , true ); Agora s\u00f3 precisamos saber como gravar os nossos dados no arquivo de texto. Isso \u00e9 feito de maneira parecida com o comando que mostrava mensagens na tela do terminal de comando. // c# // gravando uma string no arquivo texto aberto arquivo . Write ( string ); // ou arquivo . WriteLine ( string ); Fechando um Arquivo Para fechar o stream, seja na leitura ou na grava\u00e7\u00e3o, usamos o m\u00e9todo Close() para garantir que o arquivo n\u00e3o vai ficar bloqueado por um esquecimento. Sempre devemos fechar os fluxos! Bibliografia Ana Fernanda Gomes ASCENCIO; Edilene Aparecida Veneruchi de CAMPOS. Fundamentos da Programa\u00e7\u00e3o de Computadores: algoritmos, Pascal, C/C++ e Java - 2\u00aa edi\u00e7\u00e3o . S\u00e3o Paulo, SP : Pearson Education do Brasil, 2012 H. DEITEL et. Al. C#: Como Programar . S\u00e3o Paulo: Makron Books, 2003 John SHARP. Microsoft Visual C# 2013 . Grupo A, 2014 Andr\u00e9 Luiz Villar FORBELLONE, Henri Frederico EBERSP\u00c4CHER. L\u00f3gica de programa\u00e7\u00e3o: a constru\u00e7\u00e3o de algoritmos e estruturas de dados . S\u00e3o Paulo: Prentice Hall, 2005. MANZANO, Jos\u00e9 Augusto N. G; OLIVEIRA, Jayr Figueiredo de. Al goritmos: l\u00f3gica para desenvolvimento de programa\u00e7\u00e3o de computadores 28. ed. rev. e atual. S\u00e3o Paulo, SP: \u00c9rica, 2016 Sandra PUGA, Gerson RISSETTI. L\u00f3gica de Programa\u00e7\u00e3o e Estrutura de Dados: com aplica\u00e7\u00f5es em Java - 2\u00aa edi\u00e7\u00e3o . S\u00e3o Paulo : Pearson, 2017 Float possui precis\u00e3o simples e Double possui dupla precis\u00e3o. \u21a9 Isso \u00e9 muito impressionante! \u21a9 Embora a gente saiba que a radicia\u00e7\u00e3o \u00e9 uma pot\u00eancia de fra\u00e7\u00e3o. \u21a9 Se voc\u00ea n\u00e3o se lembra como resolver um problema desse, seu professor da sexta s\u00e9rie est\u00e1 rindo de voc\u00ea nesse exato minuto. \u21a9 Refatorar \u00e9 o processo de mudar o c\u00f3digo e obter o mesmo resultado no final. \u00c9 uma \u00f3tima pr\u00e1tica a ser feita. \u21a9 IO significa Input/Output. \u21a9","title":"Algoritmo e L\u00f3gica"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#assuntos","text":"L\u00f3gica de Programa\u00e7\u00e3o e Estrutura de Controle, Fun\u00e7\u00f5es e Procedimentos Conceito de Algoritmo Vari\u00e1veis Etapas de um Algoritmo e Operador de Atribui\u00e7\u00e3o Estrutura Sequencial Estrutura Condicional Estrutura de Repeti\u00e7\u00e3o Manipula\u00e7\u00e3o de Dados em Mem\u00f3ria Prim\u00e1ria e Secund\u00e1ria Criando e Usando Fun\u00e7\u00f5es e Procedimentos Passagem de Par\u00e2metros Manipula\u00e7\u00e3o de Arquivos em C# Bibliografia","title":"Assuntos"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#logica-de-programacao-e-estrutura-de-controle-funcoes-e-procedimentos","text":"","title":"L\u00f3gica de Programa\u00e7\u00e3o e Estrutura de Controle, Fun\u00e7\u00f5es e Procedimentos"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#conceito-de-algoritmo","text":"Em resumo, um algoritmo \u00e9 uma sequ\u00eancia de ordens que, se seguidas, deve gerar um resultado previsto e desejado. N\u00e3o vale muito a pena aprofundar al\u00e9m disso agora.","title":"Conceito de Algoritmo"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#variaveis","text":"Uma vari\u00e1vel \u00e9 uma posi\u00e7\u00e3o na mem\u00f3ria do computador. Isso mesmo, \u00e9 algo com endere\u00e7o definido, nada solto no universo ou obscuro dentro da m\u00e1quina. Esse dado \u00e9 gravado para posterior leitura por parte do programa que est\u00e1 sendo executado. Podemos ter como origem do dado o pr\u00f3prio programa que est\u00e1 sendo executado ou o usu\u00e1rio por meio da entrada de dados ou, ainda, a leitura de dados previamente armazenados na mem\u00f3ria do computador. Cada vari\u00e1vel possui v\u00e1rios tipos de atributos que podemos elencar na lista abaixo: Tem um endere\u00e7o na mem\u00f3ria Possui um nome de identifica\u00e7\u00e3o Armazena um valor Possui um tipo de dados: Num\u00e9rico - Inteiros e Reais (Double ou Ponto Flutuante) 1 N\u00e3o num\u00e9rico - L\u00f3gico e Caractere Arranjos - Vetores e Matrizes Arquivos etc O endere\u00e7o da mem\u00f3ria \u00e9 feita pelos endere\u00e7os que possuem apenas 2 est\u00e1gios de registro: 0 ou 1. Um bit \u00e9 exatamente essa medida de registo. 1 byte \u00e9 composto de 8bits. 1 kilobyte cont\u00e9m 1024bytes ( \\(2^{10}\\) ). 1 megabyte cont\u00e9m 1024KB ( \\(2^{20}\\) ). 1 gigabyte cont\u00e9m 1024MB ( \\(2^{30}\\) ). 1 terabyte possui 1024GB ( \\(2^{40}\\) ). Ou seja, se um computador possui 3 gigas de mem\u00f3ria RAM, ele tem 3 bilh\u00f5es de bytes como endere\u00e7os dispon\u00edveis para um registro na mem\u00f3ria 2 . Cada byte possui um endere\u00e7o \u00fanico. Na mem\u00f3ria RAM costuma-se usar a base Hexadecimal para definir os endere\u00e7os. Vamos ver isso melhor na mat\u00e9ria de Arquitetura de Computadores. Tamb\u00e9m vimos que as vari\u00e1veis possuem identificadores. Em c# existem regras para a cria\u00e7\u00e3o dos identificadores: Devem come\u00e7ar com uma letra N\u00e3o podem ter espa\u00e7os N\u00e3o podem usar uma das palavras reservadas pela linguagem \u00c9 case sensitive, ou seja, o nome \"Var\" \u00e9 diferente do nome \"var\" O identificador deve sempre ter algum sentido que permita a r\u00e1pida interpreta\u00e7\u00e3o por parte de algum leitor do c\u00f3digo fonte da aplica\u00e7\u00e3o. Isso \u00e9 fundamental para manuten\u00e7\u00e3o de c\u00f3digos produzidos por v\u00e1rias pessoas diferentes. Entretanto, devemos evitar nomes de vari\u00e1veis muito grandes. Na verdade, quanto menor o nome, mantido o sentido na leitura, melhor. Outra boa pr\u00e1tica \u00e9 usar o camelCase para vari\u00e1veis com mais de uma palavra. Esse padr\u00e3o \u00e9 bem simples: primeira palavra em min\u00fasculo e a segunda com a primeira letra em mai\u00fascula.","title":"Vari\u00e1veis"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#declaracao-de-variaveis-em-c","text":"Vamos aprender agora como declarar os 4 tipos mais simples de vari\u00e1veis: int para definir inteiros double ou float para definir n\u00fameros reais string para cadeia de caracteres bool para as vari\u00e1veis booleanas ( true ou false ) Coment\u00e1rio: c# \u00e9 uma linguagem fortemente tipada, entretanto, existe um tipo de tipagem impl\u00edcita que \u00e9 muito usado na pr\u00e1tica onde o pr\u00f3prio compilador \"interpreta\" o tipo de vari\u00e1vel. Ao longo desse microfundamento n\u00f3s vamos usar apenas os tokens de tipagem expl\u00edcita. Mas vale muito a pena a leitura da documenta\u00e7\u00e3o oficial nesse link . // c# static void Main ( string [] args ) { int idade , numero ; double peso , salario ; string nomePai , rua , dtNasc ; bool temCasa ; } Nesse c\u00f3digo acima temos a declara\u00e7\u00e3o de v\u00e1rias vari\u00e1veis de cada tipo. Basta colocar o tipo da vari\u00e1vel seguido do nome de cada uma delas separadas por v\u00edrgula. Coment\u00e1rio: Em c# todas as linhas precisam conter um car\u00e1cter de encerramento que \u00e9 o ponto e v\u00edrgula ; . Sem esse token, o computador vai interpretar a pr\u00f3xima linha como sendo a continua\u00e7\u00e3o da anterior.","title":"Declara\u00e7\u00e3o de Vari\u00e1veis em c#"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#etapas-de-um-algoritmo-e-operador-de-atribuicao","text":"Podemos resumir um algoritmo simples como contendo apenas 3 etapas: 1) A entrada de dados; 2) O processamento e 3) A sa\u00edda de dados. Na etapa de processamento, podemos precisar de grande criatividade e esfor\u00e7o para produzir a sa\u00edda de dados desejada. Como ferramenta para alcance desse objetivo, temos as estruturas b\u00e1sicas que s\u00e3o: Estrutura Sequencial - Usada para garantir a ordem correta dos passos Estrutura Condicional - Usada para permitir contexto ou cen\u00e1rios Estrutura de Repeti\u00e7\u00e3o - Usada para evitar repetir c\u00f3digo sequencial","title":"Etapas de um Algoritmo e Operador de Atribui\u00e7\u00e3o"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#operador-de-atribuicao","text":"Uma vez que j\u00e1 sabemos como atribuir uma vari\u00e1vel ao seu tipo, precisamos aprender a como atribuir um valor a essas vari\u00e1veis. Em c# a atribui\u00e7\u00e3o de valor \u00e9 feita do seguinte modo: // c# idade = 28 ; numero = 9992233 ; \u00c9 poss\u00edvel fazer 3 tipos de atribui\u00e7\u00e3o de valor para uma vari\u00e1vel: Valor fixo; Conte\u00fado de outra vari\u00e1vel e Express\u00e3o aritm\u00e9tica ou booliana. Abaixo temos 3 exemplo disso. // c# idade = 28 ; // Valor fixo numero = idade ; // Valor de outra vari\u00e1vel idadeNum = idade + numero ; // Valor por express\u00e3o idadeEqNum = idade == numero ; // Valor por express\u00e3o booliana Nesse ponto vale uma reflex\u00e3o. Ser\u00e1 que sempre precisamos separar as etapas de atribui\u00e7\u00e3o do tipo de dados e do valor? Ou podemos, no mesmo momento, definir o tipo de dados e o valor da vari\u00e1vel? A resposta, para nossa sorte, \u00e9 que \u00e9 poss\u00edvel em c# atribui\u00e7\u00e3o de tipo e valor ao mesmo tempo. A sintaxe fica desse modo: // c# int idade = 28 ; int numero = idade ; double = 2.3 ; string nome = \"bruno\" ; int idadeNum = idade + numero ; bool idadeEqNum = idade == numero ;","title":"Operador de Atribui\u00e7\u00e3o"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#saidas-de-dados","text":"Agora que fizemos esse pequeno desvio no assunto, vamos retornar para as estruturas. Por incr\u00edvel que pare\u00e7a, \u00e9 melhor a gente come\u00e7ar pelo final. A etapa de sa\u00edda de dados. Em c# temos duas maneiras de sa\u00edda de dados: // c# // Imprime a informa\u00e7\u00e3o e cursor fica na mesma linha Console . Write ( ' string ' ); // Imprime a info mas o curso vai pra proxima linha Console . WriteLine ( ' string ' + var1 + ' string ' ); Nesses exemplos a gente pode perceber que podemos concatenar textos e vari\u00e1veis textuais por meio do operador de soma. Al\u00e9m dessa forma, podemos fazer uso de PlaceHolders ou Interpola\u00e7\u00e3o de string como nos exemplos abaixo. // c# string nome = \"Bruno\" ; // Concatena\u00e7\u00e3o Console . WriteLine ( \"Meu nome \u00e9 \" + nome + \", obrigado!\" ); // PlaceHolder Console . WriteLine ( \"Meu nome \u00e9 {0}, obrigado!\" , nome ); // Interpola\u00e7\u00e3o Console . WriteLine ( $\"Meu nome \u00e9 {nome}, obrigado!\" ); Os tr\u00eas exemplos geram o mesmo resultado mas s\u00e3o consideravelmente diferentes no m\u00e9todo. Podemos usar o que for mais agrad\u00e1vel para uma leitura do c\u00f3digo e posterior manuten\u00e7\u00e3o do mesmo.","title":"Sa\u00eddas de Dados"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#entrada-de-dados","text":"Agora que sabemos como fazer nosso programa imprimir resultados, vamos aprender como inputar dados nele. Em c# podemos inserir dados com o seguinte comando: // c# variavel = Console . ReadLine (); O input captado por esse comando sempre retorna uma string . Mas as vezes precisamos nos certificar que o input foi feito da maneira correta. Para isso podemos manipular os dados inseridos do seguinte modo: // c# // Valores Inteiros variavel = int . Parse ( Console . ReaLine ()); variavel = Convert . ToInt32 ( Console . ReadLine ()); // Valores Reais variavel = double . Parse ( Console . ReadLine ()); variavel = float . Parse ( Console . ReadLine ()); variavel = Convert . ToDouble ( Console . ReadLine ()); // Valores Booleanos variavel = bool . Parse ( Console . ReadLine ()); // Valores String variavel = Console . ReadLine (); Depois que executamos um dessas maneiras de coletar os dados, \u00e9 de boa pr\u00e1tica fornecermos um output logo ap\u00f3s a entrada do dado. Isso evita aquela sensa\u00e7\u00e3o de d\u00favida se o programa est\u00e1 sendo executado ou n\u00e3o. Ou seja, \u00e9 bom sempre manter a dupla ReadLine() com o WriteLine() . O nome que damos para essa dupla \u00e9 \"Prompt\". Outra dica boa \u00e9 usar o comando Console.ReadKey() no final do programa. Isso faz com que o console aguarde alguma tecla para finalizar. Evita que a aplica\u00e7\u00e3o abra e feche sem que o user consiga enxergar o resultado do processo.","title":"Entrada de Dados"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#estrutura-sequencial","text":"Agora que sabemos como receber valores do usu\u00e1rio e como devolver nova informa\u00e7\u00e3o a partir do processamento, vamos come\u00e7ar a estudar a etapa de processamento atrav\u00e9s do estudo das estruturas sequenciais.","title":"Estrutura Sequencial"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#operadores-e-funcoes-aritmeticas","text":"Em c# n\u00f3s temos os seguintes tokens para realizar as opera\u00e7\u00f5es aritm\u00e9ticas: + Soma - Subtra\u00e7\u00e3o * Multiplica\u00e7\u00e3o / Divis\u00e3o % Resto da Divis\u00e3o inteira Al\u00e9m disso, temos a presen\u00e7a do que podemos chamar de operadores de atribui\u00e7\u00e3o combinada . Que faz a atribui\u00e7\u00e3o de valor com alguma opera\u00e7\u00e3o aritm\u00e9tica: soma += 100 \u00e9 igual a soma = soma + 100 subtracao -= 10 \u00e9 igual a subtracao = subtracao - 10 multiplica *= 2 \u00e9 igual a multiplica = multiplica * 2 divide /= 3 \u00e9 igual a divide = divide / 3 resto \\%= 2 \u00e9 igual a resto = resto / 2 N\u00e3o bastando essa grande variedade, temos os operadores de incremento e decremento : Pr\u00e9-incremento ( ++x ) - Usa x + 1 antes do processamento P\u00f3s-incremento ( x++ ) - Usa x + 1 ap\u00f3s o processamento Pr\u00e9-decr\u00e9scimo ( --x ) - Usa x - 1 antes do processamento P\u00f3s-decr\u00e9scimo ( x-- ) - Usa x -1 ap\u00f3s o processamento Essa diferen\u00e7a de pre e p\u00f3s \u00e9 importante para as estruturas de repeti\u00e7\u00e3o, porque podemos lidar com \u00edndices de tabelas que come\u00e7am com valores diferentes. Mas, no geral, devemos olhar cada caso para escolher o que usar. Existem outras opera\u00e7\u00f5es que est\u00e3o contidas em um objeto nativo chamado Math . Para fazermos potencia\u00e7\u00e3o usamos o m\u00e9todo Math.Pow() . Para fazermos raiz quadrada podemos usar Math.Sqrt() 3 .","title":"Operadores e Fun\u00e7\u00f5es Aritm\u00e9ticas"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#expressoes-aritmeticas","text":"Agora podemos juntar tudo que vimos em um programa simples de c\u00e1lculo da m\u00e9dia de 5 valores. O c\u00f3digo e o seu resultado podem ser vistos abaixo. // c# // Declara\u00e7\u00e3o dos tipos das vari\u00e1veis int n1 , n2 , n3 , n4 , n5 , soma ; float media ; // Input dos dados Console . WriteLine ( \"Programa para c\u00e1lculo da m\u00e9dia de 5 valores.\" ); Console . WriteLine ( \"Por favor, forne\u00e7a o primeiro n\u00famero\" ); n1 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o segundo n\u00famero\" ); n2 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o terceiro n\u00famero\" ); n3 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o quarto n\u00famero\" ); n4 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o quinto n\u00famero\" ); n5 = Convert . ToInt32 ( Console . ReadLine ()); // Processamento soma = n1 + n2 + n3 + n4 + n5 ; media = soma / 5 ; // Output dos dados Console . WriteLine ( \"Os n\u00fameros fornecidos foram:\" ); Console . WriteLine ( \"N1={0},N2={1},N3={2},N4={3},N5={4}\" , n1 , n2 , n3 , n4 , n5 ); Console . WriteLine ( \"Cuja m\u00e9dia \u00e9 igual a {0}\" , media ); Outro exemplo que podemos usar \u00e9 o do c\u00e1lculo das ra\u00edzes de uma fun\u00e7\u00e3o de segundo grau 4 . O programa abaixo recebe 3 valores e calcula as ra\u00edzes, a imagem logo ap\u00f3s nos mostra o resultado no prompt de comando. // c# // Programa para calcular o valor de x em uma equa\u00e7\u00e3o de segundo grau // Declara\u00e7\u00e3o das vari\u00e1veis double a , b , c , x1 , x2 ; Console . WriteLine ( \"Vamos resolver uma equa\u00e7\u00e3o do tipo ax^2 + bx + c = 0\" ); // Input das variaveis Console . WriteLine ( \"Qual o valor de a? \" ); a = Convert . ToDouble ( Console . ReadLine ()); Console . WriteLine ( \"Qual o valor de b? \" ); b = Convert . ToDouble ( Console . ReadLine ()); Console . WriteLine ( \"Qual o valor de c? \" ); c = Convert . ToDouble ( Console . ReadLine ()); x1 = ( - b + Math . Sqrt ( Math . Pow ( b , 2 ) - 4 * a * c )) / 2 * a ; x2 = ( - b - Math . Sqrt ( Math . Pow ( b , 2 ) - 4 * a * c )) / 2 * a ; // Output dos resultados Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( \"Resultado: x1 = {0} e x2 = {1}\" , x1 , x2 ); A essa altura j\u00e1 aprendemos como criar programas inteiros com as etapas de software que vimos anteriormente: input, processamento e output. Tudo isso em c#. Entretanto, no estado atual do c\u00f3digo, nossos programas n\u00e3o est\u00e3o muito competentes em se adaptar a diferentes tipos de inputs ou resultados. Um exemplo pr\u00e1tico \u00e9 que, nesse segundo programa, podemos ter inputs que retornem um resultado indesejado como podemos ver na imagem abaixo.","title":"Express\u00f5es Aritm\u00e9ticas"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#estrutura-condicional","text":"A necessidade de lidarmos com diferentes situa\u00e7\u00f5es ou contextos \u00e9 o que nos leva a estudarmos as estruturas condicionais . Por meio dessas estruturas, podemos construir diferentes outputs de acordo com qualquer l\u00f3gica que implementarmos e, com isso, evitar v\u00e1rios bugs nos nossos programas.","title":"Estrutura Condicional"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#operadores-relacionais","text":"Ao lidarmos com estrutura condicionais n\u00f3s temos alguns operadores que nada mais s\u00e3o do que express\u00f5es l\u00f3gicas que retornam apenas 2 resultados poss\u00edveis: true ou false. Esses operadores s\u00e3o como \"gatilhos\"\\ que s\u00e3o usados para controle do fluxo de processamento do c\u00f3digo. Operador Opera\u00e7\u00e3o Exemplo == Igualdade n1 == n2 < Menor a < 10 > Maio b > 1 <= Menor igual c <= 2 >= Maior igual d >= 22 != Desigualdade e != 100 Na tabela acima, temos os operadores relacionais que s\u00e3o usados ao longo das estruturas condicionais simples e compostas. Tome cuidado com o operador de igualdade == e o de atribui\u00e7\u00e3o = , afinal, eles usam o sinal de igualdade mas significam coisas diferentes.","title":"Operadores Relacionais"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#condicao-simples-e-composta","text":"Em c# o comando usado para criar uma condi\u00e7\u00e3o simples \u00e9 o if . Se a condi\u00e7\u00e3o que colocarmos atrelada ao comando if retornar um true, o bloco de c\u00f3digo atribu\u00eddo a ele ser\u00e1 executar, caso contr\u00e1rio, o c\u00f3digo do bloco ser\u00e1 ignorado. // c# // Parte condicional no calculo da equa\u00e7\u00e3o de segundo grau delta = ( Math . Pow ( b , 2 ) - 4 * a * c ); // Output dos resultados com condi\u00e7\u00e3o if ( delta >= 0 ) { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: x1 = {0} e x2 = {1}\" , x1 , x2 ); }; if ( delta < 0 ) { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: X n\u00e3o possui raiz real! \" ); }; Com essa adapta\u00e7\u00e3o, nosso c\u00f3digo estar\u00e1 preparado para o caso onde o interior da raiz (que chamamos de delta) seja negativo. Mas podemos ver que o nosso c\u00f3digo ficou um pouco esquisito. Criamos dois blocos de c\u00f3digo que s\u00e3o, claramente, relacionados entre si: Se um bloco for executado, o outro n\u00e3o ser\u00e1. Para facilitar o trabalho com essas situa\u00e7\u00f5es, as linguagens de programa\u00e7\u00e3o possuem as estruturas de condi\u00e7\u00e3o compostas. Esses s\u00e3o os casos onde, se o teste l\u00f3gico retorna true, executamos um bloco, ou o outro bloco ser\u00e1 executado caso o resultado l\u00f3gico seja false. Com isso evitamos ter que criar dois testes com if . O token usado em c# para uma condi\u00e7\u00e3o com dois blocos de c\u00f3digos (ou seja, uma condicional composta) \u00e9 o if-else . Abaixo n\u00f3s reescrevemos a solu\u00e7\u00e3o anterior mas agora fazendo uso do condional composto. // c# // Parte condicional no calculo da equa\u00e7\u00e3o de segundo grau delta = ( Math . Pow ( b , 2 ) - 4 * a * c ); // Output dos resultados com condi\u00e7\u00e3o if ( delta >= 0 ) { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: x1 = {0} e x2 = {1}\" , x1 , x2 ); } else { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: X n\u00e3o possui raiz real! \" ); }; Agora sim nosso c\u00f3digo est\u00e1 elegante e adaptado para as duas sa\u00eddas poss\u00edveis de resultado para os inputs do usu\u00e1rio.","title":"Condi\u00e7\u00e3o Simples e Composta"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#operadores-booleanos-e-comandos-if-aninhados","text":"N\u00f3s aprendemos que o bloco de c\u00f3digo ser\u00e1 executado sempre que a express\u00e3o l\u00f3gica retornar um resultado true. Tamb\u00e9m vimos que existem os operadores relacionais que nos ajudam a construir essas express\u00f5es. Agora, vamos aprender os operadores booleanos que nada mais s\u00e3o do que os operadores l\u00f3gicos cl\u00e1ssicos ( \\(\\land, \\lor, \\neg\\) ). Operador Opera\u00e7\u00e3o Exemplo && (AND) true se tudo for true if (a > 2 && b == 1) | | (OR) true se um for true if (a < 2 | | b != 0) ! (NOT) false se true if (!(x==y)) Existem problemas que requerem mais de dois resultados no output. Nesse caso, n\u00e3o \u00e9 suficiente usarmos apenas os tokens de condicional composto if-else da maneira como aprendemos at\u00e9 agora. Para resolver esse problema temos a t\u00e9cnica de IF aninhados (nested) e a de IF escada (ladder). As duas formas produzem o mesmo resultado mas mudam significativamente legibilidade do nosso c\u00f3digo. Abaixo temos um exemplo de cada. // c# // Leadder IF if ( condicao1 ) comando1 ; else if ( condicao2 ) comando2 ; else if ( condicao3 ) comando3 ; ... else if ( condicao_n - 1 ) comando_n - 1 ; else comando_n ; // c# // Nested IF if ( condicao1 ) comando1 ; else if ( condicao2 ) comando2 ; else if ( condicao3 ) comando3 ; else if ( condicao4 ) comando4 ; ... else if ( condicao_n - 1 ) comando_n - 1 ; else comando_n ;","title":"Operadores Booleanos e Comandos IF Aninhados"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#o-comando-switch-e-o-operador-ternario","text":"Agora que aprendemos a lidar com v\u00e1rios casos condicionais encadeados, podemos construir solu\u00e7\u00f5es relativamente complexas com v\u00e1rias sa\u00eddas diferentes. Entretanto, quando tempos muitas situa\u00e7\u00f5es poss\u00edveis, o nosso c\u00f3digo pode ficar um pouco ruim de ser lido por outras pessoas. Pensando nessa necessidade, os criadores do c# criaram um operador que simplifica ainda mais nosso trabalho. Sim, \u00e9 isso mesmo, n\u00f3s acabamos de aprender IFs aninhados e em escada e j\u00e1 vamos aprender uma maneira melhor de fazer exatamente o que eles fazem. Se acostume com isso. Em tecnologia existem quase sempre v\u00e1rias maneiras de se chegar no mesmo resultado. O operador que \u00e9 mais indicado para lidar com v\u00e1rias situa\u00e7\u00f5es de sa\u00edda \u00e9 o switch-case . Cuja constru\u00e7\u00e3o \u00e9 bem mais leg\u00edvel que os IFs anteriores. Abaixo temos um exemplo. // c# // Lidando com varias condi\u00e7\u00f5es com switch/case switch ( opcao ) { case op1 : comandos1 ; break ; case op2 : comandos2 ; break ; case op3 : comandos3 ; break ; ... case op_n : comandos_n ; break ; default : // bloco que sera executado se nenhuma // das anteriores for escolhida; } Coment\u00e1rio: Existem v\u00e1rias maneiras de se usar o switch. Eu n\u00e3o vou me aprofundar agora em todas elas. Mas vale muito a pena fazer uso dessa ferramenta para cen\u00e1rios de v\u00e1rias intera\u00e7\u00f5es poss\u00edveis ou m\u00faltiplas sa\u00eddas contextuais. Para finalizar o nosso estudo das estruturas condicionais, vamos aprender como trabalhar com o Operador tern\u00e1rio . Esse nome \u00e9 relativo ao n\u00famero de operandos que esse comando usa (no caso, 3). // c# condicao ? expressao_true : expressao_false A condi\u00e7\u00e3o \u00e9 uma express\u00e3o l\u00f3gica (que usa operadores relacionais e booleanos) que s\u00f3 pode retornar true ou false. A express\u00e3o logo ap\u00f3s o ponto de interroga\u00e7\u00e3o ser\u00e1 o retorno do operador em caso de true. A express\u00e3o ap\u00f3s os dois pontos \u00e9 o retorno em caso de false. Sim, \u00e9 exatamente um caso de if-else s\u00f3 que em apenas uma linha. Como as solu\u00e7\u00f5es podem ficar muito grandes, \u00e9 sempre bom termos em mente que quanto menos linhas, mais f\u00e1cil ser\u00e1 fazer manuten\u00e7\u00e3o nos nossos programas. O operador tern\u00e1rio \u00e9 muito usado por programadores mais experientes. Abaixo temos um exemplo comparando as duas maneiras. // c# // Compara\u00e7\u00e3o entre if-else e operador tern\u00e1rio bool passou ; double nota ; // if-else if ( nota >= 60 ) passou = true ; else passou = false ; // operador ternario passou = nota >= 60 ? true : false // maneira 1 passou = ( nota >= 60 ) ? true : false // maneira 2 Agora podemos ver claramente a vantagem do uso do operador tern\u00e1rio.","title":"O Comando Switch e o Operador Tern\u00e1rio"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#estrutura-de-repeticao","text":"Como sabemos, ainda temos mais um tipo de estrutura para estudarmos. At\u00e9 agora, aprendemos como estruturar um c\u00f3digo sequencialmente e como criar blocos de c\u00f3digo que s\u00f3 ser\u00e3o executados se determinadas condi\u00e7\u00f5es previamente definidas forem satisfeitas. Agora, vamos aprender como evitar ter que repetir blocos de c\u00f3digos. O c# possui 3 operadores de repeti\u00e7\u00e3o: // c# // tipo 01 while ( condicao ) comando ; // tipo 02 do comando ; while ( condicao ); // tipo 03 for ( inicial ; expressao logica ; atualizacao ) comando ; Vamos ver um exemplo de como nosso c\u00f3digo pode ser reduzir com o uso da estrutura de repeti\u00e7\u00e3o. Primeiro, vamos ver um exemplo onde o programa recebe uma lista de 3 palavras (nome, nome do meio e sobrenome) e depois faz o print. // c# // Programa que recebe nome completo e // depois devolve uma mensagem de boas vindas string nome , mid , last ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Qual seu primeiro nome?\" ); nome = Console . ReadLine (); Console . WriteLine ( \" Qual seu nome do meio?\" ); mid = Console . ReadLine (); Console . WriteLine ( \" Qual seu sobrenome?\" ); last = Console . ReadLine (); Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" ); Agora vamos refazer esse programa usando os 3 tokens de estrutura de repeti\u00e7\u00e3o que o c# nos d\u00e1. Vamos usar a mesma ordem em que elas foram apresentadas.","title":"Estrutura de Repeti\u00e7\u00e3o"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#os-comandos-while-do-while-e-for","text":"","title":"Os Comandos WHILE, DO WHILE e FOR"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#repeticao-usando-while","text":"A repeti\u00e7\u00e3o usando o token while \u00e9 condicionada ao resultado de uma express\u00e3o l\u00f3gica. Caso a express\u00e3o l\u00f3gica retorne true, o bloco de c\u00f3digo ser\u00e1 executado at\u00e9 o seu final. Ap\u00f3s a execu\u00e7\u00e3o, \u00e9 feita uma nova verifica\u00e7\u00e3o da express\u00e3o l\u00f3gica. O processo de loop s\u00f3 ser\u00e1 finalizado caso a express\u00e3o l\u00f3gica retorne o valor false. Abaixo temos a refatora\u00e7\u00e3o 5 evitando a repeti\u00e7\u00e3o de partes de partes do c\u00f3digo anterior. // c# // Programa de nomes refatorado com while string nome , mid , last ; int contador ; // nome default nome = \"\" ; mid = \"\" ; last = \"\" ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Por favor, insira o seu nome completo.\" ); Console . WriteLine ( \" Obs. No m\u00e1ximo 3 palavras\" ); contador = 1 ; while ( contador <= 3 ) { Console . WriteLine ( $\" Palavra n\u00ba {contador} do seu nome?\" ); if ( contador == 1 ) nome = Console . ReadLine (); else if ( contador == 2 ) mid = Console . ReadLine (); else if ( contador == 3 ) last = Console . ReadLine (); contador += 1 ; }; Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" ); Agora n\u00f3s temos um loop usando a express\u00e3o \"a vari\u00e1vel contador \u00e9 menor igual a 3?\" sempre que a resposta for sim, o programa perguntar\u00e1 qual a n-\u00e9sima palavra do nome da pessoa. Pode parecer que nesse exemplo o uso do loop mais complicou do que facilitou. Mas o objetivo aqui \u00e9 exercitar o uso desse operador, ent\u00e3o devemos focar em compreender como usar o while.","title":"Repeti\u00e7\u00e3o usando WHILE"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#repeticao-usando-do-while","text":"Para a nossa sorte, o operador DO WHILE \u00e9 muito similar ao WHILE. A \u00fanica diferen\u00e7a \u00e9 que primeiro declaramos o bloco de c\u00f3digo e, no final, colocamos a condi\u00e7\u00e3o para sua execu\u00e7\u00e3o. No exemplo abaixo temos o mesmo resultado que o de cima mas usando essa outra estrutura de operador. // c# // Programa de nomes refatorado com do-while string nome , mid , last ; int contador ; // nome default nome = \"\" ; mid = \"\" ; last = \"\" ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Por favor, insira o seu nome completo.\" ); Console . WriteLine ( \" Obs. No m\u00e1ximo 3 palavras\" ); contador = 1 ; do { Console . WriteLine ( $\" Palavra n\u00ba {contador} do seu nome?\" ); if ( contador == 1 ) nome = Console . ReadLine (); else if ( contador == 2 ) mid = Console . ReadLine (); else if ( contador == 3 ) last = Console . ReadLine (); contador += 1 ; } while ( contador <= 3 ); Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" );","title":"Repeti\u00e7\u00e3o usando DO-WHILE"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#repeticao-usando-for","text":"Quando usamos nosso operador while, foi criada uma vari\u00e1vel contador que era incrementada a cada itera\u00e7\u00e3o at\u00e9 que o teste l\u00f3gico \"menor igual a 3\"\\ retorne false. A vantagem do operador de loop for \u00e9 que podemos fazer isso diretamente no par\u00e2metro da fun\u00e7\u00e3o. O operador de loop for recebe 3 par\u00e2metros, na ordem: condi\u00e7\u00e3o inicial da vari\u00e1vel de controle; express\u00e3o l\u00f3gica (que retorna true ou false) e, por fim, um incremento ou decremento. // c# // Programa de nomes refatorado com for string nome , mid , last ; int contador ; // nome default nome = \"\" ; mid = \"\" ; last = \"\" ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Por favor, insira o seu nome completo.\" ); Console . WriteLine ( \" Obs. No m\u00e1ximo 3 palavras\" ); contador = 1 ; for ( contador = 1 ; contador <= 3 ; contador ++ ) { Console . WriteLine ( $\" Qual a palavra n\u00ba {contador} do seu nome?\" ); if ( contador == 1 ) nome = Console . ReadLine (); else if ( contador == 2 ) mid = Console . ReadLine (); else if ( contador == 3 ) last = Console . ReadLine (); }; Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" );","title":"Repeti\u00e7\u00e3o usando FOR"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#contadores-e-acumuladores","text":"Agora sabemos reduzir nossos c\u00f3digos usando 3 tipos de tokens fornecidos pelo c#. Vamos ver um pouquinho mais a respeito do atributo de contador do loop for . Um contador nada mais \u00e9 do que uma vari\u00e1vel do tipo constante que receber\u00e1 a atualiza\u00e7\u00e3o do seu valor a cada loop. Se a situa\u00e7\u00e3o inicial do nosso contador for igual a 1, a cada itera\u00e7\u00e3o ele receber\u00e1 a express\u00e3o contador = contador + 1 . Podemos criar um contador diretamente no c\u00f3digo atrav\u00e9s da atribui\u00e7\u00e3o do valor pela soma. Ou, podemos usar os operadores de incremento e decremento que aprendemos anteriormente. A cada itera\u00e7\u00e3o em uma estrutura de loop, a vari\u00e1vel receber\u00e1 +1 como incremento ou -1 no caso do decremento. Podemos usar o operador de incremento tanto no bloco de c\u00f3digo de um loop quanto como par\u00e2metro. Em um for , quando colocamos o terceiro par\u00e2metro igual a contador++ , a cada itera\u00e7\u00e3o teremos +1 atribu\u00eddo ao contador. Um acumulador \u00e9 muito parecido com um contador, a diferen\u00e7a \u00e9 que a cada itera\u00e7\u00e3o n\u00f3s podemos adicionar qualquer valor ao acumulador. Por exemplo, se queremos calcular a m\u00e9dia de uma turma, teremos que somar todas as notas e dividir pelo quantitativo dos alunos da turma. Para isso, podemos criar um acumulador chamado soma_notas que recebe, para cada aluno, a nota atrav\u00e9s de um comando parecido com o exemplo a baixo. // c# double soma_notas = 0 ; for ( n_aluno = 0 ; n_alunos <= qtd ; n_aluno ++ ) { soma_notas = soma_notas + nota }; A cada itera\u00e7\u00e3o, somamos o valor da vari\u00e1vel nota \u00e0 vari\u00e1vel soma_notas .","title":"Contadores e Acumuladores"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#manipulacao-de-dados-em-memoria-primaria-e-secundaria","text":"Ao longo do material n\u00f3s usamos v\u00e1rias vezes frases como \"a medida que nosso c\u00f3digo cresce\" ou \"para manter a simplicidade no processo de atualiza\u00e7\u00e3o\" e outras frases de mesmo teor. Isso n\u00e3o \u00e9 em v\u00e3o. Quando olhamos os c\u00f3digos dos sistemas operacionais, por exemplo, podemos ver que a quantidade de linhas de c\u00f3digo passam da casa do milh\u00e3o. Manter tudo isso funcionando de modo coeso e atualiz\u00e1vel \u00e9 uma tarefa que demanda muita habilidade e planejamento. Para nos ajudar nesse trabalho, vamos aprender sobre m\u00e9todos de organiza\u00e7\u00e3o de c\u00f3digo atrav\u00e9s do uso de fun\u00e7\u00f5es e procedimentos.","title":"Manipula\u00e7\u00e3o de Dados em Mem\u00f3ria Prim\u00e1ria e Secund\u00e1ria"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#criando-e-usando-funcoes-e-procedimentos","text":"Normalmente, quando estamos desenvolvendo uma solu\u00e7\u00e3o de software, primeiro n\u00f3s criamos um algoritmo que descreve os pormenores o que ser\u00e1 feito e como ser\u00e1 feito. Essa primeira etapa \u00e9 focada na solu\u00e7\u00e3o do problema. A partir dela, devemos pensar em encontrar procedimentos que se repetem ao longo do c\u00f3digo ou que podem ser usados para outros trabalhos similares. Sempre que identificarmos padr\u00f5es que podem ser reutilizados, estamos diante de uma melhoria por modulariza\u00e7\u00e3o. A modulariza\u00e7\u00e3o (tamb\u00e9m chamada de sub-rotinas ou sub-programas) \u00e9 a pr\u00e1tica de reduzir o nosso c\u00f3digo em partes menores que recebem nomes diferentes dependendo da linguagem. Em linguagens orientadas \u00e0 objeto como o c# n\u00f3s chamamos de modulariza\u00e7\u00e3o. A ideia \u00e9 simples: menos linhas, mais f\u00e1cil ser\u00e1 a manuten\u00e7\u00e3o. Esse \u00e9 um valor muito caro no meio do desenvolvimento profissional de software e devemos ter sempre essa postura em mente. Existem dois tipos de m\u00e9todos para modulariza\u00e7\u00e3o: fun\u00e7\u00f5es , que sempre retornam algum valor, e procedimentos que n\u00e3o retornam nenhum valor. Abaixo vemos como criar esses dois tipos. // c# // criando uma fun\u00e7\u00e3o que retorna um inteiro int nome_metodo ( string par1 , float par2 ,..., int parn ) { int valor_resultado ; comando1 ; ... return valor_retorno ; }; // criando um procedimento static void nome_procedimento ( string par1 , double par2 ,..., int parn ) { comando1 ; ... }; Podemos ver que um procedimento em c# recebe esse token void antes de ser criado (ainda n\u00e3o aprenderemos o que significa esse termo static ). Para usarmos um par\u00e2metro n\u00e3o precisamos fazer nenhuma atribui\u00e7\u00e3o, basta chamar-lo com os seus par\u00e2metros preenchidos e atribu\u00eddos ao tipo de vari\u00e1vel correto. No caso de uma fun\u00e7\u00e3o, como ela retorna um resultado, precisamos atribuir o resultado a alguma vari\u00e1vel. Abaixo temos um exemplo de como usar cada um desses m\u00e9todos. // c# // chamando um procedimento nome_procedimento ( par1 , par2 ); // chamando um m\u00e9todo resultado = nome_metodo ( par1 , par2 ); Coment\u00e1rio: Se n\u00e3o queremos usar nenhum par\u00e2metro, basta definir o procedimento ou o m\u00e9todo com os par\u00eanteses vazios, por exemplo, nome_procedimento() . A essa altura voc\u00ea j\u00e1 deve ter percebido que um procedimento nada mais \u00e9 que um tipo de m\u00e9todo. S\u00f3 que ele possui uma regra diferente na hora da cria\u00e7\u00e3o e n\u00e3o pode ter seu resultado atribu\u00eddo a nenhuma vari\u00e1vel. Desse modo, a modulariza\u00e7\u00e3o faz uso de dois m\u00e9todos poss\u00edveis.","title":"Criando e Usando Fun\u00e7\u00f5es e Procedimentos"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#passagem-de-parametros","text":"Os par\u00e2metros s\u00e3o vari\u00e1veis que podem ser transferidos (tamb\u00e9m dizemos que eles s\u00e3o \"passados\") para que o nosso m\u00e9todo seja executado. Esses ser\u00e3o os valores que o nosso m\u00e9todo vai receber e processar. Podemos classificar os par\u00e2metros em dois tipos: Formais , que s\u00e3o definidos na declara\u00e7\u00e3o (ou cria\u00e7\u00e3o) do m\u00e9todo e s\u00e3o trabalhados dentro do bloco de c\u00f3digo interno a ele como se fossem vari\u00e1veis novas; e os Reais , que s\u00e3o passados para o m\u00e9todo no momento da invoca\u00e7\u00e3o e ser\u00e3o atribu\u00eddos aos par\u00e2metros formal como representantes das vari\u00e1veis reais. Quanto a passagem desses par\u00e2metros, tamb\u00e9m temos duas nomenclaturas: Passagem por valor que \u00e9 quando o par\u00e2metro real \u00e9 compilado para o par\u00e2metro formal sem altera\u00e7\u00e3o do seu valor original e a Passagem por refer\u00eancia em que a manipula\u00e7\u00e3o feita dentro do bloco de c\u00f3digo \u00e9 espelhada nas vari\u00e1veis de refer\u00eancia fora do nosso m\u00e9todo. Quando usamos a passagem por valor, estamos usando os par\u00e2metros do tipo formais. Quando usamos a passagem por refer\u00eancia estamos usando os par\u00e2metros reais. // c# int a = 5 , b = 7 ; // exemplo de passagem por valor static void passagemValor ( int x , int y ) { int temp = x ; x = y ; x = temp } passagemValor ( a , b ); Console . Write ( $\"a = {a} e b = {b}\" ); > a = 5 e b = 7 // exemplo de passagem por refer\u00eancia static void passagemRef ( ref int x , ref int y ) { int temp = x ; x = y ; y = temp ; } passagemRef ( ref a , ref b ); Console . Write ( $\"a = {a} e b = {b}\" ); > a = 7 e b = 5","title":"Passagem de Par\u00e2metros"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#dicas-e-boas-praticas","text":"o m\u00e9todo Main() \u00e9 uma fun\u00e7\u00e3o especial de um programa escrito em c#. Ele \u00e9 automaticamente executado quando o programa \u00e9 iniciado e todos os outros m\u00e9todos est\u00e3o contidos dentro dele. Um m\u00e9todo deve ser o menor poss\u00edvel . Se o objetivo \u00e9 simplificar, devemos evitar ao m\u00e1ximo ter grandes blocos de c\u00f3digo dentro de um m\u00e9todo. Se est\u00e1 grande demais, n\u00e3o seria melhor quebrar em m\u00e9todos menores? Sempre devemos colocar nomes relevantes e esclarecedores. Devemos evitar ter m\u00e9todos com um n\u00famero muito elevado de par\u00e2metros. Cabe a mesma l\u00f3gica sobre o tamanho: n\u00e3o seria melhor quebrar em mais m\u00e9todos? Agora que aprendemos mais sobre o m\u00e9todos e boas pr\u00e1ticas, podemos entender bem melhor a estrutura padr\u00e3o de uma aplica\u00e7\u00e3o em c#. // c# using System ; public class Program { public static void Main () { Console . WriteLine ( \"Hello World\" ); } } Ainda n\u00e3o sabemos tudo que est\u00e1 nesse template padr\u00e3o de programa em c# mas, definitivamente, j\u00e1 podemos dizer que entendemos algumas coisas desse c\u00f3digo.","title":"Dicas e Boas Pr\u00e1ticas"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#manipulacao-de-arquivos-em-c","text":"Aprendemos que um programa pode ser separado em 3 etapas e, at\u00e9 agora, todo o input da informa\u00e7\u00e3o bem como o output est\u00e1 sendo feito via janela do terminal ou prompt de comando. Mas na vida real, \u00e9 super raro (se \u00e9 que acontece) de um usu\u00e1rio leigo ter que ficar usando o terminal para interagir com aplica\u00e7\u00f5es. Uma outra maneira de coletarmos informa\u00e7\u00e3o como input para o nosso processamento \u00e9 por meio da leitura de arquivos e, consequentemente, tamb\u00e9m podemos ter como output do nosso c\u00f3digo a escrita de um arquivo na mem\u00f3ria do computador. Para facilitar nossa vida, o c# j\u00e1 possui algumas classes (que podemos pensar como se fossem sin\u00f4nimos de objetos) que foram criadas especialmente para lidar com esse trabalho. Essas classes de manipula\u00e7\u00e3o de arquivos est\u00e3o guardadas em um namespace chamado System.IO 6 As classes que aprenderemos aqui s\u00e3o: StreamReader - Para cria\u00e7\u00e3o de um fluxo de leitura do arquivo para o programa StreamWriter - Para cria\u00e7\u00e3o de um fluxo de sa\u00edda ou grava\u00e7\u00e3o do programa para o arquivo A manipula\u00e7\u00e3o feita por um programa em um arquivo \u00e9, basicamente uma dessas opera\u00e7\u00f5es abaixo: Abrir para escrita Abrir para leitura Escrever dados no arquivo Ler dados Fechar o arquivo Agora o termo \"fluxo\" come\u00e7a a ficar mais claro. Para um programa trabalhar um arquivo, ele precisa sinalizar para o sistema operacional que aquele arquivo est\u00e1 sendo trabalhado por ele. Por isso existe esse fluxo de abrir o fluxo, ler ou gravar dados e, por fim, fechar o fluxo. Isso libera o arquivo para ser usado por outros programas.","title":"Manipula\u00e7\u00e3o de Arquivos em C#"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#abrir-um-arquivo-para-leitura","text":"Um arquivo n\u00e3o pode ser lido usando um instanciamento (que \u00e9 a cria\u00e7\u00e3o de uma vari\u00e1vel do tipo de um objeto definido previamente) atrav\u00e9s do objeto StreamReader . Esse objeto \u00e9 nativo e pode ser invocado sem precisar ser criado anteriormente. E, como todo objeto, possui m\u00e9todos dentro dele (10 pra ser mais preciso) mas n\u00f3s s\u00f3 vamos usar o mais b\u00e1sico. // c# // abrindo um arquivo para a leitura StreamReader NOME = new StreamReader ( \"path.txt\" ); StreamReader NOME = new StreamReader ( \"c:\\temp\\path.txt\" ); StreamReader NOME = new StreamReader ( @\"c: emp\\path.txt\" ); Agora que temos nosso objeto criado, para lermos o conte\u00fado s\u00f3 precisamos usar um dos m\u00e9todos contidos nesse objeto criado. // c# // obtendo o texto string linha = NOME . ReadLine (); // ler todas as linhas de um arquivo linha = NOME . ReadLine (); while ( linha != null ) { ... linha = NOME . ReadLine (); };","title":"Abrir um arquivo para leitura"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#abrir-um-arquivo-para-escrita","text":"// c# // criando o objeto de leitura em diferentes modos StreamWriter NOME = new StreamWriter ( \"path.txt\" ); StreamWriter NOME = new StreamWriter ( \"c:\\temp\\path.txt\" ); StreamWriter NOME = new StreamWriter ( @\"c: emp\\path.txt\" ); Qualquer arquivo que possa ser lida em um editor de texto (como o notepad) pode ser lida por esse m\u00e9todo. Independente da extens\u00e3o. // c# // usando o par\u00e2metro append (true ou false) // conte\u00fado existente sera apagado StreamWriter NOME = new StreamWriter ( \"path.txt\" , false ); // conte\u00fado existente sera mantido StreamWriter NOME = new StreamWriter ( \"path.txt\" , true ); Agora s\u00f3 precisamos saber como gravar os nossos dados no arquivo de texto. Isso \u00e9 feito de maneira parecida com o comando que mostrava mensagens na tela do terminal de comando. // c# // gravando uma string no arquivo texto aberto arquivo . Write ( string ); // ou arquivo . WriteLine ( string );","title":"Abrir um arquivo para escrita"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#fechando-um-arquivo","text":"Para fechar o stream, seja na leitura ou na grava\u00e7\u00e3o, usamos o m\u00e9todo Close() para garantir que o arquivo n\u00e3o vai ficar bloqueado por um esquecimento. Sempre devemos fechar os fluxos!","title":"Fechando um Arquivo"},{"location":"nav/PUC/periodo1/algoritmos_e_logica/#bibliografia","text":"Ana Fernanda Gomes ASCENCIO; Edilene Aparecida Veneruchi de CAMPOS. Fundamentos da Programa\u00e7\u00e3o de Computadores: algoritmos, Pascal, C/C++ e Java - 2\u00aa edi\u00e7\u00e3o . S\u00e3o Paulo, SP : Pearson Education do Brasil, 2012 H. DEITEL et. Al. C#: Como Programar . S\u00e3o Paulo: Makron Books, 2003 John SHARP. Microsoft Visual C# 2013 . Grupo A, 2014 Andr\u00e9 Luiz Villar FORBELLONE, Henri Frederico EBERSP\u00c4CHER. L\u00f3gica de programa\u00e7\u00e3o: a constru\u00e7\u00e3o de algoritmos e estruturas de dados . S\u00e3o Paulo: Prentice Hall, 2005. MANZANO, Jos\u00e9 Augusto N. G; OLIVEIRA, Jayr Figueiredo de. Al goritmos: l\u00f3gica para desenvolvimento de programa\u00e7\u00e3o de computadores 28. ed. rev. e atual. S\u00e3o Paulo, SP: \u00c9rica, 2016 Sandra PUGA, Gerson RISSETTI. L\u00f3gica de Programa\u00e7\u00e3o e Estrutura de Dados: com aplica\u00e7\u00f5es em Java - 2\u00aa edi\u00e7\u00e3o . S\u00e3o Paulo : Pearson, 2017 Float possui precis\u00e3o simples e Double possui dupla precis\u00e3o. \u21a9 Isso \u00e9 muito impressionante! \u21a9 Embora a gente saiba que a radicia\u00e7\u00e3o \u00e9 uma pot\u00eancia de fra\u00e7\u00e3o. \u21a9 Se voc\u00ea n\u00e3o se lembra como resolver um problema desse, seu professor da sexta s\u00e9rie est\u00e1 rindo de voc\u00ea nesse exato minuto. \u21a9 Refatorar \u00e9 o processo de mudar o c\u00f3digo e obter o mesmo resultado no final. \u00c9 uma \u00f3tima pr\u00e1tica a ser feita. \u21a9 IO significa Input/Output. \u21a9","title":"Bibliografia"},{"location":"nav/PUC/periodo1/desenvolvimento_web/","text":"hljs.initHighlightingOnLoad(); Assuntos A web: Evolu\u00e7\u00e3o, Padr\u00f5es e Arquitetura Hist\u00f3rico e Evolu\u00e7\u00e3o da Web W3C e os Padr\u00f5es da Web Componentes da Arquitetura da Web URI, URL e URN Protocolo HTTP Servidores Web Din\u00e2mica de Aplica\u00e7\u00f5es Web Desenvolvimento de Interfaces Web A Linguagem HTML A Linguagem CSS A Linguagem JavaScript Bibliografia A web: Evolu\u00e7\u00e3o, Padr\u00f5es e Arquitetura Hist\u00f3rico e Evolu\u00e7\u00e3o da Web A Web \u00e9 um sistema da informa\u00e7\u00e3o de hipertextos onde o acesso \u00e9 feito por meio de navegadores (browsers) . Existem alguns protocolos comuns para transfer\u00eancia de alguns tipos de arquivos. Para mensagens (e-mail) usamos o SMTP , para transfer\u00eancia de arquivos usamos o FTP , aplica\u00e7\u00f5es de telefonia usam o VOIP e para p\u00e1ginas de conte\u00fado usamos o HTML . A hist\u00f3ria da web eu ainda vou colocar aqui quando tiver mais tempo. W3C e os Padr\u00f5es da Web O WORLD WIDE WEB CONSORTIUM (W3C) \u00e9 uma organiza\u00e7\u00e3o sem fins lucrativos cujo l\u00edder \u00e9 o Tim Berners-Lee, justamente o inventor da Web. Existem v\u00e1rias organiza\u00e7\u00f5es ao longo do planeta que fazem parte desse cons\u00f3rcio internacional. O W3C mant\u00e9m a gest\u00e3o de v\u00e1rios padr\u00f5es usados todos os dias: Design e Aplica\u00e7\u00f5es Web (HTML, CSS, SVG, Ajax, Acessibilidade); Arquitetura da Web (Protocolo HTTP, URI); Web Sem\u00e2ntica (Linked Data - RDF, OWL, SPARQL); Web Services (SOAP, WSDL); Tecnologia XML (XML, XML Schema, XSLT); Navegadores e ferramentas de autoria. A W3C possui um processo de publica\u00e7\u00e3o das normativas. Normalmente, o fluxo \u00e9: Working Draft (WD) Candidate Release (CR) Proposed Recomendation (PR) Recomendation (REC) Componentes da Arquitetura da Web A web pode ser entendida como uma cole\u00e7\u00e3o de componentes que permitem a comunica\u00e7\u00e3o entre o cliente e os servidores de aplica\u00e7\u00f5es. Os principais componentes dessa arquitetura s\u00e3o: Ambiente Cliente (Client Web ) Geralmente um Browser que envia as requisi\u00e7\u00f5es usando o protocolo HTTP(S) para o servidor web atrav\u00e9s de uma rede de computadores. Ambiente Servidor O ambiente servidor possui v\u00e1rios componentes (banco de dados, aplica\u00e7\u00f5es, API e etc) mas o principal componente \u00e9 o servidor web. Ele recebe a requisi\u00e7\u00e3o HTTP(S) do client, interpreta a URL e envia os recursos solicitados (HTML, CSS, JS, JPEG, MP4 e etc) por meio da rede. Internet \u00c9 a rede mundial baseada no protocolo TCP/IP onde todo computador conectado \u00e9 denominado host (hospedeiro) e possui um identificador de endere\u00e7o IP (internet protocol) que possui determinados padr\u00f5es. URI (uniform resource locator) Como o nome indica, um URI \u00e9 um localizado que pode ser classificado em duas maneiras. O URL \u00e9 o tipo de URI que usa o endere\u00e7o do conte\u00fado como m\u00e9todo de localiza\u00e7\u00e3o, ele nos diz onde encontrar o recurso (por exemplo, o caminho c://home/desktop/test.txt ). O URN \u00e9 o tipo que usa o nome do recurso, ele nos diz a identidade do item procurado (por exemplo, o sistema ISBN). Requisi\u00e7\u00e3o \u00c9 o pacote de dados enviado pelo client atrav\u00e9s da internet para o web server onde est\u00e1 a instru\u00e7\u00e3o do que deve ser enviado como resposta. Resposta Como o nome j\u00e1 diz, \u00e9 o retorno do web server ao client com os dados requisitados. Protocolo HTTP \u00c9 o padr\u00e3o como client e web server se comunicam pela rede. URI, URL e URN J\u00e1 vimos que o URI abarca dos conceitos de URL e URN. Agora vamos aprender um pouco mais sobre os padr\u00f5es de endere\u00e7os em ambos os protocolos. URL O padr\u00e3o URL serve para identificar o recurso pela sua localiza\u00e7\u00e3o e \u00e9 composto da seguinte maneira: ftp://example.com:8080/pasta/arquivo?name=book#nose Cujas partes s\u00e3o scheme://authority/path?query#fragment Como podemos ver, a URL \u00e9 composta por v\u00e1rias partes: scheme - \u00e9 a forma de intera\u00e7\u00e3o (ftp, http, https, ...). user:pass - s\u00e3o as informa\u00e7\u00f5es do user. host - endere\u00e7o de ip do server. porta - qual a porta TCP/IP do server (o padr\u00e3o http \u00e9 80 e pode ser omitida). path - local onde o recurso se encontra. query - detalhe da consulta na forma de pares nome-valor. fragmento - qual se\u00e7\u00e3o do recurso. URN urn:example:animal:ferret:nose Cujas partes s\u00e3o scheme:path:authority A URN apenas nos d\u00e1 um recurso espec\u00edfico (NSS) contido em algum namespace (NID) sem qualquer informa\u00e7\u00e3o sobre onde o arquivo est\u00e1 localizado. Protocolo HTTP O hypertext transfer protocol \u00e9 mantido pela W3C e rege a camada de aplica\u00e7\u00e3o dos sistemas distribu\u00eddos de informa\u00e7\u00e3o em hipertexto. Existem muitas vers\u00f5es mas a mais utilizada \u00e9 a 2.0 de 2015. Para entender melhor o http, consideremos o processo usual de navega\u00e7\u00e3o na web: user informa a URL client monta a requisi\u00e7\u00e3o http e envia ao web server server recebe a requisi\u00e7\u00e3o e envia a resposta ao client a resposta \u00e9 recebida e interpretada pelo browser com os dados exibidos ao user dependendo da p\u00e1gina, pode ser que novas requisi\u00e7\u00f5es sejam feitas para que todos os componentes sejam carregados propriamente. Podemos ver que o http \u00e9 o conjunto de regras que rege a comunica\u00e7\u00e3o client-server da web. Partes da requisi\u00e7\u00e3o HTTP Uma requisi\u00e7\u00e3o \u00e9 formada por 3 partes: Linha de Requisi\u00e7\u00e3o M\u00e9todo GET - Requisita dados. POST - Envia dados para o server. HEAD - Requisita dados mas o retorno deve ser um conjunto de cabe\u00e7alhos. PUT - Cria\u00e7\u00e3o ou Atualiza\u00e7\u00e3o de dados. DELETE - Excluir algum dado. TRACE - Solicita uma c\u00f3pia da requisi\u00e7\u00e3o (serve pra testar integridade). PATCH - Altera\u00e7\u00f5es parciais em um recurso. OPTIONS - Lista de m\u00e9todos e op\u00e7\u00f5es dispon\u00edveis para o server. CONNECT - Usado quando o client se conecta com o server via proxy. Recurso - \u00c9 o caminho do dado requerido. Vers\u00e3o do Protocolo - Qual vers\u00e3o do http ser\u00e1 usada. Linhas de Cabe\u00e7alho - Inclui informa\u00e7\u00f5es complementares \u00e0 requisi\u00e7\u00e3o sendo formado por pares nome-valor. Corpo da Entidade - Dados adicionais como forms, arquivos para upload e etc. Partes da resposta HTTP Linha de Resposta Vers\u00e3o HTTP. C\u00f3digo de Retorno. Mensagem explicativa do c\u00f3digo de retorno. Linhas de Cabe\u00e7alho - Uma informa\u00e7\u00e3o importante que consta no cabe\u00e7alho \u00e9 o content-type . Ele diz o formato do conte\u00fado enviado como resposta 1 . Essa informa\u00e7\u00e3o \u00e9 apresentada conforme os MIME Types . Corpo da Entidade - \u00c9 o recurso solicitado pelo client (html, css, js, jpeg, mp4, ...) Um pouco mais sobre Cabe\u00e7alhos Os cabe\u00e7alhos possuem caracter\u00edsticas parecidas tanto nas requests quanto nas responses. Podemos classifica-los como sendo dos tipos: Request header - Informa\u00e7\u00f5es sobre o client ou a requisi\u00e7\u00e3o feita. Response header - Informa\u00e7\u00f5es sobre a resposta ou sobre o web server. Entity header - Informa\u00e7\u00f5es sobre o conte\u00fado da entidade trocada (tamanho e tipo). General header - Informa\u00e7\u00f5es gerais usadas tanto em requests quanto em responses. Servidores Web Voc\u00ea s\u00f3 consegue visualizar as informa\u00e7\u00f5es de um site porque o servidor web foi capaz de interpretar a requisi\u00e7\u00e3o feita pelo seu browser e responder com o conte\u00fado adequado. Agora vamos entender um pouco mais sobre o ambiente servidor. O principal elemento do ambiente servidor \u00e9 o web server. Ele \u00e9 quem recebe, interpreta e responde as requisi\u00e7\u00f5es dos clients ao longo da internet. Podemos tamb\u00e9m incluir outros elementos importantes no ambiente servidor como o servidor de banco de dados e os servidores de servi\u00e7os (APIs) . Fun\u00e7\u00f5es de um web service Um web server nada mais \u00e9 que um software rodando em uma m\u00e1quina. Ele desempenha v\u00e1rias fun\u00e7\u00f5es que podemos elencar como: Atender as requests http e responder a elas. Gerencias sites. Gerencias arquivos dos sites. Integrar mecanismos de scripts: php, perl, aspx, Ruby, Python e etc. Autenticar users (b\u00e1sica ou com servidores de autentica\u00e7\u00e3o). Implementar criptografia nas comunica\u00e7\u00f5es (https - tls/ssl). Cache de recursos. Auditoria das altera\u00e7\u00f5es e logs. Software e Provedores Basicamente, existem 3 formas de tornar uma aplica\u00e7\u00e3o web acess\u00edvel aos clients: Rodar um web server na m\u00e1quina local; instalar e configurar um wer server em uma m\u00e1quina dedicada para esse trabalho e, por fim, contratar um provedor que ofere\u00e7a esse servi\u00e7o. A lista de softwares que se prop\u00f5e a fazer o trabalho de um web server \u00e9 enorme. O material do curso elenca dois: Apache HTTP Server | Apache Web Server \u00c9 um open source multi plataforma. Permite execu\u00e7\u00e3o de multilinguagens como php, perl entre outras. Uma maneira simples de instalar \u00e9 pelo XAMPP (que j\u00e1 integra o apache web server, banco de dados MariaDB e um ambiente PHP e Perl). Microsoft Internet Information Server (IIS) \u00c9 a solu\u00e7\u00e3o propriet\u00e1ria da Microsoft. Baseado na plataforma .NET, permite hospedar sites est\u00e1ticos. O IIS j\u00e1 vem dispon\u00edvel junto dos SO Windows. A lista de provedores tamb\u00e9m \u00e9 extensa e possuem diferentes capacidades distintas mas podemos destacar algumas ferramentas \u00fateis: Servidores em Nuvem Azure AWS Editores e IDEs online Replit CodeSandbox Glitch GitHub Pages 2 Din\u00e2mica de Aplica\u00e7\u00f5es Web Quando voc\u00ea acessa um site, o arquivo que coordena o modo de exposi\u00e7\u00e3o da informa\u00e7\u00e3o e os conte\u00fados da mesma \u00e9 um arquivo .html . Observe o exemplo abaixo de uma p\u00e1gina simples. <!-- > Html <--> <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Document </ title > < link rel = \"stylesheet\" href = \"style.css\" > < script > src = 'app.js' </ script > </ head > < body > < img src = 'logo.jpg' alt = \"imagem_logo\" > </ body > </ html > As tags que cont\u00e9m as partes style.css , app.js e logo.jpg fazem men\u00e7\u00e3o \u00e0 outros arquivos que far\u00e3o parte da composi\u00e7\u00e3o da p\u00e1gina. Alguns s\u00e3o referentes \u00e0 funcionalidades ou layout da aplica\u00e7\u00e3o enquanto outros podem ser referentes \u00e0 conte\u00fados mostrados na p\u00e1gina. Uma vez que o servidor compreende a request feita pelo client, ele envia uma s\u00e9rie de arquivos que ser\u00e3o lidos pelo browser do usu\u00e1rio e ser\u00e3o interpretados por ele. O html \u00e9 justamente o primeiro arquivo lido porque ele diz ao navegador quais conte\u00fados mostrar e, a partir das refer\u00eancias contidas no html, como mostrar e quais funcionalidades a p\u00e1gina ter\u00e1. O processamento de um site O client envia uma requisi\u00e7\u00e3o via http (com o m\u00e9todo GET) para o web server O server envia o arquivo html da p\u00e1gina requisitada para o browser Ao processar o html, o browser percebe que ele faz men\u00e7\u00e3o de outros arquivos (como css, js, mp3, etc) O browser faz novas requisi\u00e7\u00f5es ao server at\u00e9 ter todos os arquivos necess\u00e1rios para o carregamento da p\u00e1gina Como voc\u00ea pode ver, \u00e9 muita coisa acontecendo. S\u00f3 n\u00e3o nos damos conta disso porque o processo \u00e9 muito r\u00e1pido hoje em dia devida a velocidade das nossas conex\u00f5es banda larga. Lembrando sempre que todas as requisi\u00e7\u00f5es e respostas entre client e server s\u00e3o feitas usando-se o protocolo HTTP que a gente viu logo antes. Desenvolvimento de Interfaces Web A Linguagem HTML A linguagem HTML foi criada por Tim Berners-Lee no ano de 1991 e foi baseada no padr\u00e3o Standard Generalized Markup Language (SGML). Seu escopo original era para permitir a divulga\u00e7\u00e3o de pesquisas cient\u00edficas. Com o passar dos anos, novas tecnologias foram somadas ao ecossistema para facilitar o processo de constru\u00e7\u00e3o das solu\u00e7\u00f5es web. O Cascading Style Sheet (CSS) foi criado para facilitar o desenvolvimento do conte\u00fado separando a parte de estilo e apar\u00eancia do conte\u00fado em HTML. O JavaScript permitiu a manipula\u00e7\u00e3o de elementos al\u00e9m de dar mais din\u00e2mica para as p\u00e1ginas web. O W3C foi criado em 1993 e, a partir dessa data, o HTML foi mantido e padronizado por essa organiza\u00e7\u00e3o. Desde ent\u00e3o a linguagem vem sendo alterada para permitir sua evolu\u00e7\u00e3o. Em 2004 foi criado o Web Hypertext Application Technology Working Group (WHATWG) por pessoas da Apple, Mozilla e Opera. Na \u00e9poca, o W3C estava trabalhando no padr\u00e3o XHTML 2.0 (que iria substituir o HTML 4.01) mas o WHATWG conseguiu propor um monde que acabou sendo o HTML 5. O HTML 5 foi recebido e amplamente adotado no desenvolvimento de aplica\u00e7\u00f5es hoje em dia. Panorama de uma Aplica\u00e7\u00e3o N\u00f3s j\u00e1 sabemos que um client faz uma requisi\u00e7\u00e3o ao web server por HTTP e esse, por sua vez, responde a requisi\u00e7\u00e3o com, normalmente, um arquivo HTML. De posse de arquivo, o browser consegue saber se precisar\u00e1 solicitar mais arquivos ao web server at\u00e9 que todas as refer\u00eancias do HTML sejam satisfeitas e a p\u00e1gina carregada. A grosso modo, podemos dizer que o HTML pode fazer men\u00e7\u00f5es a arquivos dos seguintes tipos: CSS Arquivos de Multim\u00eddia JavaScript RIA - Rich Internet Applications Applet Java Adobe Flash Adobe Air Adobe Flex SilverLight Se o site utiliza solu\u00e7\u00f5es din\u00e2micas como PHP, Java, Python, Ruby ou ASP.NET, quando a requisi\u00e7\u00e3o \u00e9 feita, o web server primeiro faz o processamento desses arquivos (normalmente por um outro servidor de APIs) e o resultado ser\u00e3o outros arquivos HTML, CSS, JS ou Multim\u00eddia. Ap\u00f3s o processamento, o resultado \u00e9 enviado para o client que ser\u00e1 atualizado pelo browser. Nas aplica\u00e7\u00f5es modernas, o seu browser est\u00e1 em processo praticamente cont\u00ednuo de intera\u00e7\u00e3o com o servidor e vice-versa. A Sintaxe da Linguagem HTML Uma p\u00e1gina HTML \u00e9 uma cole\u00e7\u00e3o de elementos . Voc\u00ea consegue identific\u00e1-los facilmente porque est\u00e3o entre os pares de s\u00edmbolos <> . Cada elemento tamb\u00e9m tem uma tag de abertura e uma de fechamento. Por exemplo: < body > Aqui vai o conte\u00fado do body </ body > Tamb\u00e9m existem elementos que n\u00e3o precisam do par de tags de abertura e fechamento. Por exemplo: < input disable name = 'Nome' value = 'rommelcarneiro' > Atente para o fato que alguns elementos aceitam outros elementos internamente. Por exemplo, dentro do elemento <body></body> n\u00f3s colocamos todos os outros elementos que compor\u00e3o a nossa p\u00e1gina web, como por exemplo, formul\u00e1rios, par\u00e1grafos, v\u00eddeos e etc. Ent\u00e3o se acostume de termos elementos dentro de outros elementos. Dentro de alguns elementos podem ser inseridas informa\u00e7\u00f5es e configura\u00e7\u00f5es por meio de par\u00e2metros que chamamos de atributos do elemento. Por exemplo, no elemento logo acima, temos os atributos name e value . Agora que sabemos o que s\u00e3o elementos e como eles s\u00e3o constru\u00eddos, podemos seguir para a organiza\u00e7\u00e3o de um documento HTML . Existe um padr\u00e3o em todo arquivo HTML onde existem alguns elementos obrigat\u00f3rios para o processamento da p\u00e1gina pelo browser do client. // html <!DOCTYPE html> -------------------------------> Elemento da vers\u00e3o do HTML < html lang = \"en\" > ------------------------------> Abertura do documento HTML < head > ------------------------------------> Abertura do cabe\u00e7alho < meta charset = \"UTF-8\" > ----------------> Atributo nome = \"valor\" < title > Document </ title > ---------------> Elemento de T\u00edtulo </ head > -----------------------------------> Fechamento do cabe\u00e7alho < body > ------------------------------------> Abertura do corpo < img src = \"logo.jpg\" > ------------------> Elemento de imagem </ body > -----------------------------------> Abertura do corpo </ html > ---------------------------------------> Fechamento do HTML Pre\u00e2mbulo Como podemos ver, primeiro temos o pre\u00e2mbulo DOCTYPE , seguido do <html> </html> onde temos outros dois elementos maiores, o cabe\u00e7alho ( <head> </head> ) e o corpo ( <body> </body> ). O pre\u00e2mbulo diz ao navegador qual vers\u00e3o da HTML ser\u00e1 usada. Se ele n\u00e3o for indicado, o navegador vai tentar ``adivinhar'' qual a melhor maneira de interpretar a sua p\u00e1gina (chamamos isso de quirks mode ). Caso voc\u00ea informe qual a vers\u00e3o, o browser usar\u00e1 o processamento adequado (chamamos de strict mode ). Os formatos do pre\u00e2mbulo mudam de acordo com a vers\u00e3o do HTML: HTML 5 <!DOCTYPE html> HTML 4.01 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"> HTML 1.0 <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> Cabe\u00e7alho \u00c9 a primeira parte dentro da tag de html. Nele est\u00e3o as informa\u00e7\u00f5es sobre o documento de modo a organizar as refer\u00eancias de funcionalidade que ser\u00e3o usadas para o processamento da p\u00e1gina web. Podemos resumir os elementos no cabe\u00e7alho como: title - <title> </title> Define o t\u00edtulo do documento. Que tamb\u00e9m afeta a aba do navegador. link - <link rel=\"relacao\" href=\"link_do_arquivo.extensao\"> Define as liga\u00e7\u00f5es externas como arquivos, scripts, CSS e etc. style - <link rel=\"stylesheet\" href=\"style.css\"> \u00c9 um tipo de link. Nele \u00e9 que vamos indicar qual o arquivo que reger\u00e1 o layout da nossa aplica\u00e7\u00e3o. meta - meta name=\"nome\" content=\"conteudo\"> Aqui teremos as informa\u00e7\u00f5es adicionais sobre a p\u00e1gina: codifica\u00e7\u00e3o de caracteres, descri\u00e7\u00e3o, palavras-chaves, autor e etc. Corpo A segunda parte do html \u00e9 o corpo. Nele \u00e9 onde colocamos o conte\u00fado que far\u00e1 parte da p\u00e1gina. Como \u00e9 muito comum de se encontrar nos sites, esse conte\u00fado pode vir mesclado em v\u00e1rias m\u00eddias como texto, imagens, v\u00eddeos, mapas e etc. Veremos com calma um pouco mais a frente. Elementos de Texto e Multim\u00eddia Como esse material tem o objetivo de ser para futuras consultas. Eu vou colocar as tags com um pequeno resumo mas n\u00e3o vou comentar muito sobre elas. Par\u00e1grafos e T\u00edtulos Elemento Tags T\u00edtulos <h1></h1>,...,<h6></h6> Par\u00e1grafo <p></p> Quebra de Linha <br> It\u00e1lico <i></i> Negrito <b></b> Import\u00e2ncia <strong></strong> C\u00f3digo-fonte <code></code> Texto pre-formatado <pre></pre> Cita\u00e7\u00f5es <blockquote></blockquote> Enquanto estamos montando a nossa p\u00e1gina html, devemos evitar usar os elementos dela para a formata\u00e7\u00e3o de layout da nossa solu\u00e7\u00e3o. \u00c9 altamente recomendado deixar toda essa responsabilidade para a nossa Cascading Style Sheets (CSS) e focar apenas no conte\u00fado textual da p\u00e1gina web. Listas Existem 3 tipos de listas em HTML. Listas ordenadas: // html < ol > < li > Primeiro item </ li > --------> 1. Primeiro item < li > Segundo item </ li > ---------> 2. Segundo item < li > Terceiro item </ li > --------> 3. Terceiro item </ ol > Lista n\u00e3o ordenada: // html < ul > < li > Primeiro item </ li > --------> o Primeiro item < li > Segundo item </ li > ---------> o Segundo item < li > Terceiro item </ li > --------> o Terceiro item </ ul > Lista de defini\u00e7\u00f5es: // html < dl > < dt > Termo 01 </ li > -------------> Termo 01 < dd > Defini\u00e7\u00e3o 01 </ li > ---------> Defini\u00e7\u00e3o 01 < dt > Termo 02 </ li > -------------> Termo 02 < dd > Defini\u00e7\u00e3o 02 </ li > ---------> Defini\u00e7\u00e3o 02 </ dl > Imagens // html < img width = \"200\" height = \"180\" src = \"img.png\" alt = \"Peixe\" > Links // html < a href = \"link.com\" target = \"_blank\" > Texto </ a > ------> Nova tab < a href = \"link.com\" target = \"_self\" > Texto </ a > -------> Mesma tab < a href = \"link.com\" target = \"_parent\" > Texto </ a > -----> Frame pai < a href = \"link.com\" target = \"_top\" > Texto </ a > --------> Janela atual < a href = \"link.com\" target = \"nome_frame\" > Texto </ a > --> Frame nominado Elementos Estruturais A partir da vers\u00e3o 4.0 o principal elemento usado para segmentar as partes de uma p\u00e1gina html passou a ser o <div> que \u00e9 um um elemento de divis\u00e3o gen\u00e9rico para agrupar qualquer conjunto de elementos necess\u00e1rios. Por exemplo: // html < div > < h1 > Titulo </ h1 > < p > Par\u00e1grafo pequeno </ p > < ol > < li > Item </ li > < li > Item </ li > </ ol > </ div > Na vers\u00e3o 5 do HTML passamos a ter v\u00e1rios tipos de elementos com a mesma fun\u00e7\u00e3o dos <div> mas agora com nomes mais f\u00e1ceis de usar. As vezes nos referimos a eles como elementos sem\u00e2nticos . O novos elementos sem\u00e2nticos apresentados na vers\u00e3o 5 do html s\u00e3o: Elementos Descri\u00e7\u00e3o <article> Define um artigo <aside> Conte\u00fado ao lado da p\u00e1gina <details> Detalhes adicionais <figcaption> T\u00edtulo para <figure> <figure> Elemento autocontido <footer> Rodap\u00e9 para se\u00e7\u00e3o <header> Cabe\u00e7alho para se\u00e7\u00e3o <main> Conte\u00fado principal <mark> Texto destacado <nav> Conte\u00fado de navega\u00e7\u00e3o <section> Se\u00e7\u00e3o do documento <summary> Resumo <time> Define data/hora Quando constru\u00edmos a estrutura do nosso site apenas com elementos <div> gen\u00e9ricos, n\u00f3s n\u00e3o estamos indicando nenhuma rela\u00e7\u00e3o entre essas se\u00e7\u00f5es. Quando usamos a divis\u00e3o via elementos sem\u00e2nticos, permitimos um processamento por algoritmos de modo a abrir todo um leque de possibilidades de intera\u00e7\u00f5es a partir disso. Esse \u00e9 um dos motivos que justificam o nome da web 3.0 como sendo web sem\u00e2ntica . Abaixo temos duas maneiras de representar uma estrutura de um site. A primeira em estrutura gen\u00e9rica de div e a outra em elementos sem\u00e2nticos. Veja como a segunda abordagem \u00e9 mais simples de ler. N\u00e3o \u00e9 dif\u00edcil perceber que o uso de elementos sem\u00e2nticos \u00e9 fortemente indicado para o desenvolvimento de aplica\u00e7\u00f5es web modernas. Elementos de Tabelas N\u00e3o \u00e9 nada incomum ter que demonstrar dados usando uma tabela. Pensando nisso, a linguagem HTML tamb\u00e9m possui um elemento especificamente criado para cria\u00e7\u00e3o de tabelas. Uma tabela pode ser criada com o uso das seguintes tags: // html < table border = \"1\" > --------------> Cria a Tabela < caption > T\u00edtulo </ caption > -> Coloca um T\u00edtulo < tr > ------------------------> Table Row (tr) < td > L1C1 </ td > -----------> Table Data Column 1 < td > L1C2 </ td > -----------> Table Data Column 2 </ tr > < tr > < td > L2C1 </ td > -----------> Table Data Column 1 < td > L2C2 </ td > -----------> Table Data Column 2 </ tr > </ table > Existem v\u00e1rios elementos que podem ser usados dentro de uma tabela. S\u00e3o os principais: Elementos Descri\u00e7\u00e3o <table> Elemento que cria a tabela <caption> T\u00edtulo da tabela <thead> Linhas do cabe\u00e7alho <tbody> Linhas do body <tfoot> Linhas do rodap\u00e9 <tr> Linha da tabela <th> Cabe\u00e7alho dentro de uma linha <td> Table data Coment\u00e1rio: N\u00e3o podemos cair na tenta\u00e7\u00e3o de usar tabelas como ferramenta de layout da p\u00e1gina. Pode at\u00e9 parecer mais simples no come\u00e7o mas tabelas n\u00e3o s\u00e3o boas para cria\u00e7\u00e3o de aplica\u00e7\u00f5es fluidas e din\u00e2micas. Elementos de Formul\u00e1rios Uma das intera\u00e7\u00f5es mais b\u00e1sicas que precisamos de um usu\u00e1rio \u00e9 a inser\u00e7\u00e3o de dados na aplica\u00e7\u00e3o. Dentre as v\u00e1rias maneiras de conseguirmos um dado inserido pelo usu\u00e1rio, o formul\u00e1rio \u00e9 a mais simples. O HTML fornece v\u00e1rios atributos dentro do elemento <form></form> que nos permite a criar campos de texto, bot\u00f5es clic\u00e1veis, campos de senha e etc. A sintaxe mais b\u00e1sica de um formul\u00e1rio \u00e9 dada por: // html < form name = \"form_name\" action = \"login.html\" method = \"POST\" > Usu\u00e1rio: < br > < input type = \"text\" name = \"user\" value = \"\" > < br > Senha: < br > < input type = \"password\" name = \"psw\" value = \"\" > < br > < br > < input type = \"submit\" value = \"OK\" > </ form > Podemos usar o atributo name ou id para identificar o nosso formul\u00e1rio 3 . O atributo action indica qual URL vai ser disparada uma vez processado o form (no nosso exemplo seria algo como http://server.com/login.html ). O atributo method indica o m\u00e9todo HTTP de submiss\u00e3o dos dados do formul\u00e1rio no nosso bando de dados (pode ser POST ou GET ). Quando o m\u00e9todo usado for o GET , o browser faz uma requisi\u00e7\u00e3o da URL indicada para o servidor passando os par\u00e2metros de input como querystring na URL. No nosso exemplo, ficaria como http://server.com/login.html/ login.html?user=texto&psw=123 . Quando o m\u00e9todo escolhido \u00e9 o POST , os dados s\u00e3o enviados ao servidor no corpo da requisi\u00e7\u00e3o HTTP e n\u00e3o aparecem na URL. A essa altura voc\u00ea j\u00e1 deve ser capaz de entender as diferen\u00e7as entre esses dois m\u00e9todos. Elemento <input> Esse elemento \u00e9 bastante utilizado na composi\u00e7\u00e3o dos formul\u00e1rios (na verdade, eu nem consigo pensar em um formul\u00e1rio sem pelo menos um input). Ele define os campos ou entradas de informa\u00e7\u00e3o e possui os seguintes atributos: type - Cada tipo de input possui uma visualiza\u00e7\u00e3o diferente quando a p\u00e1gina \u00e9 carregada. Isso \u00e9 feito para permitir uma melhor intera\u00e7\u00e3o do usu\u00e1rio de acordo com a natureza da informa\u00e7\u00e3o requerida. As op\u00e7\u00f5es s\u00e3o: text - Campo de texto aberto. A quantidade de caracteres pode ser controlada pelo atributo maxlength . number - S\u00f3 aceita n\u00famero como input e permite a sele\u00e7\u00e3o por umas setinhas que aparecem ao lado do campo. password - Igual ao campo texto mas com os caracteres anonimizados. email - Confere se o texto inserido possui um @ antes de salvar o formul\u00e1rio. date - Coloca uma m\u00e1scara no formato de data e cria uma op\u00e7\u00e3o de input por calend\u00e1rio. radio button - Uma op\u00e7\u00e3o clic\u00e1vel com um valor associado e um nome. O navegador s\u00f3 permite que um \u00fanico radio button esteja selecionado se existir mais de uma op\u00e7\u00e3o com o mesmo nome no atributo name . checkbox - Mesma l\u00f3gica do radio button mas com permiss\u00e3o de v\u00e1rios selecionados simultaneamente. submit - \u00c9 um bot\u00e3o clic\u00e1vel que normalmente dispara a informa\u00e7\u00e3o do formul\u00e1rio ao servidor web ou a um script JS local. reset - \u00c9 igual um submit mas a \u00fanica fun\u00e7\u00e3o dele \u00e9 apagar tudo que foi preenchido no formul\u00e1rio. name - Nome de identifica\u00e7\u00e3o do campo. value - Valor contudo no campo. placeholder - Valor que aparece quando o campo estiver vazio. required - Valida\u00e7\u00e3o autom\u00e1tica para evitar o n\u00e3o preenchimento do campo antes da submiss\u00e3o do form. disabled - Inativa o campo e n\u00e3o permite intera\u00e7\u00e3o mas o user ainda poder\u00e1 ver. Na imagem abaixo podemos ver como cada tipo do elemento <input> aparece para um usu\u00e1rio: Elemento <textarea> Esse \u00e9 tranquilo de entender. Sempre que precisarmos de um input de texto maior do que uma linha, podemos usar o elemento <textarea name=\"\" rows=\"10\" cols=\"50\"></textarea> para isso. \u00c9 poss\u00edvel alterar a quantidade de linhas e a n\u00famero de colunas para apresenta\u00e7\u00e3o da nossa caixa de texto apenas mudando os par\u00e2metros dos atributos. Elemento <select> Podemos permitir que o usu\u00e1rio selecione uma lista pr\u00e9-selecionada de op\u00e7\u00f5es atrav\u00e9s de uma lista em caixa (tamb\u00e9m chamada de dropdown menu ). Um exemplo de c\u00f3digo contendo esse elemento por ser visto abaixo. // html < label for = \"lista\" > Dropdown Menu </ label > < select name = \"lista\" > < option value = \"\" > Selecione uma op\u00e7\u00e3o </ option > < option value = \"01\" > Op\u00e7\u00e3o 01 </ option > < option value = \"02\" > Op\u00e7\u00e3o 02 </ option > < option value = \"03\" > Op\u00e7\u00e3o 03 </ option > < option value = \"04\" > Op\u00e7\u00e3o 04 </ option > < option value = \"05\" > Op\u00e7\u00e3o 05 </ option > </ select > \u00c9 poss\u00edvel transformar a lista suspensa em uma lista fixa que permite mais de uma sele\u00e7\u00e3o. Para fazer isso \u00e9 s\u00f3 adicionar o atributo multiple e tamb\u00e9m o atributo size= no elemento select . Perceba que al\u00e9m do elemento de lista n\u00f3s trouxemos um novo elemento chamado label que adiciona um texto associado a algum elemento. No nosso exemplo, veja como foi indicado no atributo for o mesmo nome que o atributo name recebe dentro do elemento select . O resultado pode ser visto abaixo: A Linguagem CSS N\u00f3s falamos na parte inicial do nosso estudo sobre HTML, mas especificamente na parte do cabe\u00e7alho, que uma das refer\u00eancias que normalmente fazemos \u00e9 a de uma Cascading Style Sheet (CSS) . A ideia por tr\u00e1s disso \u00e9 que a manuten\u00e7\u00e3o e o desenvolvimento da aplica\u00e7\u00e3o web fica mais simples quando trabalhamos todo o aspecto de estilo visual em um arquivo separado (.css) do arquivo que trata da estrutura da aplica\u00e7\u00e3o (.html). Contudo, na realidade, existem outras formas de trabalhar o visual da aplica\u00e7\u00e3o al\u00e9m do arquivo .css em separado. No geral, podemos dizer que existem 3 formas de gerenciamento de estilo de um aplica\u00e7\u00e3o web: CSS externo - Melhor forma. Nosso material estar\u00e1 focado nesse tipo de arquitetura. Bloco interno - As regras ficam no pr\u00f3prio arquivo html. Pode ter aplica\u00e7\u00f5es para quest\u00f5es muito espec\u00edficas. Mas as atualiza\u00e7\u00f5es v\u00e3o precisar ser feitas em cada p\u00e1gina, sempre que necess\u00e1rio. Atributo inline - Pior forma. Aqui, as regras de estilo s\u00e3o definidas diretamente no elemento html. Qualquer m\u00ednima altera\u00e7\u00e3o ter\u00e1 de ser feita diretamente no elemento e em todas as p\u00e1ginas. Aqui podemos ver um exemplo de cada aplica\u00e7\u00e3o do estilo visual que elencamos acima: // html <!DOCTYPE html> < html lang = \"en\" > < head > < title > Exemplo CSS </ title > ###Esse \u00e9 um exemplo de arquivo externo### < link rel = \"stylesheet\" href = \"style.css\" type = \"text/css\" > ###Exemplo de bloco interno#### < style type = \"text/css\" > p { font-size : 10 pt ; font-family : \"Verdana\" ; color : blue ; } h1 { font-size : 16 pt ; font-family : \"Impact\" ; color : red ; } </ style > </ head > < body > ####Exemplo de inline##### < p style = \"margin-left: 0.5in; font-size: 8pt;\" > Texto do par\u00e1grafo </ p > </ body > </ html > A prioridade de leitura das regras de estilo que o browser vai usar \u00e9 1) inline, 2) Bloco interno, 3) CSS externo e 4) Default do navegador. Sintaxe da linguagem CSS A leitura de um arquivo CSS \u00e9 bem simples. A primeira coisa que precisamos saber \u00e9 quais elementos est\u00e3o presentes no html que ser\u00e1 trabalhado e quais desses elementos possuem atribui\u00e7\u00e3o de id espec\u00edfico. Por exemplo, se tivermos no nosso html dois elementos <p> , s\u00f3 que um deles possui o atributo id <p id=\"teste\"> . Para criarmos uma regra de estilo no nosso CSS basta escrevermos a tag do elemento (sem os s\u00edmbolos <> ) do seguinte modo. // css p { color : red ; } Essa regra diz que todos os textos contidos nos elementos <p> ter\u00e3o a cor vermelha. Contudo, se quisermos adotar uma regra espec\u00edfica para apenas um elemento em quest\u00e3o, podemos definir a regra no css diretamente para o elemento com o seu id. // css # teste { color : black ; } Isso nos dar\u00e1 uma p\u00e1gina onde todos os textos dos par\u00e1grafos ser\u00e3o vermelhos \u00e0 exce\u00e7\u00e3o do par\u00e1grafo identificado pelo id=\"teste\" . Podemos resumir a sintaxe do CSS como sendo: // css seletor { propriedade_1 : valor_da_propriedade_1 ; propriedade_2 : valor_da_propriedade_2 ; ... propriedade_n : valor_da_propriedade_n ; } Ou seja, para aprender bem CSS, vamos precisar aprender as v\u00e1rias maneiras de selecionar os elementos da p\u00e1gina html e as propriedades de estilo que o CSS nos permite manipular na constru\u00e7\u00e3o das nossas aplica\u00e7\u00f5es web. Seletores de Elementos Eu j\u00e1 adianto, existem muitos tipos de seletores. N\u00f3s precisamos decorar todos os tipos? Evidente que n\u00e3o. O importante \u00e9 saber que o estilo de uma aplica\u00e7\u00e3o pode ser desenvolvido de v\u00e1rias maneiras e que, quanto melhor for o m\u00e9todo de organiza\u00e7\u00e3o do CSS, mais f\u00e1cil ser\u00e1 o desenvolvimento e a manuten\u00e7\u00e3o da aplica\u00e7\u00e3o no futuro. A tabela a seguir \u00e9 uma refer\u00eancia para os v\u00e1rios tipos de seletores em CSS. Tipo Link com HTML Exemplo de Sintaxe Elemento Nome da tag html p {color:blue;} Identificador id dos elementos #ident {color:blue;} Classe Classe dos elementos .classe {color:blue;} Atributo Atributos dos elementos [atrib] {color:blue;} [id=\"p01\"] {color:blue;} [class~=\"marked\" {color:blue;} Pseudo-Classe Situa\u00e7\u00f5es dos elementos p:first-of-type {color:blue;} p:nth-child(3) {color:blue;} :hover {color:blue;} Pseudo-Elemento Partes de elementos p::first-letter {color:blue;} p::first-time {color:blue;} p::after {color:blue;} Universal Todos os elementos * {color:blue;} Podemos ver que existem v\u00e1rios modelos de seletores para os elementos html de um p\u00e1gina. Alguns deles s\u00e3o dependente de contexto de intera\u00e7\u00e3o do elemento. Especialmente, as situa\u00e7\u00f5es de pseudo-classe s\u00e3o muito \u00fateis para cria\u00e7\u00e3o de aplica\u00e7\u00f5es fluidas e avan\u00e7adas. Link para lista de todos os pseudo-elementos e pseudo-classes suportados pelo CSS atualmente: link . Combina\u00e7\u00e3o de Seletores Podemos usar combina\u00e7\u00f5es de seletores para definir as regras de estilo das nossas aplica\u00e7\u00f5es web. Essas combina\u00e7\u00f5es obedecem a determinadas regras que devem ser seguidas para se obter o resultado esperado. Abaixo segue uma tabela de refer\u00eancia. Regra Interpreta\u00e7\u00e3o A,B {...} Aplica a mesma regra em A e B A.B {...} classes e ids associados \u00e0 A e B ao mesmo tempo A B {...} Elementos em B que tamb\u00e9m perten\u00e7am a A A > B {...} Elementos em B filhos de elementos de A A + B {...} Elemento em B pr\u00f3ximo irm\u00e3o de elementos de A A ~ B {...} Elementos em B pr\u00f3ximos irm\u00e3os de elementos de A Prioridade de Seletores O processamento das declara\u00e7\u00f5es CSS obedecem a ordem em 3 regras: O processamento \u00e9 de cima para baixo. A \u00faltima declara\u00e7\u00e3o \u00e9 a que prevalecer\u00e1. Regras espec\u00edficas s\u00e3o prioridade em rela\u00e7\u00e3o \u00e0 regras gerais. As declara\u00e7\u00f5es marcadas como importantes p {color: red !important;} s\u00e3o priorit\u00e1rias. Valores e Unidades Aten\u00e7\u00e3o aqui. Entender bem quais unidades podem ser usadas e os tipos de unidades ajuda muito o desenvolvimento de interfaces bem planejadas e responsivas. Aqui tem um link com um material de refer\u00eancia sobre esse assunto. Cores em CSS Existem infinitas combina\u00e7\u00f5es de cores para a paleta que ser\u00e1 usada em qualquer aplica\u00e7\u00e3o web. Existem diferentes maneiras de definir quais cores ser\u00e3o usadas em CSS: RGB hexadecimal - #RRGGBB RGB abreviado - #RGB RGB decimal - rgb(rrr,ggg,bbb) Palavras-Chaves Podemos usar qualquer uma dessas codifica\u00e7\u00f5es para definir as cores que vamos usar no estilo das nossas aplica\u00e7\u00f5es web. Display e Box Model Um dos aspectos mais importantes na constru\u00e7\u00e3o de uma aplica\u00e7\u00e3o web \u00e9 a disposi\u00e7\u00e3o dos elementos. Agora que aprendemos como a linguagem CSS nos fornece uma maneira mais simples de controlar as informa\u00e7\u00f5es de estilo da nossa p\u00e1gina HTML, vamos aprender como controlamos os locais onde os elementos s\u00e3o dispostos. A propriedade display \u00e9 que determina como um elemento e seus filhos s\u00e3o dispostos na p\u00e1gina. Alguns valores dessa propriedade se referem a maneira como o elemento \u00e9 organizado em rela\u00e7\u00e3o aos elementos irm\u00e3os e alguns valores se referem a maneira como seus elementos filhos s\u00e3o dispostos dentro do elemento pai. Caso n\u00e3o coloquemos nenhuma informa\u00e7\u00e3o de display nos elementos, eles possuem uma categoria default pr\u00f3pria que pode ser do tipo inline ou block . Os elementos inline s\u00e3o colocados automaticamente um ao lado do outro na mesma linha enquanto existir espa\u00e7o na tela. <a> <span> <img> <button> <input> etc Os elementos block sempre ocupam uma linha inteira da p\u00e1gina. <div> <h1> ... <h6> <p> <form> <canvas> <table> etc Mais ou menos como nessa imagem abaixo Podemos modificar o comportamento padr\u00e3o de um elemento atrav\u00e9s do par\u00e2metro display: no CSS. Por exemplo, para transformar os <input> em um elemento sozinho na p\u00e1gina, podemos colocar no CSS a seguinte linha // css input { display : block ; margin : 0 auto ; } No caso de elementos inside 4 , o atributo display pode receber os valores display=\"table\" , display=\"grid\" e display=\"flex\" . Quando colocamos esses atributos nos elementos inside, o elemento que o cont\u00e9m, que chamamos de elemento pai (outside), automaticamente vira um elemento do tipo display=\"block\" . A propriedade display=\"table\" em um elemento outside permite que os elementos inside recebam varia\u00e7\u00f5es desse atributo para a constru\u00e7\u00e3o de layout em formato de tabela. Desse modo, se nosso elemento outside \u00e9 do tipo display=\"table\" , ent\u00e3o, os elementos inside podem ser \"table-row\" , \"table-cell\" , \"table-column\" , \"table-caption\" , \"table-row-group\" , \"table-header-group\" e \"table-footer-group\" . A propriedade display=\"flex\" permite que os elementos inside sejam controlados de maneira fluida para se ajustar \u00e0 largura da janela do navegador. A propriedade display=\"grid\" permite um controle das regi\u00f5es onde os elementos inside ser\u00e3o dispostos. Isso d\u00e1 mais controle ao desenvolver. Veremos com mais calma os atributos display:flex e display:grid porque eles s\u00e3o usados na constru\u00e7\u00e3o de aplica\u00e7\u00f5es mais fluidas e din\u00e2micas. Box Model Existe um conjunto de atributos CSS que comp\u00f5e o que podemos chamar de box model . A ideia aqui \u00e9 que podemos trabalhar os elementos como pertencentes a uma ``caixa'' imagin\u00e1ria. Isso torna o design da aplica\u00e7\u00e3o mais simples de compreender e tamb\u00e9m facilita o posicionamento dos elementos ao longo da nossa p\u00e1gina. Os atributos CSS que comp\u00f5e o modelo de caixa s\u00e3o: margin border padding width height background-color As propriedades de margin , border e padding aceitam atributos de orienta\u00e7\u00e3o como top-right-bottom-left . Caso queira aplicar o mesmo valor para todos \u00e9 s\u00f3 informar um \u00fanico valor no atributo. Se quiser discriminar, \u00e9 s\u00f3 apontar os valores na ordem descrita no sentido hor\u00e1rio ou usar a propriedade inteira para cada lado. A imagem abaixo deixa mais f\u00e1cil a compreens\u00e3o do atributos do modelo de caixa. Durante a elabora\u00e7\u00e3o da interface n\u00e3o \u00e9 nada incomum usar as bordas como m\u00e9todo de visualiza\u00e7\u00e3o. O comando que cria a borda \u00e9 border: solid 20px black Fundo de Elementos (Background) Todo elementos html possui um atributo de background que pode ser acessado pelos seguintes comandos: background-color - Cor de fundo background-image - Imagem ou gradiente 5 background-repeat - Comando caso a img n\u00e3o seja do tamanho do elemento. Pode ser do tipo repeat , repeat-x , repeat-y , space , round background-position - Define a posi\u00e7\u00e3o inicial da imagem. Pode ser do tipo top , left , right , center , bottom Propriedades de Texto Existem v\u00e1rias propriedades quando o assunto \u00e9 texto em CSS. Abaixo podemos ver uma tabela para refer\u00eancia. Aqui tem um material bem completo fornecido pelo Mozilla Fontes de Texto na Web O CSS nos d\u00e1 as seguintes op\u00e7\u00f5es de letras: serif, sans-serif,monospace, cursive e fantasy. Contudo, n\u00f3s nunca teremos certeza se o navegados do user ter\u00e1 a capacidade de carregar a fonte que desejamos. Para evitar esse problema, podemos definir op\u00e7\u00f5es de fontes do seguinte modo: // css p { font-family : \"Trebuchet MS\" , Verdana , sans-serif ; } O navegador do user vai tenter renderizar a p\u00e1gina usando a primeira op\u00e7\u00e3o, caso ele n\u00e3o consiga, ele vai para as outras op\u00e7\u00f5es. Al\u00e9m das op\u00e7\u00f5es padr\u00e3o CSS, podemos usar fontes propriet\u00e1rias de outras fontes (Google Fonts, DaFont, Adobe e etc). A maneira de fazer isso \u00e9 definir uma propriedade de importa\u00e7\u00e3o como no exemplo abaixo // css @ import url ( 'https://fonts.googleapis.com/css?family=Baloo' ) ; div { font-family : 'Baloo' , cursive ; } Layouts Responsivos N\u00e3o \u00e9 nada incomum acharmos sites que respondem dinamicamente ao tamanho da tela. Agora vamos aprender um pouco sobre esse m\u00e9todo de desenvolvimento de aplica\u00e7\u00f5es web. O Responsive Web Design (RWD) \u00e9 a ferramenta que define o layout de um site de modo din\u00e2mico ao tamanho da tela ou janela do dispositivo. Para poder usar esse m\u00e9todo, n\u00f3s precisamos planejar nosso c\u00f3digo HTML e CSS de maneira compat\u00edvel com essa metodologia. Os principais padr\u00f5es de layout responsivos s\u00e3o. Por enquanto eu vou deixar esse se\u00e7\u00e3o mais enxuta: Mostly Fluid Column Drop Layout Shifter Off Canvas Tiny Tweaks Media Queries As media queries s\u00e3o os par\u00e2metros usados na aplica\u00e7\u00e3o que usam alguma caracter\u00edstica do dispositivo onde a p\u00e1gina est\u00e1 sendo exibida. Abaixo n\u00f3s podemos ver um exemplo de elemento HTML com media query. // html < head > < link rel = \"stylesheet\" media = 'screen and (min-width: 900px)' href = \"tela_g.css\" > < link rel = \"stylesheet\" media = 'screen and (max-width: 600px)' href = \"tela_p.css\" > </ head > Nesse exemplo HTML, podemos ver como, de acordo com o tamanho da tela, o arquivo de estilo CSS carregado vai ser o \"tela_g.css\" ou o \"tela_p.css\". Do lado do CSS, a sintaxe das media queries s\u00e3o usadas da seguinte maneira: // css body { background-color : red ; } @ media screen and ( min-width : 600px ) { body { background-color : orange ;} } @ media screen and ( min-width : 800px ) { body { background-color : yellow ;} } Podemos ver que, de acordo com a largura da tela, o CSS envia para o navegador uma cor de fundo do body diferente. Agora estamos come\u00e7ando a ver a l\u00f3gica por tr\u00e1s dos designs responsivos. As op\u00e7\u00f5es de media types s\u00e3o: all - Qualquer tipo de m\u00eddia handheld - Para telas responsivas ao toque print - Impressoras screen - Telas de computadores, smartphones e tablets outras As op\u00e7\u00f5es de media features s\u00e3o as caracter\u00edsticas dos dispositivos tais como: color - Profundidade de cores em bits color-index - N\u00famero de cores indexadas width e height - Largura e altura do viewport device-width e device-height - Largura e altura do dispositivo orientation - Propor\u00e7\u00e3o do viewport (portrait ou landscape) resolution - Resolu\u00e7\u00e3o de sa\u00edda em dpi Resolu\u00e7\u00e3o e Viewport Quando as tela mudam de tamanho, o valor do pixel tamb\u00e9m \u00e9 alterado. Para resolver esse problema, o CSS utiliza um m\u00e9todo de c\u00e1lculo que padroniza as medidas independentemente do tamanho da tela. Se nossa aplica\u00e7\u00e3o for desenvolvida para uma tela com 1920 pixels (full HD), podemos converter cada pixel em uma nova unidade que permita a aplica\u00e7\u00e3o recalcular os tamanhos dos componentes em pixels de modo a se adequar melhor ao display. No exemplo a abaixo, n\u00f3s estamos \"mudando\" o valor padr\u00e3o do pixel para caber em uma tela com 1/3 de 1920 (640 pixels): \\[ Viewport = \\dfrac{ \\textrm{Resolu\u00e7\u00e3o}}{ \\textrm{Pixel-Ratio}} = \\dfrac{1920}{3} = 640 \\ pixels \\] Para habilitar esse m\u00e9todo de ajuste, o HTML precisa ter a seguinte linha no head : // html < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > A Vantagem dessa abordagem \u00e9 que ela permite a manuten\u00e7\u00e3o da leitura quando nossa p\u00e1gina \u00e9 carregada por telas menores. Tamb\u00e9m podemos controlar a capacidade de rolagem e zoom do usu\u00e1rio por meio dessa meta tag. Layout Flex J\u00e1 aprendemos como reduzir a escala da nossa aplica\u00e7\u00e3o com o viewport. Mas, em telas de smartphones ou monitores pequenos, simplesmente reduzir a aplica\u00e7\u00e3o para caber no dispositivo pode n\u00e3o ser suficiente para uma boa experi\u00eancia. No Layout Flex (flexbox) n\u00f3s podemos definir o comportamento dos elementos html filhos dentro de um bloco maior. Nesse modelo, n\u00f3s conseguimos mudar o posicionamento relativo dos elementos filhos sempre que a tela se comportar de determinada maneira prevista (como o caso do nosso site ser aberto em uma tela de smartphone ao inv\u00e9s de um monitor). Para usar esse recurso, usaremos no elemento pai 6 o par\u00e2metro display: flex; flex-wrap: wrap; . Al\u00e9m de definirmos o tipo de display no elemento pai, usaremos a media query para ajustar o tamanho ideal dos elementos na tela. Podemos ver melhor no exemplo de c\u00f3digo abaixo: // html <!DOCTYPE html> < body > < main class = 'container' > < div id = \"orange\" ></ div > < div id = \"green\" ></ div > < div id = \"yellow\" ></ div > </ main > </ body > </ html > // css . container { display : flex ; flex-wrap : wrap ; } div { height : 80 px ; width : 100 % ; } /* tela pequena */ # orange { background-color : orange ; order : 1 ; } # green { background-color : green ; order : 2 ; } # yellow { background-color : yellow ; order : 3 ; } /* tela media */ @ media screen and ( min-width : 600px ) { # orange { width : 100 % } # green { width : 70 % } # yellow { width : 30 % } } /* tela grande */ @ media screen and ( min-width : 1000px ) { # orange { width : 40 % } # green { width : 40 % } # yellow { width : 20 % } } O resultado desses c\u00f3digos acima produzem o seguinte resultado: Layout Grid Para al\u00e9m das medias queries e layout flex, podemos construir o front end de uma aplica\u00e7\u00e3o usando o Sistema Grid que o CSS possui. A ideia \u00e9 pensar no front end da aplica\u00e7\u00e3o em termos de dois elementos visuais: O Container e os Itens. Coment\u00e1rio: Depois eu vou revisitar essa se\u00e7\u00e3o com base no material dispon\u00edvel nesse link . O sistema Grid possui alguns conceitos que nos ajudam a criar e manter a interface de uma aplica\u00e7\u00e3o que use essa metodologia: Line - Separa as cells Cell - \u00c9 uma unidade encapsulada em uma linha e uma coluna Area - Conjunto de cells Track - Um conjunto linear de cells (uma linha ou uma coluna do grid) Abaixo temos o c\u00f3digo de uma aplica\u00e7\u00e3o simples usando esse sistema de constru\u00e7\u00e3o de front end: // html < body > < div class = \"container\" > < header > Header </ header > < main > Main </ main > < nav > Sidebar </ nav > < footer > Footer </ footer > </ div > </ body > // css body { background-color : rgb ( 255 , 255 , 255 ); } . container { height : 700 px ; display : grid ; grid-template-columns : 20 % 30 % 30 % 19 % ; grid-template-rows : auto ; grid-template-areas : \"header header header header\" \"main main main sidebar\" \"footer footer footer footer\" ; column-gap : 5 px ; row-gap : 5 px ; } header { grid-area : header ; background-color : orange ; height : 100 px ; } main { grid-area : main ; background-color : blue ; height : 500 px ; } nav { grid-area : sidebar ; background-color : red ; height : 500 px ; } footer { grid-area : footer ; background-color : green ; margin : solid black 5 px ; height : 100 px ; } Com base nessa l\u00f3gica, podemos posicionar elementos usando o sistemas de coordenadas do CSS Grid. Vamos refazer a interface que acabamos de ver usando apenas esse conceito de \"items\" dentro de um \"container\". Ao inv\u00e9s de definir a separa\u00e7\u00e3o da tela como par\u00e2metro da classe container no CSS, n\u00f3s vamos criar o container e orientar, dentro de cada item, como ele se comportar\u00e1 no grid. // html < body > < div class = \"container\" > < div class = \"item-a\" > Header </ div > < div class = \"item-b\" > Main </ div > < div class = \"item-c\" > Nav </ div > < div class = \"item-d\" > Footer </ div > </ div > </ body > // css body { background-color : rgb ( 255 , 255 , 255 ); } . container { height : 700 px ; display : grid ; grid-template-columns : 24 % 25 % 25 % 25 % ; grid-template-rows : 10 % 80 % 10 % ; grid-column-gap : 5 px ; grid-row-gap : 5 px ; } . item-a { background-color : orange ; grid-column-start : 1 ; grid-column-end : span 4 ; grid-row-start : 1 ; grid-row-end : 1 ; } . item-b { background-color : blue ; grid-column-start : 1 ; grid-column-end : span 3 ; grid-row-start : 2 ; grid-row-end : 2 ; } . item-c { background-color : red ; grid-column-start : 4 ; grid-column-end : 4 ; grid-row-start : 2 ; grid-row-end : 2 ; } . item-d { background-color : green ; grid-column-start : 1 ; grid-column-end : span 4 ; grid-row-start : 3 ; grid-row-end : 3 ; } Nem vale a pena mostrar uma imagem do resultado porque ele \u00e9 exatamente igual \u00e0 imagem anterior. Com isso, podemos ver que \u00e9 o desenvolvimento de uma interface de aplica\u00e7\u00e3o web pode ser feito de diferentes maneiras, mas o que realmente importa \u00e9 uma boa documenta\u00e7\u00e3o e um planejamento bem feito para que o cliente termine com o que ele realmente precisa e o time de desenvolvimento n\u00e3o precise perder preciosas horas no bem conhecido ciclo de ``vai-e-volta'' at\u00e9 que o cliente aceite algum layout. Exemplo de Aplica\u00e7\u00e3o Web Responsiva Para finalizar nosso estudo de desenvolvimento web com CSS vamos fazer uma aplica\u00e7\u00e3o simples. O prot\u00f3tipo no MarvelApp pode ser visto nesse link . Coment\u00e1rio: Acredite, com os conceitos aprendidos at\u00e9 agora n\u00f3s j\u00e1 conseguimos fazer aplica\u00e7\u00f5es simples com p\u00e1ginas est\u00e1ticas com relativa facilidade. A prova disso \u00e9 que enquanto escrevo esse par\u00e1grafo acabamos de criar a primeira p\u00e1gina da aplica\u00e7\u00e3o web front end que meu grupo precisa entregar como projeto do primeiro semestre da gradua\u00e7\u00e3o. Eu usei, basicamente, apenas o que aprendemos aqui e alguma pesquisa no google para coisas mais simples. Frameworks front-end - Bootstrap Como era de se esperar, os programadores perceberam que era poss\u00edvel combinar v\u00e1rias pr\u00e1ticas do mercado em \"pacotes\",\"bibliotecas\" ou \"frameworks\" que, no fundo, s\u00e3o c\u00f3digos escritos em HTML, CSS e JavaScript. Essas ferramentas facilitam demais o processo de desenvolvimento mas, como tudo na vida, precisam ser usadas com modera\u00e7\u00e3o e habilidade. N\u00e3o podemos correr o risco de virarmos \"escravos\" de nenhum framework. Com o devido aviso dado, podemos iniciar nosso estudo de Frameworks famosos com o Boostrap. A culpa de v\u00e1rias sites que acessamos terem um \"jeit\u00e3o\" parecido \u00e9, em boa parte, desse framework que at\u00e9 hoje \u00e9 o mais famoso. Foi desenvolvido em 2011 por Mark Otto e Jacob Thornton no Twitter e disponibilizado no GitHub. O Bootstrap se ajusta automaticamente a diferentes modelos de tela porque tem, dentro dele, tamanhos pr\u00e9-determinados de telas que se ajustam ao dispositivo. A \"fronteira\" entre os tamanhos de tela s\u00e3o os chamados Breakpoints . A tabela abaixo resume as rela\u00e7\u00f5es entre tamanho da tela e ajuste do container da aplica\u00e7\u00e3o. O site oficial pode ser acessado nesse link . Extra Small Small Medium Large Extra Large <57px \\(\\geq\\) 576px \\(\\geq\\) 768px \\(\\geq\\) 992px \\(\\geq\\) 1200px Max container size (auto) 540px 720px 960px 1140px Nome da Classe .col- .col-sm- .col-md- .col-lg- .col-xl- Download do Bootstrap Existem duas op\u00e7\u00f5es de download desse Framework: CSS e JS compilados - J\u00e1 vem pronto pra uso mas \u00e9 um pouco limitado. C\u00f3digo Fonte - Permite customiza\u00e7\u00e3o e vem com as fontes do Bootstrap mas precisa de compila\u00e7\u00e3o. Para saber como fazer basta uma pesquisa r\u00e1pida no youtube. Conte\u00fado do Boostrap A melhor fonte sobre qualquer tecnologia geralmente \u00e9 a pr\u00f3pria documenta\u00e7\u00e3o oficial . Mas podemos dividir as partes do Bootstrap em: Reboot - Para uniformiza\u00e7\u00e3o da apar\u00eancia em diferentes navegadores Tipografia - Textos e fontes Code - Linhas de c\u00f3digo Images - Relacionado aos recursos de imagens Tables - Relacionado aos recursos de tabelas Figures - Imagens com textos associados Componentes do Boostrap N\u00f3s j\u00e1 sabemos que o HTML possui uma l\u00f3gica de estrutura\u00e7\u00e3o da p\u00e1gina. Contudo, quando estamos usando o Bootstrap temos que ``reaprender'' como pensar nossa estrutura da p\u00e1gina a partir dos conceitos e modelos do framework. Para o Bootstrap, a p\u00e1gina \u00e9 criada usando-se componentes . A lista \u00e9 bem grande mas podemos destacar alguns: Breadcrumb - Trilha com o caminho do site at\u00e9 uma p\u00e1gina Navbar - Barra de menu e pesquisa Carousel - Conjunto rotativo de imagens em destaque no site Cards - Cart\u00f5es para uso diverso. Podem ser imagens ou texto Modal - Caixas de di\u00e1logo (tipo um popup s\u00f3 que dentro da p\u00e1gina) Sistema Grid no Bootstrap Como n\u00f3s j\u00e1 sabemos, o sistema grid \u00e9 uma maneira conveniente de controlarmos a estrutura visual da nossa aplica\u00e7\u00e3o. Diante disso, n\u00e3o \u00e9 surpreendente que esse framework tamb\u00e9m use uma vers\u00e3o dessa l\u00f3gica. Para o Bootstrap, todas as p\u00e1ginas ser\u00e3o sempre divididas em 12 colunas. Quando um elemento est\u00e1 dentro de outro, o padr\u00e3o de 12 colunas se mant\u00e9m. A l\u00f3gica de divis\u00e3o \u00e9 como na imagem abaixo: O c\u00f3digo HTML usando o Bootstrap \u00e9 fortemente baseado em <div> . A novidade est\u00e1 no uso de classes espec\u00edficas que d\u00e3o a l\u00f3gica contida nos arquivos usados pelo framework. A hierarquia \u00e9 similar ao grid system porque a aplica\u00e7\u00e3o existira dentro de um container. O Container ter\u00e1 pelo menos uma linha (row). Cada linha ter\u00e1 pelo menos uma coluna. Internalize essa hierarquia de Container, Linhas e Colunas. // html < div class = \"row\" > < div class = \"col-md-6\" id = \"cel1\" > .col-md-6 </ div > < div class = \"col-md-6\" id = \"cel2\" > .col-md-6 </ div > </ div > < div class = \"row\" > < div class = \"col-md-2\" id = \"cel1\" > .col-md-2 </ div > < div class = \"col-md-10\" id = \"cel2\" > .col-md-10 </ div > </ div > < div class = \"row\" > < div class = \"col-md-9\" id = \"cel1\" > .col-md-9 </ div > < div class = \"col-md-3\" id = \"cel2\" > .col-md-3 </ div > </ div > // css # cel1 { color : white ; background-color : red ; height : 100 px ; border : solid black 3 px ; } # cel2 { color : white ; background-color : blue ; height : 100 px ; border : solid black 3 px ; } Na pr\u00f3xima imagem podemos ver o resultado desse c\u00f3digo. O sistema de 12 colunas md-1 torna bem simples a disposi\u00e7\u00e3o dos conte\u00fados na tela. A Linguagem JavaScript J\u00e1 aprendemos que a Web utiliza a linguagem HTML para estrutura do conte\u00fado, a linguagem CSS para formato e apresenta\u00e7\u00e3o. Contudo, n\u00f3s sabemos que hoje em dia as aplica\u00e7\u00f5es possuem fun\u00e7\u00f5es bem complexas com sistemas inteiros baseados todo no navegador do client. A linguagem JavaScript \u00e9 justamente o mecanismo que tr\u00e1s essa capacidade de interatividade e processamento para \u00e0 web. Hoje em dia, a linguagem JavaScript (tamb\u00e9m chamada de JS) \u00e9 mantida pela ECMA International . Uma organiza\u00e7\u00e3o su\u00ed\u00e7a criada em 1961 cujas atividades s\u00e3o separadas em v\u00e1rios campos de atua\u00e7\u00e3o. Um desses campos \u00e9 a padroniza\u00e7\u00e3o de linguagens de programa\u00e7\u00e3o. Atualmente, ela elabora os padr\u00f5es para as linguagens ECMAScript (TC39), C# (TC49) e outras. Sim, \u00e9 isso mesmo. Nada de JavaScript. O JS foi criado em 1995 por Brendan Eich mas em 1996 foi transferido para a ECMA para padroniza\u00e7\u00e3o. O primeiro padr\u00e3o JS dentro do ECMAScript foi feito em 1997. Como consta na edi\u00e7\u00e3o 2020 do padr\u00e3o \"O ECMAScript \u00e9 baseado em v\u00e1rias tecnologias cujas mais conhecidas s\u00e3o o JavaScript (Netscape) e JScript (Microsoft)\". O ECMAScript foi adotado na maioria dos navegadores desde o final dos anos 90. Hoje em dia, praticamente todos os navegadores adotam o padr\u00e3o ECMAScript e, consequentemente, o JavaScript dentro deles. A ECMA International cria os padr\u00f5es e especifica\u00e7\u00f5es que permitam a execu\u00e7\u00e3o de uma determinada linguagem. O JS \u00e9 a implementa\u00e7\u00e3o dessas padroniza\u00e7\u00f5es dentro dos navegadores do mercado. Tanto \u00e9 assim, que diferentemente do que acontece com as outras linguagens como Python, R e etc, voc\u00ea n\u00e3o precisa instalar um interpretador ou um compilador para rodar c\u00f3digos em JS. Os navegadores possuem, dentro deles, um motor pr\u00f3prio que executa o padr\u00e3o ECMAScript. Para citar alguns desses motores: Navegador Motor Web Motor ECMAScript Firefox Gecko Spider Monkey Chrome Blink Google V8 Safari WebKit JavaScriptCore IE Trident Chakra Core Edge EDGE Chakra Core Opera Blink Coment\u00e1rio: N\u00e3o confunda a linguagem de programa\u00e7\u00e3o Java com JavaScript. S\u00e3o linguagens totalmente diferentes. Aplica\u00e7\u00e3o da Linguagem JavaScript Da mesma maneira que vimos com o CSS, podemos trazer o JS para nossa aplica\u00e7\u00e3o web de diferentes maneiras: Por arquivo externo - C\u00f3digo \u00e9 mantido em um arquivo separado // js < script type = \"text/javascript\" src = \"script.js\" >< /script> Em Bloco interno - C\u00f3digo fica em um bloco dentro do HTML // js < script type = \"text/javascript\" > /* C\u00f3digo JS */ alert ( \"Ol\u00e1 mundo!\" ); < /script> Inline - C\u00f3digo fica dentro de um atributo do elemento HTML // js < p onClick = \"alert('Click feito!');\" >< /p> Agora que sabemos que podemos \"turbinar\" nossas p\u00e1ginas web com o uso de JS, podemos nos perguntar o que pode ser feito com essa ferramenta. A resposta \u00e9 praticamente qualquer coisa! Podemos elencar como principais aplica\u00e7\u00f5es: Manipula\u00e7\u00e3o de objetos e tratamento de eventos relacionados aos elementos HTML a partir do uso de uma API chamada DOM (Documento Object Model). Comunica\u00e7\u00e3o com servidores e utiliza\u00e7\u00e3o de APIs via AJAX usando o XMLHttpRequest ou na API Fetch Armazenamento de dados no client com o uso das APIs Indexed DB e LocalStorage/SessionStorage Usar as APIs do HTML5: Canvas, Media, File, Drag and Drop, Geolocation, Web Workers, History JavaScript al\u00e9m do Browser As pessoas gostaram tanto de JS que foram capazes de construir uma aplica\u00e7\u00e3o que implementa o v8 do chrome fora do browser. Isso mesmo, podemos rodar aplica\u00e7\u00f5es em JS direto no terminal do seu computador. Basta usar a aplica\u00e7\u00e3o Node.js . Hoje em dia, d\u00e1 pra fazer uma aplica\u00e7\u00e3o inteira, backend e frontend com JS. Com JS podemos tamb\u00e9m construir aplica\u00e7\u00f5es desktop usando uma biblioteca chamada Electron . Esse aqui \u00e9 apenas o come\u00e7o da nossa caminhada! Vari\u00e1veis e Tipos de Dados A linguagem JS \u00e9 de tipagem din\u00e2mica. Ent\u00e3o o tipo de vari\u00e1vel \u00e9 definido pela pr\u00f3pria linguagem na hora da atribui\u00e7\u00e3o do valor. Temos dois tokens de atribui\u00e7\u00e3o em JS var ou let . // js var variavel01 ; // Aqui eu declarei sem atribuir nada var x = 10 ; // x agora \u00e9 um num\u00e9rico de valor 10 let y = \"Ol\u00e1 mundo\" // y \u00e9 uma string Agora temos que entender o motivo de termos dois tokens de atribui\u00e7\u00e3o. Mas, para poder explicar isso, precisamos entender que existem diferentes escopos de vari\u00e1veis quando um programa em JS \u00e9 executado. Os escopos das vari\u00e1veis em JS s\u00e3o: Escopo Global - Vari\u00e1veis sempre dispon\u00edveis para consulta e edi\u00e7\u00e3o Escopo Local - Vari\u00e1veis existem apenas dentro de um bloco de c\u00f3digo (um loop ou uma condicional, por exemplo) As vari\u00e1veis declaradas com var s\u00e3o de escopo global se forem declaradas fora de fun\u00e7\u00f5es (Nesse caso s\u00e3o de escopo local). J\u00e1 a atribui\u00e7\u00e3o feita com let \u00e9 de escopo local . Abaixo temos um exemplo bem bacana mostrando essas diferen\u00e7as. // js var a = 5 ; var b = 10 ; if ( a === 5 ) { let a = 4 ; var b = 1 ; console . log ( a ); console . log ( b ); } > Mostra 4 e 1 no console console . log ( a ); console . log ( b ); > Mostra 5 e 1 no console Coment\u00e1rio: Uma boa pr\u00e1tica em JS (e em praticamente todas as linguagens) \u00e9 sempre declarar as vari\u00e1veis na parte de cima de cada bloco ou no come\u00e7o do c\u00f3digo. Tamb\u00e9m \u00e9 poss\u00edvel usar o token const para atribui\u00e7\u00e3o. Esse token funciona igual ao let e \u00e9 definido para constantes. Uma boa pr\u00e1tica da comunidade \u00e9 usar letra mai\u00fasculas para definir suas constantes. Tipos e Estruturas de Dados Todas as vari\u00e1veis que s\u00e3o n\u00fameros, textos (strings) ou valores booleanos (true ou false) s\u00e3o o que chamamos de tipo Primitivo . As vari\u00e1veis especiais do tipo nulo (null) ou indefinido (undefined) s\u00e3o possuem caracter\u00edsticas de tipo primitivo mas podem ser entendidas como sendo de um tipo \u00fanico especial. No ECMAScript 6 foi inserida uma nova categoria de vari\u00e1veis chamadas de tipo Simb\u00f3lico ou Symbol (N\u00e3o vamos nos aprofundar nisso agora. Depois eu atualizo esse material com o ECMAScript 6.). O que n\u00e3o for de tipo primitivo, null, undefined ou symbol, ser\u00e1 do tipo Objeto que possui uma lista de propriedades, que por sua vez, possuem um nome e valores associados. Podemos resumir o que acabamos de ver como: Tipo Num\u00e9rico JS n\u00e3o faz diferen\u00e7a entre n\u00fameros inteiros ou fracionados. Para essa linguagem, tudo \u00e9 considerado o que chamamos de ponto flutuante de 64 bits. O valor m\u00e1ximo poss\u00edvel \u00e9 acessado pela propriedade do objeto Number por meio das propriedades Number.POSITIVE_INFINITY e Number.NEGATIVE_INFINITY \". Quando tentamos fazer uma opera\u00e7\u00e3o matem\u00e1tica n\u00e3o poss\u00edvel (como raiz de -1) recebemos o resultado NaN que significa Not-a-Number. N\u00e3o \u00e9 incomum termos que converter caracteres do tipo texto mas que representam n\u00fameros. Para isso, podemos usar a fun\u00e7\u00e3o nativa parseInt ou parseFloat . Tipo Boolean Os operadores booleanos s\u00e3o operadores que apenas admitem duas entradas: true ou false . Podemos chamar essas entradas diretamente ou atrav\u00e9s de opera\u00e7\u00f5es l\u00f3gicas usando operadores l\u00f3gicos ou matem\u00e1ticos. Abaixo temos uma tabela que podemos usar de refer\u00eancia. Operador Exemplo Observa\u00e7\u00e3o Mesmo valor x == y true se mesmo valor Mesmo valor e tipo x === y true se mesmo valor e tipo Diferente valor x !== y true se diferente valor Maior que x > y true se x maior que y Menor que x < y true se x menor que y Maior igual x >= y true se maior igual Menor igual x <= y true se menor igual Nega\u00e7\u00e3o !x true se x for false And x && y true se x e y forem true Or x || y true se x ou y forem true Tipo String Qualquer aplica\u00e7\u00e3o precisa ser capaz de lidar com textos. Uma string \u00e9 exatamente uma cadeia de caracteres n\u00e3o num\u00e9ricos (mas caracteres num\u00e9ricos tamb\u00e9m podem compor uma string) que pode ser declarada por meio de aspas simples \"abc\" ou compostas 'abc'. Tamb\u00e9m \u00e9 comum precisarmos juntar diferentes strings. No javascript, podemos fazer isso simplesmente usando o operador de soma: // js str = 'abc' + 'def' console . log ( str ) > abcdef Alguns caracteres das nossas strings podem ser os mesmos usados na pr\u00f3pria linguagem. Isso nos obriga a termos que aprender como fazer um \"bypass\" desses caracteres. Abaixo temos uma tabela para refer\u00eancia. C\u00f3digo Significado \\(\\backslash\\) 0 Null \\(\\backslash\\) ' Aspas simples \\(\\backslash\\) \" Aspas compostas \\(\\backslash \\backslash\\) Barra invertida \\(\\backslash\\) n Nova linha \\(\\backslash\\) r Retorno \\(\\backslash\\) v Tabula\u00e7\u00e3o Vertical \\(\\backslash\\) t Tabula\u00e7\u00e3o \\(\\backslash\\) b Backspace \\(\\backslash\\) f form feed \\(\\backslash\\) uXXXX Unicode \\(\\backslash\\) xXX Latin-1 A partir do ECMAScript6 existe outra maneira de compor strings: por meio do uso da crase isso \u00e9 uma string . A vantagem desse m\u00e9todo, chamado de TemplateString \u00e9 que esse tipo de string \u00e9 especial que pode receber express\u00f5es interpret\u00e1veis como no exemplo abaixo: // js nome = \"bruno\" console . log ( nome ) > bruno linha = `meu nome \u00e9 ${ nome } ` console . log ( linha ) > meu nome \u00e9 bruno Podemos ver que na \u00faltima linha o resultado faz uso do valor da vari\u00e1vel nome . Provavelmente, sempre que a gente entra em um site que possui aquela mensagem amig\u00e1vel de \"Seja bem vindo, Fulano\", o programador usou essa fun\u00e7\u00e3o para produzir aquele texto. Tipo Objeto Objetos s\u00e3o uma boa parte do que faz o JS ser t\u00e3o poderoso. Cada objeto \u00e9 simplesmente uma cole\u00e7\u00e3o de pares nome-valor. Os nomes s\u00e3o as propriedades do objeto e os valores podem ser qualquer tipo de vari\u00e1vel que vimos logo antes (incluindo outros objetos e fun\u00e7\u00f5es). Quando a propriedade for uma fun\u00e7\u00e3o, dizemos que essa fun\u00e7\u00e3o \u00e9 um m\u00e9todo do objeto. // js var objeto1 = new Object (); // Criando o objeto \"objeto1\" objeto1 . name = \"bruno\" ; // modo 1 de criar uma propriedade objeto1 [ \"age\" ] = 28 ; // modo 2 de criar uma propriedade console . log ( objeto1 ) > { age : 28 , name : bruno } var objeto2 = { // modo de criar o objeto nome : \"bruno\" , // junto das propriedades idade : 28 } console . log ( objeto2 ) > { nome : bruno , idade : 28 } Para acessar o valor de uma propriedade em um objeto basta escrever algo como: objeto.propriedade (Python \u00e9 assim tamb\u00e9m). Datas e Horas Na elabora\u00e7\u00e3o de uma aplica\u00e7\u00e3o \u00e9 comum ter que lidar com var\u00e1veis do relacionadas ao tempo. Para isso o JS possui um tipo de objeto especialmente projetado para facilitar essa tratativa. O objeto Date() . Podemos usa-lo como: // js var a = new Date () // Atribui a data atual ao objeto var c = new Date ( string ) // Atribui a data por uma string var d = new Date ( Ano , Mes , Dia , Hora , Segundo , Milisegundos ) Geralmente estamos preocupados apenas com o dia, m\u00eas e ano. Para criar um objeto com esses valores basta ir colocando na mesma ordem do \u00faltimo elemento do exemplo acima. Aviso: Quando voc\u00ea for indicar o m\u00eas, saiba que para o JS, janeiro \u00e9 0 e dezembro \u00e9 11. Ent\u00e3o quando quisermos salvar a data 01/01/2022 usaremos Date(2022,0,1) . Como todo objeto, a vari\u00e1vel criada com o Date() possui v\u00e1rias propriedades e m\u00e9todos. Uma boa refer\u00eancia \u00e9 o material do MDN que pode ser visto aqui . Mas podemos elencar alguns m\u00e9todos importantes como: // js var z = new Date () z . getFullYear () z . getMonth () z . getDate () z . getDay () z . getHours () z . getMinutes () z . getSeconds () z . getMillisecondes () z . getTimes () Acho que n\u00e3o \u00e9 necess\u00e1rio explicar cada m\u00e9todo desse porque o nome \u00e9 bem alto explicativo. Arrays, Vetores ou Matrizes Um array \u00e9 uma estrutura de dados semelhante a uma lista. Em JS temos algumas maneiras de criar arrays: // js /* Modo 01 */ var a = new Array () a [ 0 ] = 'valor01' a [ 1 ] = 'valor02' /* Modo 02 */ var b = new Array ( 'valor01' , 'valor02' ) /* Modo 03 */ var c = [ 'valor01' , 'valor02' ] Todos os 3 modos produzem o mesmo resultado e podem ser usados alternadamente. Como qualquer objeto, existem v\u00e1rios m\u00e9todos muito \u00fateis dentro de um Array(). // js concat () // Junta dois ou mais vetores fill () // Preencher os elementos em um vetor com um valor est\u00e1tico find () // Retorna o valor do primeiro elemento em um vetor que atender ao filtro findIndex () // Retorna o \u00edndice do primeiro elemento em um vetor forEach () // Chama uma fun\u00e7\u00e3o para cada elemento do vetor indexOf () // Busca um elemento no vetor e retorna a sua posi\u00e7\u00e3o isArray () // Verifica se um objeto \u00e9 um vetor join () // Junta todos os elementos de um vetor em uma string lastIndexOf () // Pesquisar o vetor por um elemento, come\u00e7ando no final pop () // Remove o \u00faltimo elemento de um vetor e retorna o elemento push () // Adiciona novos elementos para o final de um vetor reverse () // Inverte a ordem dos elementos em um vetor slice () // Seleciona uma parte de um vetor e retorna o novo vetor sort () // Classifica os elementos de um vetor splice () // Adiciona/remove elementos de um vetor toString () // Converte um vetor em uma string e retorna o resultado valueOf () // Retorna o valor primitivo de um vetor Coment\u00e1rio: Eu achei estranho que o material n\u00e3o falou nada sobre vetor e matriz. Ent\u00e3o uma hora eu volto para expandir essa parte com esses outros dois tipos de dados. Controle de Fluxo Em qualquer linguagem de programa\u00e7\u00e3o 7 existem maneiras de organizar blocos de c\u00f3digo para o compilador/interpretador saber o que priorizar na hora do processamento do c\u00f3digo. Em JS isso \u00e9 feito com o uso das chaves { }. Declara\u00e7\u00f5es de Sele\u00e7\u00e3o Quando estamos fazendo um script de c\u00f3digo, \u00e9 muito comum termos que nos adaptar as situa\u00e7\u00f5es onde determinados eventos podem ou n\u00e3o acontecer. Para isso, usamos algumas estruturas l\u00f3gicas que permitem o processamento de blocos de texto apenas se alguma condi\u00e7\u00e3o predeterminada seja satisfeita. Ou seja, usamos um condicionante do tipo \"Se-Ent\u00e3o\". // js if ( expressao ) { bloco de codigo caso true } else { outro bloco de codigo caso false } Existem situa\u00e7\u00f5es onde existem m\u00faltiplas possibilidades. Pensando nisso, o JS possui um operador de switch que permite v\u00e1rios condicionantes de maneiras mais simples do que v\u00e1rios if s sucessivos. // c# switch ( expressao ) { case valor01 : bloco_se_01 break case valor02 : bloco_se_02 break default : bloco_se_nao_01_ou_02 break } Veja que usamos o token break para indicar que vamos para outra condicional. N\u00e3o podemos esquecer disso. Abaixo temos um exemplo de uma aplica\u00e7\u00e3o simples usando esse m\u00e9todo de gest\u00e3o de fluxo. N\u00e3o se preocupe em entender o c\u00f3digo inteiro, foque apenas no que estamos estudando. // js // Fun\u00e7\u00e3o que recebe um input no terminal const readLine = require ( 'readline' ). createInterface ({ input : process . stdin , output : process . stdout }) readLine . question ( 'Qual seu nome? ' , name => { switch ( name ) { case 'bruno' : console . log ( `OI, BRUNO!` ) break case 'mario' : console . log ( 'Salve, Mario!' ) break default : console . log ( `Ol\u00e1, ${ name } . Seja bem-vindo(a)!` ) } readLine . close () }) > Qual seu nome ? bruno > OI , BRUNO ! > Qual seu nome ? mario > Salve , Mario ! > Qual seu nome ? pedro > Ol\u00e1 , pedro . Seja bem - vindo ( a ) ! Declara\u00e7\u00f5es de Repeti\u00e7\u00e3o Al\u00e9m de termos tokens que nos permitem executar apenas alguns blocos de c\u00f3digo. Existem outros que nos permitem usarmos um mesmo bloco de c\u00f3digo repetidamente. Chamamos essas estruturas l\u00f3gicas de la\u00e7os de repeti\u00e7\u00e3o. A primeira maneira de criarmos um la\u00e7o de repeti\u00e7\u00e3o em JS \u00e9 por meio do token while do seguinte modo: // js // Exemplo de loop com while var i = 0 while ( i <= 5 ) { console . log ( `Contagem: ${ i } ` ) i ++ // soma + 1 ao valor de i } > Contagem : 0 > Contagem : 1 > Contagem : 2 > Contagem : 3 > Contagem : 4 > Contagem : 5 Primeiro criamos a vari\u00e1vel i e usamos a estrutura de loop while para a seguinte regra \"Se i for menor igual a 5 ent\u00e3o mostre a mensagem 'Contagem: N\u00famero i'\". Quando o valor da vari\u00e1vel i \u00e9 6, a express\u00e3o do loop retorna um false e sa\u00edmos do loop. O operador que aprendemos anteriormente faz um loop enquanto a condi\u00e7\u00e3o expressa entre os par\u00eanteses n\u00e3o for false. Mas existem situa\u00e7\u00f5es onde queremos executar o bloco de c\u00f3digo um n\u00famero definido de vezes. Para isso o JS possui o token for . // js // Exemplo de loop com for let frutas = [ 'pera' , 'uva' , 'maca' , 'banana' ] for ( let index = 0 ; index < frutas . length ; index ++ ) { console . log ( frutas [ index ]) } > pera > uva > maca > banana Nesse exemplo acima vemos que o par\u00eanteses da express\u00e3o do for possui 3 linhas de c\u00f3digos separadas por ponto e v\u00edrgula. Na primeira, criamos uma vari\u00e1vel index. Na segunda, temos a nossa express\u00e3o que avalia se o index \u00e9 menor que o tamanho do array frutas. E na terceira, temos a regra de incremento + 1 para cada itera\u00e7\u00e3o do loop. Dentro do loop, n\u00f3s mandamos ele lan\u00e7ar no terminal o valor do elemento do array correspondente ao index. Fun\u00e7\u00f5es N\u00f3s aprendemos anteriormente que fun\u00e7\u00f5es s\u00e3o umas das var\u00e1veis do tipo objeto no JS. Sempre que pudermos generalizar um tratamento de dados por meio da cria\u00e7\u00e3o de uma fun\u00e7\u00e3o, devemos optar por esse caminho porque assim tornamos a manuten\u00e7\u00e3o dos nossos programas melhor e evitamos ter que repetir linhas de c\u00f3digo muito parecidas. Mesmo sendo um objeto, o JS possui um token espec\u00edfico para a cria\u00e7\u00e3o de fun\u00e7\u00f5es. Abaixo temos dois exemplos adaptados do material do curso. // js // Criacao de uma funcao de soma function soma ( x , y ) { var total = x + y return total } soma ( 2 , 3 ) > 5 Para o segundo exemplo, n\u00f3s queremos construir uma fun\u00e7\u00e3o que retorna a m\u00e9dia dos valores apresentados entre os par\u00eanteses. Para isso, precisaremos de um dos tokens que vimos na se\u00e7\u00e3o passada. Sabemos muito bem que a m\u00e9dia \u00e9 calculada pela soma dos \\(n\\) valores dividida pela quantidade \\(n\\) . Para isso, teremos que usar o token de la\u00e7o de repeti\u00e7\u00e3o. // js function media () { var soma = 0 n = arguments . length for ( var i = 0 ; i < n ; i ++ ) { soma = arguments [ i ] + soma } return soma / n } media ( 2 , 3 , 4 , 5 ) > 3.5 Calma, eu sei que em uma primeira vista \u00e9 estranho esse objeto arguments ter sido chamado do nada. Acontece que no JS (e em muitas linguagens) alguns objetos, a exemplo das fun\u00e7\u00f5es, possuem m\u00e9todos que podem ser usados mesmo no momento da sua cria\u00e7\u00e3o. Nesse caso, \u00e9 o exemplo desse objeto que nos diz a quantidade de argumentos que foram inseridos na nossa fun\u00e7\u00e3o media(). Tamb\u00e9m podemos usar as fun\u00e7\u00f5es para cria\u00e7\u00e3o de estruturas padronizadas de objetos que s\u00e3o conhecidas como classes . Abaixo vamos criar uma estrutura para objetos do tipo Pessoa . // js function Pessoa ( primeiro , ultimo ) { this . primeiro = primeiro this . ultimo = ultimo this . nomeCompleto = function () { return this . primeiro + ' ' + this . ultimo } this . nomeCompletoInvertido = function () { return this . ultimo + ' ' + this . primeiro } } var chefe = new Pessoa ( 'Bruno' , 'Ruas' ) console . log ( chefe . nomeCompleto ) console . log ( chefe . nomeCompletoInvertido ) > Bruno Ruas > Ruas Bruno Novamente, temos um termo sendo usado sem que antes ele tenha sido criado. Nesse caso \u00e9 o termo this . Ele \u00e9 usado para fazer refer\u00eancia ao objeto criado (ou classe) como podemos ver no chamamento dos valores do console.log . Outra novidade \u00e9 que criamos uma `c\u00f3pia'' do objeto Pessoa s\u00f3 que com um outro nome: chefe`. Arrow Functions Agora vamos entrar num ponto que, para mim, foi bem dif\u00edcil de entender no come\u00e7o. O JS permite que a constru\u00e7\u00e3o de fun\u00e7\u00f5es an\u00f4nimas , ou seja, fun\u00e7\u00f5es que n\u00e3o precisam de nomes definidos. Mas antes de aprendermos mais sobre isso, precisamos saber que existem diferentes modos de se criar uma fun\u00e7\u00e3o em JS. Abaixo temos 3 maneiras de se criar a fun\u00e7\u00e3o soma . // js // forma tradicional soma = function ( a , b ) { return a + b } //forma com arrow function soma = ( a , b ) => { return a + b } //arrow function com chaves omitidas soma = ( a , b ) => a + b Agora que entendemos um pouco melhor a constru\u00e7\u00e3o de fun\u00e7\u00f5es em JS, podemos ir mais fundo nas arrow functions . Esse m\u00e9todo de defini\u00e7\u00e3o de fun\u00e7\u00f5es foi criado para facilitar a cria\u00e7\u00e3o de fun\u00e7\u00f5es dentro de contextos, ou seja, se voc\u00ea est\u00e1 criando uma fun\u00e7\u00e3o em uma linha de c\u00f3digo normal (sem estrar em um bloco de c\u00f3digo) \u00e9 melhor usar a forma tradicional. Agora, se voc\u00ea estiver em um contexto diferente (como em um par\u00e2metro de um objeto ou mesmo uma fun\u00e7\u00e3o) \u00e9 melhor usar a arrow function. Assim como os outros objetos, existem propriedades e m\u00e9todos das arrow functions que podemos usar. Um exemplo disso \u00e9 o operador this que faz refer\u00eancia ao bloco em que nossa arrow functions est\u00e1 contida. Em uma fun\u00e7\u00e3o normal, n\u00f3s aprendemos que esse operador faz refer\u00eancia \u00e0 pr\u00f3pria fun\u00e7\u00e3o. Abaixo temos um exemplo adaptado do material. // js // usando 'this' em uma arrow function var Pessoa2 = { nome : 'Bruno' , amigos : [ 'Ana' , 'Clarck' , 'Bruce' ], exibeAmigos () { this . amigos . forEach ( f => console . log ( this . nome + ' \u00e9 amigo de ' + f )) } } Pessoa2 . exibeAmigos () > Bruno \u00e9 amigo de Ana > Bruno \u00e9 amigo de Clarck > Bruno \u00e9 amigo de Bruce Vamos ver o que esse c\u00f3digo acima nos ensina. Primeiro n\u00f3s criamos uma vari\u00e1vel de objeto chamado Pessoa2 e atribu\u00edmos duas propriedades a ela: nome e amigos. Sendo que a propriedade `amigos' \u00e9 um array com 3 elementos. Como Pessoa2 \u00e9 um objeto, n\u00f3s podemos criar m\u00e9todos dentro dele (que nada mais s\u00e3o do que fun\u00e7\u00f5es em um objeto), e \u00e9 exatamente o que fizemos com a fun\u00e7\u00e3o exibeAmigos(). Quando criamos o m\u00e9todo exibeAmigos, n\u00f3s usamos o operador this em um contexto onde ele faz refer\u00eancia ao bloco que cont\u00e9m a fun\u00e7\u00e3o, nesse caso, \u00e9 a vari\u00e1vel Pessoa2. Na primeira linha da nossa fun\u00e7\u00e3o exibeAmigos n\u00f3s usamos um m\u00e9todo Dentro de fun\u00e7\u00e3o exibeAmigos n\u00f3s chamamos a propriedade amigos do nosso objeto Pessoa2 por meio do 'this'. Como j\u00e1 vimos, um array \u00e9 um objeto em JS, portanto, ele possui v\u00e1rias propriedades e m\u00e9todos dentro dele. O forEach que est\u00e1 ali \u00e9 precisamente uma desses m\u00e9todos desse objeto que faz um loop para cada elemento do array. Dentro do loop criado pelo m\u00e9todo forEach do nosso array amigos n\u00f3s criamos uma arrow function que usa a vari\u00e1vel f (que nada mais \u00e9 do que o elemento do array no loop). Ent\u00e3o n\u00f3s fizemos o seguinte, para cada elemento do array que agora chamamos de f, vamos fazer um console.log que nos d\u00e1 o nome da Pessoa2, a string \"conhece\" e o nome do amigo que \u00e9 a vari\u00e1vel f. Com isso temos o resultado apresentado no final desse bloco de c\u00f3digo. Com o tempo as coisas v\u00e3o ficar menos confusas, mas j\u00e1 podemos ver que o JS possui bastante metodologias de processamento de informa\u00e7\u00e3o que teremos que dominar para tirar o m\u00e1ximo das nossas aplica\u00e7\u00f5es web. Documento Object Model (DOM) Como o contexto de aplica\u00e7\u00e3o do JS sempre foi o web, essa linguagem possui algumas integra\u00e7\u00f5es ao ambiente do navegador que s\u00e3o muito \u00fateis para a constru\u00e7\u00e3o de aplica\u00e7\u00f5es verdadeiramente inteligentes. Uma das capacidades mais relevantes \u00e9 a de alterar estruturas HTML e CSS por meio de c\u00f3digos escritos em JS. Isso \u00e9 feito por interm\u00e9dio da API Document Object Model (DOM) que \u00e9 um padr\u00e3o da W3C para os navegadores. Abaixo temos os principais elementos que a comp\u00f5e. Todos esses objetos est\u00e3o vinculados ao objeto maior window que \u00e9 a janela do navegador. history navigator location screen document link anchor form button check box radio password reset submit Cada um desses elementos possui informa\u00e7\u00f5es e podem ser manipulados para conseguirmos construir as aplica\u00e7\u00f5es da maneira como quisermos. Coment\u00e1rio: No material do curso n\u00f3s s\u00f3 aprofundamos em dois desses v\u00e1rios elementos. Depois eu volto aqui a medida que for aprendendo mais sobre os outros. Objeto Window O objeto window \u00e9 o representante da da janela do browser. Ele cont\u00e9m toda a hierarquia que mostramos nessa lista de elementos acima. Al\u00e9m de conter todos esses elementos dentro dele, esse objeto (Como o pr\u00f3prio nome diz, tudo no DOM s\u00e3o, em algum grau, objetos. Mantenha isso em mente!) possui m\u00e9todos e propriedades que s\u00e3o \u00fateis para o gerenciamento das nossas aplica\u00e7\u00f5es. Na parte de armazenamento de dados o window nos d\u00e1 duas maneiras: localStorage e sessionStorage . No primeiro os dados s\u00e3o mantidos mesmo se o navegador seja fechado. J\u00e1 o sessionStorage mant\u00e9m os arquivos apenas enquanto o navegador \u00e9 mantido aberto. Abaixo temos um exemplo de como usar esses reposit\u00f3rios. // js // guardando dados no reposit\u00f3rio de sess\u00e3o sessionStorage . setItem ( 'login' , 'Bruno Ruas' ) alert ( 'O usu\u00e1rio logado \u00e9: ' + sessionStorage . getItem ( 'login' )) > Aparece um popup com a mensagem \"O Usu\u00e1rio logado \u00e9: Bruno Ruas\" Veja que para salvar o dado, temos o uso do par 'nome'-'valor' e do m\u00e9todo setItem . Para obter o dado, basta usar o m\u00e9todo getItem e passar o nome do valor salvo anteriormente. Tamb\u00e9m podemos atrelar algumas funcionalidades ao tempo. \u00c9 bem comum vermos depois de x minutos a se\u00e7\u00e3o de um site ser encerrada, por exemplo. O objeto window possui algumas maneiras de lidarmos com o tempo: setInterval(funcao, intervalo) - Browser executa uma fun\u00e7\u00e3o continuamente a cada x milisegundos clearInterval() - Cancela a repeti\u00e7\u00e3o da fun\u00e7\u00e3o setTimeout(funcao,intervalo) - Agenda a execu\u00e7\u00e3o de uma fun\u00e7\u00e3o com um delay de x milissegundos clearTimeout() - Cancela o agendamento Object Document Logo ap\u00f3s o navegador processar os arquivos da p\u00e1gina web, o objeto document passa a existir e pode ser manipulado pelo nosso c\u00f3digo JS. No material temos uma lista das principais propriedades que esse objeto possui (A descri\u00e7\u00e3o eu s\u00f3 vou colocar se for algo n\u00e3o \u00f3bvio). Propriedade Descri\u00e7\u00e3o addEventListener Uma fun\u00e7\u00e3o dispara se um evento ocorre baseURI Retorna a URI body Retorna ou modifica o body cookie Retorna todos os cookies characterSet Charset da p\u00e1gina documentElement Todo o html documentoURI URI do document forms Um array com os forms do html getElementsById getElementsByClassName getElementsByName getElementsByTagName images lastModified Data de modifica\u00e7\u00e3o do documento links Array com todos os links querySelector Primeiro elemento por um seletor CSS querySelectorAll Array com todos os de um seletor CSS removeEventListener scripts Array com os scripts do documento title URL N\u00e3o tem muito pra onde correr. S\u00f3 vamos aprender bem usando, mas por agora, basta termos em mente que essas funcinalidades existem e poder\u00e3o ser \u00fateis em algum momento. Abaixo tempos um exemplo usando uma fun\u00e7\u00e3o JS para alterar um elemento do body atrav\u00e9s do DOM. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> <!-- JavaScript --> < script type = 'text/javascript' > function Executar () { document . getElementById ( 'saida' ). innerHTML = Date () } < /script> < /head> < body > < button type = \"button\" onclick = \"Executar()\" > Aperte ! < /button> < h1 > Sa\u00edda < /h1> < div id = \"saida\" > Condi\u00e7\u00e3o Inicial < /div> < /body> < /html> No c\u00f3digo acima temos o script em JS dentro do pr\u00f3prio arquivo HTML usando a tag <script> . Nesse script n\u00f3s criamos a fun\u00e7\u00e3o Executar() que nada mais faz do que procurar o elemento HTML cujo id \u00e9 igual a 'sa\u00edda' e substitui o HTML desse elemento pela data atual vinda da fun\u00e7\u00e3o nativa Date() . Abaixo podemos ver a diferen\u00e7a entre a situa\u00e7\u00e3o inicial e a final ap\u00f3s apertar o bot\u00e3o. Objeto Navigator Como o pr\u00f3prio deixa claro, o objeto navigator representa o software do navegador usado pelo user. Esse objeto nos d\u00e1 algumas informa\u00e7\u00f5es \u00fateis sobre o navegador usado. Abaixo temos uma tabela com alguns dos m\u00e9todos contidos nesse objeto. Propriedade Descri\u00e7\u00e3o appCodeName Codigo do navegador appName Nome do navegador appVersion Vers\u00e3o do navegador cookieEnabled Cookies habilitados geolocation Geolocation language onLine Se o browser est\u00e1 online platform Qual sistema operacional product Engine do navegador userAgent User-agent que o browser envia ao navegador Abaixo temos um exemplo de p\u00e1gina web adaptado do material do curso que faz uso o objeto navegador e retorna a geolocaliza\u00e7\u00e3o do navegador. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> < script type = \"text/javascript\" > // fun\u00e7\u00e3o que recebe as coord e retorna um string function showPosition ( position ) { lat = position . coords . latitude long = position . coords . longitude texto = `Lat: ${ lat } e Long ${ long } ` document . getElementById ( 'saida' ). innerHTML = texto } // fun\u00e7\u00e3o que muda o HTML do elemento saida function getPosition () { if ( window . navigator . geolocation ) { window . navigator . geolocation . getCurrentPosition ( showPosition ) } else { x . innerHTML = 'N\u00e3o tivemos acesso a' + 'sua localiza\u00e7\u00e3o!' } } < /script> < /head> < body > < button type = \"button\" onclick = \"getPosition()\" > Geolocation < /button> < h1 > Mensagem < /h1> < div id = \"saida\" > Sua localiza\u00e7\u00e3o vai aparecer aqui !< /div> < /body> < /html> Nesse c\u00f3digo acima temos uma p\u00e1gina simples com um bot\u00e3o que, ao ser ativado, dispara a fun\u00e7\u00e3o getPosition() . Essa fun\u00e7\u00e3o dispara uma outra fun\u00e7\u00e3o chamada showPosition . O resultado pode ser visto na imagem abaixo. Eventos Outra funcionalidade interessante do DOM \u00e9 a capacidade de usarmos n\u00e3o apenas os elementos da p\u00e1gina mas tamb\u00e9m o contexto (ou eventos) em que esses elementos se encontram. Por exemplo, \u00e9 comum vermos uma imagem aumentar de tamanho quando colocamos o mouse sobre ela. Com essa funcionalidade, conseguimos explorar v\u00e1rios cen\u00e1rios de intera\u00e7\u00e3o do usu\u00e1rio com a p\u00e1gina. No exemplo abaixo, temos o uso de dois contextos do mouse sobre um elemento de texto. Quando o mouse est\u00e1 sobre o elemento, n\u00f3s mudamos a cor dele para vermelho. Quando o mouse n\u00e3o est\u00e1 sobre o elemento, a cor dele se torna preto. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> < /head> < body > < p onmouseover = \"this.style.color='red'\" onmouseout = \"this.style.color='black'\" > Texto < /p> < /body> < /html> Podemos ver mais um exemplo do uso do token this mas dessa vez fora de um bloco de c\u00f3digo de uma fun\u00e7\u00e3o. Nesse contexto, esse operador faz refer\u00eancia ao elemento HTML e altera o seu valor do par\u00e2metro de estilo que indicamos (a cor do texto). Mesmo sendo poss\u00edvel fazer uso do atributo de evento direto no HTML, como fizemos no exemplo anterior, a boa pr\u00e1tica \u00e9 manter essas features em um arquivo JS \u00e0 parte (igual n\u00f3s fizemos com o CSS) pois isso torna o arquivo de estrutura mais f\u00e1cil de ler. Abaixo temos exatamente a mesma funcionalidade mas usando o campo de script do meta mas que poderia ser hospedado em um arquivo .js em separado. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> < /head> < body > < p id = \"texto\" > Texto < /p> < /body> < script type = \"text/javascript\" > var elem = window . document . getElementById ( 'texto' ) elem . addEventListener ( 'mouseout' , function () { window . document . getElementById ( 'texto' ). style . color = '' window . document . getElementById ( 'texto' ). style . fontSize = '' }, false ) elem . addEventListener ( 'mouseover' , function () { window . document . getElementById ( 'texto' ). style . color = 'red' window . document . getElementById ( 'texto' ). style . fontSize = '20px' }, false ) < /script> < /html> Veja que primeiro n\u00f3s criamos uma vari\u00e1vel elem utilizando o getElementById . Como essa vari\u00e1vel \u00e9 um objeto, podemos usar um de seus m\u00e9todos chamado addEventListener que recebe 3 par\u00e2metros: o primeiro \u00e9 o gatilho de disparo, o segundo \u00e9 a fun\u00e7\u00e3o que ser\u00e1 executada e o terceiro \u00e9, para todos os efeitos, sempre falso. No exemplo acima temos dois gatilhos de eventos cadastrados. O primeiro \u00e9 o mouseout que nada mais \u00e9 que o padr\u00e3o. O segundo \u00e9 mouseover que dispara sempre que o mouse estiver sobre o elemento selecionado. Mesmo que a primeira vista pare\u00e7a mais simples usar os atributos de contexto direto no HTML, n\u00f3s precisamos pensar em situa\u00e7\u00f5es onde a aplica\u00e7\u00e3o se torna demasiada grande. Nesses casos, \u00e9 muito melhor, para controlar a evolu\u00e7\u00e3o da nossa aplica\u00e7\u00e3o web e garantir uma boa manuten\u00e7\u00e3o, mantermos em arquivos separados tanto o estilo quanto a funcionalidade. Outra coisa importante a ser notada \u00e9 que o script deve estar abaixo da vari\u00e1vel que ser\u00e1 manipulada. Primeiro o elemento precisa existir para usarmos o nosso c\u00f3digo. Esse \u00e9 o motivo da tag script estar na parte de baixo da p\u00e1gina e n\u00e3o no head como nos outros exemplos. Na tabela a baixo temos os principais tipos de gatilhos que podem ser usados pelo DOM. Para usar algum desses no direto no HTML \u00e9 necess\u00e1rio colocar a palavra on' na frente. Por exemplo, click' vira `onclick'. Propriedade Descri\u00e7\u00e3o click Click em link ou elemento change Default alterado em input texto focus Foco em um elemento blur Ao tirar o foco mouseover Mouse em cima mouseout Mouse em outro lugar select Select em um form submit Submit em um form resize Mudan\u00e7a na janela do broser load Algum elemento \u00e9 carregado unload Ao sair da p\u00e1gina Coment\u00e1rio: Aqui o professor da disciplina faz o desafio de criarmos uma calculadora simples com o uso dos elementos estudados nessa se\u00e7\u00e3o. Um dia eu volto aqui e fa\u00e7o esse desafio. A Nota\u00e7\u00e3o de Objetos (JSON) O JavaScript Object Notation (JSON) \u00e9 um formato de descri\u00e7\u00e3o de dados que se baseia em texto e pode ser lido diretamente sem muita dificuldade. Existem v\u00e1rios outros tipos de escrita de dados onde, geralmente, temos um trade-off entre efici\u00eancia versus simplicidade. Quanto mais pr\u00f3ximo da linguagem de m\u00e1quina, melhor \u00e9 pro computador processar mas mais dif\u00edcil \u00e9 para os humanos entender. Como o JSON se popularizou muito, diversas outras linguagens j\u00e1 possuem a capacidade de processar dados nesse formato. O que aumenta ainda mais a aceitabilidade dele como ve\u00edculo de envio e codifica\u00e7\u00e3o de informa\u00e7\u00e3o tanto no frontend quanto no backend. Falando em backend, com a populariza\u00e7\u00e3o de programas como nodejs, \u00e9 cada vez mais comuns a constru\u00e7\u00e3o de comunica\u00e7\u00e3o entre a camada de aplica\u00e7\u00e3o web e servidor atrav\u00e9s de APIs cuja atividade \u00e9, simplificadamente, receber JSON e enviar JSON. Como dito anteriormente, o JSON n\u00e3o \u00e9 o \u00fanico formato existente no mercado. Para destacar alguns outros, temos o XML, RDF, Planilhas, CSV, Documentos TXT, JPEG-2000, TIFF e v\u00e1rios outros formatos propriet\u00e1rios. Mas, sem d\u00favida, a competi\u00e7\u00e3o mais \u00e1rdua \u00e9 entre JSON e XML. Sintaxe do JSON Um arquivo JSON \u00e9 muito parecido com um bloco de c\u00f3digo JS. Come\u00e7a e termina com chaves {} e cada elemento \u00e9 formado por um par de nome-valor e s\u00e3o separados por v\u00edrgula. O JSON permite diferentes tipos de valores que podem ser dos mesmo tipos de dados que estudamos anteriormente para o JS. Abaixo temos um exemplo de um arquivo JS. // json { \"idade\" : 28 , \"nome\" : \"Bruno Ruas\" , \"materias\" : [ { \"materia\" : \"Econometria\" , \"professor\" : \"Bill Gates\" }, { \"materia\" : \"Microeconomia\" , \"professor\" : \"Steve Jobs\" } ], \"nerd\" : true } Nesse exemplo, podemos ver que o valor para Idade \u00e9 do tipo number. Nome \u00e9 uma string. Mat\u00e9rias \u00e9 um array, veja que ele est\u00e1 entre colchetes [] , exatamente como aprendemos antes. Cada elemento do nosso array de mat\u00e9rias \u00e9 um objeto, que come\u00e7am e terminam com chaves, com duas propriedades: mat\u00e9ria e professor. Por fim, temos um booliano para a pegunta \"\u00c9 nerd?\". Os outros tipos de dados como datas, geolocaliza\u00e7\u00e3o e outros, s\u00e3o passados em JSON como uma string. Temos que lembrar disso se um dia precisamos lidar com esse tipo de informa\u00e7\u00e3o. Coment\u00e1rio: Quando estamos criando um JSON dentro de um c\u00f3digo JS n\u00f3s n\u00e3o precisamos colocar as aspas no nome dos elementos. Mas \u00e9 padr\u00e3o que essas aspas sejam usadas em objetos JSON. Ent\u00e3o temos que ficar atentos a isso tamb\u00e9m. Objeto JSON no JavaScript Agora que sabemos um pouco sobre esse tipo de estrutura de dados, vamos aprender como manipular esse objeto dentro de um script JS. A maneira que o JS tem que trabalhar com JSON \u00e9 por meio de um objeto nativo da linguagem chamado, nem um pouco sem querer, de JSON. Esse objeto possui dois m\u00e9todos \u00fateis: Um parse() que recebe uma string e retorna um objeto na nota\u00e7\u00e3o JSON e um stringfy() que pega um objeto an\u00e1logo JSON e transforma em string. // JSON para string var Tex t oJSON = ' { \"Revistas\" : [ { \"titulo\" : \"V de Vingan\u00e7a\" , \"autor\" : \"Frank Miller\" }, { \"titulo\" : \"Batman - The Dark Knight\" , \"autor\" : \"Frank Miller\" }, { \"titulo\" : \"One Piece N\u00ba 29\" , \"autor\" : \"Eichiro Oda\" } ] } ' // Usando o m\u00e9todo de parse do JSON var banca = JSON . parse ( TextoJSON ) function listaTitulos () { lista = '' for ( let i = 0 ; i < banca . Revistas . length ; i ++ ) { lista += banca . Revistas [ i ]. titulo + ' - ' + banca . Revistas [ i ]. autor + ' ' } console . log ( lista ) } listaTitulos () > V de Vingan\u00e7a - Frank Miller > Batman - The Dark Knight - Frank Miller > One Piece N\u00ba 29 - Eichiro Oda Primeiro n\u00f3s criamos uma string no formato de um JSON. Depois passamos essa string pelo objeto JSON com o m\u00e9todo parse . Ap\u00f3s isso, n\u00f3s temos um objeto chamado banca com a mesma estrutura do nosso JSON desejado. Depois n\u00f3s criamos uma fun\u00e7\u00e3o de loop que retorna uma string com o t\u00edtulo, o autor e o car\u00e1cter especial de quebra de linha. Para converter nosso objeto novamente para string basta usarmos o seguinte comando: // js JSON . stringify ( banca , null , 2 ) O primeiro par\u00e2metro \u00e9 o objeto a ser convertido. O segundo n\u00f3s podemos colocar como null (Existe uma explica\u00e7\u00e3o para isso mas n\u00e3o precisamos dela agora). Por fim, o terceiro diz o tamanho do espa\u00e7o para melhorar a identa\u00e7\u00e3o. Saber como lidar com objetos JSON dentro de um script JS nos permite construir aplica\u00e7\u00f5es inteiras apenas com JS. Um framework muito famoso hoje em dia chamado MEAN (MongoDb, Express, Angular e NodeJS) utiliza o JS como principal linguagem para constru\u00e7\u00e3o de toda a aplica\u00e7\u00e3o web. Programa\u00e7\u00e3o Ajax Diferente do que vimos at\u00e9 agora, o Asynchronous Javascript and XML ou AJAX, n\u00e3o \u00e9 uma tecnologia propriamente dito mas sim uma t\u00e9cnica de programa\u00e7\u00e3o que utiliza diferentes tecnologias. A ideia geral \u00e9 construir ferramentas que possuam as seguintes caracter\u00edsticas: Paginas com padr\u00e3o XHTML e CSS Din\u00e2mica atrav\u00e9s do DOM Troca de informa\u00e7\u00f5es por JSON, XML ou outro Recupera\u00e7\u00e3o ass\u00edncrona de dados com o objeto XMLHTTPRequest ou APT fetch JavaScript como linguagem Algumas aplica\u00e7\u00f5es muito famosas foram constru\u00edda usando, em algum grau, essa abordagem. Podemos citar o Youtube, Gmail, Google Earth e mais um monte de outras aplica\u00e7\u00f5es do Google. Para entendermos como o AJAX \u00e9 diferente da abordagem tradicional, vamos comparar as duas maneiras. No modelo tradicional, o browser faz requisi\u00e7\u00f5es ao web server que, por sua vez, devolve a p\u00e1gina solicitada com as devidas altera\u00e7\u00f5es previamente programadas. Contudo, nessa abordagem, toda a intelig\u00eancia de neg\u00f3cio \u00e9 mantida no ambiente do servidor. O esquema abaixo nos permite relembrar como \u00e9 feita a comunica\u00e7\u00e3o entre essas duas entidades. O problema dessa abordagem tradicional \u00e9 que os dados enviados entre servidor e browser s\u00e3o p\u00e1ginas inteiras. O m\u00e9todo AJAX trouxe a possibilidade de quebramos esses dados em \"pacotes\" menores de informa\u00e7\u00f5es. Nesse caso, ao inv\u00e9s de requisi\u00e7\u00f5es de p\u00e1ginas inteiras, podemos pedir ao servidor apenas \"peda\u00e7os\" menores de informa\u00e7\u00e3o. A metodologia AJAX tr\u00e1s para o lado do cliente (client side) parte da tarefa de processar os dados. Parte do processamento fica no server side e a outra parte \u00e9 feita no client. Durante a sess\u00e3o, v\u00e1rias requisi\u00e7\u00f5es s\u00e3o feitas do browser (que cont\u00e9m o c\u00f3digo JS) para o server por meio do uso do XMLHTTPRequest ou API Fetch. A atualiza\u00e7\u00e3o da p\u00e1gina acontece via DOM e n\u00e3o pelo recebimento de um HTML novo. Essa comunica\u00e7\u00e3o acontece geralmente por meio de arquivos XML ou JSON (mas pode ser qualquer outro formato de dados). Ao abrirmos a aplica\u00e7\u00e3o pela primeira vez, o servidor nos envia a maior parte dos dados que ser\u00e3o usados na visualiza\u00e7\u00e3o (a base de toda a aplica\u00e7\u00e3o). Depois disso, todas as mudan\u00e7as na tela ser\u00e3o baseadas em DOM e arquivos de dados JSON ou XML. Podemos elencar algumas vantagens desse modelo de constru\u00e7\u00e3o de solu\u00e7\u00e3o web: Redu\u00e7\u00e3o do tr\u00e1fego na rede Redu\u00e7\u00e3o de carga no web server Flexibilidade no desenolvimento do lado do server (foco em APIs) Mas como tudo na vida, o AJAX possui algumas desvantagens: Maior complexidade de desenvolvimento Aplica\u00e7\u00e3o mais pesada no client S\u00f3 funciona em navegadores mais modernos Pode precisar de ajustes dependendo do navegador do client O usu\u00e1rio perde a op\u00e7\u00e3o de avan\u00e7ar e voltar no seu hist\u00f3rico Objeto XMLHTTPRequest Agora que entendemos melhor o que \u00e9 o AJAX e como podemos construir aplica\u00e7\u00f5es com ele, precisamos entender bem uma das suas principais ferramentas: o objeto XMLHTTPRequest. Inicialmente criado pelo Microsoft e adaptado pelo Mozilla, o XMLHTTPRequest \u00e9 um objeto (mas tamb\u00e9m pode ser interpretado como uma API) que \u00e9 fornecido pelo pr\u00f3prio navegador e que permite que nosso c\u00f3digo JS troque dados com um servidor web. O objeto XMLHTTPRequest \u00e9 a base do AJAX. Mas cuidado. Apesar do nome, ele aceita a troca de informa\u00e7\u00f5es em diferentes formatos al\u00e9m do XML: JSON, HTML, TXT, XML. Al\u00e9m disso por ele podemos nos conectar \u00e0 servi\u00e7os por outros m\u00e9todos al\u00e9m do HTTP. Para aprender como usar essa ferramenta, vamos por partes. Podemos come\u00e7ar o nosso script com a cria\u00e7\u00e3o de um objeto que ser\u00e1 do tipo XMLHTTPRequest. // js // fun\u00e7\u00e3o caso a conex\u00e3o funcione function success () { window . document . getElementById ( 'texto' ). innerHTML = this . responseText } // fun\u00e7\u00e3o caso a conex\u00e3o de erro function error ( err ) { console . log ( 'Erro:' , err )} // cria\u00e7\u00e3o do objeto XmlHttpRequest var xhr = new XMLHttpRequest () // executa a fun\u00e7\u00e3o success se a requisi\u00e7\u00e3o funcionar xhr . onload = success // executa um fun\u00e7\u00e3o erro se a conex\u00e3o nao funcionar xhr . onerror = error // defindo a requisicao xhr . open ( 'GET' , 'https://api.github.com/users/brunoruas2' ) xhr . send () Esse script acima executa uma consulta a uma url do github que retorna um JSON com informa\u00e7\u00f5es a respeito da conta de algum usu\u00e1rio. Essa requisi\u00e7\u00e3o \u00e9 feita no m\u00e9todo send() . Em caso de sucesso, o xhr dispara a fun\u00e7\u00e3o success que, por sua vez, altera usa o DOM para printar na tela o JSON coletado. Em caso de erro, ele mostra, no console (Para acessar basta apertar f12 em qualquer navegador moderno) com uma mensagem de texto que cont\u00e9m o erro. Como podemos perceber (e como quase tudo em JS) existem v\u00e1rios m\u00e9todos \u00fateis no objeto XMLHttpRequest que devemos aprender. Abaixo temos uma tabela de refer\u00eancia com esses m\u00e9todos. Propriedade Descri\u00e7\u00e3o status Codigo HTTP da resposta statusText Texto da resposta readyState Status do pedido responseTexte Txt bruto da resposta responseXML Resposta em um objeto no DOM. Mas s\u00f3 funciona Se o tipo for text onreadystatechange Dispara uma fun\u00e7\u00e3o quando o readState muda onerror Executa fun\u00e7\u00e3o se erro onprogress Dispara uma fun\u00e7\u00e3o em caso de demora na resposta onload Fun\u00e7\u00e3o se o send funcionar Para cada requisi\u00e7\u00e3o, o m\u00e9todo readyState retorna um est\u00e1gio diferente. Podemos pensar que cada requisi\u00e7\u00e3o possui uma s\u00e9rie de passos a serem feitos at\u00e9 a sua conclus\u00e3o. Esses passos s\u00e3o lidos pelo m\u00e9todo onreadystatechange e possuem caracter\u00edsticas que podemos ver na lista abaixo. Os est\u00e1gios de uma requisi\u00e7\u00e3o s\u00e3o: Uninitialized (0) - Objeto criado mas n\u00e3o iniciado Loading (1) - Objeto criado mas n\u00e3o usou o m\u00e9todo send() Loaded (2) - Send() executado mas os cabe\u00e7alhos n\u00e3o est\u00e3o dispon\u00edveis Interactive (3) - Alguns dados recebidos mas n\u00e3o completamente Completed (4) - Todos os dados foram recebidos e podem ser lidos Abaixo temos um exemplo de uso do readyState para verifica\u00e7\u00e3o do status da chamada. // js function requisicaoAJAX () { var xmlhttp = new HMLHttpResquest () } xmlhttp . onreadystatechange = function () { if ( xmlhttp . readyState == 4 && xmlhttp . status == 200 ) { divElement = document . getElementById ( 'texto' ) divElement . innerHTML = xmlhttp . responseText } } xmlhttp . open ( \"GET\" , \"www.google.com/api.php\" ) xmlhttp . send () Podemos ver que n\u00f3s criamos uma fun\u00e7\u00e3o disparada apenas quando o status muda e, como colocamos uma condi\u00e7\u00e3o dentro, s\u00f3 teremos a realm modifica\u00e7\u00e3o caso o status da comunica\u00e7\u00e3o seja 200 (que \u00e9 o padr\u00e3o para sucesso) e o status da comunica\u00e7\u00e3o seja o de completo. API Fetch Os navegadores atuais nos permitem uma alternativa ao XMLHttpRequest chamada API Fetch. A vantagem \u00e9 que essa nova tecnologia nos permite fazer uso das promises que simplifica a escrita da programa\u00e7\u00e3o ass\u00edncrona. Podemos ver um exemplo abaixo. // js < script > fetch ( 'https:api.github.com/users/brunoruas2' ) . then ( res => res . json ()) . then ( data => console . log ( data )) . catch ( err => console . log ( 'Erro: ' , err )) < /script> Coment\u00e1rio: O material n\u00e3o se aprofunda no tema, ent\u00e3o eu volto aqui para aprofundar no futuro. Aqui tem um link com um material de refer\u00eancia da MDN. Bibliografia SIKOS, L. Web Standards. Mastering HTML5, CSS3, and XML . DACONTA, M. C.; SMITH, K. T.; OBRST, L. J. The semantic Web: a guide to the future of XML, Web services, and knowledge management . [s. l.]: Wiley, [s. d.]. ISBN 0471432571 SILVA, Maur\u00edcio Samy. HTML 5: a linguagem de marca\u00e7\u00e3o quer revolucionar a web . 2. ed. rev. e ampl. [s. l.]: Novatec, 2014. ISBN 9788575224038 SANDERS, William B. Smashing HTML5: t\u00e9cnicas para a nova gera\u00e7\u00e3o da web . Porto Alegre: Bookman, 2012. xiv, 354 p. ISBN 9788577809608 DEITEL, Paul J., Deitel, Harvey M. Ajax, Rich. Internet Applications e Desenvolvimento Web para Programadores . Pearson 776. ISBN 9788576051619 SILVA, Maur\u00edcio Samy. CSS3: desenvolva aplica\u00e7\u00f5es web profissionais com uso dos poderosos recursos de estiliza\u00e7\u00e3o das CSS3 . S\u00e3o Paulo: Novatec, 2011. 494 p. ISBN 9788575222898 BERTAGNOLLI, S. de C.; MILETTO, E. M. Desenvolvimento de software II: introdu\u00e7\u00e3o ao desenvolvimento web com HTML, CSS, JavaScript e PHP . [s. l.]: Bookman, 2014. ISBN 9788582601952 Isso pode ser a causa de alguns bugs na sua aplica\u00e7\u00e3o. \u21a9 Esse eu to usando para hospedar esse site. \u21a9 Isso \u00e9 muito importante porque vamos usar essa informa\u00e7\u00e3o para fazer alguma coisa. \u21a9 tamb\u00e9m chamados de elementos filhos. \u21a9 Voc\u00ea pode pesquisar para saber a lista dos gradientes dispon\u00edveis. \u21a9 Que no exemplo abaixo ser\u00e1 um elemento da classe \"container\". \u21a9 Sempre vai existir alguma exce\u00e7\u00e3o, eu sei. \u21a9","title":"Desenvolvimento Web Frontend"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#assuntos","text":"A web: Evolu\u00e7\u00e3o, Padr\u00f5es e Arquitetura Hist\u00f3rico e Evolu\u00e7\u00e3o da Web W3C e os Padr\u00f5es da Web Componentes da Arquitetura da Web URI, URL e URN Protocolo HTTP Servidores Web Din\u00e2mica de Aplica\u00e7\u00f5es Web Desenvolvimento de Interfaces Web A Linguagem HTML A Linguagem CSS A Linguagem JavaScript Bibliografia","title":"Assuntos"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#a-web-evolucao-padroes-e-arquitetura","text":"","title":"A web: Evolu\u00e7\u00e3o, Padr\u00f5es e Arquitetura"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#historico-e-evolucao-da-web","text":"A Web \u00e9 um sistema da informa\u00e7\u00e3o de hipertextos onde o acesso \u00e9 feito por meio de navegadores (browsers) . Existem alguns protocolos comuns para transfer\u00eancia de alguns tipos de arquivos. Para mensagens (e-mail) usamos o SMTP , para transfer\u00eancia de arquivos usamos o FTP , aplica\u00e7\u00f5es de telefonia usam o VOIP e para p\u00e1ginas de conte\u00fado usamos o HTML . A hist\u00f3ria da web eu ainda vou colocar aqui quando tiver mais tempo.","title":"Hist\u00f3rico e Evolu\u00e7\u00e3o da Web"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#w3c-e-os-padroes-da-web","text":"O WORLD WIDE WEB CONSORTIUM (W3C) \u00e9 uma organiza\u00e7\u00e3o sem fins lucrativos cujo l\u00edder \u00e9 o Tim Berners-Lee, justamente o inventor da Web. Existem v\u00e1rias organiza\u00e7\u00f5es ao longo do planeta que fazem parte desse cons\u00f3rcio internacional. O W3C mant\u00e9m a gest\u00e3o de v\u00e1rios padr\u00f5es usados todos os dias: Design e Aplica\u00e7\u00f5es Web (HTML, CSS, SVG, Ajax, Acessibilidade); Arquitetura da Web (Protocolo HTTP, URI); Web Sem\u00e2ntica (Linked Data - RDF, OWL, SPARQL); Web Services (SOAP, WSDL); Tecnologia XML (XML, XML Schema, XSLT); Navegadores e ferramentas de autoria. A W3C possui um processo de publica\u00e7\u00e3o das normativas. Normalmente, o fluxo \u00e9: Working Draft (WD) Candidate Release (CR) Proposed Recomendation (PR) Recomendation (REC)","title":"W3C e os Padr\u00f5es da Web"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#componentes-da-arquitetura-da-web","text":"A web pode ser entendida como uma cole\u00e7\u00e3o de componentes que permitem a comunica\u00e7\u00e3o entre o cliente e os servidores de aplica\u00e7\u00f5es. Os principais componentes dessa arquitetura s\u00e3o: Ambiente Cliente (Client Web ) Geralmente um Browser que envia as requisi\u00e7\u00f5es usando o protocolo HTTP(S) para o servidor web atrav\u00e9s de uma rede de computadores. Ambiente Servidor O ambiente servidor possui v\u00e1rios componentes (banco de dados, aplica\u00e7\u00f5es, API e etc) mas o principal componente \u00e9 o servidor web. Ele recebe a requisi\u00e7\u00e3o HTTP(S) do client, interpreta a URL e envia os recursos solicitados (HTML, CSS, JS, JPEG, MP4 e etc) por meio da rede. Internet \u00c9 a rede mundial baseada no protocolo TCP/IP onde todo computador conectado \u00e9 denominado host (hospedeiro) e possui um identificador de endere\u00e7o IP (internet protocol) que possui determinados padr\u00f5es. URI (uniform resource locator) Como o nome indica, um URI \u00e9 um localizado que pode ser classificado em duas maneiras. O URL \u00e9 o tipo de URI que usa o endere\u00e7o do conte\u00fado como m\u00e9todo de localiza\u00e7\u00e3o, ele nos diz onde encontrar o recurso (por exemplo, o caminho c://home/desktop/test.txt ). O URN \u00e9 o tipo que usa o nome do recurso, ele nos diz a identidade do item procurado (por exemplo, o sistema ISBN). Requisi\u00e7\u00e3o \u00c9 o pacote de dados enviado pelo client atrav\u00e9s da internet para o web server onde est\u00e1 a instru\u00e7\u00e3o do que deve ser enviado como resposta. Resposta Como o nome j\u00e1 diz, \u00e9 o retorno do web server ao client com os dados requisitados. Protocolo HTTP \u00c9 o padr\u00e3o como client e web server se comunicam pela rede.","title":"Componentes da Arquitetura da Web"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#uri-url-e-urn","text":"J\u00e1 vimos que o URI abarca dos conceitos de URL e URN. Agora vamos aprender um pouco mais sobre os padr\u00f5es de endere\u00e7os em ambos os protocolos.","title":"URI, URL e URN"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#url","text":"O padr\u00e3o URL serve para identificar o recurso pela sua localiza\u00e7\u00e3o e \u00e9 composto da seguinte maneira: ftp://example.com:8080/pasta/arquivo?name=book#nose Cujas partes s\u00e3o scheme://authority/path?query#fragment Como podemos ver, a URL \u00e9 composta por v\u00e1rias partes: scheme - \u00e9 a forma de intera\u00e7\u00e3o (ftp, http, https, ...). user:pass - s\u00e3o as informa\u00e7\u00f5es do user. host - endere\u00e7o de ip do server. porta - qual a porta TCP/IP do server (o padr\u00e3o http \u00e9 80 e pode ser omitida). path - local onde o recurso se encontra. query - detalhe da consulta na forma de pares nome-valor. fragmento - qual se\u00e7\u00e3o do recurso.","title":"URL"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#urn","text":"urn:example:animal:ferret:nose Cujas partes s\u00e3o scheme:path:authority A URN apenas nos d\u00e1 um recurso espec\u00edfico (NSS) contido em algum namespace (NID) sem qualquer informa\u00e7\u00e3o sobre onde o arquivo est\u00e1 localizado.","title":"URN"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#protocolo-http","text":"O hypertext transfer protocol \u00e9 mantido pela W3C e rege a camada de aplica\u00e7\u00e3o dos sistemas distribu\u00eddos de informa\u00e7\u00e3o em hipertexto. Existem muitas vers\u00f5es mas a mais utilizada \u00e9 a 2.0 de 2015. Para entender melhor o http, consideremos o processo usual de navega\u00e7\u00e3o na web: user informa a URL client monta a requisi\u00e7\u00e3o http e envia ao web server server recebe a requisi\u00e7\u00e3o e envia a resposta ao client a resposta \u00e9 recebida e interpretada pelo browser com os dados exibidos ao user dependendo da p\u00e1gina, pode ser que novas requisi\u00e7\u00f5es sejam feitas para que todos os componentes sejam carregados propriamente. Podemos ver que o http \u00e9 o conjunto de regras que rege a comunica\u00e7\u00e3o client-server da web.","title":"Protocolo HTTP"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#partes-da-requisicao-http","text":"Uma requisi\u00e7\u00e3o \u00e9 formada por 3 partes: Linha de Requisi\u00e7\u00e3o M\u00e9todo GET - Requisita dados. POST - Envia dados para o server. HEAD - Requisita dados mas o retorno deve ser um conjunto de cabe\u00e7alhos. PUT - Cria\u00e7\u00e3o ou Atualiza\u00e7\u00e3o de dados. DELETE - Excluir algum dado. TRACE - Solicita uma c\u00f3pia da requisi\u00e7\u00e3o (serve pra testar integridade). PATCH - Altera\u00e7\u00f5es parciais em um recurso. OPTIONS - Lista de m\u00e9todos e op\u00e7\u00f5es dispon\u00edveis para o server. CONNECT - Usado quando o client se conecta com o server via proxy. Recurso - \u00c9 o caminho do dado requerido. Vers\u00e3o do Protocolo - Qual vers\u00e3o do http ser\u00e1 usada. Linhas de Cabe\u00e7alho - Inclui informa\u00e7\u00f5es complementares \u00e0 requisi\u00e7\u00e3o sendo formado por pares nome-valor. Corpo da Entidade - Dados adicionais como forms, arquivos para upload e etc.","title":"Partes da requisi\u00e7\u00e3o HTTP"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#partes-da-resposta-http","text":"Linha de Resposta Vers\u00e3o HTTP. C\u00f3digo de Retorno. Mensagem explicativa do c\u00f3digo de retorno. Linhas de Cabe\u00e7alho - Uma informa\u00e7\u00e3o importante que consta no cabe\u00e7alho \u00e9 o content-type . Ele diz o formato do conte\u00fado enviado como resposta 1 . Essa informa\u00e7\u00e3o \u00e9 apresentada conforme os MIME Types . Corpo da Entidade - \u00c9 o recurso solicitado pelo client (html, css, js, jpeg, mp4, ...)","title":"Partes da resposta HTTP"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#um-pouco-mais-sobre-cabecalhos","text":"Os cabe\u00e7alhos possuem caracter\u00edsticas parecidas tanto nas requests quanto nas responses. Podemos classifica-los como sendo dos tipos: Request header - Informa\u00e7\u00f5es sobre o client ou a requisi\u00e7\u00e3o feita. Response header - Informa\u00e7\u00f5es sobre a resposta ou sobre o web server. Entity header - Informa\u00e7\u00f5es sobre o conte\u00fado da entidade trocada (tamanho e tipo). General header - Informa\u00e7\u00f5es gerais usadas tanto em requests quanto em responses.","title":"Um pouco mais sobre Cabe\u00e7alhos"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#servidores-web","text":"Voc\u00ea s\u00f3 consegue visualizar as informa\u00e7\u00f5es de um site porque o servidor web foi capaz de interpretar a requisi\u00e7\u00e3o feita pelo seu browser e responder com o conte\u00fado adequado. Agora vamos entender um pouco mais sobre o ambiente servidor. O principal elemento do ambiente servidor \u00e9 o web server. Ele \u00e9 quem recebe, interpreta e responde as requisi\u00e7\u00f5es dos clients ao longo da internet. Podemos tamb\u00e9m incluir outros elementos importantes no ambiente servidor como o servidor de banco de dados e os servidores de servi\u00e7os (APIs) .","title":"Servidores Web"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#funcoes-de-um-web-service","text":"Um web server nada mais \u00e9 que um software rodando em uma m\u00e1quina. Ele desempenha v\u00e1rias fun\u00e7\u00f5es que podemos elencar como: Atender as requests http e responder a elas. Gerencias sites. Gerencias arquivos dos sites. Integrar mecanismos de scripts: php, perl, aspx, Ruby, Python e etc. Autenticar users (b\u00e1sica ou com servidores de autentica\u00e7\u00e3o). Implementar criptografia nas comunica\u00e7\u00f5es (https - tls/ssl). Cache de recursos. Auditoria das altera\u00e7\u00f5es e logs.","title":"Fun\u00e7\u00f5es de um web service"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#software-e-provedores","text":"Basicamente, existem 3 formas de tornar uma aplica\u00e7\u00e3o web acess\u00edvel aos clients: Rodar um web server na m\u00e1quina local; instalar e configurar um wer server em uma m\u00e1quina dedicada para esse trabalho e, por fim, contratar um provedor que ofere\u00e7a esse servi\u00e7o. A lista de softwares que se prop\u00f5e a fazer o trabalho de um web server \u00e9 enorme. O material do curso elenca dois: Apache HTTP Server | Apache Web Server \u00c9 um open source multi plataforma. Permite execu\u00e7\u00e3o de multilinguagens como php, perl entre outras. Uma maneira simples de instalar \u00e9 pelo XAMPP (que j\u00e1 integra o apache web server, banco de dados MariaDB e um ambiente PHP e Perl). Microsoft Internet Information Server (IIS) \u00c9 a solu\u00e7\u00e3o propriet\u00e1ria da Microsoft. Baseado na plataforma .NET, permite hospedar sites est\u00e1ticos. O IIS j\u00e1 vem dispon\u00edvel junto dos SO Windows. A lista de provedores tamb\u00e9m \u00e9 extensa e possuem diferentes capacidades distintas mas podemos destacar algumas ferramentas \u00fateis: Servidores em Nuvem Azure AWS Editores e IDEs online Replit CodeSandbox Glitch GitHub Pages 2","title":"Software e Provedores"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#dinamica-de-aplicacoes-web","text":"Quando voc\u00ea acessa um site, o arquivo que coordena o modo de exposi\u00e7\u00e3o da informa\u00e7\u00e3o e os conte\u00fados da mesma \u00e9 um arquivo .html . Observe o exemplo abaixo de uma p\u00e1gina simples. <!-- > Html <--> <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Document </ title > < link rel = \"stylesheet\" href = \"style.css\" > < script > src = 'app.js' </ script > </ head > < body > < img src = 'logo.jpg' alt = \"imagem_logo\" > </ body > </ html > As tags que cont\u00e9m as partes style.css , app.js e logo.jpg fazem men\u00e7\u00e3o \u00e0 outros arquivos que far\u00e3o parte da composi\u00e7\u00e3o da p\u00e1gina. Alguns s\u00e3o referentes \u00e0 funcionalidades ou layout da aplica\u00e7\u00e3o enquanto outros podem ser referentes \u00e0 conte\u00fados mostrados na p\u00e1gina. Uma vez que o servidor compreende a request feita pelo client, ele envia uma s\u00e9rie de arquivos que ser\u00e3o lidos pelo browser do usu\u00e1rio e ser\u00e3o interpretados por ele. O html \u00e9 justamente o primeiro arquivo lido porque ele diz ao navegador quais conte\u00fados mostrar e, a partir das refer\u00eancias contidas no html, como mostrar e quais funcionalidades a p\u00e1gina ter\u00e1.","title":"Din\u00e2mica de Aplica\u00e7\u00f5es Web"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#o-processamento-de-um-site","text":"O client envia uma requisi\u00e7\u00e3o via http (com o m\u00e9todo GET) para o web server O server envia o arquivo html da p\u00e1gina requisitada para o browser Ao processar o html, o browser percebe que ele faz men\u00e7\u00e3o de outros arquivos (como css, js, mp3, etc) O browser faz novas requisi\u00e7\u00f5es ao server at\u00e9 ter todos os arquivos necess\u00e1rios para o carregamento da p\u00e1gina Como voc\u00ea pode ver, \u00e9 muita coisa acontecendo. S\u00f3 n\u00e3o nos damos conta disso porque o processo \u00e9 muito r\u00e1pido hoje em dia devida a velocidade das nossas conex\u00f5es banda larga. Lembrando sempre que todas as requisi\u00e7\u00f5es e respostas entre client e server s\u00e3o feitas usando-se o protocolo HTTP que a gente viu logo antes.","title":"O processamento de um site"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#desenvolvimento-de-interfaces-web","text":"","title":"Desenvolvimento de Interfaces Web"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#a-linguagem-html","text":"A linguagem HTML foi criada por Tim Berners-Lee no ano de 1991 e foi baseada no padr\u00e3o Standard Generalized Markup Language (SGML). Seu escopo original era para permitir a divulga\u00e7\u00e3o de pesquisas cient\u00edficas. Com o passar dos anos, novas tecnologias foram somadas ao ecossistema para facilitar o processo de constru\u00e7\u00e3o das solu\u00e7\u00f5es web. O Cascading Style Sheet (CSS) foi criado para facilitar o desenvolvimento do conte\u00fado separando a parte de estilo e apar\u00eancia do conte\u00fado em HTML. O JavaScript permitiu a manipula\u00e7\u00e3o de elementos al\u00e9m de dar mais din\u00e2mica para as p\u00e1ginas web. O W3C foi criado em 1993 e, a partir dessa data, o HTML foi mantido e padronizado por essa organiza\u00e7\u00e3o. Desde ent\u00e3o a linguagem vem sendo alterada para permitir sua evolu\u00e7\u00e3o. Em 2004 foi criado o Web Hypertext Application Technology Working Group (WHATWG) por pessoas da Apple, Mozilla e Opera. Na \u00e9poca, o W3C estava trabalhando no padr\u00e3o XHTML 2.0 (que iria substituir o HTML 4.01) mas o WHATWG conseguiu propor um monde que acabou sendo o HTML 5. O HTML 5 foi recebido e amplamente adotado no desenvolvimento de aplica\u00e7\u00f5es hoje em dia.","title":"A Linguagem HTML"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#panorama-de-uma-aplicacao","text":"N\u00f3s j\u00e1 sabemos que um client faz uma requisi\u00e7\u00e3o ao web server por HTTP e esse, por sua vez, responde a requisi\u00e7\u00e3o com, normalmente, um arquivo HTML. De posse de arquivo, o browser consegue saber se precisar\u00e1 solicitar mais arquivos ao web server at\u00e9 que todas as refer\u00eancias do HTML sejam satisfeitas e a p\u00e1gina carregada. A grosso modo, podemos dizer que o HTML pode fazer men\u00e7\u00f5es a arquivos dos seguintes tipos: CSS Arquivos de Multim\u00eddia JavaScript RIA - Rich Internet Applications Applet Java Adobe Flash Adobe Air Adobe Flex SilverLight Se o site utiliza solu\u00e7\u00f5es din\u00e2micas como PHP, Java, Python, Ruby ou ASP.NET, quando a requisi\u00e7\u00e3o \u00e9 feita, o web server primeiro faz o processamento desses arquivos (normalmente por um outro servidor de APIs) e o resultado ser\u00e3o outros arquivos HTML, CSS, JS ou Multim\u00eddia. Ap\u00f3s o processamento, o resultado \u00e9 enviado para o client que ser\u00e1 atualizado pelo browser. Nas aplica\u00e7\u00f5es modernas, o seu browser est\u00e1 em processo praticamente cont\u00ednuo de intera\u00e7\u00e3o com o servidor e vice-versa.","title":"Panorama de uma Aplica\u00e7\u00e3o"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#a-sintaxe-da-linguagem-html","text":"Uma p\u00e1gina HTML \u00e9 uma cole\u00e7\u00e3o de elementos . Voc\u00ea consegue identific\u00e1-los facilmente porque est\u00e3o entre os pares de s\u00edmbolos <> . Cada elemento tamb\u00e9m tem uma tag de abertura e uma de fechamento. Por exemplo: < body > Aqui vai o conte\u00fado do body </ body > Tamb\u00e9m existem elementos que n\u00e3o precisam do par de tags de abertura e fechamento. Por exemplo: < input disable name = 'Nome' value = 'rommelcarneiro' > Atente para o fato que alguns elementos aceitam outros elementos internamente. Por exemplo, dentro do elemento <body></body> n\u00f3s colocamos todos os outros elementos que compor\u00e3o a nossa p\u00e1gina web, como por exemplo, formul\u00e1rios, par\u00e1grafos, v\u00eddeos e etc. Ent\u00e3o se acostume de termos elementos dentro de outros elementos. Dentro de alguns elementos podem ser inseridas informa\u00e7\u00f5es e configura\u00e7\u00f5es por meio de par\u00e2metros que chamamos de atributos do elemento. Por exemplo, no elemento logo acima, temos os atributos name e value . Agora que sabemos o que s\u00e3o elementos e como eles s\u00e3o constru\u00eddos, podemos seguir para a organiza\u00e7\u00e3o de um documento HTML . Existe um padr\u00e3o em todo arquivo HTML onde existem alguns elementos obrigat\u00f3rios para o processamento da p\u00e1gina pelo browser do client. // html <!DOCTYPE html> -------------------------------> Elemento da vers\u00e3o do HTML < html lang = \"en\" > ------------------------------> Abertura do documento HTML < head > ------------------------------------> Abertura do cabe\u00e7alho < meta charset = \"UTF-8\" > ----------------> Atributo nome = \"valor\" < title > Document </ title > ---------------> Elemento de T\u00edtulo </ head > -----------------------------------> Fechamento do cabe\u00e7alho < body > ------------------------------------> Abertura do corpo < img src = \"logo.jpg\" > ------------------> Elemento de imagem </ body > -----------------------------------> Abertura do corpo </ html > ---------------------------------------> Fechamento do HTML","title":"A Sintaxe da Linguagem HTML"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#preambulo","text":"Como podemos ver, primeiro temos o pre\u00e2mbulo DOCTYPE , seguido do <html> </html> onde temos outros dois elementos maiores, o cabe\u00e7alho ( <head> </head> ) e o corpo ( <body> </body> ). O pre\u00e2mbulo diz ao navegador qual vers\u00e3o da HTML ser\u00e1 usada. Se ele n\u00e3o for indicado, o navegador vai tentar ``adivinhar'' qual a melhor maneira de interpretar a sua p\u00e1gina (chamamos isso de quirks mode ). Caso voc\u00ea informe qual a vers\u00e3o, o browser usar\u00e1 o processamento adequado (chamamos de strict mode ). Os formatos do pre\u00e2mbulo mudam de acordo com a vers\u00e3o do HTML: HTML 5 <!DOCTYPE html> HTML 4.01 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"> HTML 1.0 <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">","title":"Pre\u00e2mbulo"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#cabecalho","text":"\u00c9 a primeira parte dentro da tag de html. Nele est\u00e3o as informa\u00e7\u00f5es sobre o documento de modo a organizar as refer\u00eancias de funcionalidade que ser\u00e3o usadas para o processamento da p\u00e1gina web. Podemos resumir os elementos no cabe\u00e7alho como: title - <title> </title> Define o t\u00edtulo do documento. Que tamb\u00e9m afeta a aba do navegador. link - <link rel=\"relacao\" href=\"link_do_arquivo.extensao\"> Define as liga\u00e7\u00f5es externas como arquivos, scripts, CSS e etc. style - <link rel=\"stylesheet\" href=\"style.css\"> \u00c9 um tipo de link. Nele \u00e9 que vamos indicar qual o arquivo que reger\u00e1 o layout da nossa aplica\u00e7\u00e3o. meta - meta name=\"nome\" content=\"conteudo\"> Aqui teremos as informa\u00e7\u00f5es adicionais sobre a p\u00e1gina: codifica\u00e7\u00e3o de caracteres, descri\u00e7\u00e3o, palavras-chaves, autor e etc.","title":"Cabe\u00e7alho"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#corpo","text":"A segunda parte do html \u00e9 o corpo. Nele \u00e9 onde colocamos o conte\u00fado que far\u00e1 parte da p\u00e1gina. Como \u00e9 muito comum de se encontrar nos sites, esse conte\u00fado pode vir mesclado em v\u00e1rias m\u00eddias como texto, imagens, v\u00eddeos, mapas e etc. Veremos com calma um pouco mais a frente.","title":"Corpo"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#elementos-de-texto-e-multimidia","text":"Como esse material tem o objetivo de ser para futuras consultas. Eu vou colocar as tags com um pequeno resumo mas n\u00e3o vou comentar muito sobre elas.","title":"Elementos de Texto e Multim\u00eddia"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#paragrafos-e-titulos","text":"Elemento Tags T\u00edtulos <h1></h1>,...,<h6></h6> Par\u00e1grafo <p></p> Quebra de Linha <br> It\u00e1lico <i></i> Negrito <b></b> Import\u00e2ncia <strong></strong> C\u00f3digo-fonte <code></code> Texto pre-formatado <pre></pre> Cita\u00e7\u00f5es <blockquote></blockquote> Enquanto estamos montando a nossa p\u00e1gina html, devemos evitar usar os elementos dela para a formata\u00e7\u00e3o de layout da nossa solu\u00e7\u00e3o. \u00c9 altamente recomendado deixar toda essa responsabilidade para a nossa Cascading Style Sheets (CSS) e focar apenas no conte\u00fado textual da p\u00e1gina web.","title":"Par\u00e1grafos e T\u00edtulos"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#listas","text":"Existem 3 tipos de listas em HTML. Listas ordenadas: // html < ol > < li > Primeiro item </ li > --------> 1. Primeiro item < li > Segundo item </ li > ---------> 2. Segundo item < li > Terceiro item </ li > --------> 3. Terceiro item </ ol > Lista n\u00e3o ordenada: // html < ul > < li > Primeiro item </ li > --------> o Primeiro item < li > Segundo item </ li > ---------> o Segundo item < li > Terceiro item </ li > --------> o Terceiro item </ ul > Lista de defini\u00e7\u00f5es: // html < dl > < dt > Termo 01 </ li > -------------> Termo 01 < dd > Defini\u00e7\u00e3o 01 </ li > ---------> Defini\u00e7\u00e3o 01 < dt > Termo 02 </ li > -------------> Termo 02 < dd > Defini\u00e7\u00e3o 02 </ li > ---------> Defini\u00e7\u00e3o 02 </ dl >","title":"Listas"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#imagens","text":"// html < img width = \"200\" height = \"180\" src = \"img.png\" alt = \"Peixe\" >","title":"Imagens"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#links","text":"// html < a href = \"link.com\" target = \"_blank\" > Texto </ a > ------> Nova tab < a href = \"link.com\" target = \"_self\" > Texto </ a > -------> Mesma tab < a href = \"link.com\" target = \"_parent\" > Texto </ a > -----> Frame pai < a href = \"link.com\" target = \"_top\" > Texto </ a > --------> Janela atual < a href = \"link.com\" target = \"nome_frame\" > Texto </ a > --> Frame nominado","title":"Links"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#elementos-estruturais","text":"A partir da vers\u00e3o 4.0 o principal elemento usado para segmentar as partes de uma p\u00e1gina html passou a ser o <div> que \u00e9 um um elemento de divis\u00e3o gen\u00e9rico para agrupar qualquer conjunto de elementos necess\u00e1rios. Por exemplo: // html < div > < h1 > Titulo </ h1 > < p > Par\u00e1grafo pequeno </ p > < ol > < li > Item </ li > < li > Item </ li > </ ol > </ div > Na vers\u00e3o 5 do HTML passamos a ter v\u00e1rios tipos de elementos com a mesma fun\u00e7\u00e3o dos <div> mas agora com nomes mais f\u00e1ceis de usar. As vezes nos referimos a eles como elementos sem\u00e2nticos . O novos elementos sem\u00e2nticos apresentados na vers\u00e3o 5 do html s\u00e3o: Elementos Descri\u00e7\u00e3o <article> Define um artigo <aside> Conte\u00fado ao lado da p\u00e1gina <details> Detalhes adicionais <figcaption> T\u00edtulo para <figure> <figure> Elemento autocontido <footer> Rodap\u00e9 para se\u00e7\u00e3o <header> Cabe\u00e7alho para se\u00e7\u00e3o <main> Conte\u00fado principal <mark> Texto destacado <nav> Conte\u00fado de navega\u00e7\u00e3o <section> Se\u00e7\u00e3o do documento <summary> Resumo <time> Define data/hora Quando constru\u00edmos a estrutura do nosso site apenas com elementos <div> gen\u00e9ricos, n\u00f3s n\u00e3o estamos indicando nenhuma rela\u00e7\u00e3o entre essas se\u00e7\u00f5es. Quando usamos a divis\u00e3o via elementos sem\u00e2nticos, permitimos um processamento por algoritmos de modo a abrir todo um leque de possibilidades de intera\u00e7\u00f5es a partir disso. Esse \u00e9 um dos motivos que justificam o nome da web 3.0 como sendo web sem\u00e2ntica . Abaixo temos duas maneiras de representar uma estrutura de um site. A primeira em estrutura gen\u00e9rica de div e a outra em elementos sem\u00e2nticos. Veja como a segunda abordagem \u00e9 mais simples de ler. N\u00e3o \u00e9 dif\u00edcil perceber que o uso de elementos sem\u00e2nticos \u00e9 fortemente indicado para o desenvolvimento de aplica\u00e7\u00f5es web modernas.","title":"Elementos Estruturais"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#elementos-de-tabelas","text":"N\u00e3o \u00e9 nada incomum ter que demonstrar dados usando uma tabela. Pensando nisso, a linguagem HTML tamb\u00e9m possui um elemento especificamente criado para cria\u00e7\u00e3o de tabelas. Uma tabela pode ser criada com o uso das seguintes tags: // html < table border = \"1\" > --------------> Cria a Tabela < caption > T\u00edtulo </ caption > -> Coloca um T\u00edtulo < tr > ------------------------> Table Row (tr) < td > L1C1 </ td > -----------> Table Data Column 1 < td > L1C2 </ td > -----------> Table Data Column 2 </ tr > < tr > < td > L2C1 </ td > -----------> Table Data Column 1 < td > L2C2 </ td > -----------> Table Data Column 2 </ tr > </ table > Existem v\u00e1rios elementos que podem ser usados dentro de uma tabela. S\u00e3o os principais: Elementos Descri\u00e7\u00e3o <table> Elemento que cria a tabela <caption> T\u00edtulo da tabela <thead> Linhas do cabe\u00e7alho <tbody> Linhas do body <tfoot> Linhas do rodap\u00e9 <tr> Linha da tabela <th> Cabe\u00e7alho dentro de uma linha <td> Table data Coment\u00e1rio: N\u00e3o podemos cair na tenta\u00e7\u00e3o de usar tabelas como ferramenta de layout da p\u00e1gina. Pode at\u00e9 parecer mais simples no come\u00e7o mas tabelas n\u00e3o s\u00e3o boas para cria\u00e7\u00e3o de aplica\u00e7\u00f5es fluidas e din\u00e2micas.","title":"Elementos de Tabelas"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#elementos-de-formularios","text":"Uma das intera\u00e7\u00f5es mais b\u00e1sicas que precisamos de um usu\u00e1rio \u00e9 a inser\u00e7\u00e3o de dados na aplica\u00e7\u00e3o. Dentre as v\u00e1rias maneiras de conseguirmos um dado inserido pelo usu\u00e1rio, o formul\u00e1rio \u00e9 a mais simples. O HTML fornece v\u00e1rios atributos dentro do elemento <form></form> que nos permite a criar campos de texto, bot\u00f5es clic\u00e1veis, campos de senha e etc. A sintaxe mais b\u00e1sica de um formul\u00e1rio \u00e9 dada por: // html < form name = \"form_name\" action = \"login.html\" method = \"POST\" > Usu\u00e1rio: < br > < input type = \"text\" name = \"user\" value = \"\" > < br > Senha: < br > < input type = \"password\" name = \"psw\" value = \"\" > < br > < br > < input type = \"submit\" value = \"OK\" > </ form > Podemos usar o atributo name ou id para identificar o nosso formul\u00e1rio 3 . O atributo action indica qual URL vai ser disparada uma vez processado o form (no nosso exemplo seria algo como http://server.com/login.html ). O atributo method indica o m\u00e9todo HTTP de submiss\u00e3o dos dados do formul\u00e1rio no nosso bando de dados (pode ser POST ou GET ). Quando o m\u00e9todo usado for o GET , o browser faz uma requisi\u00e7\u00e3o da URL indicada para o servidor passando os par\u00e2metros de input como querystring na URL. No nosso exemplo, ficaria como http://server.com/login.html/ login.html?user=texto&psw=123 . Quando o m\u00e9todo escolhido \u00e9 o POST , os dados s\u00e3o enviados ao servidor no corpo da requisi\u00e7\u00e3o HTTP e n\u00e3o aparecem na URL. A essa altura voc\u00ea j\u00e1 deve ser capaz de entender as diferen\u00e7as entre esses dois m\u00e9todos.","title":"Elementos de Formul\u00e1rios"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#elemento-input","text":"Esse elemento \u00e9 bastante utilizado na composi\u00e7\u00e3o dos formul\u00e1rios (na verdade, eu nem consigo pensar em um formul\u00e1rio sem pelo menos um input). Ele define os campos ou entradas de informa\u00e7\u00e3o e possui os seguintes atributos: type - Cada tipo de input possui uma visualiza\u00e7\u00e3o diferente quando a p\u00e1gina \u00e9 carregada. Isso \u00e9 feito para permitir uma melhor intera\u00e7\u00e3o do usu\u00e1rio de acordo com a natureza da informa\u00e7\u00e3o requerida. As op\u00e7\u00f5es s\u00e3o: text - Campo de texto aberto. A quantidade de caracteres pode ser controlada pelo atributo maxlength . number - S\u00f3 aceita n\u00famero como input e permite a sele\u00e7\u00e3o por umas setinhas que aparecem ao lado do campo. password - Igual ao campo texto mas com os caracteres anonimizados. email - Confere se o texto inserido possui um @ antes de salvar o formul\u00e1rio. date - Coloca uma m\u00e1scara no formato de data e cria uma op\u00e7\u00e3o de input por calend\u00e1rio. radio button - Uma op\u00e7\u00e3o clic\u00e1vel com um valor associado e um nome. O navegador s\u00f3 permite que um \u00fanico radio button esteja selecionado se existir mais de uma op\u00e7\u00e3o com o mesmo nome no atributo name . checkbox - Mesma l\u00f3gica do radio button mas com permiss\u00e3o de v\u00e1rios selecionados simultaneamente. submit - \u00c9 um bot\u00e3o clic\u00e1vel que normalmente dispara a informa\u00e7\u00e3o do formul\u00e1rio ao servidor web ou a um script JS local. reset - \u00c9 igual um submit mas a \u00fanica fun\u00e7\u00e3o dele \u00e9 apagar tudo que foi preenchido no formul\u00e1rio. name - Nome de identifica\u00e7\u00e3o do campo. value - Valor contudo no campo. placeholder - Valor que aparece quando o campo estiver vazio. required - Valida\u00e7\u00e3o autom\u00e1tica para evitar o n\u00e3o preenchimento do campo antes da submiss\u00e3o do form. disabled - Inativa o campo e n\u00e3o permite intera\u00e7\u00e3o mas o user ainda poder\u00e1 ver. Na imagem abaixo podemos ver como cada tipo do elemento <input> aparece para um usu\u00e1rio:","title":"Elemento &lt;input&gt;"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#elemento-textarea","text":"Esse \u00e9 tranquilo de entender. Sempre que precisarmos de um input de texto maior do que uma linha, podemos usar o elemento <textarea name=\"\" rows=\"10\" cols=\"50\"></textarea> para isso. \u00c9 poss\u00edvel alterar a quantidade de linhas e a n\u00famero de colunas para apresenta\u00e7\u00e3o da nossa caixa de texto apenas mudando os par\u00e2metros dos atributos.","title":"Elemento &lt;textarea&gt;"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#elemento-select","text":"Podemos permitir que o usu\u00e1rio selecione uma lista pr\u00e9-selecionada de op\u00e7\u00f5es atrav\u00e9s de uma lista em caixa (tamb\u00e9m chamada de dropdown menu ). Um exemplo de c\u00f3digo contendo esse elemento por ser visto abaixo. // html < label for = \"lista\" > Dropdown Menu </ label > < select name = \"lista\" > < option value = \"\" > Selecione uma op\u00e7\u00e3o </ option > < option value = \"01\" > Op\u00e7\u00e3o 01 </ option > < option value = \"02\" > Op\u00e7\u00e3o 02 </ option > < option value = \"03\" > Op\u00e7\u00e3o 03 </ option > < option value = \"04\" > Op\u00e7\u00e3o 04 </ option > < option value = \"05\" > Op\u00e7\u00e3o 05 </ option > </ select > \u00c9 poss\u00edvel transformar a lista suspensa em uma lista fixa que permite mais de uma sele\u00e7\u00e3o. Para fazer isso \u00e9 s\u00f3 adicionar o atributo multiple e tamb\u00e9m o atributo size= no elemento select . Perceba que al\u00e9m do elemento de lista n\u00f3s trouxemos um novo elemento chamado label que adiciona um texto associado a algum elemento. No nosso exemplo, veja como foi indicado no atributo for o mesmo nome que o atributo name recebe dentro do elemento select . O resultado pode ser visto abaixo:","title":"Elemento &lt;select&gt;"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#a-linguagem-css","text":"N\u00f3s falamos na parte inicial do nosso estudo sobre HTML, mas especificamente na parte do cabe\u00e7alho, que uma das refer\u00eancias que normalmente fazemos \u00e9 a de uma Cascading Style Sheet (CSS) . A ideia por tr\u00e1s disso \u00e9 que a manuten\u00e7\u00e3o e o desenvolvimento da aplica\u00e7\u00e3o web fica mais simples quando trabalhamos todo o aspecto de estilo visual em um arquivo separado (.css) do arquivo que trata da estrutura da aplica\u00e7\u00e3o (.html). Contudo, na realidade, existem outras formas de trabalhar o visual da aplica\u00e7\u00e3o al\u00e9m do arquivo .css em separado. No geral, podemos dizer que existem 3 formas de gerenciamento de estilo de um aplica\u00e7\u00e3o web: CSS externo - Melhor forma. Nosso material estar\u00e1 focado nesse tipo de arquitetura. Bloco interno - As regras ficam no pr\u00f3prio arquivo html. Pode ter aplica\u00e7\u00f5es para quest\u00f5es muito espec\u00edficas. Mas as atualiza\u00e7\u00f5es v\u00e3o precisar ser feitas em cada p\u00e1gina, sempre que necess\u00e1rio. Atributo inline - Pior forma. Aqui, as regras de estilo s\u00e3o definidas diretamente no elemento html. Qualquer m\u00ednima altera\u00e7\u00e3o ter\u00e1 de ser feita diretamente no elemento e em todas as p\u00e1ginas. Aqui podemos ver um exemplo de cada aplica\u00e7\u00e3o do estilo visual que elencamos acima: // html <!DOCTYPE html> < html lang = \"en\" > < head > < title > Exemplo CSS </ title > ###Esse \u00e9 um exemplo de arquivo externo### < link rel = \"stylesheet\" href = \"style.css\" type = \"text/css\" > ###Exemplo de bloco interno#### < style type = \"text/css\" > p { font-size : 10 pt ; font-family : \"Verdana\" ; color : blue ; } h1 { font-size : 16 pt ; font-family : \"Impact\" ; color : red ; } </ style > </ head > < body > ####Exemplo de inline##### < p style = \"margin-left: 0.5in; font-size: 8pt;\" > Texto do par\u00e1grafo </ p > </ body > </ html > A prioridade de leitura das regras de estilo que o browser vai usar \u00e9 1) inline, 2) Bloco interno, 3) CSS externo e 4) Default do navegador.","title":"A Linguagem CSS"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#sintaxe-da-linguagem-css","text":"A leitura de um arquivo CSS \u00e9 bem simples. A primeira coisa que precisamos saber \u00e9 quais elementos est\u00e3o presentes no html que ser\u00e1 trabalhado e quais desses elementos possuem atribui\u00e7\u00e3o de id espec\u00edfico. Por exemplo, se tivermos no nosso html dois elementos <p> , s\u00f3 que um deles possui o atributo id <p id=\"teste\"> . Para criarmos uma regra de estilo no nosso CSS basta escrevermos a tag do elemento (sem os s\u00edmbolos <> ) do seguinte modo. // css p { color : red ; } Essa regra diz que todos os textos contidos nos elementos <p> ter\u00e3o a cor vermelha. Contudo, se quisermos adotar uma regra espec\u00edfica para apenas um elemento em quest\u00e3o, podemos definir a regra no css diretamente para o elemento com o seu id. // css # teste { color : black ; } Isso nos dar\u00e1 uma p\u00e1gina onde todos os textos dos par\u00e1grafos ser\u00e3o vermelhos \u00e0 exce\u00e7\u00e3o do par\u00e1grafo identificado pelo id=\"teste\" . Podemos resumir a sintaxe do CSS como sendo: // css seletor { propriedade_1 : valor_da_propriedade_1 ; propriedade_2 : valor_da_propriedade_2 ; ... propriedade_n : valor_da_propriedade_n ; } Ou seja, para aprender bem CSS, vamos precisar aprender as v\u00e1rias maneiras de selecionar os elementos da p\u00e1gina html e as propriedades de estilo que o CSS nos permite manipular na constru\u00e7\u00e3o das nossas aplica\u00e7\u00f5es web.","title":"Sintaxe da linguagem CSS"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#seletores-de-elementos","text":"Eu j\u00e1 adianto, existem muitos tipos de seletores. N\u00f3s precisamos decorar todos os tipos? Evidente que n\u00e3o. O importante \u00e9 saber que o estilo de uma aplica\u00e7\u00e3o pode ser desenvolvido de v\u00e1rias maneiras e que, quanto melhor for o m\u00e9todo de organiza\u00e7\u00e3o do CSS, mais f\u00e1cil ser\u00e1 o desenvolvimento e a manuten\u00e7\u00e3o da aplica\u00e7\u00e3o no futuro. A tabela a seguir \u00e9 uma refer\u00eancia para os v\u00e1rios tipos de seletores em CSS. Tipo Link com HTML Exemplo de Sintaxe Elemento Nome da tag html p {color:blue;} Identificador id dos elementos #ident {color:blue;} Classe Classe dos elementos .classe {color:blue;} Atributo Atributos dos elementos [atrib] {color:blue;} [id=\"p01\"] {color:blue;} [class~=\"marked\" {color:blue;} Pseudo-Classe Situa\u00e7\u00f5es dos elementos p:first-of-type {color:blue;} p:nth-child(3) {color:blue;} :hover {color:blue;} Pseudo-Elemento Partes de elementos p::first-letter {color:blue;} p::first-time {color:blue;} p::after {color:blue;} Universal Todos os elementos * {color:blue;} Podemos ver que existem v\u00e1rios modelos de seletores para os elementos html de um p\u00e1gina. Alguns deles s\u00e3o dependente de contexto de intera\u00e7\u00e3o do elemento. Especialmente, as situa\u00e7\u00f5es de pseudo-classe s\u00e3o muito \u00fateis para cria\u00e7\u00e3o de aplica\u00e7\u00f5es fluidas e avan\u00e7adas. Link para lista de todos os pseudo-elementos e pseudo-classes suportados pelo CSS atualmente: link .","title":"Seletores de Elementos"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#combinacao-de-seletores","text":"Podemos usar combina\u00e7\u00f5es de seletores para definir as regras de estilo das nossas aplica\u00e7\u00f5es web. Essas combina\u00e7\u00f5es obedecem a determinadas regras que devem ser seguidas para se obter o resultado esperado. Abaixo segue uma tabela de refer\u00eancia. Regra Interpreta\u00e7\u00e3o A,B {...} Aplica a mesma regra em A e B A.B {...} classes e ids associados \u00e0 A e B ao mesmo tempo A B {...} Elementos em B que tamb\u00e9m perten\u00e7am a A A > B {...} Elementos em B filhos de elementos de A A + B {...} Elemento em B pr\u00f3ximo irm\u00e3o de elementos de A A ~ B {...} Elementos em B pr\u00f3ximos irm\u00e3os de elementos de A","title":"Combina\u00e7\u00e3o de Seletores"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#prioridade-de-seletores","text":"O processamento das declara\u00e7\u00f5es CSS obedecem a ordem em 3 regras: O processamento \u00e9 de cima para baixo. A \u00faltima declara\u00e7\u00e3o \u00e9 a que prevalecer\u00e1. Regras espec\u00edficas s\u00e3o prioridade em rela\u00e7\u00e3o \u00e0 regras gerais. As declara\u00e7\u00f5es marcadas como importantes p {color: red !important;} s\u00e3o priorit\u00e1rias.","title":"Prioridade de Seletores"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#valores-e-unidades","text":"Aten\u00e7\u00e3o aqui. Entender bem quais unidades podem ser usadas e os tipos de unidades ajuda muito o desenvolvimento de interfaces bem planejadas e responsivas. Aqui tem um link com um material de refer\u00eancia sobre esse assunto.","title":"Valores e Unidades"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#cores-em-css","text":"Existem infinitas combina\u00e7\u00f5es de cores para a paleta que ser\u00e1 usada em qualquer aplica\u00e7\u00e3o web. Existem diferentes maneiras de definir quais cores ser\u00e3o usadas em CSS: RGB hexadecimal - #RRGGBB RGB abreviado - #RGB RGB decimal - rgb(rrr,ggg,bbb) Palavras-Chaves Podemos usar qualquer uma dessas codifica\u00e7\u00f5es para definir as cores que vamos usar no estilo das nossas aplica\u00e7\u00f5es web.","title":"Cores em CSS"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#display-e-box-model","text":"Um dos aspectos mais importantes na constru\u00e7\u00e3o de uma aplica\u00e7\u00e3o web \u00e9 a disposi\u00e7\u00e3o dos elementos. Agora que aprendemos como a linguagem CSS nos fornece uma maneira mais simples de controlar as informa\u00e7\u00f5es de estilo da nossa p\u00e1gina HTML, vamos aprender como controlamos os locais onde os elementos s\u00e3o dispostos. A propriedade display \u00e9 que determina como um elemento e seus filhos s\u00e3o dispostos na p\u00e1gina. Alguns valores dessa propriedade se referem a maneira como o elemento \u00e9 organizado em rela\u00e7\u00e3o aos elementos irm\u00e3os e alguns valores se referem a maneira como seus elementos filhos s\u00e3o dispostos dentro do elemento pai. Caso n\u00e3o coloquemos nenhuma informa\u00e7\u00e3o de display nos elementos, eles possuem uma categoria default pr\u00f3pria que pode ser do tipo inline ou block . Os elementos inline s\u00e3o colocados automaticamente um ao lado do outro na mesma linha enquanto existir espa\u00e7o na tela. <a> <span> <img> <button> <input> etc Os elementos block sempre ocupam uma linha inteira da p\u00e1gina. <div> <h1> ... <h6> <p> <form> <canvas> <table> etc Mais ou menos como nessa imagem abaixo Podemos modificar o comportamento padr\u00e3o de um elemento atrav\u00e9s do par\u00e2metro display: no CSS. Por exemplo, para transformar os <input> em um elemento sozinho na p\u00e1gina, podemos colocar no CSS a seguinte linha // css input { display : block ; margin : 0 auto ; } No caso de elementos inside 4 , o atributo display pode receber os valores display=\"table\" , display=\"grid\" e display=\"flex\" . Quando colocamos esses atributos nos elementos inside, o elemento que o cont\u00e9m, que chamamos de elemento pai (outside), automaticamente vira um elemento do tipo display=\"block\" . A propriedade display=\"table\" em um elemento outside permite que os elementos inside recebam varia\u00e7\u00f5es desse atributo para a constru\u00e7\u00e3o de layout em formato de tabela. Desse modo, se nosso elemento outside \u00e9 do tipo display=\"table\" , ent\u00e3o, os elementos inside podem ser \"table-row\" , \"table-cell\" , \"table-column\" , \"table-caption\" , \"table-row-group\" , \"table-header-group\" e \"table-footer-group\" . A propriedade display=\"flex\" permite que os elementos inside sejam controlados de maneira fluida para se ajustar \u00e0 largura da janela do navegador. A propriedade display=\"grid\" permite um controle das regi\u00f5es onde os elementos inside ser\u00e3o dispostos. Isso d\u00e1 mais controle ao desenvolver. Veremos com mais calma os atributos display:flex e display:grid porque eles s\u00e3o usados na constru\u00e7\u00e3o de aplica\u00e7\u00f5es mais fluidas e din\u00e2micas.","title":"Display e Box Model"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#box-model","text":"Existe um conjunto de atributos CSS que comp\u00f5e o que podemos chamar de box model . A ideia aqui \u00e9 que podemos trabalhar os elementos como pertencentes a uma ``caixa'' imagin\u00e1ria. Isso torna o design da aplica\u00e7\u00e3o mais simples de compreender e tamb\u00e9m facilita o posicionamento dos elementos ao longo da nossa p\u00e1gina. Os atributos CSS que comp\u00f5e o modelo de caixa s\u00e3o: margin border padding width height background-color As propriedades de margin , border e padding aceitam atributos de orienta\u00e7\u00e3o como top-right-bottom-left . Caso queira aplicar o mesmo valor para todos \u00e9 s\u00f3 informar um \u00fanico valor no atributo. Se quiser discriminar, \u00e9 s\u00f3 apontar os valores na ordem descrita no sentido hor\u00e1rio ou usar a propriedade inteira para cada lado. A imagem abaixo deixa mais f\u00e1cil a compreens\u00e3o do atributos do modelo de caixa. Durante a elabora\u00e7\u00e3o da interface n\u00e3o \u00e9 nada incomum usar as bordas como m\u00e9todo de visualiza\u00e7\u00e3o. O comando que cria a borda \u00e9 border: solid 20px black","title":"Box Model"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#fundo-de-elementos-background","text":"Todo elementos html possui um atributo de background que pode ser acessado pelos seguintes comandos: background-color - Cor de fundo background-image - Imagem ou gradiente 5 background-repeat - Comando caso a img n\u00e3o seja do tamanho do elemento. Pode ser do tipo repeat , repeat-x , repeat-y , space , round background-position - Define a posi\u00e7\u00e3o inicial da imagem. Pode ser do tipo top , left , right , center , bottom","title":"Fundo de Elementos (Background)"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#propriedades-de-texto","text":"Existem v\u00e1rias propriedades quando o assunto \u00e9 texto em CSS. Abaixo podemos ver uma tabela para refer\u00eancia. Aqui tem um material bem completo fornecido pelo Mozilla","title":"Propriedades de Texto"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#fontes-de-texto-na-web","text":"O CSS nos d\u00e1 as seguintes op\u00e7\u00f5es de letras: serif, sans-serif,monospace, cursive e fantasy. Contudo, n\u00f3s nunca teremos certeza se o navegados do user ter\u00e1 a capacidade de carregar a fonte que desejamos. Para evitar esse problema, podemos definir op\u00e7\u00f5es de fontes do seguinte modo: // css p { font-family : \"Trebuchet MS\" , Verdana , sans-serif ; } O navegador do user vai tenter renderizar a p\u00e1gina usando a primeira op\u00e7\u00e3o, caso ele n\u00e3o consiga, ele vai para as outras op\u00e7\u00f5es. Al\u00e9m das op\u00e7\u00f5es padr\u00e3o CSS, podemos usar fontes propriet\u00e1rias de outras fontes (Google Fonts, DaFont, Adobe e etc). A maneira de fazer isso \u00e9 definir uma propriedade de importa\u00e7\u00e3o como no exemplo abaixo // css @ import url ( 'https://fonts.googleapis.com/css?family=Baloo' ) ; div { font-family : 'Baloo' , cursive ; }","title":"Fontes de Texto na Web"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#layouts-responsivos","text":"N\u00e3o \u00e9 nada incomum acharmos sites que respondem dinamicamente ao tamanho da tela. Agora vamos aprender um pouco sobre esse m\u00e9todo de desenvolvimento de aplica\u00e7\u00f5es web. O Responsive Web Design (RWD) \u00e9 a ferramenta que define o layout de um site de modo din\u00e2mico ao tamanho da tela ou janela do dispositivo. Para poder usar esse m\u00e9todo, n\u00f3s precisamos planejar nosso c\u00f3digo HTML e CSS de maneira compat\u00edvel com essa metodologia. Os principais padr\u00f5es de layout responsivos s\u00e3o. Por enquanto eu vou deixar esse se\u00e7\u00e3o mais enxuta: Mostly Fluid Column Drop Layout Shifter Off Canvas Tiny Tweaks","title":"Layouts Responsivos"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#media-queries","text":"As media queries s\u00e3o os par\u00e2metros usados na aplica\u00e7\u00e3o que usam alguma caracter\u00edstica do dispositivo onde a p\u00e1gina est\u00e1 sendo exibida. Abaixo n\u00f3s podemos ver um exemplo de elemento HTML com media query. // html < head > < link rel = \"stylesheet\" media = 'screen and (min-width: 900px)' href = \"tela_g.css\" > < link rel = \"stylesheet\" media = 'screen and (max-width: 600px)' href = \"tela_p.css\" > </ head > Nesse exemplo HTML, podemos ver como, de acordo com o tamanho da tela, o arquivo de estilo CSS carregado vai ser o \"tela_g.css\" ou o \"tela_p.css\". Do lado do CSS, a sintaxe das media queries s\u00e3o usadas da seguinte maneira: // css body { background-color : red ; } @ media screen and ( min-width : 600px ) { body { background-color : orange ;} } @ media screen and ( min-width : 800px ) { body { background-color : yellow ;} } Podemos ver que, de acordo com a largura da tela, o CSS envia para o navegador uma cor de fundo do body diferente. Agora estamos come\u00e7ando a ver a l\u00f3gica por tr\u00e1s dos designs responsivos. As op\u00e7\u00f5es de media types s\u00e3o: all - Qualquer tipo de m\u00eddia handheld - Para telas responsivas ao toque print - Impressoras screen - Telas de computadores, smartphones e tablets outras As op\u00e7\u00f5es de media features s\u00e3o as caracter\u00edsticas dos dispositivos tais como: color - Profundidade de cores em bits color-index - N\u00famero de cores indexadas width e height - Largura e altura do viewport device-width e device-height - Largura e altura do dispositivo orientation - Propor\u00e7\u00e3o do viewport (portrait ou landscape) resolution - Resolu\u00e7\u00e3o de sa\u00edda em dpi","title":"Media Queries"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#resolucao-e-viewport","text":"Quando as tela mudam de tamanho, o valor do pixel tamb\u00e9m \u00e9 alterado. Para resolver esse problema, o CSS utiliza um m\u00e9todo de c\u00e1lculo que padroniza as medidas independentemente do tamanho da tela. Se nossa aplica\u00e7\u00e3o for desenvolvida para uma tela com 1920 pixels (full HD), podemos converter cada pixel em uma nova unidade que permita a aplica\u00e7\u00e3o recalcular os tamanhos dos componentes em pixels de modo a se adequar melhor ao display. No exemplo a abaixo, n\u00f3s estamos \"mudando\" o valor padr\u00e3o do pixel para caber em uma tela com 1/3 de 1920 (640 pixels): \\[ Viewport = \\dfrac{ \\textrm{Resolu\u00e7\u00e3o}}{ \\textrm{Pixel-Ratio}} = \\dfrac{1920}{3} = 640 \\ pixels \\] Para habilitar esse m\u00e9todo de ajuste, o HTML precisa ter a seguinte linha no head : // html < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > A Vantagem dessa abordagem \u00e9 que ela permite a manuten\u00e7\u00e3o da leitura quando nossa p\u00e1gina \u00e9 carregada por telas menores. Tamb\u00e9m podemos controlar a capacidade de rolagem e zoom do usu\u00e1rio por meio dessa meta tag.","title":"Resolu\u00e7\u00e3o e Viewport"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#layout-flex","text":"J\u00e1 aprendemos como reduzir a escala da nossa aplica\u00e7\u00e3o com o viewport. Mas, em telas de smartphones ou monitores pequenos, simplesmente reduzir a aplica\u00e7\u00e3o para caber no dispositivo pode n\u00e3o ser suficiente para uma boa experi\u00eancia. No Layout Flex (flexbox) n\u00f3s podemos definir o comportamento dos elementos html filhos dentro de um bloco maior. Nesse modelo, n\u00f3s conseguimos mudar o posicionamento relativo dos elementos filhos sempre que a tela se comportar de determinada maneira prevista (como o caso do nosso site ser aberto em uma tela de smartphone ao inv\u00e9s de um monitor). Para usar esse recurso, usaremos no elemento pai 6 o par\u00e2metro display: flex; flex-wrap: wrap; . Al\u00e9m de definirmos o tipo de display no elemento pai, usaremos a media query para ajustar o tamanho ideal dos elementos na tela. Podemos ver melhor no exemplo de c\u00f3digo abaixo: // html <!DOCTYPE html> < body > < main class = 'container' > < div id = \"orange\" ></ div > < div id = \"green\" ></ div > < div id = \"yellow\" ></ div > </ main > </ body > </ html > // css . container { display : flex ; flex-wrap : wrap ; } div { height : 80 px ; width : 100 % ; } /* tela pequena */ # orange { background-color : orange ; order : 1 ; } # green { background-color : green ; order : 2 ; } # yellow { background-color : yellow ; order : 3 ; } /* tela media */ @ media screen and ( min-width : 600px ) { # orange { width : 100 % } # green { width : 70 % } # yellow { width : 30 % } } /* tela grande */ @ media screen and ( min-width : 1000px ) { # orange { width : 40 % } # green { width : 40 % } # yellow { width : 20 % } } O resultado desses c\u00f3digos acima produzem o seguinte resultado:","title":"Layout Flex"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#layout-grid","text":"Para al\u00e9m das medias queries e layout flex, podemos construir o front end de uma aplica\u00e7\u00e3o usando o Sistema Grid que o CSS possui. A ideia \u00e9 pensar no front end da aplica\u00e7\u00e3o em termos de dois elementos visuais: O Container e os Itens. Coment\u00e1rio: Depois eu vou revisitar essa se\u00e7\u00e3o com base no material dispon\u00edvel nesse link . O sistema Grid possui alguns conceitos que nos ajudam a criar e manter a interface de uma aplica\u00e7\u00e3o que use essa metodologia: Line - Separa as cells Cell - \u00c9 uma unidade encapsulada em uma linha e uma coluna Area - Conjunto de cells Track - Um conjunto linear de cells (uma linha ou uma coluna do grid) Abaixo temos o c\u00f3digo de uma aplica\u00e7\u00e3o simples usando esse sistema de constru\u00e7\u00e3o de front end: // html < body > < div class = \"container\" > < header > Header </ header > < main > Main </ main > < nav > Sidebar </ nav > < footer > Footer </ footer > </ div > </ body > // css body { background-color : rgb ( 255 , 255 , 255 ); } . container { height : 700 px ; display : grid ; grid-template-columns : 20 % 30 % 30 % 19 % ; grid-template-rows : auto ; grid-template-areas : \"header header header header\" \"main main main sidebar\" \"footer footer footer footer\" ; column-gap : 5 px ; row-gap : 5 px ; } header { grid-area : header ; background-color : orange ; height : 100 px ; } main { grid-area : main ; background-color : blue ; height : 500 px ; } nav { grid-area : sidebar ; background-color : red ; height : 500 px ; } footer { grid-area : footer ; background-color : green ; margin : solid black 5 px ; height : 100 px ; } Com base nessa l\u00f3gica, podemos posicionar elementos usando o sistemas de coordenadas do CSS Grid. Vamos refazer a interface que acabamos de ver usando apenas esse conceito de \"items\" dentro de um \"container\". Ao inv\u00e9s de definir a separa\u00e7\u00e3o da tela como par\u00e2metro da classe container no CSS, n\u00f3s vamos criar o container e orientar, dentro de cada item, como ele se comportar\u00e1 no grid. // html < body > < div class = \"container\" > < div class = \"item-a\" > Header </ div > < div class = \"item-b\" > Main </ div > < div class = \"item-c\" > Nav </ div > < div class = \"item-d\" > Footer </ div > </ div > </ body > // css body { background-color : rgb ( 255 , 255 , 255 ); } . container { height : 700 px ; display : grid ; grid-template-columns : 24 % 25 % 25 % 25 % ; grid-template-rows : 10 % 80 % 10 % ; grid-column-gap : 5 px ; grid-row-gap : 5 px ; } . item-a { background-color : orange ; grid-column-start : 1 ; grid-column-end : span 4 ; grid-row-start : 1 ; grid-row-end : 1 ; } . item-b { background-color : blue ; grid-column-start : 1 ; grid-column-end : span 3 ; grid-row-start : 2 ; grid-row-end : 2 ; } . item-c { background-color : red ; grid-column-start : 4 ; grid-column-end : 4 ; grid-row-start : 2 ; grid-row-end : 2 ; } . item-d { background-color : green ; grid-column-start : 1 ; grid-column-end : span 4 ; grid-row-start : 3 ; grid-row-end : 3 ; } Nem vale a pena mostrar uma imagem do resultado porque ele \u00e9 exatamente igual \u00e0 imagem anterior. Com isso, podemos ver que \u00e9 o desenvolvimento de uma interface de aplica\u00e7\u00e3o web pode ser feito de diferentes maneiras, mas o que realmente importa \u00e9 uma boa documenta\u00e7\u00e3o e um planejamento bem feito para que o cliente termine com o que ele realmente precisa e o time de desenvolvimento n\u00e3o precise perder preciosas horas no bem conhecido ciclo de ``vai-e-volta'' at\u00e9 que o cliente aceite algum layout.","title":"Layout Grid"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#exemplo-de-aplicacao-web-responsiva","text":"Para finalizar nosso estudo de desenvolvimento web com CSS vamos fazer uma aplica\u00e7\u00e3o simples. O prot\u00f3tipo no MarvelApp pode ser visto nesse link . Coment\u00e1rio: Acredite, com os conceitos aprendidos at\u00e9 agora n\u00f3s j\u00e1 conseguimos fazer aplica\u00e7\u00f5es simples com p\u00e1ginas est\u00e1ticas com relativa facilidade. A prova disso \u00e9 que enquanto escrevo esse par\u00e1grafo acabamos de criar a primeira p\u00e1gina da aplica\u00e7\u00e3o web front end que meu grupo precisa entregar como projeto do primeiro semestre da gradua\u00e7\u00e3o. Eu usei, basicamente, apenas o que aprendemos aqui e alguma pesquisa no google para coisas mais simples.","title":"Exemplo de Aplica\u00e7\u00e3o Web Responsiva"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#frameworks-front-end-bootstrap","text":"Como era de se esperar, os programadores perceberam que era poss\u00edvel combinar v\u00e1rias pr\u00e1ticas do mercado em \"pacotes\",\"bibliotecas\" ou \"frameworks\" que, no fundo, s\u00e3o c\u00f3digos escritos em HTML, CSS e JavaScript. Essas ferramentas facilitam demais o processo de desenvolvimento mas, como tudo na vida, precisam ser usadas com modera\u00e7\u00e3o e habilidade. N\u00e3o podemos correr o risco de virarmos \"escravos\" de nenhum framework. Com o devido aviso dado, podemos iniciar nosso estudo de Frameworks famosos com o Boostrap. A culpa de v\u00e1rias sites que acessamos terem um \"jeit\u00e3o\" parecido \u00e9, em boa parte, desse framework que at\u00e9 hoje \u00e9 o mais famoso. Foi desenvolvido em 2011 por Mark Otto e Jacob Thornton no Twitter e disponibilizado no GitHub. O Bootstrap se ajusta automaticamente a diferentes modelos de tela porque tem, dentro dele, tamanhos pr\u00e9-determinados de telas que se ajustam ao dispositivo. A \"fronteira\" entre os tamanhos de tela s\u00e3o os chamados Breakpoints . A tabela abaixo resume as rela\u00e7\u00f5es entre tamanho da tela e ajuste do container da aplica\u00e7\u00e3o. O site oficial pode ser acessado nesse link . Extra Small Small Medium Large Extra Large <57px \\(\\geq\\) 576px \\(\\geq\\) 768px \\(\\geq\\) 992px \\(\\geq\\) 1200px Max container size (auto) 540px 720px 960px 1140px Nome da Classe .col- .col-sm- .col-md- .col-lg- .col-xl-","title":"Frameworks front-end - Bootstrap"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#download-do-bootstrap","text":"Existem duas op\u00e7\u00f5es de download desse Framework: CSS e JS compilados - J\u00e1 vem pronto pra uso mas \u00e9 um pouco limitado. C\u00f3digo Fonte - Permite customiza\u00e7\u00e3o e vem com as fontes do Bootstrap mas precisa de compila\u00e7\u00e3o. Para saber como fazer basta uma pesquisa r\u00e1pida no youtube.","title":"Download do Bootstrap"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#conteudo-do-boostrap","text":"A melhor fonte sobre qualquer tecnologia geralmente \u00e9 a pr\u00f3pria documenta\u00e7\u00e3o oficial . Mas podemos dividir as partes do Bootstrap em: Reboot - Para uniformiza\u00e7\u00e3o da apar\u00eancia em diferentes navegadores Tipografia - Textos e fontes Code - Linhas de c\u00f3digo Images - Relacionado aos recursos de imagens Tables - Relacionado aos recursos de tabelas Figures - Imagens com textos associados","title":"Conte\u00fado do Boostrap"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#componentes-do-boostrap","text":"N\u00f3s j\u00e1 sabemos que o HTML possui uma l\u00f3gica de estrutura\u00e7\u00e3o da p\u00e1gina. Contudo, quando estamos usando o Bootstrap temos que ``reaprender'' como pensar nossa estrutura da p\u00e1gina a partir dos conceitos e modelos do framework. Para o Bootstrap, a p\u00e1gina \u00e9 criada usando-se componentes . A lista \u00e9 bem grande mas podemos destacar alguns: Breadcrumb - Trilha com o caminho do site at\u00e9 uma p\u00e1gina Navbar - Barra de menu e pesquisa Carousel - Conjunto rotativo de imagens em destaque no site Cards - Cart\u00f5es para uso diverso. Podem ser imagens ou texto Modal - Caixas de di\u00e1logo (tipo um popup s\u00f3 que dentro da p\u00e1gina)","title":"Componentes do Boostrap"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#sistema-grid-no-bootstrap","text":"Como n\u00f3s j\u00e1 sabemos, o sistema grid \u00e9 uma maneira conveniente de controlarmos a estrutura visual da nossa aplica\u00e7\u00e3o. Diante disso, n\u00e3o \u00e9 surpreendente que esse framework tamb\u00e9m use uma vers\u00e3o dessa l\u00f3gica. Para o Bootstrap, todas as p\u00e1ginas ser\u00e3o sempre divididas em 12 colunas. Quando um elemento est\u00e1 dentro de outro, o padr\u00e3o de 12 colunas se mant\u00e9m. A l\u00f3gica de divis\u00e3o \u00e9 como na imagem abaixo: O c\u00f3digo HTML usando o Bootstrap \u00e9 fortemente baseado em <div> . A novidade est\u00e1 no uso de classes espec\u00edficas que d\u00e3o a l\u00f3gica contida nos arquivos usados pelo framework. A hierarquia \u00e9 similar ao grid system porque a aplica\u00e7\u00e3o existira dentro de um container. O Container ter\u00e1 pelo menos uma linha (row). Cada linha ter\u00e1 pelo menos uma coluna. Internalize essa hierarquia de Container, Linhas e Colunas. // html < div class = \"row\" > < div class = \"col-md-6\" id = \"cel1\" > .col-md-6 </ div > < div class = \"col-md-6\" id = \"cel2\" > .col-md-6 </ div > </ div > < div class = \"row\" > < div class = \"col-md-2\" id = \"cel1\" > .col-md-2 </ div > < div class = \"col-md-10\" id = \"cel2\" > .col-md-10 </ div > </ div > < div class = \"row\" > < div class = \"col-md-9\" id = \"cel1\" > .col-md-9 </ div > < div class = \"col-md-3\" id = \"cel2\" > .col-md-3 </ div > </ div > // css # cel1 { color : white ; background-color : red ; height : 100 px ; border : solid black 3 px ; } # cel2 { color : white ; background-color : blue ; height : 100 px ; border : solid black 3 px ; } Na pr\u00f3xima imagem podemos ver o resultado desse c\u00f3digo. O sistema de 12 colunas md-1 torna bem simples a disposi\u00e7\u00e3o dos conte\u00fados na tela.","title":"Sistema Grid no Bootstrap"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#a-linguagem-javascript","text":"J\u00e1 aprendemos que a Web utiliza a linguagem HTML para estrutura do conte\u00fado, a linguagem CSS para formato e apresenta\u00e7\u00e3o. Contudo, n\u00f3s sabemos que hoje em dia as aplica\u00e7\u00f5es possuem fun\u00e7\u00f5es bem complexas com sistemas inteiros baseados todo no navegador do client. A linguagem JavaScript \u00e9 justamente o mecanismo que tr\u00e1s essa capacidade de interatividade e processamento para \u00e0 web. Hoje em dia, a linguagem JavaScript (tamb\u00e9m chamada de JS) \u00e9 mantida pela ECMA International . Uma organiza\u00e7\u00e3o su\u00ed\u00e7a criada em 1961 cujas atividades s\u00e3o separadas em v\u00e1rios campos de atua\u00e7\u00e3o. Um desses campos \u00e9 a padroniza\u00e7\u00e3o de linguagens de programa\u00e7\u00e3o. Atualmente, ela elabora os padr\u00f5es para as linguagens ECMAScript (TC39), C# (TC49) e outras. Sim, \u00e9 isso mesmo. Nada de JavaScript. O JS foi criado em 1995 por Brendan Eich mas em 1996 foi transferido para a ECMA para padroniza\u00e7\u00e3o. O primeiro padr\u00e3o JS dentro do ECMAScript foi feito em 1997. Como consta na edi\u00e7\u00e3o 2020 do padr\u00e3o \"O ECMAScript \u00e9 baseado em v\u00e1rias tecnologias cujas mais conhecidas s\u00e3o o JavaScript (Netscape) e JScript (Microsoft)\". O ECMAScript foi adotado na maioria dos navegadores desde o final dos anos 90. Hoje em dia, praticamente todos os navegadores adotam o padr\u00e3o ECMAScript e, consequentemente, o JavaScript dentro deles. A ECMA International cria os padr\u00f5es e especifica\u00e7\u00f5es que permitam a execu\u00e7\u00e3o de uma determinada linguagem. O JS \u00e9 a implementa\u00e7\u00e3o dessas padroniza\u00e7\u00f5es dentro dos navegadores do mercado. Tanto \u00e9 assim, que diferentemente do que acontece com as outras linguagens como Python, R e etc, voc\u00ea n\u00e3o precisa instalar um interpretador ou um compilador para rodar c\u00f3digos em JS. Os navegadores possuem, dentro deles, um motor pr\u00f3prio que executa o padr\u00e3o ECMAScript. Para citar alguns desses motores: Navegador Motor Web Motor ECMAScript Firefox Gecko Spider Monkey Chrome Blink Google V8 Safari WebKit JavaScriptCore IE Trident Chakra Core Edge EDGE Chakra Core Opera Blink Coment\u00e1rio: N\u00e3o confunda a linguagem de programa\u00e7\u00e3o Java com JavaScript. S\u00e3o linguagens totalmente diferentes.","title":"A Linguagem JavaScript"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#aplicacao-da-linguagem-javascript","text":"Da mesma maneira que vimos com o CSS, podemos trazer o JS para nossa aplica\u00e7\u00e3o web de diferentes maneiras: Por arquivo externo - C\u00f3digo \u00e9 mantido em um arquivo separado // js < script type = \"text/javascript\" src = \"script.js\" >< /script> Em Bloco interno - C\u00f3digo fica em um bloco dentro do HTML // js < script type = \"text/javascript\" > /* C\u00f3digo JS */ alert ( \"Ol\u00e1 mundo!\" ); < /script> Inline - C\u00f3digo fica dentro de um atributo do elemento HTML // js < p onClick = \"alert('Click feito!');\" >< /p> Agora que sabemos que podemos \"turbinar\" nossas p\u00e1ginas web com o uso de JS, podemos nos perguntar o que pode ser feito com essa ferramenta. A resposta \u00e9 praticamente qualquer coisa! Podemos elencar como principais aplica\u00e7\u00f5es: Manipula\u00e7\u00e3o de objetos e tratamento de eventos relacionados aos elementos HTML a partir do uso de uma API chamada DOM (Documento Object Model). Comunica\u00e7\u00e3o com servidores e utiliza\u00e7\u00e3o de APIs via AJAX usando o XMLHttpRequest ou na API Fetch Armazenamento de dados no client com o uso das APIs Indexed DB e LocalStorage/SessionStorage Usar as APIs do HTML5: Canvas, Media, File, Drag and Drop, Geolocation, Web Workers, History","title":"Aplica\u00e7\u00e3o da Linguagem JavaScript"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#javascript-alem-do-browser","text":"As pessoas gostaram tanto de JS que foram capazes de construir uma aplica\u00e7\u00e3o que implementa o v8 do chrome fora do browser. Isso mesmo, podemos rodar aplica\u00e7\u00f5es em JS direto no terminal do seu computador. Basta usar a aplica\u00e7\u00e3o Node.js . Hoje em dia, d\u00e1 pra fazer uma aplica\u00e7\u00e3o inteira, backend e frontend com JS. Com JS podemos tamb\u00e9m construir aplica\u00e7\u00f5es desktop usando uma biblioteca chamada Electron . Esse aqui \u00e9 apenas o come\u00e7o da nossa caminhada!","title":"JavaScript al\u00e9m do Browser"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#variaveis-e-tipos-de-dados","text":"A linguagem JS \u00e9 de tipagem din\u00e2mica. Ent\u00e3o o tipo de vari\u00e1vel \u00e9 definido pela pr\u00f3pria linguagem na hora da atribui\u00e7\u00e3o do valor. Temos dois tokens de atribui\u00e7\u00e3o em JS var ou let . // js var variavel01 ; // Aqui eu declarei sem atribuir nada var x = 10 ; // x agora \u00e9 um num\u00e9rico de valor 10 let y = \"Ol\u00e1 mundo\" // y \u00e9 uma string Agora temos que entender o motivo de termos dois tokens de atribui\u00e7\u00e3o. Mas, para poder explicar isso, precisamos entender que existem diferentes escopos de vari\u00e1veis quando um programa em JS \u00e9 executado. Os escopos das vari\u00e1veis em JS s\u00e3o: Escopo Global - Vari\u00e1veis sempre dispon\u00edveis para consulta e edi\u00e7\u00e3o Escopo Local - Vari\u00e1veis existem apenas dentro de um bloco de c\u00f3digo (um loop ou uma condicional, por exemplo) As vari\u00e1veis declaradas com var s\u00e3o de escopo global se forem declaradas fora de fun\u00e7\u00f5es (Nesse caso s\u00e3o de escopo local). J\u00e1 a atribui\u00e7\u00e3o feita com let \u00e9 de escopo local . Abaixo temos um exemplo bem bacana mostrando essas diferen\u00e7as. // js var a = 5 ; var b = 10 ; if ( a === 5 ) { let a = 4 ; var b = 1 ; console . log ( a ); console . log ( b ); } > Mostra 4 e 1 no console console . log ( a ); console . log ( b ); > Mostra 5 e 1 no console Coment\u00e1rio: Uma boa pr\u00e1tica em JS (e em praticamente todas as linguagens) \u00e9 sempre declarar as vari\u00e1veis na parte de cima de cada bloco ou no come\u00e7o do c\u00f3digo. Tamb\u00e9m \u00e9 poss\u00edvel usar o token const para atribui\u00e7\u00e3o. Esse token funciona igual ao let e \u00e9 definido para constantes. Uma boa pr\u00e1tica da comunidade \u00e9 usar letra mai\u00fasculas para definir suas constantes.","title":"Vari\u00e1veis e Tipos de Dados"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#tipos-e-estruturas-de-dados","text":"Todas as vari\u00e1veis que s\u00e3o n\u00fameros, textos (strings) ou valores booleanos (true ou false) s\u00e3o o que chamamos de tipo Primitivo . As vari\u00e1veis especiais do tipo nulo (null) ou indefinido (undefined) s\u00e3o possuem caracter\u00edsticas de tipo primitivo mas podem ser entendidas como sendo de um tipo \u00fanico especial. No ECMAScript 6 foi inserida uma nova categoria de vari\u00e1veis chamadas de tipo Simb\u00f3lico ou Symbol (N\u00e3o vamos nos aprofundar nisso agora. Depois eu atualizo esse material com o ECMAScript 6.). O que n\u00e3o for de tipo primitivo, null, undefined ou symbol, ser\u00e1 do tipo Objeto que possui uma lista de propriedades, que por sua vez, possuem um nome e valores associados. Podemos resumir o que acabamos de ver como:","title":"Tipos e Estruturas de Dados"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#tipo-numerico","text":"JS n\u00e3o faz diferen\u00e7a entre n\u00fameros inteiros ou fracionados. Para essa linguagem, tudo \u00e9 considerado o que chamamos de ponto flutuante de 64 bits. O valor m\u00e1ximo poss\u00edvel \u00e9 acessado pela propriedade do objeto Number por meio das propriedades Number.POSITIVE_INFINITY e Number.NEGATIVE_INFINITY \". Quando tentamos fazer uma opera\u00e7\u00e3o matem\u00e1tica n\u00e3o poss\u00edvel (como raiz de -1) recebemos o resultado NaN que significa Not-a-Number. N\u00e3o \u00e9 incomum termos que converter caracteres do tipo texto mas que representam n\u00fameros. Para isso, podemos usar a fun\u00e7\u00e3o nativa parseInt ou parseFloat .","title":"Tipo Num\u00e9rico"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#tipo-boolean","text":"Os operadores booleanos s\u00e3o operadores que apenas admitem duas entradas: true ou false . Podemos chamar essas entradas diretamente ou atrav\u00e9s de opera\u00e7\u00f5es l\u00f3gicas usando operadores l\u00f3gicos ou matem\u00e1ticos. Abaixo temos uma tabela que podemos usar de refer\u00eancia. Operador Exemplo Observa\u00e7\u00e3o Mesmo valor x == y true se mesmo valor Mesmo valor e tipo x === y true se mesmo valor e tipo Diferente valor x !== y true se diferente valor Maior que x > y true se x maior que y Menor que x < y true se x menor que y Maior igual x >= y true se maior igual Menor igual x <= y true se menor igual Nega\u00e7\u00e3o !x true se x for false And x && y true se x e y forem true Or x || y true se x ou y forem true","title":"Tipo Boolean"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#tipo-string","text":"Qualquer aplica\u00e7\u00e3o precisa ser capaz de lidar com textos. Uma string \u00e9 exatamente uma cadeia de caracteres n\u00e3o num\u00e9ricos (mas caracteres num\u00e9ricos tamb\u00e9m podem compor uma string) que pode ser declarada por meio de aspas simples \"abc\" ou compostas 'abc'. Tamb\u00e9m \u00e9 comum precisarmos juntar diferentes strings. No javascript, podemos fazer isso simplesmente usando o operador de soma: // js str = 'abc' + 'def' console . log ( str ) > abcdef Alguns caracteres das nossas strings podem ser os mesmos usados na pr\u00f3pria linguagem. Isso nos obriga a termos que aprender como fazer um \"bypass\" desses caracteres. Abaixo temos uma tabela para refer\u00eancia. C\u00f3digo Significado \\(\\backslash\\) 0 Null \\(\\backslash\\) ' Aspas simples \\(\\backslash\\) \" Aspas compostas \\(\\backslash \\backslash\\) Barra invertida \\(\\backslash\\) n Nova linha \\(\\backslash\\) r Retorno \\(\\backslash\\) v Tabula\u00e7\u00e3o Vertical \\(\\backslash\\) t Tabula\u00e7\u00e3o \\(\\backslash\\) b Backspace \\(\\backslash\\) f form feed \\(\\backslash\\) uXXXX Unicode \\(\\backslash\\) xXX Latin-1 A partir do ECMAScript6 existe outra maneira de compor strings: por meio do uso da crase isso \u00e9 uma string . A vantagem desse m\u00e9todo, chamado de TemplateString \u00e9 que esse tipo de string \u00e9 especial que pode receber express\u00f5es interpret\u00e1veis como no exemplo abaixo: // js nome = \"bruno\" console . log ( nome ) > bruno linha = `meu nome \u00e9 ${ nome } ` console . log ( linha ) > meu nome \u00e9 bruno Podemos ver que na \u00faltima linha o resultado faz uso do valor da vari\u00e1vel nome . Provavelmente, sempre que a gente entra em um site que possui aquela mensagem amig\u00e1vel de \"Seja bem vindo, Fulano\", o programador usou essa fun\u00e7\u00e3o para produzir aquele texto.","title":"Tipo String"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#tipo-objeto","text":"Objetos s\u00e3o uma boa parte do que faz o JS ser t\u00e3o poderoso. Cada objeto \u00e9 simplesmente uma cole\u00e7\u00e3o de pares nome-valor. Os nomes s\u00e3o as propriedades do objeto e os valores podem ser qualquer tipo de vari\u00e1vel que vimos logo antes (incluindo outros objetos e fun\u00e7\u00f5es). Quando a propriedade for uma fun\u00e7\u00e3o, dizemos que essa fun\u00e7\u00e3o \u00e9 um m\u00e9todo do objeto. // js var objeto1 = new Object (); // Criando o objeto \"objeto1\" objeto1 . name = \"bruno\" ; // modo 1 de criar uma propriedade objeto1 [ \"age\" ] = 28 ; // modo 2 de criar uma propriedade console . log ( objeto1 ) > { age : 28 , name : bruno } var objeto2 = { // modo de criar o objeto nome : \"bruno\" , // junto das propriedades idade : 28 } console . log ( objeto2 ) > { nome : bruno , idade : 28 } Para acessar o valor de uma propriedade em um objeto basta escrever algo como: objeto.propriedade (Python \u00e9 assim tamb\u00e9m).","title":"Tipo Objeto"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#datas-e-horas","text":"Na elabora\u00e7\u00e3o de uma aplica\u00e7\u00e3o \u00e9 comum ter que lidar com var\u00e1veis do relacionadas ao tempo. Para isso o JS possui um tipo de objeto especialmente projetado para facilitar essa tratativa. O objeto Date() . Podemos usa-lo como: // js var a = new Date () // Atribui a data atual ao objeto var c = new Date ( string ) // Atribui a data por uma string var d = new Date ( Ano , Mes , Dia , Hora , Segundo , Milisegundos ) Geralmente estamos preocupados apenas com o dia, m\u00eas e ano. Para criar um objeto com esses valores basta ir colocando na mesma ordem do \u00faltimo elemento do exemplo acima. Aviso: Quando voc\u00ea for indicar o m\u00eas, saiba que para o JS, janeiro \u00e9 0 e dezembro \u00e9 11. Ent\u00e3o quando quisermos salvar a data 01/01/2022 usaremos Date(2022,0,1) . Como todo objeto, a vari\u00e1vel criada com o Date() possui v\u00e1rias propriedades e m\u00e9todos. Uma boa refer\u00eancia \u00e9 o material do MDN que pode ser visto aqui . Mas podemos elencar alguns m\u00e9todos importantes como: // js var z = new Date () z . getFullYear () z . getMonth () z . getDate () z . getDay () z . getHours () z . getMinutes () z . getSeconds () z . getMillisecondes () z . getTimes () Acho que n\u00e3o \u00e9 necess\u00e1rio explicar cada m\u00e9todo desse porque o nome \u00e9 bem alto explicativo.","title":"Datas e Horas"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#arrays-vetores-ou-matrizes","text":"Um array \u00e9 uma estrutura de dados semelhante a uma lista. Em JS temos algumas maneiras de criar arrays: // js /* Modo 01 */ var a = new Array () a [ 0 ] = 'valor01' a [ 1 ] = 'valor02' /* Modo 02 */ var b = new Array ( 'valor01' , 'valor02' ) /* Modo 03 */ var c = [ 'valor01' , 'valor02' ] Todos os 3 modos produzem o mesmo resultado e podem ser usados alternadamente. Como qualquer objeto, existem v\u00e1rios m\u00e9todos muito \u00fateis dentro de um Array(). // js concat () // Junta dois ou mais vetores fill () // Preencher os elementos em um vetor com um valor est\u00e1tico find () // Retorna o valor do primeiro elemento em um vetor que atender ao filtro findIndex () // Retorna o \u00edndice do primeiro elemento em um vetor forEach () // Chama uma fun\u00e7\u00e3o para cada elemento do vetor indexOf () // Busca um elemento no vetor e retorna a sua posi\u00e7\u00e3o isArray () // Verifica se um objeto \u00e9 um vetor join () // Junta todos os elementos de um vetor em uma string lastIndexOf () // Pesquisar o vetor por um elemento, come\u00e7ando no final pop () // Remove o \u00faltimo elemento de um vetor e retorna o elemento push () // Adiciona novos elementos para o final de um vetor reverse () // Inverte a ordem dos elementos em um vetor slice () // Seleciona uma parte de um vetor e retorna o novo vetor sort () // Classifica os elementos de um vetor splice () // Adiciona/remove elementos de um vetor toString () // Converte um vetor em uma string e retorna o resultado valueOf () // Retorna o valor primitivo de um vetor Coment\u00e1rio: Eu achei estranho que o material n\u00e3o falou nada sobre vetor e matriz. Ent\u00e3o uma hora eu volto para expandir essa parte com esses outros dois tipos de dados.","title":"Arrays, Vetores ou Matrizes"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#controle-de-fluxo","text":"Em qualquer linguagem de programa\u00e7\u00e3o 7 existem maneiras de organizar blocos de c\u00f3digo para o compilador/interpretador saber o que priorizar na hora do processamento do c\u00f3digo. Em JS isso \u00e9 feito com o uso das chaves { }.","title":"Controle de Fluxo"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#declaracoes-de-selecao","text":"Quando estamos fazendo um script de c\u00f3digo, \u00e9 muito comum termos que nos adaptar as situa\u00e7\u00f5es onde determinados eventos podem ou n\u00e3o acontecer. Para isso, usamos algumas estruturas l\u00f3gicas que permitem o processamento de blocos de texto apenas se alguma condi\u00e7\u00e3o predeterminada seja satisfeita. Ou seja, usamos um condicionante do tipo \"Se-Ent\u00e3o\". // js if ( expressao ) { bloco de codigo caso true } else { outro bloco de codigo caso false } Existem situa\u00e7\u00f5es onde existem m\u00faltiplas possibilidades. Pensando nisso, o JS possui um operador de switch que permite v\u00e1rios condicionantes de maneiras mais simples do que v\u00e1rios if s sucessivos. // c# switch ( expressao ) { case valor01 : bloco_se_01 break case valor02 : bloco_se_02 break default : bloco_se_nao_01_ou_02 break } Veja que usamos o token break para indicar que vamos para outra condicional. N\u00e3o podemos esquecer disso. Abaixo temos um exemplo de uma aplica\u00e7\u00e3o simples usando esse m\u00e9todo de gest\u00e3o de fluxo. N\u00e3o se preocupe em entender o c\u00f3digo inteiro, foque apenas no que estamos estudando. // js // Fun\u00e7\u00e3o que recebe um input no terminal const readLine = require ( 'readline' ). createInterface ({ input : process . stdin , output : process . stdout }) readLine . question ( 'Qual seu nome? ' , name => { switch ( name ) { case 'bruno' : console . log ( `OI, BRUNO!` ) break case 'mario' : console . log ( 'Salve, Mario!' ) break default : console . log ( `Ol\u00e1, ${ name } . Seja bem-vindo(a)!` ) } readLine . close () }) > Qual seu nome ? bruno > OI , BRUNO ! > Qual seu nome ? mario > Salve , Mario ! > Qual seu nome ? pedro > Ol\u00e1 , pedro . Seja bem - vindo ( a ) !","title":"Declara\u00e7\u00f5es de Sele\u00e7\u00e3o"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#declaracoes-de-repeticao","text":"Al\u00e9m de termos tokens que nos permitem executar apenas alguns blocos de c\u00f3digo. Existem outros que nos permitem usarmos um mesmo bloco de c\u00f3digo repetidamente. Chamamos essas estruturas l\u00f3gicas de la\u00e7os de repeti\u00e7\u00e3o. A primeira maneira de criarmos um la\u00e7o de repeti\u00e7\u00e3o em JS \u00e9 por meio do token while do seguinte modo: // js // Exemplo de loop com while var i = 0 while ( i <= 5 ) { console . log ( `Contagem: ${ i } ` ) i ++ // soma + 1 ao valor de i } > Contagem : 0 > Contagem : 1 > Contagem : 2 > Contagem : 3 > Contagem : 4 > Contagem : 5 Primeiro criamos a vari\u00e1vel i e usamos a estrutura de loop while para a seguinte regra \"Se i for menor igual a 5 ent\u00e3o mostre a mensagem 'Contagem: N\u00famero i'\". Quando o valor da vari\u00e1vel i \u00e9 6, a express\u00e3o do loop retorna um false e sa\u00edmos do loop. O operador que aprendemos anteriormente faz um loop enquanto a condi\u00e7\u00e3o expressa entre os par\u00eanteses n\u00e3o for false. Mas existem situa\u00e7\u00f5es onde queremos executar o bloco de c\u00f3digo um n\u00famero definido de vezes. Para isso o JS possui o token for . // js // Exemplo de loop com for let frutas = [ 'pera' , 'uva' , 'maca' , 'banana' ] for ( let index = 0 ; index < frutas . length ; index ++ ) { console . log ( frutas [ index ]) } > pera > uva > maca > banana Nesse exemplo acima vemos que o par\u00eanteses da express\u00e3o do for possui 3 linhas de c\u00f3digos separadas por ponto e v\u00edrgula. Na primeira, criamos uma vari\u00e1vel index. Na segunda, temos a nossa express\u00e3o que avalia se o index \u00e9 menor que o tamanho do array frutas. E na terceira, temos a regra de incremento + 1 para cada itera\u00e7\u00e3o do loop. Dentro do loop, n\u00f3s mandamos ele lan\u00e7ar no terminal o valor do elemento do array correspondente ao index.","title":"Declara\u00e7\u00f5es de Repeti\u00e7\u00e3o"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#funcoes","text":"N\u00f3s aprendemos anteriormente que fun\u00e7\u00f5es s\u00e3o umas das var\u00e1veis do tipo objeto no JS. Sempre que pudermos generalizar um tratamento de dados por meio da cria\u00e7\u00e3o de uma fun\u00e7\u00e3o, devemos optar por esse caminho porque assim tornamos a manuten\u00e7\u00e3o dos nossos programas melhor e evitamos ter que repetir linhas de c\u00f3digo muito parecidas. Mesmo sendo um objeto, o JS possui um token espec\u00edfico para a cria\u00e7\u00e3o de fun\u00e7\u00f5es. Abaixo temos dois exemplos adaptados do material do curso. // js // Criacao de uma funcao de soma function soma ( x , y ) { var total = x + y return total } soma ( 2 , 3 ) > 5 Para o segundo exemplo, n\u00f3s queremos construir uma fun\u00e7\u00e3o que retorna a m\u00e9dia dos valores apresentados entre os par\u00eanteses. Para isso, precisaremos de um dos tokens que vimos na se\u00e7\u00e3o passada. Sabemos muito bem que a m\u00e9dia \u00e9 calculada pela soma dos \\(n\\) valores dividida pela quantidade \\(n\\) . Para isso, teremos que usar o token de la\u00e7o de repeti\u00e7\u00e3o. // js function media () { var soma = 0 n = arguments . length for ( var i = 0 ; i < n ; i ++ ) { soma = arguments [ i ] + soma } return soma / n } media ( 2 , 3 , 4 , 5 ) > 3.5 Calma, eu sei que em uma primeira vista \u00e9 estranho esse objeto arguments ter sido chamado do nada. Acontece que no JS (e em muitas linguagens) alguns objetos, a exemplo das fun\u00e7\u00f5es, possuem m\u00e9todos que podem ser usados mesmo no momento da sua cria\u00e7\u00e3o. Nesse caso, \u00e9 o exemplo desse objeto que nos diz a quantidade de argumentos que foram inseridos na nossa fun\u00e7\u00e3o media(). Tamb\u00e9m podemos usar as fun\u00e7\u00f5es para cria\u00e7\u00e3o de estruturas padronizadas de objetos que s\u00e3o conhecidas como classes . Abaixo vamos criar uma estrutura para objetos do tipo Pessoa . // js function Pessoa ( primeiro , ultimo ) { this . primeiro = primeiro this . ultimo = ultimo this . nomeCompleto = function () { return this . primeiro + ' ' + this . ultimo } this . nomeCompletoInvertido = function () { return this . ultimo + ' ' + this . primeiro } } var chefe = new Pessoa ( 'Bruno' , 'Ruas' ) console . log ( chefe . nomeCompleto ) console . log ( chefe . nomeCompletoInvertido ) > Bruno Ruas > Ruas Bruno Novamente, temos um termo sendo usado sem que antes ele tenha sido criado. Nesse caso \u00e9 o termo this . Ele \u00e9 usado para fazer refer\u00eancia ao objeto criado (ou classe) como podemos ver no chamamento dos valores do console.log . Outra novidade \u00e9 que criamos uma `c\u00f3pia'' do objeto Pessoa s\u00f3 que com um outro nome: chefe`.","title":"Fun\u00e7\u00f5es"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#arrow-functions","text":"Agora vamos entrar num ponto que, para mim, foi bem dif\u00edcil de entender no come\u00e7o. O JS permite que a constru\u00e7\u00e3o de fun\u00e7\u00f5es an\u00f4nimas , ou seja, fun\u00e7\u00f5es que n\u00e3o precisam de nomes definidos. Mas antes de aprendermos mais sobre isso, precisamos saber que existem diferentes modos de se criar uma fun\u00e7\u00e3o em JS. Abaixo temos 3 maneiras de se criar a fun\u00e7\u00e3o soma . // js // forma tradicional soma = function ( a , b ) { return a + b } //forma com arrow function soma = ( a , b ) => { return a + b } //arrow function com chaves omitidas soma = ( a , b ) => a + b Agora que entendemos um pouco melhor a constru\u00e7\u00e3o de fun\u00e7\u00f5es em JS, podemos ir mais fundo nas arrow functions . Esse m\u00e9todo de defini\u00e7\u00e3o de fun\u00e7\u00f5es foi criado para facilitar a cria\u00e7\u00e3o de fun\u00e7\u00f5es dentro de contextos, ou seja, se voc\u00ea est\u00e1 criando uma fun\u00e7\u00e3o em uma linha de c\u00f3digo normal (sem estrar em um bloco de c\u00f3digo) \u00e9 melhor usar a forma tradicional. Agora, se voc\u00ea estiver em um contexto diferente (como em um par\u00e2metro de um objeto ou mesmo uma fun\u00e7\u00e3o) \u00e9 melhor usar a arrow function. Assim como os outros objetos, existem propriedades e m\u00e9todos das arrow functions que podemos usar. Um exemplo disso \u00e9 o operador this que faz refer\u00eancia ao bloco em que nossa arrow functions est\u00e1 contida. Em uma fun\u00e7\u00e3o normal, n\u00f3s aprendemos que esse operador faz refer\u00eancia \u00e0 pr\u00f3pria fun\u00e7\u00e3o. Abaixo temos um exemplo adaptado do material. // js // usando 'this' em uma arrow function var Pessoa2 = { nome : 'Bruno' , amigos : [ 'Ana' , 'Clarck' , 'Bruce' ], exibeAmigos () { this . amigos . forEach ( f => console . log ( this . nome + ' \u00e9 amigo de ' + f )) } } Pessoa2 . exibeAmigos () > Bruno \u00e9 amigo de Ana > Bruno \u00e9 amigo de Clarck > Bruno \u00e9 amigo de Bruce Vamos ver o que esse c\u00f3digo acima nos ensina. Primeiro n\u00f3s criamos uma vari\u00e1vel de objeto chamado Pessoa2 e atribu\u00edmos duas propriedades a ela: nome e amigos. Sendo que a propriedade `amigos' \u00e9 um array com 3 elementos. Como Pessoa2 \u00e9 um objeto, n\u00f3s podemos criar m\u00e9todos dentro dele (que nada mais s\u00e3o do que fun\u00e7\u00f5es em um objeto), e \u00e9 exatamente o que fizemos com a fun\u00e7\u00e3o exibeAmigos(). Quando criamos o m\u00e9todo exibeAmigos, n\u00f3s usamos o operador this em um contexto onde ele faz refer\u00eancia ao bloco que cont\u00e9m a fun\u00e7\u00e3o, nesse caso, \u00e9 a vari\u00e1vel Pessoa2. Na primeira linha da nossa fun\u00e7\u00e3o exibeAmigos n\u00f3s usamos um m\u00e9todo Dentro de fun\u00e7\u00e3o exibeAmigos n\u00f3s chamamos a propriedade amigos do nosso objeto Pessoa2 por meio do 'this'. Como j\u00e1 vimos, um array \u00e9 um objeto em JS, portanto, ele possui v\u00e1rias propriedades e m\u00e9todos dentro dele. O forEach que est\u00e1 ali \u00e9 precisamente uma desses m\u00e9todos desse objeto que faz um loop para cada elemento do array. Dentro do loop criado pelo m\u00e9todo forEach do nosso array amigos n\u00f3s criamos uma arrow function que usa a vari\u00e1vel f (que nada mais \u00e9 do que o elemento do array no loop). Ent\u00e3o n\u00f3s fizemos o seguinte, para cada elemento do array que agora chamamos de f, vamos fazer um console.log que nos d\u00e1 o nome da Pessoa2, a string \"conhece\" e o nome do amigo que \u00e9 a vari\u00e1vel f. Com isso temos o resultado apresentado no final desse bloco de c\u00f3digo. Com o tempo as coisas v\u00e3o ficar menos confusas, mas j\u00e1 podemos ver que o JS possui bastante metodologias de processamento de informa\u00e7\u00e3o que teremos que dominar para tirar o m\u00e1ximo das nossas aplica\u00e7\u00f5es web.","title":"Arrow Functions"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#documento-object-model-dom","text":"Como o contexto de aplica\u00e7\u00e3o do JS sempre foi o web, essa linguagem possui algumas integra\u00e7\u00f5es ao ambiente do navegador que s\u00e3o muito \u00fateis para a constru\u00e7\u00e3o de aplica\u00e7\u00f5es verdadeiramente inteligentes. Uma das capacidades mais relevantes \u00e9 a de alterar estruturas HTML e CSS por meio de c\u00f3digos escritos em JS. Isso \u00e9 feito por interm\u00e9dio da API Document Object Model (DOM) que \u00e9 um padr\u00e3o da W3C para os navegadores. Abaixo temos os principais elementos que a comp\u00f5e. Todos esses objetos est\u00e3o vinculados ao objeto maior window que \u00e9 a janela do navegador. history navigator location screen document link anchor form button check box radio password reset submit Cada um desses elementos possui informa\u00e7\u00f5es e podem ser manipulados para conseguirmos construir as aplica\u00e7\u00f5es da maneira como quisermos. Coment\u00e1rio: No material do curso n\u00f3s s\u00f3 aprofundamos em dois desses v\u00e1rios elementos. Depois eu volto aqui a medida que for aprendendo mais sobre os outros.","title":"Documento Object Model (DOM)"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#objeto-window","text":"O objeto window \u00e9 o representante da da janela do browser. Ele cont\u00e9m toda a hierarquia que mostramos nessa lista de elementos acima. Al\u00e9m de conter todos esses elementos dentro dele, esse objeto (Como o pr\u00f3prio nome diz, tudo no DOM s\u00e3o, em algum grau, objetos. Mantenha isso em mente!) possui m\u00e9todos e propriedades que s\u00e3o \u00fateis para o gerenciamento das nossas aplica\u00e7\u00f5es. Na parte de armazenamento de dados o window nos d\u00e1 duas maneiras: localStorage e sessionStorage . No primeiro os dados s\u00e3o mantidos mesmo se o navegador seja fechado. J\u00e1 o sessionStorage mant\u00e9m os arquivos apenas enquanto o navegador \u00e9 mantido aberto. Abaixo temos um exemplo de como usar esses reposit\u00f3rios. // js // guardando dados no reposit\u00f3rio de sess\u00e3o sessionStorage . setItem ( 'login' , 'Bruno Ruas' ) alert ( 'O usu\u00e1rio logado \u00e9: ' + sessionStorage . getItem ( 'login' )) > Aparece um popup com a mensagem \"O Usu\u00e1rio logado \u00e9: Bruno Ruas\" Veja que para salvar o dado, temos o uso do par 'nome'-'valor' e do m\u00e9todo setItem . Para obter o dado, basta usar o m\u00e9todo getItem e passar o nome do valor salvo anteriormente. Tamb\u00e9m podemos atrelar algumas funcionalidades ao tempo. \u00c9 bem comum vermos depois de x minutos a se\u00e7\u00e3o de um site ser encerrada, por exemplo. O objeto window possui algumas maneiras de lidarmos com o tempo: setInterval(funcao, intervalo) - Browser executa uma fun\u00e7\u00e3o continuamente a cada x milisegundos clearInterval() - Cancela a repeti\u00e7\u00e3o da fun\u00e7\u00e3o setTimeout(funcao,intervalo) - Agenda a execu\u00e7\u00e3o de uma fun\u00e7\u00e3o com um delay de x milissegundos clearTimeout() - Cancela o agendamento","title":"Objeto Window"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#object-document","text":"Logo ap\u00f3s o navegador processar os arquivos da p\u00e1gina web, o objeto document passa a existir e pode ser manipulado pelo nosso c\u00f3digo JS. No material temos uma lista das principais propriedades que esse objeto possui (A descri\u00e7\u00e3o eu s\u00f3 vou colocar se for algo n\u00e3o \u00f3bvio). Propriedade Descri\u00e7\u00e3o addEventListener Uma fun\u00e7\u00e3o dispara se um evento ocorre baseURI Retorna a URI body Retorna ou modifica o body cookie Retorna todos os cookies characterSet Charset da p\u00e1gina documentElement Todo o html documentoURI URI do document forms Um array com os forms do html getElementsById getElementsByClassName getElementsByName getElementsByTagName images lastModified Data de modifica\u00e7\u00e3o do documento links Array com todos os links querySelector Primeiro elemento por um seletor CSS querySelectorAll Array com todos os de um seletor CSS removeEventListener scripts Array com os scripts do documento title URL N\u00e3o tem muito pra onde correr. S\u00f3 vamos aprender bem usando, mas por agora, basta termos em mente que essas funcinalidades existem e poder\u00e3o ser \u00fateis em algum momento. Abaixo tempos um exemplo usando uma fun\u00e7\u00e3o JS para alterar um elemento do body atrav\u00e9s do DOM. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> <!-- JavaScript --> < script type = 'text/javascript' > function Executar () { document . getElementById ( 'saida' ). innerHTML = Date () } < /script> < /head> < body > < button type = \"button\" onclick = \"Executar()\" > Aperte ! < /button> < h1 > Sa\u00edda < /h1> < div id = \"saida\" > Condi\u00e7\u00e3o Inicial < /div> < /body> < /html> No c\u00f3digo acima temos o script em JS dentro do pr\u00f3prio arquivo HTML usando a tag <script> . Nesse script n\u00f3s criamos a fun\u00e7\u00e3o Executar() que nada mais faz do que procurar o elemento HTML cujo id \u00e9 igual a 'sa\u00edda' e substitui o HTML desse elemento pela data atual vinda da fun\u00e7\u00e3o nativa Date() . Abaixo podemos ver a diferen\u00e7a entre a situa\u00e7\u00e3o inicial e a final ap\u00f3s apertar o bot\u00e3o.","title":"Object Document"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#objeto-navigator","text":"Como o pr\u00f3prio deixa claro, o objeto navigator representa o software do navegador usado pelo user. Esse objeto nos d\u00e1 algumas informa\u00e7\u00f5es \u00fateis sobre o navegador usado. Abaixo temos uma tabela com alguns dos m\u00e9todos contidos nesse objeto. Propriedade Descri\u00e7\u00e3o appCodeName Codigo do navegador appName Nome do navegador appVersion Vers\u00e3o do navegador cookieEnabled Cookies habilitados geolocation Geolocation language onLine Se o browser est\u00e1 online platform Qual sistema operacional product Engine do navegador userAgent User-agent que o browser envia ao navegador Abaixo temos um exemplo de p\u00e1gina web adaptado do material do curso que faz uso o objeto navegador e retorna a geolocaliza\u00e7\u00e3o do navegador. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> < script type = \"text/javascript\" > // fun\u00e7\u00e3o que recebe as coord e retorna um string function showPosition ( position ) { lat = position . coords . latitude long = position . coords . longitude texto = `Lat: ${ lat } e Long ${ long } ` document . getElementById ( 'saida' ). innerHTML = texto } // fun\u00e7\u00e3o que muda o HTML do elemento saida function getPosition () { if ( window . navigator . geolocation ) { window . navigator . geolocation . getCurrentPosition ( showPosition ) } else { x . innerHTML = 'N\u00e3o tivemos acesso a' + 'sua localiza\u00e7\u00e3o!' } } < /script> < /head> < body > < button type = \"button\" onclick = \"getPosition()\" > Geolocation < /button> < h1 > Mensagem < /h1> < div id = \"saida\" > Sua localiza\u00e7\u00e3o vai aparecer aqui !< /div> < /body> < /html> Nesse c\u00f3digo acima temos uma p\u00e1gina simples com um bot\u00e3o que, ao ser ativado, dispara a fun\u00e7\u00e3o getPosition() . Essa fun\u00e7\u00e3o dispara uma outra fun\u00e7\u00e3o chamada showPosition . O resultado pode ser visto na imagem abaixo.","title":"Objeto Navigator"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#eventos","text":"Outra funcionalidade interessante do DOM \u00e9 a capacidade de usarmos n\u00e3o apenas os elementos da p\u00e1gina mas tamb\u00e9m o contexto (ou eventos) em que esses elementos se encontram. Por exemplo, \u00e9 comum vermos uma imagem aumentar de tamanho quando colocamos o mouse sobre ela. Com essa funcionalidade, conseguimos explorar v\u00e1rios cen\u00e1rios de intera\u00e7\u00e3o do usu\u00e1rio com a p\u00e1gina. No exemplo abaixo, temos o uso de dois contextos do mouse sobre um elemento de texto. Quando o mouse est\u00e1 sobre o elemento, n\u00f3s mudamos a cor dele para vermelho. Quando o mouse n\u00e3o est\u00e1 sobre o elemento, a cor dele se torna preto. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> < /head> < body > < p onmouseover = \"this.style.color='red'\" onmouseout = \"this.style.color='black'\" > Texto < /p> < /body> < /html> Podemos ver mais um exemplo do uso do token this mas dessa vez fora de um bloco de c\u00f3digo de uma fun\u00e7\u00e3o. Nesse contexto, esse operador faz refer\u00eancia ao elemento HTML e altera o seu valor do par\u00e2metro de estilo que indicamos (a cor do texto). Mesmo sendo poss\u00edvel fazer uso do atributo de evento direto no HTML, como fizemos no exemplo anterior, a boa pr\u00e1tica \u00e9 manter essas features em um arquivo JS \u00e0 parte (igual n\u00f3s fizemos com o CSS) pois isso torna o arquivo de estrutura mais f\u00e1cil de ler. Abaixo temos exatamente a mesma funcionalidade mas usando o campo de script do meta mas que poderia ser hospedado em um arquivo .js em separado. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> < /head> < body > < p id = \"texto\" > Texto < /p> < /body> < script type = \"text/javascript\" > var elem = window . document . getElementById ( 'texto' ) elem . addEventListener ( 'mouseout' , function () { window . document . getElementById ( 'texto' ). style . color = '' window . document . getElementById ( 'texto' ). style . fontSize = '' }, false ) elem . addEventListener ( 'mouseover' , function () { window . document . getElementById ( 'texto' ). style . color = 'red' window . document . getElementById ( 'texto' ). style . fontSize = '20px' }, false ) < /script> < /html> Veja que primeiro n\u00f3s criamos uma vari\u00e1vel elem utilizando o getElementById . Como essa vari\u00e1vel \u00e9 um objeto, podemos usar um de seus m\u00e9todos chamado addEventListener que recebe 3 par\u00e2metros: o primeiro \u00e9 o gatilho de disparo, o segundo \u00e9 a fun\u00e7\u00e3o que ser\u00e1 executada e o terceiro \u00e9, para todos os efeitos, sempre falso. No exemplo acima temos dois gatilhos de eventos cadastrados. O primeiro \u00e9 o mouseout que nada mais \u00e9 que o padr\u00e3o. O segundo \u00e9 mouseover que dispara sempre que o mouse estiver sobre o elemento selecionado. Mesmo que a primeira vista pare\u00e7a mais simples usar os atributos de contexto direto no HTML, n\u00f3s precisamos pensar em situa\u00e7\u00f5es onde a aplica\u00e7\u00e3o se torna demasiada grande. Nesses casos, \u00e9 muito melhor, para controlar a evolu\u00e7\u00e3o da nossa aplica\u00e7\u00e3o web e garantir uma boa manuten\u00e7\u00e3o, mantermos em arquivos separados tanto o estilo quanto a funcionalidade. Outra coisa importante a ser notada \u00e9 que o script deve estar abaixo da vari\u00e1vel que ser\u00e1 manipulada. Primeiro o elemento precisa existir para usarmos o nosso c\u00f3digo. Esse \u00e9 o motivo da tag script estar na parte de baixo da p\u00e1gina e n\u00e3o no head como nos outros exemplos. Na tabela a baixo temos os principais tipos de gatilhos que podem ser usados pelo DOM. Para usar algum desses no direto no HTML \u00e9 necess\u00e1rio colocar a palavra on' na frente. Por exemplo, click' vira `onclick'. Propriedade Descri\u00e7\u00e3o click Click em link ou elemento change Default alterado em input texto focus Foco em um elemento blur Ao tirar o foco mouseover Mouse em cima mouseout Mouse em outro lugar select Select em um form submit Submit em um form resize Mudan\u00e7a na janela do broser load Algum elemento \u00e9 carregado unload Ao sair da p\u00e1gina Coment\u00e1rio: Aqui o professor da disciplina faz o desafio de criarmos uma calculadora simples com o uso dos elementos estudados nessa se\u00e7\u00e3o. Um dia eu volto aqui e fa\u00e7o esse desafio.","title":"Eventos"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#a-notacao-de-objetos-json","text":"O JavaScript Object Notation (JSON) \u00e9 um formato de descri\u00e7\u00e3o de dados que se baseia em texto e pode ser lido diretamente sem muita dificuldade. Existem v\u00e1rios outros tipos de escrita de dados onde, geralmente, temos um trade-off entre efici\u00eancia versus simplicidade. Quanto mais pr\u00f3ximo da linguagem de m\u00e1quina, melhor \u00e9 pro computador processar mas mais dif\u00edcil \u00e9 para os humanos entender. Como o JSON se popularizou muito, diversas outras linguagens j\u00e1 possuem a capacidade de processar dados nesse formato. O que aumenta ainda mais a aceitabilidade dele como ve\u00edculo de envio e codifica\u00e7\u00e3o de informa\u00e7\u00e3o tanto no frontend quanto no backend. Falando em backend, com a populariza\u00e7\u00e3o de programas como nodejs, \u00e9 cada vez mais comuns a constru\u00e7\u00e3o de comunica\u00e7\u00e3o entre a camada de aplica\u00e7\u00e3o web e servidor atrav\u00e9s de APIs cuja atividade \u00e9, simplificadamente, receber JSON e enviar JSON. Como dito anteriormente, o JSON n\u00e3o \u00e9 o \u00fanico formato existente no mercado. Para destacar alguns outros, temos o XML, RDF, Planilhas, CSV, Documentos TXT, JPEG-2000, TIFF e v\u00e1rios outros formatos propriet\u00e1rios. Mas, sem d\u00favida, a competi\u00e7\u00e3o mais \u00e1rdua \u00e9 entre JSON e XML.","title":"A Nota\u00e7\u00e3o de Objetos (JSON)"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#sintaxe-do-json","text":"Um arquivo JSON \u00e9 muito parecido com um bloco de c\u00f3digo JS. Come\u00e7a e termina com chaves {} e cada elemento \u00e9 formado por um par de nome-valor e s\u00e3o separados por v\u00edrgula. O JSON permite diferentes tipos de valores que podem ser dos mesmo tipos de dados que estudamos anteriormente para o JS. Abaixo temos um exemplo de um arquivo JS. // json { \"idade\" : 28 , \"nome\" : \"Bruno Ruas\" , \"materias\" : [ { \"materia\" : \"Econometria\" , \"professor\" : \"Bill Gates\" }, { \"materia\" : \"Microeconomia\" , \"professor\" : \"Steve Jobs\" } ], \"nerd\" : true } Nesse exemplo, podemos ver que o valor para Idade \u00e9 do tipo number. Nome \u00e9 uma string. Mat\u00e9rias \u00e9 um array, veja que ele est\u00e1 entre colchetes [] , exatamente como aprendemos antes. Cada elemento do nosso array de mat\u00e9rias \u00e9 um objeto, que come\u00e7am e terminam com chaves, com duas propriedades: mat\u00e9ria e professor. Por fim, temos um booliano para a pegunta \"\u00c9 nerd?\". Os outros tipos de dados como datas, geolocaliza\u00e7\u00e3o e outros, s\u00e3o passados em JSON como uma string. Temos que lembrar disso se um dia precisamos lidar com esse tipo de informa\u00e7\u00e3o. Coment\u00e1rio: Quando estamos criando um JSON dentro de um c\u00f3digo JS n\u00f3s n\u00e3o precisamos colocar as aspas no nome dos elementos. Mas \u00e9 padr\u00e3o que essas aspas sejam usadas em objetos JSON. Ent\u00e3o temos que ficar atentos a isso tamb\u00e9m.","title":"Sintaxe do JSON"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#objeto-json-no-javascript","text":"Agora que sabemos um pouco sobre esse tipo de estrutura de dados, vamos aprender como manipular esse objeto dentro de um script JS. A maneira que o JS tem que trabalhar com JSON \u00e9 por meio de um objeto nativo da linguagem chamado, nem um pouco sem querer, de JSON. Esse objeto possui dois m\u00e9todos \u00fateis: Um parse() que recebe uma string e retorna um objeto na nota\u00e7\u00e3o JSON e um stringfy() que pega um objeto an\u00e1logo JSON e transforma em string. // JSON para string var Tex t oJSON = ' { \"Revistas\" : [ { \"titulo\" : \"V de Vingan\u00e7a\" , \"autor\" : \"Frank Miller\" }, { \"titulo\" : \"Batman - The Dark Knight\" , \"autor\" : \"Frank Miller\" }, { \"titulo\" : \"One Piece N\u00ba 29\" , \"autor\" : \"Eichiro Oda\" } ] } ' // Usando o m\u00e9todo de parse do JSON var banca = JSON . parse ( TextoJSON ) function listaTitulos () { lista = '' for ( let i = 0 ; i < banca . Revistas . length ; i ++ ) { lista += banca . Revistas [ i ]. titulo + ' - ' + banca . Revistas [ i ]. autor + ' ' } console . log ( lista ) } listaTitulos () > V de Vingan\u00e7a - Frank Miller > Batman - The Dark Knight - Frank Miller > One Piece N\u00ba 29 - Eichiro Oda Primeiro n\u00f3s criamos uma string no formato de um JSON. Depois passamos essa string pelo objeto JSON com o m\u00e9todo parse . Ap\u00f3s isso, n\u00f3s temos um objeto chamado banca com a mesma estrutura do nosso JSON desejado. Depois n\u00f3s criamos uma fun\u00e7\u00e3o de loop que retorna uma string com o t\u00edtulo, o autor e o car\u00e1cter especial de quebra de linha. Para converter nosso objeto novamente para string basta usarmos o seguinte comando: // js JSON . stringify ( banca , null , 2 ) O primeiro par\u00e2metro \u00e9 o objeto a ser convertido. O segundo n\u00f3s podemos colocar como null (Existe uma explica\u00e7\u00e3o para isso mas n\u00e3o precisamos dela agora). Por fim, o terceiro diz o tamanho do espa\u00e7o para melhorar a identa\u00e7\u00e3o. Saber como lidar com objetos JSON dentro de um script JS nos permite construir aplica\u00e7\u00f5es inteiras apenas com JS. Um framework muito famoso hoje em dia chamado MEAN (MongoDb, Express, Angular e NodeJS) utiliza o JS como principal linguagem para constru\u00e7\u00e3o de toda a aplica\u00e7\u00e3o web.","title":"Objeto JSON no JavaScript"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#programacao-ajax","text":"Diferente do que vimos at\u00e9 agora, o Asynchronous Javascript and XML ou AJAX, n\u00e3o \u00e9 uma tecnologia propriamente dito mas sim uma t\u00e9cnica de programa\u00e7\u00e3o que utiliza diferentes tecnologias. A ideia geral \u00e9 construir ferramentas que possuam as seguintes caracter\u00edsticas: Paginas com padr\u00e3o XHTML e CSS Din\u00e2mica atrav\u00e9s do DOM Troca de informa\u00e7\u00f5es por JSON, XML ou outro Recupera\u00e7\u00e3o ass\u00edncrona de dados com o objeto XMLHTTPRequest ou APT fetch JavaScript como linguagem Algumas aplica\u00e7\u00f5es muito famosas foram constru\u00edda usando, em algum grau, essa abordagem. Podemos citar o Youtube, Gmail, Google Earth e mais um monte de outras aplica\u00e7\u00f5es do Google. Para entendermos como o AJAX \u00e9 diferente da abordagem tradicional, vamos comparar as duas maneiras. No modelo tradicional, o browser faz requisi\u00e7\u00f5es ao web server que, por sua vez, devolve a p\u00e1gina solicitada com as devidas altera\u00e7\u00f5es previamente programadas. Contudo, nessa abordagem, toda a intelig\u00eancia de neg\u00f3cio \u00e9 mantida no ambiente do servidor. O esquema abaixo nos permite relembrar como \u00e9 feita a comunica\u00e7\u00e3o entre essas duas entidades. O problema dessa abordagem tradicional \u00e9 que os dados enviados entre servidor e browser s\u00e3o p\u00e1ginas inteiras. O m\u00e9todo AJAX trouxe a possibilidade de quebramos esses dados em \"pacotes\" menores de informa\u00e7\u00f5es. Nesse caso, ao inv\u00e9s de requisi\u00e7\u00f5es de p\u00e1ginas inteiras, podemos pedir ao servidor apenas \"peda\u00e7os\" menores de informa\u00e7\u00e3o. A metodologia AJAX tr\u00e1s para o lado do cliente (client side) parte da tarefa de processar os dados. Parte do processamento fica no server side e a outra parte \u00e9 feita no client. Durante a sess\u00e3o, v\u00e1rias requisi\u00e7\u00f5es s\u00e3o feitas do browser (que cont\u00e9m o c\u00f3digo JS) para o server por meio do uso do XMLHTTPRequest ou API Fetch. A atualiza\u00e7\u00e3o da p\u00e1gina acontece via DOM e n\u00e3o pelo recebimento de um HTML novo. Essa comunica\u00e7\u00e3o acontece geralmente por meio de arquivos XML ou JSON (mas pode ser qualquer outro formato de dados). Ao abrirmos a aplica\u00e7\u00e3o pela primeira vez, o servidor nos envia a maior parte dos dados que ser\u00e3o usados na visualiza\u00e7\u00e3o (a base de toda a aplica\u00e7\u00e3o). Depois disso, todas as mudan\u00e7as na tela ser\u00e3o baseadas em DOM e arquivos de dados JSON ou XML. Podemos elencar algumas vantagens desse modelo de constru\u00e7\u00e3o de solu\u00e7\u00e3o web: Redu\u00e7\u00e3o do tr\u00e1fego na rede Redu\u00e7\u00e3o de carga no web server Flexibilidade no desenolvimento do lado do server (foco em APIs) Mas como tudo na vida, o AJAX possui algumas desvantagens: Maior complexidade de desenvolvimento Aplica\u00e7\u00e3o mais pesada no client S\u00f3 funciona em navegadores mais modernos Pode precisar de ajustes dependendo do navegador do client O usu\u00e1rio perde a op\u00e7\u00e3o de avan\u00e7ar e voltar no seu hist\u00f3rico","title":"Programa\u00e7\u00e3o Ajax"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#objeto-xmlhttprequest","text":"Agora que entendemos melhor o que \u00e9 o AJAX e como podemos construir aplica\u00e7\u00f5es com ele, precisamos entender bem uma das suas principais ferramentas: o objeto XMLHTTPRequest. Inicialmente criado pelo Microsoft e adaptado pelo Mozilla, o XMLHTTPRequest \u00e9 um objeto (mas tamb\u00e9m pode ser interpretado como uma API) que \u00e9 fornecido pelo pr\u00f3prio navegador e que permite que nosso c\u00f3digo JS troque dados com um servidor web. O objeto XMLHTTPRequest \u00e9 a base do AJAX. Mas cuidado. Apesar do nome, ele aceita a troca de informa\u00e7\u00f5es em diferentes formatos al\u00e9m do XML: JSON, HTML, TXT, XML. Al\u00e9m disso por ele podemos nos conectar \u00e0 servi\u00e7os por outros m\u00e9todos al\u00e9m do HTTP. Para aprender como usar essa ferramenta, vamos por partes. Podemos come\u00e7ar o nosso script com a cria\u00e7\u00e3o de um objeto que ser\u00e1 do tipo XMLHTTPRequest. // js // fun\u00e7\u00e3o caso a conex\u00e3o funcione function success () { window . document . getElementById ( 'texto' ). innerHTML = this . responseText } // fun\u00e7\u00e3o caso a conex\u00e3o de erro function error ( err ) { console . log ( 'Erro:' , err )} // cria\u00e7\u00e3o do objeto XmlHttpRequest var xhr = new XMLHttpRequest () // executa a fun\u00e7\u00e3o success se a requisi\u00e7\u00e3o funcionar xhr . onload = success // executa um fun\u00e7\u00e3o erro se a conex\u00e3o nao funcionar xhr . onerror = error // defindo a requisicao xhr . open ( 'GET' , 'https://api.github.com/users/brunoruas2' ) xhr . send () Esse script acima executa uma consulta a uma url do github que retorna um JSON com informa\u00e7\u00f5es a respeito da conta de algum usu\u00e1rio. Essa requisi\u00e7\u00e3o \u00e9 feita no m\u00e9todo send() . Em caso de sucesso, o xhr dispara a fun\u00e7\u00e3o success que, por sua vez, altera usa o DOM para printar na tela o JSON coletado. Em caso de erro, ele mostra, no console (Para acessar basta apertar f12 em qualquer navegador moderno) com uma mensagem de texto que cont\u00e9m o erro. Como podemos perceber (e como quase tudo em JS) existem v\u00e1rios m\u00e9todos \u00fateis no objeto XMLHttpRequest que devemos aprender. Abaixo temos uma tabela de refer\u00eancia com esses m\u00e9todos. Propriedade Descri\u00e7\u00e3o status Codigo HTTP da resposta statusText Texto da resposta readyState Status do pedido responseTexte Txt bruto da resposta responseXML Resposta em um objeto no DOM. Mas s\u00f3 funciona Se o tipo for text onreadystatechange Dispara uma fun\u00e7\u00e3o quando o readState muda onerror Executa fun\u00e7\u00e3o se erro onprogress Dispara uma fun\u00e7\u00e3o em caso de demora na resposta onload Fun\u00e7\u00e3o se o send funcionar Para cada requisi\u00e7\u00e3o, o m\u00e9todo readyState retorna um est\u00e1gio diferente. Podemos pensar que cada requisi\u00e7\u00e3o possui uma s\u00e9rie de passos a serem feitos at\u00e9 a sua conclus\u00e3o. Esses passos s\u00e3o lidos pelo m\u00e9todo onreadystatechange e possuem caracter\u00edsticas que podemos ver na lista abaixo. Os est\u00e1gios de uma requisi\u00e7\u00e3o s\u00e3o: Uninitialized (0) - Objeto criado mas n\u00e3o iniciado Loading (1) - Objeto criado mas n\u00e3o usou o m\u00e9todo send() Loaded (2) - Send() executado mas os cabe\u00e7alhos n\u00e3o est\u00e3o dispon\u00edveis Interactive (3) - Alguns dados recebidos mas n\u00e3o completamente Completed (4) - Todos os dados foram recebidos e podem ser lidos Abaixo temos um exemplo de uso do readyState para verifica\u00e7\u00e3o do status da chamada. // js function requisicaoAJAX () { var xmlhttp = new HMLHttpResquest () } xmlhttp . onreadystatechange = function () { if ( xmlhttp . readyState == 4 && xmlhttp . status == 200 ) { divElement = document . getElementById ( 'texto' ) divElement . innerHTML = xmlhttp . responseText } } xmlhttp . open ( \"GET\" , \"www.google.com/api.php\" ) xmlhttp . send () Podemos ver que n\u00f3s criamos uma fun\u00e7\u00e3o disparada apenas quando o status muda e, como colocamos uma condi\u00e7\u00e3o dentro, s\u00f3 teremos a realm modifica\u00e7\u00e3o caso o status da comunica\u00e7\u00e3o seja 200 (que \u00e9 o padr\u00e3o para sucesso) e o status da comunica\u00e7\u00e3o seja o de completo.","title":"Objeto XMLHTTPRequest"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#api-fetch","text":"Os navegadores atuais nos permitem uma alternativa ao XMLHttpRequest chamada API Fetch. A vantagem \u00e9 que essa nova tecnologia nos permite fazer uso das promises que simplifica a escrita da programa\u00e7\u00e3o ass\u00edncrona. Podemos ver um exemplo abaixo. // js < script > fetch ( 'https:api.github.com/users/brunoruas2' ) . then ( res => res . json ()) . then ( data => console . log ( data )) . catch ( err => console . log ( 'Erro: ' , err )) < /script> Coment\u00e1rio: O material n\u00e3o se aprofunda no tema, ent\u00e3o eu volto aqui para aprofundar no futuro. Aqui tem um link com um material de refer\u00eancia da MDN.","title":"API Fetch"},{"location":"nav/PUC/periodo1/desenvolvimento_web/#bibliografia","text":"SIKOS, L. Web Standards. Mastering HTML5, CSS3, and XML . DACONTA, M. C.; SMITH, K. T.; OBRST, L. J. The semantic Web: a guide to the future of XML, Web services, and knowledge management . [s. l.]: Wiley, [s. d.]. ISBN 0471432571 SILVA, Maur\u00edcio Samy. HTML 5: a linguagem de marca\u00e7\u00e3o quer revolucionar a web . 2. ed. rev. e ampl. [s. l.]: Novatec, 2014. ISBN 9788575224038 SANDERS, William B. Smashing HTML5: t\u00e9cnicas para a nova gera\u00e7\u00e3o da web . Porto Alegre: Bookman, 2012. xiv, 354 p. ISBN 9788577809608 DEITEL, Paul J., Deitel, Harvey M. Ajax, Rich. Internet Applications e Desenvolvimento Web para Programadores . Pearson 776. ISBN 9788576051619 SILVA, Maur\u00edcio Samy. CSS3: desenvolva aplica\u00e7\u00f5es web profissionais com uso dos poderosos recursos de estiliza\u00e7\u00e3o das CSS3 . S\u00e3o Paulo: Novatec, 2011. 494 p. ISBN 9788575222898 BERTAGNOLLI, S. de C.; MILETTO, E. M. Desenvolvimento de software II: introdu\u00e7\u00e3o ao desenvolvimento web com HTML, CSS, JavaScript e PHP . [s. l.]: Bookman, 2014. ISBN 9788582601952 Isso pode ser a causa de alguns bugs na sua aplica\u00e7\u00e3o. \u21a9 Esse eu to usando para hospedar esse site. \u21a9 Isso \u00e9 muito importante porque vamos usar essa informa\u00e7\u00e3o para fazer alguma coisa. \u21a9 tamb\u00e9m chamados de elementos filhos. \u21a9 Voc\u00ea pode pesquisar para saber a lista dos gradientes dispon\u00edveis. \u21a9 Que no exemplo abaixo ser\u00e1 um elemento da classe \"container\". \u21a9 Sempre vai existir alguma exce\u00e7\u00e3o, eu sei. \u21a9","title":"Bibliografia"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/","text":"hljs.initHighlightingOnLoad(); Assuntos Conceitos e Processos de Software Defini\u00e7\u00f5es Modelos e Princ\u00edpios de Processo de Software Processos \u00c1geis Processos Prescritivos Quando usar cada Processo? Requisitos Requisitos Funcionais Requisitos N\u00e3o Funcionais Atividades e Artefatos da Engenharia de Software Atividades T\u00e9cnicas Atividades Gerenciais Testes de Software Artefatos e Templates Desenhando Processos de Software Bibliografia Conceitos e Processos de Software A engenharia de software \u00e9 sub\u00e1rea da Ci\u00eancia da Computa\u00e7\u00e3o que lida com as atividades de desenvolvimento, opera\u00e7\u00e3o e evolu\u00e7\u00e3o de software. Esse campo surgiu com a crise do software de 1968. Defini\u00e7\u00f5es Agora vamos aprender os conceitos usados ao longo do trabalho de engenharia de software: Programa - Conjunto de instru\u00e7\u00f5es em uma linguagem de programa\u00e7\u00e3o. Software - Programa + Estrutura de Dados + Documenta\u00e7\u00e3o. Sistema - Conjunto de elementos interdependentes de Softwares, Hardware e Pessoas. Podem ser intensivos em qualquer umas dessas 3 partes. Modelos e Princ\u00edpios de Processo de Software O processo de Software \u00e9 um conjunto de etapas usadas para a produ\u00e7\u00e3o de solu\u00e7\u00f5es de software. Podemos elencar dois conceitos importantes que comp\u00f5e o processo de software: Descri\u00e7\u00e3o de Processos: Atividades - Lista de etapas necess\u00e1rias. Produtos ou Artefatos - Produto gerado pelas atividades. Pap\u00e9is - Quem executa cada atividade. Condi\u00e7\u00f5es - As requisi\u00e7\u00f5es pr\u00e9 e p\u00f3s execu\u00e7\u00e3o das atividades. Modelos de Ciclo de Vida: Modelo Sequencial Linear: An\u00e1lise/Projeto/Codifica\u00e7\u00e3o/Teste. Modelo em Cascata: Defini\u00e7\u00e3o/Projeto/Implementa\u00e7\u00e3o/Integra\u00e7\u00e3o/Manuten\u00e7\u00e3o. Modelo Incremental: O projeto \u00e9 quebrado em incrementos e cada incremento possui um modelo sequencial linear ou em cascata. Modelo Incremental Evolutivo: Esbo\u00e7o/loop{Especifica\u00e7\u00e3o/Desenvolvimento/Valida\u00e7\u00e3o} at\u00e9 que se tenha a vers\u00e3o final. Modelo Espiral: loop{Planejamento/Modelagem/Constru\u00e7\u00e3o/Entrega/Feedback} para cada incremento novo ao software. Modelo Iterativo: \u00c9 o modelo Sequencial Linear mas com possibilidade de retorno para as etapas anteriores at\u00e9 que se esteja aprovado pelo cliente. Modelo V: Durante todas as etapas de processo de software n\u00f3s j\u00e1 vamos definindo os testes que ser\u00e3o usados para a aprova\u00e7\u00e3o do produto. Hoje em dia, temos dois modelos mais usados. A modelo incremental foca em entregar um peda\u00e7o de cada vez e o modelo iterativo permite entregar vers\u00f5es mais simples do produto e ir aprimorando elas. O modelo atual mais usado \u00e9 justamente o Modelo incremental iterativo . Agora que aprendemos o conceito de modelo de processo de software, vamos analisar algumas abordagens de elabora\u00e7\u00e3o de software. Podemos dizer que existem 3 grupos principais de processos de gest\u00e3o de software: 1) Processos \u00e1geis; 2) Processos Prescritivos e 3) Processos Enxutos (lean process). Coment\u00e1rio: No material do curso s\u00f3 foram abordadas os dois primeiros processos. Processos \u00c1geis Os processos \u00e1geis nasceram no final do s\u00e9culo XX. Seguem o modelo incremental e iterativo de desenvolvimento. Os incrementos s\u00e3o pequenos e sucessivos (2 a 3 semanas). O cliente est\u00e1 constantemente em contato com o produto gerado no ciclo. A documenta\u00e7\u00e3o \u00e9 reduzida porque h\u00e1 muita comunica\u00e7\u00e3o interpessoal. Existem v\u00e1rias metodologias mas podemos elencar alguns: eXtreme Programming (XP) Scrum Dynamic System Development (DSDM) Feature Driven Development (FDD) Crystal Families Hoje em dia o m\u00e9todo mais usado \u00e9 o Scrum. A novidade dele \u00e9 que a abordagem do desenvolvimento \u00e9 emp\u00edrica e permite a evolu\u00e7\u00e3o dos requisitos do processo ao longo do processo. O Scrum \u00e9 divido em apenas 3 etapas: 1) Planejamento inicial do projeto; 2) Loop de desenvolvimento e feedback (chamado de sprint) e 3) Entrega ao cliente. As equipes do scrum s\u00e3o pequenas, multidisciplinares, de lideran\u00e7a dilu\u00edda e trabalham com um foco de melhorias pequenas em um prazo mais curto (2 ou 4 semanas). Existe a figura do facilitador do processo chamado Scrum Master. Os requisitos do software s\u00e3o mantidos no artefato chamado Backlog e serve de norte pada os times de desenvolvimento. Existem 3 papeis no processo de gest\u00e3o do Scrum: Product Owner (PO) - O cliente ou algu\u00e9m representante da vontade dele. Podemos pensar no PO como a ponte entre a empresa-cliente e a empresa-desenvolvedora. Scrum Master - \u00c9 o facilitador do time de desenvolvimento. Atua como ponte entre o time de desenvolvimento e o PO. Atentemos para o fato do PO n\u00e3o participar do processo de desenvolvimento t\u00e9cnico. Equipe de Desenvolvimento - \u00c9 auto-organizada e respons\u00e1vel pela produ\u00e7\u00e3o dos algoritmos que compor\u00e3o o software. Agora veremos de maneira organizada os artefatos produzidos no processo de Scrum: Backlog do Produto - Lista de caracter\u00edsticas necess\u00e1rias ao software atreladas a um grau de import\u00e2ncia. Cada caracter\u00edstica \u00e9 fruto de uma hist\u00f3ria de usu\u00e1rio que \u00e9 composta de 3 informa\u00e7\u00f5es (quem?; o que? e por qu\u00ea?). Backlog da Sprint - \u00c9 um subconjunto das caracter\u00edsticas elencadas do backlog do produto. Esses itens ser\u00e3o o foco da sprint (2 a 4 semanas). Incremento do Produto - \u00c9 o resultado do trabalho realizado na sprint. Al\u00e9m dos pap\u00e9is e dos artefatos, existem as cerim\u00f4nias do modelo Scrum: Reuni\u00e3o de planejamento da Sprint - Decide quais caracter\u00edsticas do Backlog do projeto ser\u00e3o objeto de trabalho pelo time de desenvolvimento. Daily - Acompanhamento a cada 24 horas do esfor\u00e7o do time de desenvolvimento para o alcance do planejamento da sprint. Algo r\u00e1pido (15 min). Revis\u00e3o da Sprint - Avalia\u00e7\u00e3o pelo PO do cumprimento do backlog da sprint. Foco no produto. Retrospectiva da Sprint - Melhoria do processo por meio de feedback de todas as partes envolvidas no processo de sprint. Foco no processo. Processos Prescritivos Antes do predom\u00ednio das metodologias \u00e1geis, os processos de controle de produ\u00e7\u00e3o de software eram orientados por processos prescritivos, tamb\u00e9m s\u00e3o chamados de processos dirigidos por planos. A ideia \u00e9 primeiro planejar tudo e ir visualizando o caminhar dos trabalhos em termos do planejamento inicial. O Rational Unified Process (RUP) \u00e9 o mais famoso desses modelos. O RUP hoje pertence \u00e0 IBM e possui algumas caracter\u00edsticas principais: Possui v\u00e1rios princ\u00edpios dos quais podemos citar: Foco nos riscos principais Garantia do valor Permitir mudan\u00e7as Defini\u00e7\u00e3o da arquitetura da solu\u00e7\u00e3o o mais breve poss\u00edvel Constru\u00e7\u00e3o da solu\u00e7\u00e3o em componentes Baseado em componentes/etapas planejadas Disciplinas (o que deve ser feito): Requisitos/An\u00e1lise/Projeto/Implementa\u00e7\u00e3o/Teste Fases (as etapas de cumprimento das disciplinas): Concep\u00e7\u00e3o/Elabora\u00e7\u00e3o/Constru\u00e7\u00e3o/Transi\u00e7\u00e3o Possui linguagem padronizada: Unified Modeling Language (UML) \u00c9 dirigido por caso de uso Funciona por modelo iterativo-incremental Os benef\u00edcios dos processos prescritivos ainda s\u00e3o vistos nas maiores empresas, principalmente relacionados ao uso da UML para defini\u00e7\u00e3o de etapas necess\u00e1rias em intera\u00e7\u00f5es e processos. Abaixo temos um exemplo retirado do material do curso. Mais informa\u00e7\u00f5es sobre a UML podem ser encontradas nesse link . Especifica\u00e7\u00e3o do caso de uso Matricular em disciplinas do sistema de controle acad\u00eamico. Fonte: A especifica\u00e7\u00e3o do caso de uso foi adaptada do livro BEZERRA, Eduardo. Princ\u00edpios de an\u00e1lise e projeto de sistemas com UML. Rio de Janeiro: Campus, 2003. Matricular em disciplinas Sum\u00e1rio: O aluno usa o sistema para se matricular em disciplinas. Ator prim\u00e1rio: aluno Ator secund\u00e1rio: Sistema Financeiro Pr\u00e9-condi\u00e7\u00f5es: o aluno est\u00e1 identificado pelo sistema Fluxo Principal: O aluno solicita a matr\u00edcula em disciplinas; O sistema apresenta a lista de disciplinas dispon\u00edveis para o semestre corrente para as quais o alunos possui pr\u00e9-requisitos; O aluno seleciona as disciplinas desejadas e solicita a matr\u00edcula; O sistema aloca o aluno em turmas de ofertas das disciplinas desejadas e informa ao aluno a turma alocada para cada disciplina bem como o professor, os hor\u00e1rios e dias da semana e as salas de aula; O aluno confirma as aloca\u00e7\u00f5es feitas; O sistema realiza a matr\u00edcula e envia os dados para o Sistema Financeiro; O caso de uso termina. Fluxo Alternativo (4): Inclus\u00e3o em lista de espera a. Se n\u00e3o h\u00e1 vaga ou oferta dispon\u00edvel para alguma disciplina selecionada pelo aluno, o sistema informa o fato ao aluno e fornece a op\u00e7\u00e3o de inserir o aluno em uma lista de espera para aquela disciplina; b. Se o aluno aceitar o sistema insere o aluno na lista de espera desejada e apresenta a posi\u00e7\u00e3o do aluno na lista. O caso de uso retorna ao passo 4; c. Se o aluno n\u00e3o aceitar o caso de uso prossegue a partir do passo 4. Fluxo de Exce\u00e7\u00e3o (4): Viola\u00e7\u00e3o de regra de neg\u00f3cio relativa quantidade m\u00e1xima de cr\u00e9ditos a) Se o aluno j\u00e1 atingiu a quantidade m\u00e1xima de cr\u00e9ditos em que pode se matricular por semestre, o sistema informa a quantidade de disciplinas que ele pode se matricular e o caso de uso retorna ao passo 2; P\u00f3s-Condi\u00e7\u00f5es: O aluno foi inscrito em turmas das disciplinas selecionadas ou foi acrescentado a listas de esperas das disciplinas selecionadas. Ao final de cada fase s\u00e3o superados os marcos principais do RUP. Cada marco significa o maior risco relacionado \u00e0quela etapa. Na fase de concep\u00e7\u00e3o \u00e9 o marco de objetivo de ciclo de vida. Na fase de elabora\u00e7\u00e3o \u00e9 o marco que arquitetura do software. Na fase da constru\u00e7\u00e3o \u00e9 o marco da capacidade operacional inicial e, por fim, no marco da transi\u00e7\u00e3o \u00e9 o marco da entrega do produto. Existem problemas nos m\u00e9todos prescritivos, os principais s\u00e3o: Forte apego \u00e0 hierarquia Segmenta\u00e7\u00e3o elevada do processo de constru\u00e7\u00e3o Em situa\u00e7\u00f5es cr\u00edticas, acabam dando lugar a processos \u00e1geis Quando usar cada Processo? Na vida real, podemos encontrar v\u00e1rios modelos misturados no dia a dia das empresas. As pr\u00e1ticas em cada empresa s\u00e3o org\u00e2nicas e fortemente baseadas na cultura organiza\u00e7\u00e3o local. Podemos sempre analisar os modelos como uma matriz de 2 eixos: Cascata x Iterativo e Disciplinado x Flex\u00edvel. Aqui n\u00f3s s\u00f3 analisamos os processos iterativos. Cabe a voc\u00ea saber se precisa de um processos mais formal como o RUP ou algo mais r\u00e1pido e flex\u00edvel como o SCRUM. Requisitos Podem ser divididos em 2 grupos: requisitos de cliente e requisitos do software. A primeira classe \u00e9 focada nas necessidades dos usu\u00e1rios 1 que utiliza\u00e7\u00e3o o sistema (\u00e9 o problema a ser resolvido). A segunda categoria s\u00e3o as caracter\u00edsticas que o produto deve ter para cumpri os requisitos dos clientes (s\u00e3o as ferramentas que o sistema ter\u00e1 para interagir com os users). Os requisitos de software podem ser divididos em funcionais e n\u00e3o funcionais. Essa divis\u00e3o ser\u00e1 abordada de maneira mais detalhada abaixo. Requisitos Funcionais Os requisitos funcionais s\u00e3o as caracter\u00edsticas que o software deve ter para resolver os problemas elencados como objetivos do sistema proposto. S\u00e3o definidos pelos stakeholders (user, clientes, especialistas e investidores). No SCRUM eles est\u00e3o no backlog do projeto e no RUP est\u00e1 num documento espec\u00edfico para isso. \u00c9 uma lista de exposi\u00e7\u00f5es breves das funcionalidades que o software far\u00e1 e como ele se comportar\u00e1 em rela\u00e7\u00e3o a alguma intera\u00e7\u00e3o dos usu\u00e1rios. Atente para o fato que os requisitos funcionais s\u00e3o sempre relacionados a algum usu\u00e1rio e n\u00e3o \u00e0 caracter\u00edsticas t\u00e9cnicas do sistema. Requisitos N\u00e3o Funcionais S\u00e3o as descri\u00e7\u00f5es das normas e padr\u00f5es do produto de software. \u00c9 aqui que definimos a linguagem de programa\u00e7\u00e3o, o ambiente, os crit\u00e9rios de seguran\u00e7a, banco de dados, disponibilidade do produto, desempenho e etc. Um requisito n\u00e3o funcional deve sempre citar um crit\u00e9rio de aceita\u00e7\u00e3o quantific\u00e1vel. Desse modo, podemos realizar testes objetivos na hora de avaliar se o desenvolvimento da feature foi bem sucedido na itera\u00e7\u00e3o. Podemos elencar alguns tipos de requisito n\u00e3o funcional: Desempenho Disponibilidade Portabilidade Usabilidade Capacidade e Degrada\u00e7\u00e3o Manutenibilidade Outros requisitos n\u00e3o funcionais s\u00e3o relacionados ao processo de desenvolvimento. Como por exemplo: Restri\u00e7\u00e3o da equipe desenvolvedora Qual processo de software deve ser usada Qual documenta\u00e7\u00e3o deve ser criada Al\u00e9m dessas duas classifica\u00e7\u00f5es, podemos ter restri\u00e7\u00f5es relacionadas ao projeto de software: Qual SGBD deve ser usado Plataforma de disponibilidade (web ou n\u00e3o) Qual linguagem de programa\u00e7\u00e3o usada Qual o SO das plataformas Exist\u00eancia de sistema legado Todos os requisitos n\u00e3o funcionais estar\u00e3o no backlog da sprint atrav\u00e9s da aceita\u00e7\u00e3o do incremento pelo cliente e no RUP existe uma documenta\u00e7\u00e3o espec\u00edfica para isso. Atividades e Artefatos da Engenharia de Software O processo de produ\u00e7\u00e3o de software \u00e9 divido em atividades com seus respectivos respons\u00e1veis e os artefatos criados a cada etapa finalizada. As atividades s\u00e3o dividas em t\u00e9cnicas, gerenciais, testes e de apoio 2 . Essas atividades s\u00e3o as que comp\u00f5e toda a gest\u00e3o da engenharia de software. Atividades T\u00e9cnicas Dentro das atividades t\u00e9cnicas n\u00f3s temos a engenharia de requisitos , design/projeto de software , implementa\u00e7\u00e3o/codifica\u00e7\u00e3o , testes e aceita\u00e7\u00e3o do cliente . Podemos elencar as seguintes atividades t\u00e9cnicas necess\u00e1rias ao bom processo de engenharia de requisitos: Levantamento de Requisitos (Elicita\u00e7\u00e3o): Entrevistas Observa\u00e7\u00e3o Leitura de documenta\u00e7\u00e3o An\u00e1lise dos Requisitos: An\u00e1lise das lacunas Modelagem gr\u00e1fica Revis\u00e3o das descri\u00e7\u00f5es Especifica\u00e7\u00e3o dos Requisitos: Descri\u00e7\u00e3o sem ambiguidades Linguagem natural, controlada ou espec\u00edfica Valida\u00e7\u00e3o dos Requisitos: Revis\u00e3o de tudo Prototipagem Nota\u00e7\u00f5es complexas podem dificultar entendimento do cliente Valida\u00e7\u00e3o por parte do cliente Agora vamos ver as atividades de Projeto (design) de Software: Pondera\u00e7\u00e3o das alternativas de solu\u00e7\u00f5es Escolha da solu\u00e7\u00e3o que ser\u00e1 implementada Detalhamento da solu\u00e7\u00e3o escolhida (elabora\u00e7\u00e3o do projeto): Arquitetura do Software: Alto n\u00edvel de abstra\u00e7\u00e3o. Foco nos requisitos n\u00e3o funcionais. Representa\u00e7\u00e3o das partes gerais da solu\u00e7\u00e3o. Projeto Detalhado: Baixa abstra\u00e7\u00e3o. Defini\u00e7\u00e3o dos objetos e das intera\u00e7\u00f5es. Foco nos requisitos funcionais. Algoritmos e estruturas de dados. Uma vez que temos os requisitos elencados e o projeto definido, entramos na etapa de implementa\u00e7\u00e3o ou codifica\u00e7\u00e3o. Implementados os algoritmos, temos a etapa de testes de software para validar os requisitos e garantir que os objetivos sejam alcan\u00e7ados. Podem ser manuais ou automatizados. Por fim, temos a aprova\u00e7\u00e3o do cliente no sentido de cumprimento das funcionalidades esperadas e da qualidade exigida da solu\u00e7\u00e3o. Ap\u00f3s a aprova\u00e7\u00e3o, existe a etapa de manuten\u00e7\u00e3o de software que \u00e9 composta da repeti\u00e7\u00e3o de todas as etapas expostas acima. Cada manuten\u00e7\u00e3o ou aprimoramento passa pelas etapas descritas desde a an\u00e1lise de requisito at\u00e9 a aprova\u00e7\u00e3o. Medidas de Software S\u00e3o abordagens de medi\u00e7\u00e3o e defini\u00e7\u00e3o de metas para o cumprimento das etapas programadas para alcance dos objetivos da solu\u00e7\u00e3o contratada. Atividades Gerenciais S\u00e3o as atividades que atuam no controle da complexidade da solu\u00e7\u00e3o desenvolvida e podem ser dividas em gest\u00e3o de configura\u00e7\u00e3o , gest\u00e3o de projeto , gest\u00e3o de requisitos e gest\u00e3o de processos e, al\u00e9m dessas, possuem atividades afins como gest\u00e3o da qualidade e estimativas de software. A gest\u00e3o de configura\u00e7\u00e3o ou gest\u00e3o de vers\u00f5es \u00e9 a atividade que cuida da manuten\u00e7\u00e3o e organiza\u00e7\u00e3o dos arquivos produzidos durante todo o processo de software. \u00c9 a atividade que controla as atualiza\u00e7\u00f5es dos programas e mant\u00e9m a mem\u00f3ria de todas as etapas anteriores. A ger\u00eancia de projeto de software \u00e9 a atividade que controle a din\u00e2mica de tempo, pessoas, custos envolvido no processo de desenvolvimento. A ger\u00eancia de requisitos \u00e9 a atividade de controle das necessidades de mudan\u00e7a no escopo do projeto bem como controla as mudan\u00e7as na mudan\u00e7a da necessidade do cliente a respeito da mudan\u00e7a de requisitos. Tamb\u00e9m atua na prioriza\u00e7\u00e3o dos requisitos para a defini\u00e7\u00e3o dos focos de trabalho. Outra atribui\u00e7\u00e3o relacionada \u00e9 o controle da rastreabilidade dos requisitos pois todas as etapas de elabora\u00e7\u00e3o devem ser relacionadas a algum requisito que perten\u00e7a ao escopo solicitado pelo cliente. A gest\u00e3o de Processos \u00e9 a atividade de defini\u00e7\u00e3o e melhoria do processo de gest\u00e3o de software de acordo com as boas pr\u00e1ticas, dos modelos de capacita\u00e7\u00e3o e maturidade como (CMMI e MPS.BR). A gest\u00e3o da qualidade \u00e9 a atividade que avalia as v\u00e1rias interfaces de din\u00e2micas que impactam no resultado final do produto de software. A estimativa de software \u00e9 a atividade de gerar previs\u00f5es com base na hist\u00f3ria da empresa de desenvolvimento afim de melhorar a aloca\u00e7\u00e3o dos recursos para cumprimento das etapas previstas no in\u00edcio do processo de planejamento. Testes de Software O objetivo dos testes \u00e9 identificar os problemas da solu\u00e7\u00e3o desenvolvida mas, como tudo na vida, existem restri\u00e7\u00f5es a quantidade e qualidade de testes poss\u00edveis de serem feitos uma vez que existem custos associados a essa atividade. Diante das restri\u00e7\u00f5es impostas pela realidade e da complexidade do processo de desenvolvimento, \u00e9 imposs\u00edvel, n\u00e3o importa o dimensionamento do esfor\u00e7o, garantir uma aplica\u00e7\u00e3o livre de erros. O foco dessa atividade \u00e9 garantir que, ao dado n\u00edvel de confian\u00e7a requerido, que o software entregar\u00e1 as capacidades requeridas no projeto. Os testes s\u00e3o necess\u00e1rios para garantir o cumprimento dos requisitos funcionais e n\u00e3o funcionais e podem ser divididos em dois tipos: Testes Funcionais/Caixa Preta - Baseados no ponto de vista do usu\u00e1rio do software. Testes Estruturais/Caixa Branca - Ponto de vista de quem desenvolveu o software por meio de inputs e avalia\u00e7\u00e3o de outputs. Uma boa maneira de realizar os testes funcionais \u00e9 reproduzir as situa\u00e7\u00f5es listadas nas hist\u00f3rias dos usu\u00e1rios. Uma Plano de Testes \u00e9 o documento que indica o conjunto de informa\u00e7\u00f5es relacionadas ao teste realizado, tais como: Testes de desempenho Testes funcionais da hist\u00f3ria de usu\u00e1rio x Teste de responsividade Teste de campos de formul\u00e1rios Teste de navegabilidade ou links Teste de ponta a ponta No teste ponta a ponta passamos por todas as principais caracter\u00edsticas e funcionalidades do produto que desenvolvimento para cumprimento dos requisitos. Um plano de teste deve conter os casos de testes que, por sua vez, devem conter as seguintes informa\u00e7\u00f5es: Objetivo Valores de entrada Valores de sa\u00edda esperada Valores de sa\u00edda real Registro de execu\u00e7\u00e3o (falha ou sucesso) Artefatos e Templates Artefatos Os artefatos s\u00e3o um dos produtos que as atividades t\u00e9cnicas e gerencias produzem em cada ciclo de trabalho e podem ser usados nas etapas posteriores da execu\u00e7\u00e3o do projeto. Existem v\u00e1rios tipos, vamos elencar alguns: Artefatos do processo de desenvolvimento: Backlog do produto 3 Diagramas de casos de usados Descri\u00e7\u00e3o de casos de uso Documento de especifica\u00e7\u00e3o de requisitos Descreve os requisitos baseados em casos de uso ou outra forma de descri\u00e7\u00e3o. Artefatos do processe de gerenciamento: Documento de arquitetura de software O nome j\u00e1 denuncia mas \u00e9 importante porque cont\u00e9m v\u00e1rios diagramas do desenho da aplica\u00e7\u00e3o e como a solu\u00e7\u00e3o foi constru\u00edda em partes funcionais. Plano de Teste de software Casos de testes Lista de bugs Plano de projeto Matriz de rastreabilidade Mostra como os requisitos (que comp\u00f5e as linhas da matriz) se relacionam com os artefatos produzidos durante o processo de produ\u00e7\u00e3o. Templates N\u00f3s j\u00e1 aprendemos o que s\u00e3o os artefatos de software e em que contexto eles s\u00e3o gerados, agora, vamos aprender algumas ferramentas e templates que nos auxiliam no processo de cria\u00e7\u00e3o desses artefatos durante o processo de desenvolvimento de software. Coment\u00e1rio: Essa se\u00e7\u00e3o \u00e9 mais para consulta quando voc\u00ea precisar gerenciar algum projeto de desenvolvimento de software. Vou tentar manter os links atualizados mas caso algum deixe de funcionar, pode me avisar pelo twitter . Backlog do produto e Kanban Existem v\u00e1rias maneiras de organizar o cumprimento dos requisitos contidos no backlog do projeto. O kanban \u00e9 um quadro onde transformamos cada item do backlog em unidades separ\u00e1veis (geralmente post-its ou quadros) onde podemos mover para quadrantes de um board maior. Usualmente temos os quadrantes \"A fazer\", \"Fazendo\" e \"Feito\". Desse modo, podemos ver rapidamente o estado do desenvolvimento das atividades programadas para a sprint. Existem v\u00e1rias ferramentas virtuais que podem ser usadas no processo como: Trello PivotalTracker Especifica\u00e7\u00e3o de Requisitos de Software Existem v\u00e1rios templates dispon\u00edveis na internet: IEE/ISO/IEC 29148 Esse exemplo M\u00e9todo Volere PUC-MG Documento de Arquitetura de Software Architecture View Template Interface Template IEE/ISO/IEC 42020 Nesse link aqui voc\u00ea pode ver como elaborar um caso de teste funcional a partir dos casos de uso. Aqui tem um template de ata de reuni\u00e3o . Por fim, temos um template de matriz de impacto de mudan\u00e7as aqui . E uma matriz de rastreabilidade em excel aqui . Desenhando Processos de Software Essa \u00faltima se\u00e7\u00e3o \u00e9 um exerc\u00edcio onde vamos colocar em pr\u00e1tica todos os conceitos aprendidos at\u00e9 agora. Temos que saber que os conceitos aprendidos n\u00e3o s\u00e3o regras imut\u00e1veis na aplica\u00e7\u00e3o pr\u00e1tica em um processo de software. Podemos combinar caracter\u00edsticas de v\u00e1rios modelos durante o processo de execu\u00e7\u00e3o de um planejamento sempre com foco na melhora cont\u00ednua da qualidade do software. Mesmo tendo muita flexibilidade sobre o processo de software, podemos elencar caracter\u00edsticas que s\u00e3o obrigat\u00f3rias em qualquer desenho: Qual o modelo de ciclo de vida Quais as atividades que compor\u00e3o o processo de software e quais a t\u00e9cnicas usadas ao longo delas Quais produtos ou artefatos ser\u00e3o gerados a cada etapa Os pap\u00e9is dos agentes relacionados ao longo do processo N\u00f3s come\u00e7amos o nosso estudo de engenharia de software pelos modelos de ciclo de vida exatamente porque eles regem grande parte das atividades e artefatos produzidos durante todo o processo de software. A maturidade da empresa, dimensionamento da m\u00e3o de obra, recursos dispon\u00edveis, verba do projeto, tempo de execu\u00e7\u00e3o e outras caracter\u00edsticas s\u00e3o importantes para defini\u00e7\u00e3o do melhor modelo de ciclo de vida a ser adotado. A nossa jornada pela engenharia de software vai ser em grande medida construir um amplo repert\u00f3rio de modelos de ciclo de vida, atividades e artefatos. Para facilitar o complexo processo de software, existem v\u00e1rias ferramentas que centralizam as diferentes etapas e simplificam o processo de gest\u00e3o: Bizagi Modeler Eclipse Process Framework Bibliografia PRESSMAN, Roger S.; MAXIM, Bruce R. Engenharia de software: uma abordagem profissional . 8. ed. Porto Alegre: AMGH, 2016. E-book ISBN 9788580555349. Cap\u00edtulos 1, 2, 3 PRIKLADNICKI, Rafael, WILLI, Renato, e MILANI, Fabiano. Me\u0301todos a\u0301geis para desenvolvimento de software . Porto Alegre: Bookman, 2014 1 recurso online ISBN 9788582602089 Cap\u00edtulos 1,2,3,8,12,13 SOMMERVILLE, Ian. Engenharia de software , 10\u00aa ed. Pearson 768 ISBN 9788543024974 Cap\u00edtulos 1,2,3,4 COHN, Mike; SILVA, Aldir Jos\u00e9 Coelho Corr\u00eaa da. Desenvolvimento de software com Scrum: aplicando m\u00e9todos \u00e1geis com sucesso . Porto Alegre: Bookman, 2011. E-book ISBN 9788577808199 LARMAN, Craig. Utilizando UML e padr\u00f5es: uma introdu\u00e7\u00e3o \u00e1 an\u00e1lise e ao projeto orientados a objetos e desenvolvimento iterativo . 3. ed. Porto Alegre: Bookman, 2007. E-book (695 p\u00e1ginas) ISBN 9788577800476 PAULA FILHO, Wilson de P\u00e1dua. Engenharia de software , v. 2 projetos e processos. 4. Rio de Janeiro LTC 2019 1 recurso online ISBN 9788521636748 VETORAZZO, Adriana de Souza. Engenharia de software. Porto Alegre SAGAH 2018 1 recurso online ISBN 9788595026780 WAZLAWICK, Raul Sidnei. Engenharia de software conceitos e pr\u00e1ticas . Rio de Janeiro GEN LTC 2013 1 recurso online ISBN 9788595156173 Por meio das hist\u00f3rias de usu\u00e1rios ou dos casos de uso. \u21a9 N\u00e3o focaremos nessa parte mas s\u00e3o as atividades de RH, administrativo e etc. \u21a9 N\u00f3s j\u00e1 sabemos o que \u00e9. \u21a9","title":"Fundamentos de Eng. de Software"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#assuntos","text":"Conceitos e Processos de Software Defini\u00e7\u00f5es Modelos e Princ\u00edpios de Processo de Software Processos \u00c1geis Processos Prescritivos Quando usar cada Processo? Requisitos Requisitos Funcionais Requisitos N\u00e3o Funcionais Atividades e Artefatos da Engenharia de Software Atividades T\u00e9cnicas Atividades Gerenciais Testes de Software Artefatos e Templates Desenhando Processos de Software Bibliografia","title":"Assuntos"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#conceitos-e-processos-de-software","text":"A engenharia de software \u00e9 sub\u00e1rea da Ci\u00eancia da Computa\u00e7\u00e3o que lida com as atividades de desenvolvimento, opera\u00e7\u00e3o e evolu\u00e7\u00e3o de software. Esse campo surgiu com a crise do software de 1968.","title":"Conceitos e Processos de Software"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#definicoes","text":"Agora vamos aprender os conceitos usados ao longo do trabalho de engenharia de software: Programa - Conjunto de instru\u00e7\u00f5es em uma linguagem de programa\u00e7\u00e3o. Software - Programa + Estrutura de Dados + Documenta\u00e7\u00e3o. Sistema - Conjunto de elementos interdependentes de Softwares, Hardware e Pessoas. Podem ser intensivos em qualquer umas dessas 3 partes.","title":"Defini\u00e7\u00f5es"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#modelos-e-principios-de-processo-de-software","text":"O processo de Software \u00e9 um conjunto de etapas usadas para a produ\u00e7\u00e3o de solu\u00e7\u00f5es de software. Podemos elencar dois conceitos importantes que comp\u00f5e o processo de software: Descri\u00e7\u00e3o de Processos: Atividades - Lista de etapas necess\u00e1rias. Produtos ou Artefatos - Produto gerado pelas atividades. Pap\u00e9is - Quem executa cada atividade. Condi\u00e7\u00f5es - As requisi\u00e7\u00f5es pr\u00e9 e p\u00f3s execu\u00e7\u00e3o das atividades. Modelos de Ciclo de Vida: Modelo Sequencial Linear: An\u00e1lise/Projeto/Codifica\u00e7\u00e3o/Teste. Modelo em Cascata: Defini\u00e7\u00e3o/Projeto/Implementa\u00e7\u00e3o/Integra\u00e7\u00e3o/Manuten\u00e7\u00e3o. Modelo Incremental: O projeto \u00e9 quebrado em incrementos e cada incremento possui um modelo sequencial linear ou em cascata. Modelo Incremental Evolutivo: Esbo\u00e7o/loop{Especifica\u00e7\u00e3o/Desenvolvimento/Valida\u00e7\u00e3o} at\u00e9 que se tenha a vers\u00e3o final. Modelo Espiral: loop{Planejamento/Modelagem/Constru\u00e7\u00e3o/Entrega/Feedback} para cada incremento novo ao software. Modelo Iterativo: \u00c9 o modelo Sequencial Linear mas com possibilidade de retorno para as etapas anteriores at\u00e9 que se esteja aprovado pelo cliente. Modelo V: Durante todas as etapas de processo de software n\u00f3s j\u00e1 vamos definindo os testes que ser\u00e3o usados para a aprova\u00e7\u00e3o do produto. Hoje em dia, temos dois modelos mais usados. A modelo incremental foca em entregar um peda\u00e7o de cada vez e o modelo iterativo permite entregar vers\u00f5es mais simples do produto e ir aprimorando elas. O modelo atual mais usado \u00e9 justamente o Modelo incremental iterativo . Agora que aprendemos o conceito de modelo de processo de software, vamos analisar algumas abordagens de elabora\u00e7\u00e3o de software. Podemos dizer que existem 3 grupos principais de processos de gest\u00e3o de software: 1) Processos \u00e1geis; 2) Processos Prescritivos e 3) Processos Enxutos (lean process). Coment\u00e1rio: No material do curso s\u00f3 foram abordadas os dois primeiros processos.","title":"Modelos e Princ\u00edpios de Processo de Software"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#processos-ageis","text":"Os processos \u00e1geis nasceram no final do s\u00e9culo XX. Seguem o modelo incremental e iterativo de desenvolvimento. Os incrementos s\u00e3o pequenos e sucessivos (2 a 3 semanas). O cliente est\u00e1 constantemente em contato com o produto gerado no ciclo. A documenta\u00e7\u00e3o \u00e9 reduzida porque h\u00e1 muita comunica\u00e7\u00e3o interpessoal. Existem v\u00e1rias metodologias mas podemos elencar alguns: eXtreme Programming (XP) Scrum Dynamic System Development (DSDM) Feature Driven Development (FDD) Crystal Families Hoje em dia o m\u00e9todo mais usado \u00e9 o Scrum. A novidade dele \u00e9 que a abordagem do desenvolvimento \u00e9 emp\u00edrica e permite a evolu\u00e7\u00e3o dos requisitos do processo ao longo do processo. O Scrum \u00e9 divido em apenas 3 etapas: 1) Planejamento inicial do projeto; 2) Loop de desenvolvimento e feedback (chamado de sprint) e 3) Entrega ao cliente. As equipes do scrum s\u00e3o pequenas, multidisciplinares, de lideran\u00e7a dilu\u00edda e trabalham com um foco de melhorias pequenas em um prazo mais curto (2 ou 4 semanas). Existe a figura do facilitador do processo chamado Scrum Master. Os requisitos do software s\u00e3o mantidos no artefato chamado Backlog e serve de norte pada os times de desenvolvimento. Existem 3 papeis no processo de gest\u00e3o do Scrum: Product Owner (PO) - O cliente ou algu\u00e9m representante da vontade dele. Podemos pensar no PO como a ponte entre a empresa-cliente e a empresa-desenvolvedora. Scrum Master - \u00c9 o facilitador do time de desenvolvimento. Atua como ponte entre o time de desenvolvimento e o PO. Atentemos para o fato do PO n\u00e3o participar do processo de desenvolvimento t\u00e9cnico. Equipe de Desenvolvimento - \u00c9 auto-organizada e respons\u00e1vel pela produ\u00e7\u00e3o dos algoritmos que compor\u00e3o o software. Agora veremos de maneira organizada os artefatos produzidos no processo de Scrum: Backlog do Produto - Lista de caracter\u00edsticas necess\u00e1rias ao software atreladas a um grau de import\u00e2ncia. Cada caracter\u00edstica \u00e9 fruto de uma hist\u00f3ria de usu\u00e1rio que \u00e9 composta de 3 informa\u00e7\u00f5es (quem?; o que? e por qu\u00ea?). Backlog da Sprint - \u00c9 um subconjunto das caracter\u00edsticas elencadas do backlog do produto. Esses itens ser\u00e3o o foco da sprint (2 a 4 semanas). Incremento do Produto - \u00c9 o resultado do trabalho realizado na sprint. Al\u00e9m dos pap\u00e9is e dos artefatos, existem as cerim\u00f4nias do modelo Scrum: Reuni\u00e3o de planejamento da Sprint - Decide quais caracter\u00edsticas do Backlog do projeto ser\u00e3o objeto de trabalho pelo time de desenvolvimento. Daily - Acompanhamento a cada 24 horas do esfor\u00e7o do time de desenvolvimento para o alcance do planejamento da sprint. Algo r\u00e1pido (15 min). Revis\u00e3o da Sprint - Avalia\u00e7\u00e3o pelo PO do cumprimento do backlog da sprint. Foco no produto. Retrospectiva da Sprint - Melhoria do processo por meio de feedback de todas as partes envolvidas no processo de sprint. Foco no processo.","title":"Processos \u00c1geis"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#processos-prescritivos","text":"Antes do predom\u00ednio das metodologias \u00e1geis, os processos de controle de produ\u00e7\u00e3o de software eram orientados por processos prescritivos, tamb\u00e9m s\u00e3o chamados de processos dirigidos por planos. A ideia \u00e9 primeiro planejar tudo e ir visualizando o caminhar dos trabalhos em termos do planejamento inicial. O Rational Unified Process (RUP) \u00e9 o mais famoso desses modelos. O RUP hoje pertence \u00e0 IBM e possui algumas caracter\u00edsticas principais: Possui v\u00e1rios princ\u00edpios dos quais podemos citar: Foco nos riscos principais Garantia do valor Permitir mudan\u00e7as Defini\u00e7\u00e3o da arquitetura da solu\u00e7\u00e3o o mais breve poss\u00edvel Constru\u00e7\u00e3o da solu\u00e7\u00e3o em componentes Baseado em componentes/etapas planejadas Disciplinas (o que deve ser feito): Requisitos/An\u00e1lise/Projeto/Implementa\u00e7\u00e3o/Teste Fases (as etapas de cumprimento das disciplinas): Concep\u00e7\u00e3o/Elabora\u00e7\u00e3o/Constru\u00e7\u00e3o/Transi\u00e7\u00e3o Possui linguagem padronizada: Unified Modeling Language (UML) \u00c9 dirigido por caso de uso Funciona por modelo iterativo-incremental Os benef\u00edcios dos processos prescritivos ainda s\u00e3o vistos nas maiores empresas, principalmente relacionados ao uso da UML para defini\u00e7\u00e3o de etapas necess\u00e1rias em intera\u00e7\u00f5es e processos. Abaixo temos um exemplo retirado do material do curso. Mais informa\u00e7\u00f5es sobre a UML podem ser encontradas nesse link . Especifica\u00e7\u00e3o do caso de uso Matricular em disciplinas do sistema de controle acad\u00eamico. Fonte: A especifica\u00e7\u00e3o do caso de uso foi adaptada do livro BEZERRA, Eduardo. Princ\u00edpios de an\u00e1lise e projeto de sistemas com UML. Rio de Janeiro: Campus, 2003. Matricular em disciplinas Sum\u00e1rio: O aluno usa o sistema para se matricular em disciplinas. Ator prim\u00e1rio: aluno Ator secund\u00e1rio: Sistema Financeiro Pr\u00e9-condi\u00e7\u00f5es: o aluno est\u00e1 identificado pelo sistema Fluxo Principal: O aluno solicita a matr\u00edcula em disciplinas; O sistema apresenta a lista de disciplinas dispon\u00edveis para o semestre corrente para as quais o alunos possui pr\u00e9-requisitos; O aluno seleciona as disciplinas desejadas e solicita a matr\u00edcula; O sistema aloca o aluno em turmas de ofertas das disciplinas desejadas e informa ao aluno a turma alocada para cada disciplina bem como o professor, os hor\u00e1rios e dias da semana e as salas de aula; O aluno confirma as aloca\u00e7\u00f5es feitas; O sistema realiza a matr\u00edcula e envia os dados para o Sistema Financeiro; O caso de uso termina. Fluxo Alternativo (4): Inclus\u00e3o em lista de espera a. Se n\u00e3o h\u00e1 vaga ou oferta dispon\u00edvel para alguma disciplina selecionada pelo aluno, o sistema informa o fato ao aluno e fornece a op\u00e7\u00e3o de inserir o aluno em uma lista de espera para aquela disciplina; b. Se o aluno aceitar o sistema insere o aluno na lista de espera desejada e apresenta a posi\u00e7\u00e3o do aluno na lista. O caso de uso retorna ao passo 4; c. Se o aluno n\u00e3o aceitar o caso de uso prossegue a partir do passo 4. Fluxo de Exce\u00e7\u00e3o (4): Viola\u00e7\u00e3o de regra de neg\u00f3cio relativa quantidade m\u00e1xima de cr\u00e9ditos a) Se o aluno j\u00e1 atingiu a quantidade m\u00e1xima de cr\u00e9ditos em que pode se matricular por semestre, o sistema informa a quantidade de disciplinas que ele pode se matricular e o caso de uso retorna ao passo 2; P\u00f3s-Condi\u00e7\u00f5es: O aluno foi inscrito em turmas das disciplinas selecionadas ou foi acrescentado a listas de esperas das disciplinas selecionadas. Ao final de cada fase s\u00e3o superados os marcos principais do RUP. Cada marco significa o maior risco relacionado \u00e0quela etapa. Na fase de concep\u00e7\u00e3o \u00e9 o marco de objetivo de ciclo de vida. Na fase de elabora\u00e7\u00e3o \u00e9 o marco que arquitetura do software. Na fase da constru\u00e7\u00e3o \u00e9 o marco da capacidade operacional inicial e, por fim, no marco da transi\u00e7\u00e3o \u00e9 o marco da entrega do produto. Existem problemas nos m\u00e9todos prescritivos, os principais s\u00e3o: Forte apego \u00e0 hierarquia Segmenta\u00e7\u00e3o elevada do processo de constru\u00e7\u00e3o Em situa\u00e7\u00f5es cr\u00edticas, acabam dando lugar a processos \u00e1geis","title":"Processos Prescritivos"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#quando-usar-cada-processo","text":"Na vida real, podemos encontrar v\u00e1rios modelos misturados no dia a dia das empresas. As pr\u00e1ticas em cada empresa s\u00e3o org\u00e2nicas e fortemente baseadas na cultura organiza\u00e7\u00e3o local. Podemos sempre analisar os modelos como uma matriz de 2 eixos: Cascata x Iterativo e Disciplinado x Flex\u00edvel. Aqui n\u00f3s s\u00f3 analisamos os processos iterativos. Cabe a voc\u00ea saber se precisa de um processos mais formal como o RUP ou algo mais r\u00e1pido e flex\u00edvel como o SCRUM.","title":"Quando usar cada Processo?"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#requisitos","text":"Podem ser divididos em 2 grupos: requisitos de cliente e requisitos do software. A primeira classe \u00e9 focada nas necessidades dos usu\u00e1rios 1 que utiliza\u00e7\u00e3o o sistema (\u00e9 o problema a ser resolvido). A segunda categoria s\u00e3o as caracter\u00edsticas que o produto deve ter para cumpri os requisitos dos clientes (s\u00e3o as ferramentas que o sistema ter\u00e1 para interagir com os users). Os requisitos de software podem ser divididos em funcionais e n\u00e3o funcionais. Essa divis\u00e3o ser\u00e1 abordada de maneira mais detalhada abaixo.","title":"Requisitos"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#requisitos-funcionais","text":"Os requisitos funcionais s\u00e3o as caracter\u00edsticas que o software deve ter para resolver os problemas elencados como objetivos do sistema proposto. S\u00e3o definidos pelos stakeholders (user, clientes, especialistas e investidores). No SCRUM eles est\u00e3o no backlog do projeto e no RUP est\u00e1 num documento espec\u00edfico para isso. \u00c9 uma lista de exposi\u00e7\u00f5es breves das funcionalidades que o software far\u00e1 e como ele se comportar\u00e1 em rela\u00e7\u00e3o a alguma intera\u00e7\u00e3o dos usu\u00e1rios. Atente para o fato que os requisitos funcionais s\u00e3o sempre relacionados a algum usu\u00e1rio e n\u00e3o \u00e0 caracter\u00edsticas t\u00e9cnicas do sistema.","title":"Requisitos Funcionais"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#requisitos-nao-funcionais","text":"S\u00e3o as descri\u00e7\u00f5es das normas e padr\u00f5es do produto de software. \u00c9 aqui que definimos a linguagem de programa\u00e7\u00e3o, o ambiente, os crit\u00e9rios de seguran\u00e7a, banco de dados, disponibilidade do produto, desempenho e etc. Um requisito n\u00e3o funcional deve sempre citar um crit\u00e9rio de aceita\u00e7\u00e3o quantific\u00e1vel. Desse modo, podemos realizar testes objetivos na hora de avaliar se o desenvolvimento da feature foi bem sucedido na itera\u00e7\u00e3o. Podemos elencar alguns tipos de requisito n\u00e3o funcional: Desempenho Disponibilidade Portabilidade Usabilidade Capacidade e Degrada\u00e7\u00e3o Manutenibilidade Outros requisitos n\u00e3o funcionais s\u00e3o relacionados ao processo de desenvolvimento. Como por exemplo: Restri\u00e7\u00e3o da equipe desenvolvedora Qual processo de software deve ser usada Qual documenta\u00e7\u00e3o deve ser criada Al\u00e9m dessas duas classifica\u00e7\u00f5es, podemos ter restri\u00e7\u00f5es relacionadas ao projeto de software: Qual SGBD deve ser usado Plataforma de disponibilidade (web ou n\u00e3o) Qual linguagem de programa\u00e7\u00e3o usada Qual o SO das plataformas Exist\u00eancia de sistema legado Todos os requisitos n\u00e3o funcionais estar\u00e3o no backlog da sprint atrav\u00e9s da aceita\u00e7\u00e3o do incremento pelo cliente e no RUP existe uma documenta\u00e7\u00e3o espec\u00edfica para isso.","title":"Requisitos N\u00e3o Funcionais"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#atividades-e-artefatos-da-engenharia-de-software","text":"O processo de produ\u00e7\u00e3o de software \u00e9 divido em atividades com seus respectivos respons\u00e1veis e os artefatos criados a cada etapa finalizada. As atividades s\u00e3o dividas em t\u00e9cnicas, gerenciais, testes e de apoio 2 . Essas atividades s\u00e3o as que comp\u00f5e toda a gest\u00e3o da engenharia de software.","title":"Atividades e Artefatos da Engenharia de Software"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#atividades-tecnicas","text":"Dentro das atividades t\u00e9cnicas n\u00f3s temos a engenharia de requisitos , design/projeto de software , implementa\u00e7\u00e3o/codifica\u00e7\u00e3o , testes e aceita\u00e7\u00e3o do cliente . Podemos elencar as seguintes atividades t\u00e9cnicas necess\u00e1rias ao bom processo de engenharia de requisitos: Levantamento de Requisitos (Elicita\u00e7\u00e3o): Entrevistas Observa\u00e7\u00e3o Leitura de documenta\u00e7\u00e3o An\u00e1lise dos Requisitos: An\u00e1lise das lacunas Modelagem gr\u00e1fica Revis\u00e3o das descri\u00e7\u00f5es Especifica\u00e7\u00e3o dos Requisitos: Descri\u00e7\u00e3o sem ambiguidades Linguagem natural, controlada ou espec\u00edfica Valida\u00e7\u00e3o dos Requisitos: Revis\u00e3o de tudo Prototipagem Nota\u00e7\u00f5es complexas podem dificultar entendimento do cliente Valida\u00e7\u00e3o por parte do cliente Agora vamos ver as atividades de Projeto (design) de Software: Pondera\u00e7\u00e3o das alternativas de solu\u00e7\u00f5es Escolha da solu\u00e7\u00e3o que ser\u00e1 implementada Detalhamento da solu\u00e7\u00e3o escolhida (elabora\u00e7\u00e3o do projeto): Arquitetura do Software: Alto n\u00edvel de abstra\u00e7\u00e3o. Foco nos requisitos n\u00e3o funcionais. Representa\u00e7\u00e3o das partes gerais da solu\u00e7\u00e3o. Projeto Detalhado: Baixa abstra\u00e7\u00e3o. Defini\u00e7\u00e3o dos objetos e das intera\u00e7\u00f5es. Foco nos requisitos funcionais. Algoritmos e estruturas de dados. Uma vez que temos os requisitos elencados e o projeto definido, entramos na etapa de implementa\u00e7\u00e3o ou codifica\u00e7\u00e3o. Implementados os algoritmos, temos a etapa de testes de software para validar os requisitos e garantir que os objetivos sejam alcan\u00e7ados. Podem ser manuais ou automatizados. Por fim, temos a aprova\u00e7\u00e3o do cliente no sentido de cumprimento das funcionalidades esperadas e da qualidade exigida da solu\u00e7\u00e3o. Ap\u00f3s a aprova\u00e7\u00e3o, existe a etapa de manuten\u00e7\u00e3o de software que \u00e9 composta da repeti\u00e7\u00e3o de todas as etapas expostas acima. Cada manuten\u00e7\u00e3o ou aprimoramento passa pelas etapas descritas desde a an\u00e1lise de requisito at\u00e9 a aprova\u00e7\u00e3o.","title":"Atividades T\u00e9cnicas"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#medidas-de-software","text":"S\u00e3o abordagens de medi\u00e7\u00e3o e defini\u00e7\u00e3o de metas para o cumprimento das etapas programadas para alcance dos objetivos da solu\u00e7\u00e3o contratada.","title":"Medidas de Software"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#atividades-gerenciais","text":"S\u00e3o as atividades que atuam no controle da complexidade da solu\u00e7\u00e3o desenvolvida e podem ser dividas em gest\u00e3o de configura\u00e7\u00e3o , gest\u00e3o de projeto , gest\u00e3o de requisitos e gest\u00e3o de processos e, al\u00e9m dessas, possuem atividades afins como gest\u00e3o da qualidade e estimativas de software. A gest\u00e3o de configura\u00e7\u00e3o ou gest\u00e3o de vers\u00f5es \u00e9 a atividade que cuida da manuten\u00e7\u00e3o e organiza\u00e7\u00e3o dos arquivos produzidos durante todo o processo de software. \u00c9 a atividade que controla as atualiza\u00e7\u00f5es dos programas e mant\u00e9m a mem\u00f3ria de todas as etapas anteriores. A ger\u00eancia de projeto de software \u00e9 a atividade que controle a din\u00e2mica de tempo, pessoas, custos envolvido no processo de desenvolvimento. A ger\u00eancia de requisitos \u00e9 a atividade de controle das necessidades de mudan\u00e7a no escopo do projeto bem como controla as mudan\u00e7as na mudan\u00e7a da necessidade do cliente a respeito da mudan\u00e7a de requisitos. Tamb\u00e9m atua na prioriza\u00e7\u00e3o dos requisitos para a defini\u00e7\u00e3o dos focos de trabalho. Outra atribui\u00e7\u00e3o relacionada \u00e9 o controle da rastreabilidade dos requisitos pois todas as etapas de elabora\u00e7\u00e3o devem ser relacionadas a algum requisito que perten\u00e7a ao escopo solicitado pelo cliente. A gest\u00e3o de Processos \u00e9 a atividade de defini\u00e7\u00e3o e melhoria do processo de gest\u00e3o de software de acordo com as boas pr\u00e1ticas, dos modelos de capacita\u00e7\u00e3o e maturidade como (CMMI e MPS.BR). A gest\u00e3o da qualidade \u00e9 a atividade que avalia as v\u00e1rias interfaces de din\u00e2micas que impactam no resultado final do produto de software. A estimativa de software \u00e9 a atividade de gerar previs\u00f5es com base na hist\u00f3ria da empresa de desenvolvimento afim de melhorar a aloca\u00e7\u00e3o dos recursos para cumprimento das etapas previstas no in\u00edcio do processo de planejamento.","title":"Atividades Gerenciais"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#testes-de-software","text":"O objetivo dos testes \u00e9 identificar os problemas da solu\u00e7\u00e3o desenvolvida mas, como tudo na vida, existem restri\u00e7\u00f5es a quantidade e qualidade de testes poss\u00edveis de serem feitos uma vez que existem custos associados a essa atividade. Diante das restri\u00e7\u00f5es impostas pela realidade e da complexidade do processo de desenvolvimento, \u00e9 imposs\u00edvel, n\u00e3o importa o dimensionamento do esfor\u00e7o, garantir uma aplica\u00e7\u00e3o livre de erros. O foco dessa atividade \u00e9 garantir que, ao dado n\u00edvel de confian\u00e7a requerido, que o software entregar\u00e1 as capacidades requeridas no projeto. Os testes s\u00e3o necess\u00e1rios para garantir o cumprimento dos requisitos funcionais e n\u00e3o funcionais e podem ser divididos em dois tipos: Testes Funcionais/Caixa Preta - Baseados no ponto de vista do usu\u00e1rio do software. Testes Estruturais/Caixa Branca - Ponto de vista de quem desenvolveu o software por meio de inputs e avalia\u00e7\u00e3o de outputs. Uma boa maneira de realizar os testes funcionais \u00e9 reproduzir as situa\u00e7\u00f5es listadas nas hist\u00f3rias dos usu\u00e1rios. Uma Plano de Testes \u00e9 o documento que indica o conjunto de informa\u00e7\u00f5es relacionadas ao teste realizado, tais como: Testes de desempenho Testes funcionais da hist\u00f3ria de usu\u00e1rio x Teste de responsividade Teste de campos de formul\u00e1rios Teste de navegabilidade ou links Teste de ponta a ponta No teste ponta a ponta passamos por todas as principais caracter\u00edsticas e funcionalidades do produto que desenvolvimento para cumprimento dos requisitos. Um plano de teste deve conter os casos de testes que, por sua vez, devem conter as seguintes informa\u00e7\u00f5es: Objetivo Valores de entrada Valores de sa\u00edda esperada Valores de sa\u00edda real Registro de execu\u00e7\u00e3o (falha ou sucesso)","title":"Testes de Software"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#artefatos-e-templates","text":"","title":"Artefatos e Templates"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#artefatos","text":"Os artefatos s\u00e3o um dos produtos que as atividades t\u00e9cnicas e gerencias produzem em cada ciclo de trabalho e podem ser usados nas etapas posteriores da execu\u00e7\u00e3o do projeto. Existem v\u00e1rios tipos, vamos elencar alguns: Artefatos do processo de desenvolvimento: Backlog do produto 3 Diagramas de casos de usados Descri\u00e7\u00e3o de casos de uso Documento de especifica\u00e7\u00e3o de requisitos Descreve os requisitos baseados em casos de uso ou outra forma de descri\u00e7\u00e3o. Artefatos do processe de gerenciamento: Documento de arquitetura de software O nome j\u00e1 denuncia mas \u00e9 importante porque cont\u00e9m v\u00e1rios diagramas do desenho da aplica\u00e7\u00e3o e como a solu\u00e7\u00e3o foi constru\u00edda em partes funcionais. Plano de Teste de software Casos de testes Lista de bugs Plano de projeto Matriz de rastreabilidade Mostra como os requisitos (que comp\u00f5e as linhas da matriz) se relacionam com os artefatos produzidos durante o processo de produ\u00e7\u00e3o.","title":"Artefatos"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#templates","text":"N\u00f3s j\u00e1 aprendemos o que s\u00e3o os artefatos de software e em que contexto eles s\u00e3o gerados, agora, vamos aprender algumas ferramentas e templates que nos auxiliam no processo de cria\u00e7\u00e3o desses artefatos durante o processo de desenvolvimento de software. Coment\u00e1rio: Essa se\u00e7\u00e3o \u00e9 mais para consulta quando voc\u00ea precisar gerenciar algum projeto de desenvolvimento de software. Vou tentar manter os links atualizados mas caso algum deixe de funcionar, pode me avisar pelo twitter .","title":"Templates"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#backlog-do-produto-e-kanban","text":"Existem v\u00e1rias maneiras de organizar o cumprimento dos requisitos contidos no backlog do projeto. O kanban \u00e9 um quadro onde transformamos cada item do backlog em unidades separ\u00e1veis (geralmente post-its ou quadros) onde podemos mover para quadrantes de um board maior. Usualmente temos os quadrantes \"A fazer\", \"Fazendo\" e \"Feito\". Desse modo, podemos ver rapidamente o estado do desenvolvimento das atividades programadas para a sprint. Existem v\u00e1rias ferramentas virtuais que podem ser usadas no processo como: Trello PivotalTracker","title":"Backlog do produto e Kanban"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#especificacao-de-requisitos-de-software","text":"Existem v\u00e1rios templates dispon\u00edveis na internet: IEE/ISO/IEC 29148 Esse exemplo M\u00e9todo Volere PUC-MG","title":"Especifica\u00e7\u00e3o de Requisitos de Software"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#documento-de-arquitetura-de-software","text":"Architecture View Template Interface Template IEE/ISO/IEC 42020 Nesse link aqui voc\u00ea pode ver como elaborar um caso de teste funcional a partir dos casos de uso. Aqui tem um template de ata de reuni\u00e3o . Por fim, temos um template de matriz de impacto de mudan\u00e7as aqui . E uma matriz de rastreabilidade em excel aqui .","title":"Documento de Arquitetura de Software"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#desenhando-processos-de-software","text":"Essa \u00faltima se\u00e7\u00e3o \u00e9 um exerc\u00edcio onde vamos colocar em pr\u00e1tica todos os conceitos aprendidos at\u00e9 agora. Temos que saber que os conceitos aprendidos n\u00e3o s\u00e3o regras imut\u00e1veis na aplica\u00e7\u00e3o pr\u00e1tica em um processo de software. Podemos combinar caracter\u00edsticas de v\u00e1rios modelos durante o processo de execu\u00e7\u00e3o de um planejamento sempre com foco na melhora cont\u00ednua da qualidade do software. Mesmo tendo muita flexibilidade sobre o processo de software, podemos elencar caracter\u00edsticas que s\u00e3o obrigat\u00f3rias em qualquer desenho: Qual o modelo de ciclo de vida Quais as atividades que compor\u00e3o o processo de software e quais a t\u00e9cnicas usadas ao longo delas Quais produtos ou artefatos ser\u00e3o gerados a cada etapa Os pap\u00e9is dos agentes relacionados ao longo do processo N\u00f3s come\u00e7amos o nosso estudo de engenharia de software pelos modelos de ciclo de vida exatamente porque eles regem grande parte das atividades e artefatos produzidos durante todo o processo de software. A maturidade da empresa, dimensionamento da m\u00e3o de obra, recursos dispon\u00edveis, verba do projeto, tempo de execu\u00e7\u00e3o e outras caracter\u00edsticas s\u00e3o importantes para defini\u00e7\u00e3o do melhor modelo de ciclo de vida a ser adotado. A nossa jornada pela engenharia de software vai ser em grande medida construir um amplo repert\u00f3rio de modelos de ciclo de vida, atividades e artefatos. Para facilitar o complexo processo de software, existem v\u00e1rias ferramentas que centralizam as diferentes etapas e simplificam o processo de gest\u00e3o: Bizagi Modeler Eclipse Process Framework","title":"Desenhando Processos de Software"},{"location":"nav/PUC/periodo1/fundamentos_eng_soft/#bibliografia","text":"PRESSMAN, Roger S.; MAXIM, Bruce R. Engenharia de software: uma abordagem profissional . 8. ed. Porto Alegre: AMGH, 2016. E-book ISBN 9788580555349. Cap\u00edtulos 1, 2, 3 PRIKLADNICKI, Rafael, WILLI, Renato, e MILANI, Fabiano. Me\u0301todos a\u0301geis para desenvolvimento de software . Porto Alegre: Bookman, 2014 1 recurso online ISBN 9788582602089 Cap\u00edtulos 1,2,3,8,12,13 SOMMERVILLE, Ian. Engenharia de software , 10\u00aa ed. Pearson 768 ISBN 9788543024974 Cap\u00edtulos 1,2,3,4 COHN, Mike; SILVA, Aldir Jos\u00e9 Coelho Corr\u00eaa da. Desenvolvimento de software com Scrum: aplicando m\u00e9todos \u00e1geis com sucesso . Porto Alegre: Bookman, 2011. E-book ISBN 9788577808199 LARMAN, Craig. Utilizando UML e padr\u00f5es: uma introdu\u00e7\u00e3o \u00e1 an\u00e1lise e ao projeto orientados a objetos e desenvolvimento iterativo . 3. ed. Porto Alegre: Bookman, 2007. E-book (695 p\u00e1ginas) ISBN 9788577800476 PAULA FILHO, Wilson de P\u00e1dua. Engenharia de software , v. 2 projetos e processos. 4. Rio de Janeiro LTC 2019 1 recurso online ISBN 9788521636748 VETORAZZO, Adriana de Souza. Engenharia de software. Porto Alegre SAGAH 2018 1 recurso online ISBN 9788595026780 WAZLAWICK, Raul Sidnei. Engenharia de software conceitos e pr\u00e1ticas . Rio de Janeiro GEN LTC 2013 1 recurso online ISBN 9788595156173 Por meio das hist\u00f3rias de usu\u00e1rios ou dos casos de uso. \u21a9 N\u00e3o focaremos nessa parte mas s\u00e3o as atividades de RH, administrativo e etc. \u21a9 N\u00f3s j\u00e1 sabemos o que \u00e9. \u21a9","title":"Bibliografia"},{"location":"nav/PUC/periodo1/logica_comp/","text":"hljs.initHighlightingOnLoad(); Assuntos Pensamento L\u00f3gico Defini\u00e7\u00f5es Subconjuntos Opera\u00e7\u00f5es sobre Conjuntos Princ\u00edpios da L\u00f3gica Proposicional Conectivos L\u00f3gicos Tabela Verdade e Equival\u00eancia L\u00f3gica Predicados e Quantificadores Ligando Vari\u00e1veis Nega\u00e7\u00f5es Pensamento Anal\u00edtico Provas de Teoremas Regras de Infer\u00eancia Argumentos V\u00e1lidos Indu\u00e7\u00e3o Matem\u00e1tica Indu\u00e7\u00e3o Forte Recurs\u00e3o Especifica\u00e7\u00e3o de Sistemas Bibliografia Pensamento L\u00f3gico A primeira parte eu j\u00e1 cobri, de maneira mais aprofundada, no projeto matem\u00e1tica. Se quiserem ver um material mais completo, podem conferir na Bibliografia ou no meu Projeto Matem\u00e1tica . Provavelmente, essa se\u00e7\u00e3o inteira ser\u00e1 deletada no futuro e todo o conte\u00fado dela ser\u00e1 desenvolvido pelo projeto matem\u00e1tica. Defini\u00e7\u00f5es Aqui vai ficar apenas uma lista de todos os conceitos explicados nesse t\u00f3pico. Se algu\u00e9m tiver alguma d\u00favida sobre eles, recomendo ler a bibliografia indicada ou o projeto matem\u00e1tica. Conjunto Elemento Pertencimento e Igualdade Propriedades dos conjuntos Conjunto vazio Tipos de defini\u00e7\u00f5es de conjuntos (chaves, set builder notation, recurs\u00e3o, caracter\u00edstica) Subconjuntos Nota\u00e7\u00e3o \\((A \\subset B)\\) Diagrama de Venn Conjunto Pot\u00eancia (Power Set) Sequ\u00eancias (lista de objetos ordenados) Opera\u00e7\u00f5es sobre Conjuntos Cardinalidade \\((|{1,5,3}| = 3)\\) Emparelhamento: Se X e Y possuem a mesmo cardinal, ao ligarmos cada elemento de X a um elemento de Y, dizemos que os conjuntos est\u00e3o emparelhados Produto Cartesiano: \\(A \\times B = \\{(a,b) | a \\in A \\land b \\in B\\}\\) Conjunto Universo/Universal Propriedades dos Conjuntos: Comutatividade Associatividade Distributividade Uni\u00e3o e Interse\u00e7\u00e3o com Universo Complemento Duplo Idempot\u00eancia Lei de DeMorgan Absor\u00e7\u00e3o Diferen\u00e7a de Conjuntos Uni\u00e3o e Interse\u00e7\u00e3o com Vazio Uni\u00e3o e Interse\u00e7\u00e3o com complemento Complementos de U e vazio Conjunto Disjuntos ( \\(A \\cap B = \\emptyset\\) ) Parti\u00e7\u00e3o ( \\(A = A_1 \\cup A_2 \\dots \\cup A_n\\) ) Princ\u00edpios da L\u00f3gica Proposicional L\u00f3gica: Ramo da Filosofia, Matem\u00e1tica e Ci\u00eancia da Computa\u00e7\u00e3o que lida com infer\u00eancias v\u00e1lidas Hip\u00f3teses vedadeiras \\(\\rightarrow\\) Conclus\u00f5es Verdadeiras Asser\u00e7\u00e3o: Uma afirma\u00e7\u00e3o declarativa Proposi\u00e7\u00e3o: Uma asser\u00e7\u00e3o verdadeira ou falsa mas n\u00e3o ambos Vari\u00e1veis Proposicionais: \u00c9 a vari\u00e1vel atribu\u00edda \u00e0 alguma proposi\u00e7\u00e3o Proposi\u00e7\u00f5es Compostas: Proposi\u00e7\u00f5es ligadas por operadores l\u00f3gicos Tabela Verdade Conectivos L\u00f3gicos Conectivos: Criam novas proposi\u00e7\u00f5es a partir de duas ou mais proposi\u00e7\u00f5es Nega\u00e7\u00e3o ( \\(\\neq\\) ) Conjun\u00e7\u00e3o ( \\(\\land\\) ) Disjun\u00e7\u00e3o ( \\(\\lor\\) ) Disjun\u00e7\u00e3o Exclusva ( \\(\\oplus\\) ) Condicional ou Implica\u00e7\u00e3o ( \\(p \\rightarrow q\\) ). Onde p \u00e9 a hip\u00f3tese e q \u00e9 a conclus\u00e3o Bicondicional ( \\(p \\rightarrow q \\land q \\rightarrow p\\) ) ou ( \\(p \\leftrightarrow q\\) ) Proposi\u00e7\u00f5es Compostas Ordem de Preced\u00eancia em Proposi\u00e7\u00f5es Compostas: Nega\u00e7\u00e3o Conjun\u00e7\u00e3o Disjun\u00e7\u00e3o Implica\u00e7\u00e3o Implica\u00e7\u00e3o Dupla Tabela Verdade e Equival\u00eancia L\u00f3gica Esse assunto eu realmente recomendo o material do projeto matem\u00e1tica no site Economia Mainstream. Tautologia: Uma proposi\u00e7\u00e3o que sempre ser\u00e1 verdadeira Contradi\u00e7\u00e3o ou Absurdo: Proposi\u00e7\u00e3o sempre falsa Conting\u00eancia: Proposi\u00e7\u00e3o cujo valor ser\u00e1 definido pelas suas vari\u00e1veis proposicionais Equival\u00eancia L\u00f3gica: Se duas proposi\u00e7\u00f5es possuem a mesma tabela verdade, elas s\u00e3o equivalentes L\u00f3gica Proposicional - Senten\u00e7as objetivas e n\u00e3o amb\u00edguas, circuitos l\u00f3gicos, automa\u00e7\u00e3o de processos e etc Predicados e Quantificadores A proposi\u00e7\u00e3o \\(x > 3\\) possui dois componentes: \\(x\\) \u00e9 chamado de sujeito \\(>3\\) \u00e9 chamado de predicado \\(P(x)\\) \u00e9 a nota\u00e7\u00e3o para uma declara\u00e7\u00e3o com predicado \\(P\\) e sujeito \\(x\\) A validade de uma proposi\u00e7\u00e3o desse tipo depende inteiramente do valor do sujeito Quantificador universal: \\(\\{ \\forall x \\in \\mathbb{R} : P(X)\\} = \\{P(x_1) \\land P(x_2) \\land \\dots\\}\\) Quantificador existencial: \\(\\{\\exists x \\in \\mathbb{R} : P(X)\\} = \\{P(x_1) \\lor P(x_2) \\lor \\dots\\}\\) Ligando Vari\u00e1veis Uma vari\u00e1vel \u00e9 dita amarrada quando est\u00e1 atrelada a algum quantificador ou quando algum valor \u00e9 atribu\u00eddo a ela Se uma vari\u00e1vel n\u00e3o est\u00e1 amarrada, ent\u00e3o dizemos que ela est\u00e1 livre Um proposi\u00e7\u00e3o s\u00f3 existe se todas as suas vari\u00e1veis estiverem amarradas Quando atribu\u00edmos um quantificador a uma vari\u00e1veis, dizemos que estamos definindo o seu escopo \\(\\exists x (P(x) \\land Q(x)) \\lor \\forall x R(x)\\) : \u00c9 uma proposi\u00e7\u00e3o cujo primeiro escopo \u00e9 dado por \\(\\exists x\\) e o segundo \u00e9 dado por \\(\\forall x\\) Nega\u00e7\u00f5es \\(\\neg \\forall P(x) = \\exists x \\neg P(x)\\) \\(\\neg \\exists x Q(x) = \\forall x \\neg Q(x)\\) Pensamento Anal\u00edtico Provas de Teoremas Um teorema \u00e9 uma declara\u00e7\u00e3o em que pode-se demonstrar a sua validade de maneira l\u00f3gica. Esse processo \u00e9 chamado de prova e obedece aos construdos l\u00f3gicos que aprendemos na primeira parte desse microfundamento. Sempre que temos um teorema, podemos reduzir sua estrutura em dois componentes: Sua hip\u00f3tese ( \\(p\\) ) e sua conclus\u00e3o ( \\(q\\) ). A prova do teorema \u00e9 justamente a comprova\u00e7\u00e3o que, a partir da hip\u00f3tese, podemos chegar na conclus\u00e3o proposta. A habilidade de comprovar teoremas \u00e9 a real linguagem da matem\u00e1tica. Requer muita criatividade, l\u00f3gica e capacidade de ser claro na exposi\u00e7\u00e3o dos argumentos. A constru\u00e7\u00e3o de provas matem\u00e1ticas deve ter um conjunto de ferramentas que podemos elencar: Axiomas/Postulados Teoremas j\u00e1 provados Hip\u00f3teses Proposi\u00e7\u00f5es derivadas as anteriores segundo as regras de infer\u00eancia Regras de Infer\u00eancia as regras de infer\u00eancia s\u00e3o as regras que garantem a obten\u00e7\u00e3o de novas informa\u00e7\u00f5es a partir de informa\u00e7\u00f5es anteriores e, simultaneamente, o respeito \u00e0s regras l\u00f3gicas. O modus ponens (modo de afirmar) \u00e9 a regra de infer\u00eancia fundamental. Sua l\u00f3gica \u00e9 a seguinte: Data a tautologia \\((p \\land (p \\rightarrow q)) \\rightarrow q\\) Se \\(p\\) for verdade, ent\u00e3o, a tautologia nos diz que ser\u00e1 verdade que \\(p \\rightarrow q\\) O que por fim, nos garante que \\(q\\) seja o resultado alcan\u00e7ado com a verdade de \\(p\\) A escrita desse argumento \u00e9 com a coloca\u00e7\u00e3o das verdades na parte de cima de uma linha horizontal e das conclus\u00f5es na parte de baixo. \\(p\\) \\(p \\rightarrow q\\) \\(\\therefore q\\) Esse \" \\(\\therefore\\) \" significa \"portanto\". Al\u00e9m da regra fundamental, n\u00f3s temos uma grande quantidade de outras regras importantes para constru\u00e7\u00e3o de provas de teoremas. Abaixo podemos ver uma tabela com v\u00e1rias delas. Tautologia Nome \\(p \\rightarrow (p \\lor q)\\) Adi\u00e7\u00e3o \\((p \\land q) \\rightarrow p\\) Simplifica\u00e7\u00e3o \\(((p) \\land (q)) \\rightarrow (p \\land q)\\) Conjun\u00e7\u00e3o \\([p \\land (p \\rightarrow q)] \\rightarrow q\\) Modus Ponens \\([\\neg q \\land (p \\rightarrow q)] \\rightarrow \\neg p\\) Modus Tollens \\([(p \\rightarrow q) \\land (q \\rightarrow r)] \\rightarrow (p \\rightarrow r)\\) Silogismo hipot\u00e9tico \\([(p \\lor q) \\land \\neg p] \\rightarrow q\\) Silogismo disjuntivo \\([(p \\lor q) \\land (\\neg p \\lor r)]\\) Resolu\u00e7\u00e3o Argumentos V\u00e1lidos Na l\u00f3gica proposicional, um argumento \u00e9 dito valido se sempre que as hip\u00f3teses forem verdadeiras, a conclus\u00e3o ser\u00e1, obrigatoriamente, verdadeira. Em nota\u00e7\u00e3o formal dizemos que \\(p_1 \\land \\dots \\land p_n \\rightarrow q\\) A demonstra\u00e7\u00e3o da validade de um argumento depende de como as hip\u00f3teses se conectam com as conclus\u00f5es sempre de maneira l\u00f3gica segundo o correto uso dos conectivos l\u00f3gicos j\u00e1 estudados. Em tese, a constru\u00e7\u00e3o de uma tabela verdade \u00e9 sempre poss\u00edvel para um n\u00famero arbitr\u00e1rio de hip\u00f3teses, o problema disso, \u00e9 que o tamanho dessa tabela cresce na raz\u00e3o de \\(2^n\\) sendo \\(n\\) a quantidade de hip\u00f3teses. Para superarmos esse problema, fazemos grande uso das regras de infer\u00eancia. Uma premissa falsa aplicada a uma argumenta\u00e7\u00e3o logicamente correta gera conclus\u00f5es falsas. Ent\u00e3o a validade das premissas tamb\u00e9m pode ser um motivo de cuidado na hora de construirmos teoremas. Uma fal\u00e1cia \u00e9 um tipo de erro argumentativo que, \u00e0 primeira vista, at\u00e9 se parece com um argumento v\u00e1lido, mas possui algum erro na sua constru\u00e7\u00e3o. Um exemplo \u00e9 a fal\u00e1cia da afirma\u00e7\u00e3o da conclus\u00e3o que pode ser expressa como \\([(p \\rightarrow q) \\land q] \\rightarrow p\\) . Essa express\u00e3o \u00e9 falsa quando \\(p\\) \u00e9 falso e \\(q\\) verdadeiro. Um exemplo em linguagem natural dessa fal\u00e1cia \u00e9 \" \\(p \\rightarrow q\\) : Quem resolve todos os exerc\u00edcios aprende. \\(q\\) : Voc\u00ea aprendeu. Logo, \\(p\\) : voc\u00ea resolveu todos os exerc\u00edcios\". Veja que, se algu\u00e9m aprender (o que torna \\(q\\) verdadeiro) mas n\u00e3o fizer todos os exerc\u00edcios (tornando \\(p\\) falso) quebra a linha de argumenta\u00e7\u00e3o e torna essa proposi\u00e7\u00e3o falsa. Outra fal\u00e1cia conhecida \u00e9 a nega\u00e7\u00e3o da hip\u00f3tese . Podemos construir ela como sendo \\([(p \\rightarrow q) \\land \\neg p] \\rightarrow \\neg q\\) . A primeira vista, parece certo, mas n\u00e3o \u00e9. Regras de Infer\u00eancia Coment\u00e1rio: Eu achei que essa parte foi um pouco negligenciada no curso. Devo voltar aqui para expandir esse conte\u00fado mais tarde. Por enquanto, temos essa tabela de refer\u00eancia. Regra de Infer\u00eancia Nome Nota \\(\\forall x P(x) \\rightarrow P(c)\\) Intancia\u00e7\u00e3o Universal c espec\u00edfico \\(P(c) \\rightarrow \\forall x P(x)\\) Generaliza\u00e7\u00e3o Universal c arbitr\u00e1rio \\(\\exists x P(x) \\rightarrow P(c)\\) Instancia\u00e7\u00e3o Existencial c espec\u00edfico e n\u00e3o conhecido \\(P(c) \\rightarrow \\exists x P(x)\\) Generaliza\u00e7\u00e3o Existencial c espec\u00edfico e conhecido Indu\u00e7\u00e3o Matem\u00e1tica A dedu\u00e7\u00e3o \u00e9 o processo de, a partir de premissas verdadeiras, determinar as conclus\u00f5es verdadeiras necessariamente oriundas dessas premissas. Ou seja, \u00e9 o processo de, partindo de um princ\u00edpio geral se chegar em um caso especial . O processo reverso \u00e9 chamado de indu\u00e7\u00e3o . Partir do caso espec\u00edfico para um princ\u00edpio anterior geral. A indu\u00e7\u00e3o pode ser usada para comprovar teoremas que se relacionam com um n\u00famero arbitr\u00e1rio de elementos (ou mesmo infinitos elementos). Basicamente, a demonstra\u00e7\u00e3o por indu\u00e7\u00e3o consiste em dois passos: Passo b\u00e1sico (provar para \\(P(n=1)\\) ) Passo indutivo (Provar que \\(P(k) \\implies P(k+1)\\) ) Temos que ter cuidado com o passo b\u00e1sico. Afirmar que \\(P(n=1)\\) \u00e9 verdadeiro n\u00e3o \u00e9 provar. Similarmente, no passo indutivo, tamb\u00e9m n\u00e3o podemos assumir que \\(P(k)\\) \u00e9 verdade sem tomar muito cuidado. O ideial \u00e9 que \\(P(k)\\) seja evidentemente verdadeira. Indu\u00e7\u00e3o Forte Similar ao processo de prova por indu\u00e7\u00e3o simples. A indu\u00e7\u00e3o forte possui 2 passos: Provar que \\(P(n=1)\\) \u00e9 verdadeiro Provar que \\(P(1) \\land P(2) \\land \\dots \\land P(k) \\implies P(k+1)\\) Ao contr\u00e1rio do que o nome sugere, a indu\u00e7\u00e3o forte \u00e9 mais flex\u00edvel que a indu\u00e7\u00e3o simples. O material \u00e9 um pouco obtuso nesse tema, ent\u00e3o vamos ter que revisar essa se\u00e7\u00e3o posteriormente. Recurs\u00e3o As vezes precisamos lidar com sequ\u00eancias, conjuntos ou fun\u00e7\u00f5es que n\u00e3o s\u00e3o defin\u00edveis facilmente. Para conseguirmos um tipo \u00fatil de defini\u00e7\u00e3o, podemos usar um processo chamado de recurs\u00e3o em que definimos um objeto pela sua caracter\u00edstica de composi\u00e7\u00e3o. Para uma sequ\u00eancia definida recursivamente, podemos usar a indu\u00e7\u00e3o para provar proposi\u00e7\u00f5es que fa\u00e7am uso dela. Para um conjunto , primeiro definimos os elementos iniciais e depois fornecemos uma regra para constru\u00e7\u00e3o de novos elementos. Para demonstra\u00e7\u00f5es com conjuntos recursivos, usamos um m\u00e9todo de prova chamado indu\u00e7\u00e3o estrutural. Para uma fun\u00e7\u00e3o , primeiro definimos o passo b\u00e1sico e depois uma rega para encontrar o valor da fun\u00e7\u00e3o no seu dom\u00ednio definido. Um exemplo famoso disso s\u00e3o os n\u00famero de Fibonacci onde temos \\(f_0 = 0, f_1 = 1\\) e \\(f_n = f_{n-1} + f_{n-2} \\forall n = 2,3,4,\\dots\\) . Existe uma rela\u00e7\u00e3o entre a recurs\u00e3o e a indu\u00e7\u00e3o pois, geralmente, objetos constru\u00eddos recursivamente s\u00e3o demonstrados por meio de indu\u00e7\u00e3o matem\u00e1tica. Especifica\u00e7\u00e3o de Sistemas A especifica\u00e7\u00e3o de sistemas \u00e9 a capacidade de traduzir linguagem natural para linguagem l\u00f3gica. Bibliografia HUNTER, David J. Fundamentos de Matem\u00e1tica Discreta . Rio de Janeiro: LTC, 2011 ROSEN, Keneth H. Discrete Mathematics and its Applications . New York: McGraw-Hill, 2019","title":"L\u00f3gica Computacional"},{"location":"nav/PUC/periodo1/logica_comp/#assuntos","text":"Pensamento L\u00f3gico Defini\u00e7\u00f5es Subconjuntos Opera\u00e7\u00f5es sobre Conjuntos Princ\u00edpios da L\u00f3gica Proposicional Conectivos L\u00f3gicos Tabela Verdade e Equival\u00eancia L\u00f3gica Predicados e Quantificadores Ligando Vari\u00e1veis Nega\u00e7\u00f5es Pensamento Anal\u00edtico Provas de Teoremas Regras de Infer\u00eancia Argumentos V\u00e1lidos Indu\u00e7\u00e3o Matem\u00e1tica Indu\u00e7\u00e3o Forte Recurs\u00e3o Especifica\u00e7\u00e3o de Sistemas Bibliografia","title":"Assuntos"},{"location":"nav/PUC/periodo1/logica_comp/#pensamento-logico","text":"A primeira parte eu j\u00e1 cobri, de maneira mais aprofundada, no projeto matem\u00e1tica. Se quiserem ver um material mais completo, podem conferir na Bibliografia ou no meu Projeto Matem\u00e1tica . Provavelmente, essa se\u00e7\u00e3o inteira ser\u00e1 deletada no futuro e todo o conte\u00fado dela ser\u00e1 desenvolvido pelo projeto matem\u00e1tica.","title":"Pensamento L\u00f3gico"},{"location":"nav/PUC/periodo1/logica_comp/#definicoes","text":"Aqui vai ficar apenas uma lista de todos os conceitos explicados nesse t\u00f3pico. Se algu\u00e9m tiver alguma d\u00favida sobre eles, recomendo ler a bibliografia indicada ou o projeto matem\u00e1tica. Conjunto Elemento Pertencimento e Igualdade Propriedades dos conjuntos Conjunto vazio Tipos de defini\u00e7\u00f5es de conjuntos (chaves, set builder notation, recurs\u00e3o, caracter\u00edstica)","title":"Defini\u00e7\u00f5es"},{"location":"nav/PUC/periodo1/logica_comp/#subconjuntos","text":"Nota\u00e7\u00e3o \\((A \\subset B)\\) Diagrama de Venn Conjunto Pot\u00eancia (Power Set) Sequ\u00eancias (lista de objetos ordenados)","title":"Subconjuntos"},{"location":"nav/PUC/periodo1/logica_comp/#operacoes-sobre-conjuntos","text":"Cardinalidade \\((|{1,5,3}| = 3)\\) Emparelhamento: Se X e Y possuem a mesmo cardinal, ao ligarmos cada elemento de X a um elemento de Y, dizemos que os conjuntos est\u00e3o emparelhados Produto Cartesiano: \\(A \\times B = \\{(a,b) | a \\in A \\land b \\in B\\}\\) Conjunto Universo/Universal Propriedades dos Conjuntos: Comutatividade Associatividade Distributividade Uni\u00e3o e Interse\u00e7\u00e3o com Universo Complemento Duplo Idempot\u00eancia Lei de DeMorgan Absor\u00e7\u00e3o Diferen\u00e7a de Conjuntos Uni\u00e3o e Interse\u00e7\u00e3o com Vazio Uni\u00e3o e Interse\u00e7\u00e3o com complemento Complementos de U e vazio Conjunto Disjuntos ( \\(A \\cap B = \\emptyset\\) ) Parti\u00e7\u00e3o ( \\(A = A_1 \\cup A_2 \\dots \\cup A_n\\) )","title":"Opera\u00e7\u00f5es sobre Conjuntos"},{"location":"nav/PUC/periodo1/logica_comp/#principios-da-logica-proposicional","text":"L\u00f3gica: Ramo da Filosofia, Matem\u00e1tica e Ci\u00eancia da Computa\u00e7\u00e3o que lida com infer\u00eancias v\u00e1lidas Hip\u00f3teses vedadeiras \\(\\rightarrow\\) Conclus\u00f5es Verdadeiras Asser\u00e7\u00e3o: Uma afirma\u00e7\u00e3o declarativa Proposi\u00e7\u00e3o: Uma asser\u00e7\u00e3o verdadeira ou falsa mas n\u00e3o ambos Vari\u00e1veis Proposicionais: \u00c9 a vari\u00e1vel atribu\u00edda \u00e0 alguma proposi\u00e7\u00e3o Proposi\u00e7\u00f5es Compostas: Proposi\u00e7\u00f5es ligadas por operadores l\u00f3gicos Tabela Verdade","title":"Princ\u00edpios da L\u00f3gica Proposicional"},{"location":"nav/PUC/periodo1/logica_comp/#conectivos-logicos","text":"Conectivos: Criam novas proposi\u00e7\u00f5es a partir de duas ou mais proposi\u00e7\u00f5es Nega\u00e7\u00e3o ( \\(\\neq\\) ) Conjun\u00e7\u00e3o ( \\(\\land\\) ) Disjun\u00e7\u00e3o ( \\(\\lor\\) ) Disjun\u00e7\u00e3o Exclusva ( \\(\\oplus\\) ) Condicional ou Implica\u00e7\u00e3o ( \\(p \\rightarrow q\\) ). Onde p \u00e9 a hip\u00f3tese e q \u00e9 a conclus\u00e3o Bicondicional ( \\(p \\rightarrow q \\land q \\rightarrow p\\) ) ou ( \\(p \\leftrightarrow q\\) ) Proposi\u00e7\u00f5es Compostas Ordem de Preced\u00eancia em Proposi\u00e7\u00f5es Compostas: Nega\u00e7\u00e3o Conjun\u00e7\u00e3o Disjun\u00e7\u00e3o Implica\u00e7\u00e3o Implica\u00e7\u00e3o Dupla","title":"Conectivos L\u00f3gicos"},{"location":"nav/PUC/periodo1/logica_comp/#tabela-verdade-e-equivalencia-logica","text":"Esse assunto eu realmente recomendo o material do projeto matem\u00e1tica no site Economia Mainstream. Tautologia: Uma proposi\u00e7\u00e3o que sempre ser\u00e1 verdadeira Contradi\u00e7\u00e3o ou Absurdo: Proposi\u00e7\u00e3o sempre falsa Conting\u00eancia: Proposi\u00e7\u00e3o cujo valor ser\u00e1 definido pelas suas vari\u00e1veis proposicionais Equival\u00eancia L\u00f3gica: Se duas proposi\u00e7\u00f5es possuem a mesma tabela verdade, elas s\u00e3o equivalentes L\u00f3gica Proposicional - Senten\u00e7as objetivas e n\u00e3o amb\u00edguas, circuitos l\u00f3gicos, automa\u00e7\u00e3o de processos e etc","title":"Tabela Verdade e Equival\u00eancia L\u00f3gica"},{"location":"nav/PUC/periodo1/logica_comp/#predicados-e-quantificadores","text":"A proposi\u00e7\u00e3o \\(x > 3\\) possui dois componentes: \\(x\\) \u00e9 chamado de sujeito \\(>3\\) \u00e9 chamado de predicado \\(P(x)\\) \u00e9 a nota\u00e7\u00e3o para uma declara\u00e7\u00e3o com predicado \\(P\\) e sujeito \\(x\\) A validade de uma proposi\u00e7\u00e3o desse tipo depende inteiramente do valor do sujeito Quantificador universal: \\(\\{ \\forall x \\in \\mathbb{R} : P(X)\\} = \\{P(x_1) \\land P(x_2) \\land \\dots\\}\\) Quantificador existencial: \\(\\{\\exists x \\in \\mathbb{R} : P(X)\\} = \\{P(x_1) \\lor P(x_2) \\lor \\dots\\}\\)","title":"Predicados e Quantificadores"},{"location":"nav/PUC/periodo1/logica_comp/#ligando-variaveis","text":"Uma vari\u00e1vel \u00e9 dita amarrada quando est\u00e1 atrelada a algum quantificador ou quando algum valor \u00e9 atribu\u00eddo a ela Se uma vari\u00e1vel n\u00e3o est\u00e1 amarrada, ent\u00e3o dizemos que ela est\u00e1 livre Um proposi\u00e7\u00e3o s\u00f3 existe se todas as suas vari\u00e1veis estiverem amarradas Quando atribu\u00edmos um quantificador a uma vari\u00e1veis, dizemos que estamos definindo o seu escopo \\(\\exists x (P(x) \\land Q(x)) \\lor \\forall x R(x)\\) : \u00c9 uma proposi\u00e7\u00e3o cujo primeiro escopo \u00e9 dado por \\(\\exists x\\) e o segundo \u00e9 dado por \\(\\forall x\\)","title":"Ligando Vari\u00e1veis"},{"location":"nav/PUC/periodo1/logica_comp/#negacoes","text":"\\(\\neg \\forall P(x) = \\exists x \\neg P(x)\\) \\(\\neg \\exists x Q(x) = \\forall x \\neg Q(x)\\)","title":"Nega\u00e7\u00f5es"},{"location":"nav/PUC/periodo1/logica_comp/#pensamento-analitico","text":"","title":"Pensamento Anal\u00edtico"},{"location":"nav/PUC/periodo1/logica_comp/#provas-de-teoremas","text":"Um teorema \u00e9 uma declara\u00e7\u00e3o em que pode-se demonstrar a sua validade de maneira l\u00f3gica. Esse processo \u00e9 chamado de prova e obedece aos construdos l\u00f3gicos que aprendemos na primeira parte desse microfundamento. Sempre que temos um teorema, podemos reduzir sua estrutura em dois componentes: Sua hip\u00f3tese ( \\(p\\) ) e sua conclus\u00e3o ( \\(q\\) ). A prova do teorema \u00e9 justamente a comprova\u00e7\u00e3o que, a partir da hip\u00f3tese, podemos chegar na conclus\u00e3o proposta. A habilidade de comprovar teoremas \u00e9 a real linguagem da matem\u00e1tica. Requer muita criatividade, l\u00f3gica e capacidade de ser claro na exposi\u00e7\u00e3o dos argumentos. A constru\u00e7\u00e3o de provas matem\u00e1ticas deve ter um conjunto de ferramentas que podemos elencar: Axiomas/Postulados Teoremas j\u00e1 provados Hip\u00f3teses Proposi\u00e7\u00f5es derivadas as anteriores segundo as regras de infer\u00eancia","title":"Provas de Teoremas"},{"location":"nav/PUC/periodo1/logica_comp/#regras-de-inferencia","text":"as regras de infer\u00eancia s\u00e3o as regras que garantem a obten\u00e7\u00e3o de novas informa\u00e7\u00f5es a partir de informa\u00e7\u00f5es anteriores e, simultaneamente, o respeito \u00e0s regras l\u00f3gicas. O modus ponens (modo de afirmar) \u00e9 a regra de infer\u00eancia fundamental. Sua l\u00f3gica \u00e9 a seguinte: Data a tautologia \\((p \\land (p \\rightarrow q)) \\rightarrow q\\) Se \\(p\\) for verdade, ent\u00e3o, a tautologia nos diz que ser\u00e1 verdade que \\(p \\rightarrow q\\) O que por fim, nos garante que \\(q\\) seja o resultado alcan\u00e7ado com a verdade de \\(p\\) A escrita desse argumento \u00e9 com a coloca\u00e7\u00e3o das verdades na parte de cima de uma linha horizontal e das conclus\u00f5es na parte de baixo. \\(p\\) \\(p \\rightarrow q\\) \\(\\therefore q\\) Esse \" \\(\\therefore\\) \" significa \"portanto\". Al\u00e9m da regra fundamental, n\u00f3s temos uma grande quantidade de outras regras importantes para constru\u00e7\u00e3o de provas de teoremas. Abaixo podemos ver uma tabela com v\u00e1rias delas. Tautologia Nome \\(p \\rightarrow (p \\lor q)\\) Adi\u00e7\u00e3o \\((p \\land q) \\rightarrow p\\) Simplifica\u00e7\u00e3o \\(((p) \\land (q)) \\rightarrow (p \\land q)\\) Conjun\u00e7\u00e3o \\([p \\land (p \\rightarrow q)] \\rightarrow q\\) Modus Ponens \\([\\neg q \\land (p \\rightarrow q)] \\rightarrow \\neg p\\) Modus Tollens \\([(p \\rightarrow q) \\land (q \\rightarrow r)] \\rightarrow (p \\rightarrow r)\\) Silogismo hipot\u00e9tico \\([(p \\lor q) \\land \\neg p] \\rightarrow q\\) Silogismo disjuntivo \\([(p \\lor q) \\land (\\neg p \\lor r)]\\) Resolu\u00e7\u00e3o","title":"Regras de Infer\u00eancia"},{"location":"nav/PUC/periodo1/logica_comp/#argumentos-validos","text":"Na l\u00f3gica proposicional, um argumento \u00e9 dito valido se sempre que as hip\u00f3teses forem verdadeiras, a conclus\u00e3o ser\u00e1, obrigatoriamente, verdadeira. Em nota\u00e7\u00e3o formal dizemos que \\(p_1 \\land \\dots \\land p_n \\rightarrow q\\) A demonstra\u00e7\u00e3o da validade de um argumento depende de como as hip\u00f3teses se conectam com as conclus\u00f5es sempre de maneira l\u00f3gica segundo o correto uso dos conectivos l\u00f3gicos j\u00e1 estudados. Em tese, a constru\u00e7\u00e3o de uma tabela verdade \u00e9 sempre poss\u00edvel para um n\u00famero arbitr\u00e1rio de hip\u00f3teses, o problema disso, \u00e9 que o tamanho dessa tabela cresce na raz\u00e3o de \\(2^n\\) sendo \\(n\\) a quantidade de hip\u00f3teses. Para superarmos esse problema, fazemos grande uso das regras de infer\u00eancia. Uma premissa falsa aplicada a uma argumenta\u00e7\u00e3o logicamente correta gera conclus\u00f5es falsas. Ent\u00e3o a validade das premissas tamb\u00e9m pode ser um motivo de cuidado na hora de construirmos teoremas. Uma fal\u00e1cia \u00e9 um tipo de erro argumentativo que, \u00e0 primeira vista, at\u00e9 se parece com um argumento v\u00e1lido, mas possui algum erro na sua constru\u00e7\u00e3o. Um exemplo \u00e9 a fal\u00e1cia da afirma\u00e7\u00e3o da conclus\u00e3o que pode ser expressa como \\([(p \\rightarrow q) \\land q] \\rightarrow p\\) . Essa express\u00e3o \u00e9 falsa quando \\(p\\) \u00e9 falso e \\(q\\) verdadeiro. Um exemplo em linguagem natural dessa fal\u00e1cia \u00e9 \" \\(p \\rightarrow q\\) : Quem resolve todos os exerc\u00edcios aprende. \\(q\\) : Voc\u00ea aprendeu. Logo, \\(p\\) : voc\u00ea resolveu todos os exerc\u00edcios\". Veja que, se algu\u00e9m aprender (o que torna \\(q\\) verdadeiro) mas n\u00e3o fizer todos os exerc\u00edcios (tornando \\(p\\) falso) quebra a linha de argumenta\u00e7\u00e3o e torna essa proposi\u00e7\u00e3o falsa. Outra fal\u00e1cia conhecida \u00e9 a nega\u00e7\u00e3o da hip\u00f3tese . Podemos construir ela como sendo \\([(p \\rightarrow q) \\land \\neg p] \\rightarrow \\neg q\\) . A primeira vista, parece certo, mas n\u00e3o \u00e9.","title":"Argumentos V\u00e1lidos"},{"location":"nav/PUC/periodo1/logica_comp/#regras-de-inferencia_1","text":"Coment\u00e1rio: Eu achei que essa parte foi um pouco negligenciada no curso. Devo voltar aqui para expandir esse conte\u00fado mais tarde. Por enquanto, temos essa tabela de refer\u00eancia. Regra de Infer\u00eancia Nome Nota \\(\\forall x P(x) \\rightarrow P(c)\\) Intancia\u00e7\u00e3o Universal c espec\u00edfico \\(P(c) \\rightarrow \\forall x P(x)\\) Generaliza\u00e7\u00e3o Universal c arbitr\u00e1rio \\(\\exists x P(x) \\rightarrow P(c)\\) Instancia\u00e7\u00e3o Existencial c espec\u00edfico e n\u00e3o conhecido \\(P(c) \\rightarrow \\exists x P(x)\\) Generaliza\u00e7\u00e3o Existencial c espec\u00edfico e conhecido","title":"Regras de Infer\u00eancia"},{"location":"nav/PUC/periodo1/logica_comp/#inducao-matematica","text":"A dedu\u00e7\u00e3o \u00e9 o processo de, a partir de premissas verdadeiras, determinar as conclus\u00f5es verdadeiras necessariamente oriundas dessas premissas. Ou seja, \u00e9 o processo de, partindo de um princ\u00edpio geral se chegar em um caso especial . O processo reverso \u00e9 chamado de indu\u00e7\u00e3o . Partir do caso espec\u00edfico para um princ\u00edpio anterior geral. A indu\u00e7\u00e3o pode ser usada para comprovar teoremas que se relacionam com um n\u00famero arbitr\u00e1rio de elementos (ou mesmo infinitos elementos). Basicamente, a demonstra\u00e7\u00e3o por indu\u00e7\u00e3o consiste em dois passos: Passo b\u00e1sico (provar para \\(P(n=1)\\) ) Passo indutivo (Provar que \\(P(k) \\implies P(k+1)\\) ) Temos que ter cuidado com o passo b\u00e1sico. Afirmar que \\(P(n=1)\\) \u00e9 verdadeiro n\u00e3o \u00e9 provar. Similarmente, no passo indutivo, tamb\u00e9m n\u00e3o podemos assumir que \\(P(k)\\) \u00e9 verdade sem tomar muito cuidado. O ideial \u00e9 que \\(P(k)\\) seja evidentemente verdadeira.","title":"Indu\u00e7\u00e3o Matem\u00e1tica"},{"location":"nav/PUC/periodo1/logica_comp/#inducao-forte","text":"Similar ao processo de prova por indu\u00e7\u00e3o simples. A indu\u00e7\u00e3o forte possui 2 passos: Provar que \\(P(n=1)\\) \u00e9 verdadeiro Provar que \\(P(1) \\land P(2) \\land \\dots \\land P(k) \\implies P(k+1)\\) Ao contr\u00e1rio do que o nome sugere, a indu\u00e7\u00e3o forte \u00e9 mais flex\u00edvel que a indu\u00e7\u00e3o simples. O material \u00e9 um pouco obtuso nesse tema, ent\u00e3o vamos ter que revisar essa se\u00e7\u00e3o posteriormente.","title":"Indu\u00e7\u00e3o Forte"},{"location":"nav/PUC/periodo1/logica_comp/#recursao","text":"As vezes precisamos lidar com sequ\u00eancias, conjuntos ou fun\u00e7\u00f5es que n\u00e3o s\u00e3o defin\u00edveis facilmente. Para conseguirmos um tipo \u00fatil de defini\u00e7\u00e3o, podemos usar um processo chamado de recurs\u00e3o em que definimos um objeto pela sua caracter\u00edstica de composi\u00e7\u00e3o. Para uma sequ\u00eancia definida recursivamente, podemos usar a indu\u00e7\u00e3o para provar proposi\u00e7\u00f5es que fa\u00e7am uso dela. Para um conjunto , primeiro definimos os elementos iniciais e depois fornecemos uma regra para constru\u00e7\u00e3o de novos elementos. Para demonstra\u00e7\u00f5es com conjuntos recursivos, usamos um m\u00e9todo de prova chamado indu\u00e7\u00e3o estrutural. Para uma fun\u00e7\u00e3o , primeiro definimos o passo b\u00e1sico e depois uma rega para encontrar o valor da fun\u00e7\u00e3o no seu dom\u00ednio definido. Um exemplo famoso disso s\u00e3o os n\u00famero de Fibonacci onde temos \\(f_0 = 0, f_1 = 1\\) e \\(f_n = f_{n-1} + f_{n-2} \\forall n = 2,3,4,\\dots\\) . Existe uma rela\u00e7\u00e3o entre a recurs\u00e3o e a indu\u00e7\u00e3o pois, geralmente, objetos constru\u00eddos recursivamente s\u00e3o demonstrados por meio de indu\u00e7\u00e3o matem\u00e1tica.","title":"Recurs\u00e3o"},{"location":"nav/PUC/periodo1/logica_comp/#especificacao-de-sistemas","text":"A especifica\u00e7\u00e3o de sistemas \u00e9 a capacidade de traduzir linguagem natural para linguagem l\u00f3gica.","title":"Especifica\u00e7\u00e3o de Sistemas"},{"location":"nav/PUC/periodo1/logica_comp/#bibliografia","text":"HUNTER, David J. Fundamentos de Matem\u00e1tica Discreta . Rio de Janeiro: LTC, 2011 ROSEN, Keneth H. Discrete Mathematics and its Applications . New York: McGraw-Hill, 2019","title":"Bibliografia"},{"location":"nav/PUC/periodo1/matematica_basica/","text":"hljs.initHighlightingOnLoad(); Como o escopo dessa mat\u00e9ria \u00e9 super b\u00e1sico. Eu nem vou me dar o trabalho de resumir. Se quiserem ver um material mais completo, podem conferir na Bibliografia ou no meu Projeto Matem\u00e1tica . Bibliografia GERSTING, Judith L. Fundamentos matem\u00e1ticos para a ci\u00eancia da computa\u00e7\u00e3o . 7.Rio de Janeiro LTC 2016 1 recurso online ISBN 9788521633303 HUNTER, David J. Fundamentos de matem\u00e1tica discreta . Rio de Janeiro LTC 2011 1 recurso online ISBN 9788521635246 LIMA, Diana Maia de. Matem\u00e1tica aplicada \u00e0 inform\u00e1tica . Porto Alegre Bookman 2015 1 recurso online ISBN 9788582603178 STEWART, James. C\u00e1lculo , v. 1. 8.ed. S\u00e3o Paulo (SP): Cengage Learning, 2017 E-book ISBN 9788522126859 MENEZES, Paulo Blauth. Aprendendo matem\u00e1tica discreta com exerc\u00edcios , v.19. Porto Alegre Bookman 2011 ISBN 9788577805105 ROSEN, Kenneth H. Matem\u00e1tica discreta e suas aplica\u00e7\u00f5es . Porto Alegre ArtMed 2010 ISBN 9788563308399 SIM\u00d5ES-PEREIRA, Jos\u00e9 Maunel dos Santos. Introdu\u00e7\u00e3o \u00e0 Matem\u00e1tica Combinat\u00f3ria . Editora Interci\u00cancia 338 ISBN 9788571932920 \u00c1VILA, Geraldo; ARA\u00daJO, Luis Cl\u00e1udio Lopes de. C\u00e1lculo: ilustrado, pr\u00e1tico e descomplicado . Rio de Janeiro, RJ: LTC - Livros Tecnicos e Cientificos, 2012. E-book ISBN 978-85-216-2128- GUIDORIZZI, Hamilton Luiz. Um curso de c\u00e1lculo, v. 1. 6 . Rio de Janeiro LTC 2018 1 recurso online ISBN 9788521635574","title":"Matem\u00e1tica B\u00e1sica"},{"location":"nav/PUC/periodo1/matematica_basica/#bibliografia","text":"GERSTING, Judith L. Fundamentos matem\u00e1ticos para a ci\u00eancia da computa\u00e7\u00e3o . 7.Rio de Janeiro LTC 2016 1 recurso online ISBN 9788521633303 HUNTER, David J. Fundamentos de matem\u00e1tica discreta . Rio de Janeiro LTC 2011 1 recurso online ISBN 9788521635246 LIMA, Diana Maia de. Matem\u00e1tica aplicada \u00e0 inform\u00e1tica . Porto Alegre Bookman 2015 1 recurso online ISBN 9788582603178 STEWART, James. C\u00e1lculo , v. 1. 8.ed. S\u00e3o Paulo (SP): Cengage Learning, 2017 E-book ISBN 9788522126859 MENEZES, Paulo Blauth. Aprendendo matem\u00e1tica discreta com exerc\u00edcios , v.19. Porto Alegre Bookman 2011 ISBN 9788577805105 ROSEN, Kenneth H. Matem\u00e1tica discreta e suas aplica\u00e7\u00f5es . Porto Alegre ArtMed 2010 ISBN 9788563308399 SIM\u00d5ES-PEREIRA, Jos\u00e9 Maunel dos Santos. Introdu\u00e7\u00e3o \u00e0 Matem\u00e1tica Combinat\u00f3ria . Editora Interci\u00cancia 338 ISBN 9788571932920 \u00c1VILA, Geraldo; ARA\u00daJO, Luis Cl\u00e1udio Lopes de. C\u00e1lculo: ilustrado, pr\u00e1tico e descomplicado . Rio de Janeiro, RJ: LTC - Livros Tecnicos e Cientificos, 2012. E-book ISBN 978-85-216-2128- GUIDORIZZI, Hamilton Luiz. Um curso de c\u00e1lculo, v. 1. 6 . Rio de Janeiro LTC 2018 1 recurso online ISBN 9788521635574","title":"Bibliografia"},{"location":"nav/PUC/periodo1/organizacao_computadores/","text":"hljs.initHighlightingOnLoad(); Assuntos Fundamentos de Organiza\u00e7\u00e3o de Computadores Representa\u00e7\u00e3o de Dados e Sistemas Bin\u00e1rio Conceitos de L\u00f3gica Digital Circuitos L\u00f3gicos Digitais B\u00e1sicos Introdu\u00e7\u00e3o \u00e0 Organiza\u00e7\u00e3o de Computadores Unidade Central de Processamento - UCP Mem\u00f3ria Entrada e Sa\u00edda Arquitetura de Computadores Arquiteturas RISC e CISC Arquitetura do Conjunto de Instru\u00e7\u00f5es: Exemplo do MIPS Linguagem de Montagem Conceito de Pipeline de Instru\u00e7\u00f5es Paralelismo em N\u00edvel de Instru\u00e7\u00f5es e Processadores Bibliografia Fundamentos de Organiza\u00e7\u00e3o de Computadores Representa\u00e7\u00e3o de Dados e Sistemas Bin\u00e1rio Compreendendo o Sistema Decimal Os componentes eletr\u00f4nicos digitais s\u00f3 permitem dois estados de tens\u00e3o: 0 e 1. Isso implica que toda informa\u00e7\u00e3o manipulada pelos computadores \u00e9 representado em um sistema de numera\u00e7\u00e3o bin\u00e1ria que \u00e9 correlacionada com o n\u00edvel de tens\u00e3o nos componentes da m\u00e1quina. O nosso modelo de sistema num\u00e9rico usual \u00e9 o decimal (tamb\u00e9m chamado base 10). Ele \u00e9 um sistema posicional porque o peso do d\u00edgito \u00e9 dependente da posi\u00e7\u00e3o dele no n\u00famero. Por exemplo: \\(38_{10} = 3 \\times 10^1 + 8 \\times 10^0 = 30 + 8\\) \\(17,25_{10} = 10 \\times 10^1 + 7 \\times 10^0 + 2 \\times 10^{-1} + 5 \\times 10^{-2}\\) O subscrito indica o tipo de base usado. Uma caracter\u00edstica dos sistemas posicionais \u00e9 que o d\u00edgito mais a esquerda ser\u00e1 o mais significativa (MSB - Most Significant Bit) e os \u00e0 sua direita ser\u00e3o os LSB (Less Significant Bit). Conceitos de L\u00f3gica Digital Computadores s\u00e3o formados por componentes eletr\u00f4nicos. Os transistores e os diodos s\u00e3o usados para a constru\u00e7\u00e3o das portas l\u00f3gicas que nos permitem, atrav\u00e9s de circuitos el\u00e9tricos, replicar os operadores l\u00f3gicos da l\u00f3gica usados na algebra booleana. Assumindo valores em dois est\u00e1gios: 0 (de 0 a 0,6 volts) e 1 (entre 3,6 e 5 volts). Uma porta l\u00f3gica nada mais \u00e9 que um circuito que recebe sinais de entrada e, conforme a sua configura\u00e7\u00e3o, produz um sinal de sa\u00edda cujo valor \u00e9 dependente da entrada. Podemos categorizar as portas l\u00f3gicas em 3 grupos: Portas L\u00f3gicas B\u00e1sicas Opera\u00e7\u00e3o L\u00f3gica - AND Opera\u00e7\u00e3o L\u00f3gica - OR Opera\u00e7\u00e3o Inversora - NOT Fun\u00e7\u00f5es e Portas L\u00f3gicas Compostas Opera\u00e7\u00e3o L\u00f3gica - NAND (NOT-AND) Opera\u00e7\u00e3o L\u00f3gica - NOR (NOT-OR) Opera\u00e7\u00e3o L\u00f3gica - XOR (OR-EXCLUSIVA) Express\u00f5es L\u00f3gicas e Circuitos Digitais Eu j\u00e1 trabalhei bem a fundo a l\u00f3gica matem\u00e1tica no meu curso do Projeto Matem\u00e1tica. Voc\u00ea pode conferir no cap\u00edtulo 02 nesse link . A \u00fanica diferen\u00e7a \u00e9 que quando l\u00e1 for TRUE ou VERDADE, aqui ser\u00e1 1 e, claramente, quando l\u00e1 for FALSE ou FALSO, aqui ser\u00e1 0. Como nosso estudo nesse manual \u00e9 mais focado em An\u00e1lise e Desenvolvimento de Sistemas, vamos manter as anota\u00e7\u00f5es referentes \u00e0 transposi\u00e7\u00e3o da algebra booleana para os circuitos eletr\u00f4nicos. Mas caso haja alguma d\u00favida, a leitura do material acima \u00e9 recomendada. Operadores B\u00e1sicos Operadores Compostos Express\u00f5es L\u00f3gicas e Circuitos Podemos usar os operadores l\u00f3gicos para criar express\u00f5es do tipo $ Y = (A+B).C $ que pode ser lida como \"Y \u00e9 igual a (A ou B) e C\" 1 . Podemos tamb\u00e9m usar os diagramas de circuitos para representar exatamente essa mesma opra\u00e7\u00e3o l\u00f3gica. Para entender como cada input produz um resultado \u00e9 necess\u00e1rio usarmos uma tabela verdade que nos mostra todos os casos entre os inputs e os outputs. Desafio: Vamos olhar a tabela verdade abaixo: A B C Y 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 1 0 0 1 1 0 1 1 1 1 0 1 1 1 1 0 Qual fun\u00e7\u00e3o l\u00f3gica produz o resultado compat\u00edvel para a coluna Y? A resposta est\u00e1 na observa\u00e7\u00e3o cuidadosa dos valores. Podemos ver que sempre que tivermos algum valor 0 como input, o resultado ser\u00e1 1. Como existe essa altern\u00e2ncia, podemos ver que o operador de nega\u00e7\u00e3o est\u00e1 sendo usado. Al\u00e9m disso, se tiv\u00e9ssemos o operador \"ou\" aliado a um operador de nega\u00e7\u00e3o, na linha \\((0,0,1)\\) ter\u00edamos o resultado 1 que, ao ser negado, retornaria um resultado 0. Portanto, s\u00f3 nos resta acreditar que temos uma situa\u00e7\u00e3o de opera\u00e7\u00f5es do tipo \"e\" e de nega\u00e7\u00e3o. A essa estrutura damos o nome de \"NOT-AND\" ou \"NAND\". Em temos l\u00f3gicos formais, temos a express\u00e3o \\(\\neg (A \\land B \\land C)\\) e na nota\u00e7\u00e3o que usamos no curso, temos um \\(\\overline{(A . B . C)}\\) . Circuitos L\u00f3gicos Digitais B\u00e1sicos Com o uso das portas l\u00f3gicas, n\u00f3s podemos construir circuitos mais complexos e que desempenham fun\u00e7\u00f5es importantes para o funcionamento de um computador. Podemos agrupar esses circuitos (tamb\u00e9m chamados de m\u00f3dulos) em dois grupos: Circuitos L\u00f3gicos Combinacionais Multiplexadores Demultiplexadores Codificadores Decodificadores Circuitos Sequenciais Registradores Contadores Circuitos Combinacionais Os circuitos combinacionais s\u00e3o constru\u00eddos de maneira que o resultado obtido por ele \u00e9 condiconado ao input atual nas portas l\u00f3gicas que o comp\u00f5es. Para analizarmos um circuito composto de \\(n\\) portas l\u00f3gicas e \\(m\\) sa\u00eddas, podemos usar a tabela verdade, s\u00edmbolos gr\u00e1ficos no padr\u00e3o das portas que aprendemos antes e equa\u00e7\u00f5es booleanas que convertem a l\u00f3gica eletr\u00f4nica para a matem\u00e1tica. Observemos a tabela verdade abaixo: A B C F 0 0 0 0 0 0 1 0 0 1 0 1 0 1 1 1 1 0 0 0 1 0 1 0 1 1 0 1 1 1 1 0 Para criar a representa\u00e7\u00e3o do circuito l\u00f3gico que corresponde a coluna F, basta observarmos as condi\u00e7\u00f5es necess\u00e1rias para o valor 1 na referida coluna. Temos 3 eventos em que isso acontece. Podemos demonstrar essa rela\u00e7\u00e3o pode meio da seguinte equa\u00e7\u00e3o boolena: \\(F = \\overline{A} B \\overline{C} + \\overline{A} B C + A B \\overline{C}\\) A essa primeira maneira de escrita, damos o nome de Soma de Produtos ou Sum Of Products (SOP) . Uma outra forma de representarmos o circuito F \u00e9 se focarmos na negativa das condi\u00e7\u00f5es que retornam o valor 0. Desse modo, tamb\u00e9m podemos representar o circuito da seguite maneira: \\(F = \\overline{\\overline{A B C}} . \\overline{\\overline{A B} C} . \\overline{A \\overline{B C}} . \\overline{A \\overline{B} C} . \\overline{A B C}\\) Podemos visualizar essa condi\u00e7\u00e3o no diagrama abaixo. Ao aplicarmos o teorema de DeMorgan \\((\\overline{X1 . X2}) = \\overline{X1} + \\overline{X2}\\) nessa segunda vers\u00e3o podemos desenvolve-la at\u00e9 chegarmos em uma terceira configura\u00e7\u00e3o: \\(F = (A + B + C) . (A + B + \\overline{C}) . (\\overline{A} + B + C) . (\\overline{A} + B + \\overline{C}) . (\\overline{A} + \\overline{B} + \\overline{C})\\) Que chamamos de Produto das Somas ou Product of Sums (POS) . Coment\u00e1rio: O material do microfundamento \u00e9 consideravelmente reduzido nessa parte. Mas como estou perto da prova enquanto escrevo essa parte, terei que, por agora, reduzir a profundidade e seguir como \u00e9 dado pelo material da aula. Em tempo oportuno eu volto aqui e expando essa se\u00e7\u00e3o. Agora que entendemos um pouco melhor sobre cisrcuitos l\u00f3gicos combinacionais, vamos aprender mais sobre alguns circuitos desse tipo. Os multiplexadores s\u00e3o circuitos combinacioinais que selecionam \\(n\\) entradas a uma \u00fanica sa\u00edda por meio de suas linhas de sele\u00e7\u00e3o. Para cada duas entradas, ser\u00e3o necess\u00e1rias 1 linha de sele\u00e7\u00e3o. Os demultiplexadores s\u00e3o o oposto, ligando uma \u00fanica entrada para \\(n\\) sa\u00eddas. Um codificador normalmente s\u00f3 permite que uma das entradas esteja ativa a cada instante e sua fun\u00e7\u00e3o \u00e9 converter os valores de entrada em um n\u00famero bin\u00e1rio. Similarmente, um decodificador recebe um bin\u00e1rio como entrada e a sa\u00edda ser\u00e1 alguma linha previamente definida. Circuitos Sequenciais Por outro lado, os circuitos sequenciais usam elementos armazenadores chamados latches e flip-flops e possuem a capacidade de armazenamento de informa\u00e7\u00f5es. Um latch \u00e9 um circuito capaz de armazenar o valor de 1 bit e pode ser constru\u00eddo com 2 portas NOR ou NAND como na imagem abaixo. A entrada S \u00e9 chamada de Set e atribui um valor ao sistema. A porta R \u00e9 chamada de Reset e retorna o valor 0 para o nosso circuito. Se ambos s\u00e3o 0, o nosso sistema retorna um status inalterado memorizando o estado anterior. Com o latch podemos usar o controle de tempo (chamado de clock ) para controlarmos o comportamento oscilante de alguns circuitos sequenciais mais complexos. Os circuitos sequenciais s\u00e3o criados com o uso dos latchs e sinais de controle por clock. S\u00e3o muito relevantes para os computadores pois permitem a capacidade de memoriza\u00e7\u00e3o de informa\u00e7\u00e3o na mem\u00f3ria de trabalho. Aqui, n\u00e3o estamos falando dos discos r\u00edgidos ou mem\u00f3ria flash. Existem dois tipos de circuitos sequenciais muito importantes para a estrutura dos computadores modernos. O primeiro deles \u00e9 o registradores que s\u00e3o usados para memorizar temporariamente informa\u00e7\u00f5es em mem\u00f3ria maiores que 1 bit (as de 1 bit podem ser armazenadas diretamente pelo latch). Os contadores usam o clock para a contagem da passagem do tempo. Introdu\u00e7\u00e3o \u00e0 Organiza\u00e7\u00e3o de Computadores A medida que os computadores foram evoluindo, a representa\u00e7\u00e3o das suas partes por meio das portas digitais se tornou invi\u00e1vel devido ao n\u00famero exponencial de portas que faziam parte de cada nova gera\u00e7\u00e3o de computadores. Desse modo, a representa\u00e7\u00e3o por meio da hierarquia de subsistemas se tornou mais adequada. O objetivo \u00e9 conseguirmos compreender como cada subsistema se interliga com os demais e desempenha fun\u00e7\u00f5es espec\u00edficas para o correto funcionamento do equipamento. Para prosseguirmos, \u00e9 necess\u00e1rio definirmos o que seria esse \"correto funcionamento\" dos computadores. Em suma, podemos afirmar que um computador deve realizar 4 fun\u00e7\u00f5es: Processamento de Dados - Produzir nova informa\u00e7\u00e3o a partir de informa\u00e7\u00e3o anterior Armazenamento de Dados - Capacidade de memorizar tanto no prazo de trabalho quanto no longo prazo Transfer\u00eancia de Dados - Envio das informa\u00e7\u00f5es por meio dos dispositivos de entrada e sa\u00edda Controle - Para a garantia das 3 fun\u00e7\u00f5es acima Para realizar esses trabalhos, podemos dividir o computador moderno nos seguintes subsistemas: Unidade Central de Processamento (CPU) - Que faz o controle de toda a opera\u00e7\u00e3o do computador Mem\u00f3ria Principal - Conectada por meio de um barramento ao CPU, armazena os dados necess\u00e1rios para o CPU realizar as opera\u00e7\u00f5es desejadas Entrada e Sa\u00edda de Dados - S\u00e3o os elementos que inputam informa\u00e7\u00f5es ao CPU e retiram dele os resultados para o mundo exterior Barramento - Meio f\u00edsico de comunica\u00e7\u00e3o entre os subsistemas do computador Organiza\u00e7\u00e3o x Arquitetura Embora esses conceitos sejam muito parecidos. Podemos definir a organiza\u00e7\u00e3o de computadores como a descri\u00e7\u00e3o de computadores por meio dos seus subsistemas, suas fun\u00e7\u00f5es e interconex\u00f5es. Por sua vez, a arquitetura de computadores est\u00e1 relacionada \u00e0 conex\u00e3o entre o projeto de computador e a execu\u00e7\u00e3o dos programas, ou seja, \u00e9 o estudo de como uma mudan\u00e7a no design de um computador impacta na execu\u00e7\u00e3o dos programas. Uma mesma arquitetura pode ser implementada em v\u00e1rias organiza\u00e7\u00f5es poss\u00edveis. A arquitetura tem foco na abstra\u00e7\u00e3o do computador e a organiza\u00e7\u00e3o tem foco na implementa\u00e7\u00e3o. Para facilitar a diferencia\u00e7\u00e3o dos termos, vamos elencar alguns t\u00f3picos de estudo dessas \u00e1reas. Organiza\u00e7\u00e3o de Computadores Implementa\u00e7\u00e3o de hardware Implementa\u00e7\u00e3o de sistemas de controle que transmitem a execu\u00e7\u00e3o das instru\u00e7\u00f5es Comunica\u00e7\u00e3o entre o computador e seus perif\u00e9ricos Tecnologia usada pra a mem\u00f3ria Arquitetura de Computadores Conjunto de instru\u00e7\u00f5es que a CPU processa O formato das instru\u00e7\u00f5es Maneiras de endere\u00e7amento de mem\u00f3ria Representa\u00e7\u00e3o dos tipos de dados usados nas instru\u00e7\u00f5es Organiza\u00e7\u00e3o B\u00e1sica de um Computador Digital - Modelo de Von Neumann Antigamente, os programas executados pelos computadores eram feitos por meio do arranjo f\u00edsico dos seus componentes. A programa\u00e7\u00e3o era feita diretamente no hardware. contudo, uma nova arquitetura foi necess\u00e1ria porque se buscava a constru\u00e7\u00e3o de um mecanismo que permitisse, ao mesmo tempo, o salvamento tanto dos dados quanto das instru\u00e7\u00f5es necess\u00e1rias para o processamento dos mesmo. Foi nesse contexto que a arquitetura de Von Neumann foi constru\u00edda. Ela \u00e9 constitu\u00edda de, basicamente, 3 componentes principais interligados por um barramento: CPU Mem\u00f3ria Principal Dispositivos de Entrada e sa\u00edda Unidade Central de Processamento - UCP Na se\u00e7\u00e3o passada, n\u00f3s vimos que a arquitetura de Von Neumann possui o CPU (tamb\u00e9m chamado de processador) como um dos seus componentes. Durante um ciclo de execu\u00e7\u00e3o , o processador deve buscar as instru\u00e7\u00f5es na mem\u00f3ria, decodific\u00e1-la e execut\u00e1-la. Para entender melhor como ele faz tudo isso, podemos subdividi-lo nas seguintes partes: Unidade de Controle - \u00c9 quem faz a busca na mem\u00f3ria e permite a execu\u00e7\u00e3o das instru\u00e7\u00f5es (programas) Unidade L\u00f3gica e Aritm\u00e9tica (ULA) - Executa as instru\u00e7\u00f5es enviadas pela unidade de controle referentes \u00e0s opera\u00e7\u00f5es l\u00f3gicas e aritm\u00e9ticas Registradores - S\u00e3o componentes de mem\u00f3ria de extrema velocidade de leitura mas baixa disponibilidade. Essa mem\u00f3ria \u00e9 usada temporariamente para auxiliar o ciclo de execu\u00e7\u00e3o Ciclo de Execu\u00e7\u00e3o de Instru\u00e7\u00f5es As instru\u00e7\u00f5es sempre s\u00e3o executadas sequencialmente. Quem controle o fluxo de qual instru\u00e7\u00e3o ser\u00e1 executada a cada ciclo \u00e9 um registrador chamado controlador de programas (PC) . Ele armazena o endere\u00e7o da pr\u00f3xima instru\u00e7\u00e3o a ser executada e, a cada ciclo, \u00e9 reescrito com o novo endere\u00e7o de execu\u00e7\u00e3o. O ciclo de execu\u00e7\u00e3o \u00e9 composto seguintes etapas: Busca da pr\u00f3xima execu\u00e7\u00e3o - O PC indica o endere\u00e7o na mem\u00f3ria da instru\u00e7\u00e3o a ser executada. Esse endere\u00e7o \u00e9 carregado em outro registrador chamado registrador de instru\u00e7\u00f5es (RI) e ent\u00e3o o PC recebe o endere\u00e7o da pr\u00f3xima instru\u00e7\u00e3o Decodifica\u00e7\u00e3o da instru\u00e7\u00e3o - o endere\u00e7o armazenado no RI (tamb\u00e9m chamado de opcode ) \u00e9 lido pela unidade de controle e o comando \u00e0 ULA \u00e9 feito para execu\u00e7\u00e3o da instru\u00e7\u00e3o Busca dos operandos - A unidade de controle busca todos os dados necess\u00e1rios \u00e0 execu\u00e7\u00e3o da instru\u00e7\u00e3o por meio do envio de sinais atrav\u00e9s do barramento 2 Execu\u00e7\u00e3o da Instru\u00e7\u00e3o - A ULA, de posse dos dados, faz a execu\u00e7\u00e3o da instru\u00e7\u00e3o lendo os operandos carregados em mem\u00f3ria pela unidade de controle Repeti\u00e7\u00e3o do processo Mem\u00f3ria Idealmente, a mem\u00f3ria deveria ser super r\u00e1pida e abundante. O problema \u00e9 que existe um trade-off entre essas duas qualidades. Quanto mais r\u00e1pida \u00e9 a leitura, mais cara \u00e9 a mem\u00f3ria. Esse \u00e9 o motivo de, na arquitetura dos computadores atuais, existirem diversos tipos de mem\u00f3ria. A ordem de velocidade \u00e9 dada por: Registradores Memoria Cache Memoria Principal Memoria Secund\u00e1ria As primeiras s\u00e3o as mem\u00f3rias mais r\u00e1pidas e caras. As demais, est\u00e3o as mais lentas e baratas. A mem\u00f3ria principal \u00e9 a mem\u00f3ria RAM e ROM dos nossos computadores. Dela, a CPU l\u00ea as instru\u00e7\u00f5es escritas em alguma linguagem de programa\u00e7\u00e3o e \u00e9 nela que o processador salva o resultado das opera\u00e7\u00f5es. Para entender como a mem\u00f3ria principal e funciona, basta pensarmos em um conjunto de pequenas c\u00e9lulas (posi\u00e7\u00f5es) de armazenamento de informa\u00e7\u00e3o. Todas as c\u00e9lulas da mem\u00f3ria possuem o mesmo tamanho (medido em quantidade de bits). Os endere\u00e7os s\u00e3o os identificadores da posi\u00e7\u00e3o f\u00edsica de cada c\u00e9lula no material de armazenamento (disco magn\u00e9tico ou chip). Se soubermos a quantidade de bits em cada c\u00e9lula e a quantidade de c\u00e9lulas, saberemos a capacidade de armazenamento do dispositivo por meio do c\u00e1lculo \\(\\textrm{Capacidade} = 2^{ \\textrm{Numero de Celulas}} * \\textrm{Numero de bits por celula}\\) A mem\u00f3ria principal pode ser divida em mem\u00f3ria RAM - Random Access Memory , que pode ser lida e apagada a qualquer momento mas n\u00e3o \u00e9 capaz de armazenar os dados ap\u00f3s o desligamento do computador, e a mem\u00f3ria ROM - Read Only Memory que n\u00e3o pode ser alterada na execu\u00e7\u00e3o do programa mas se mant\u00e9m ap\u00f3s o desligamento do computador. Coment\u00e1rio: A mem\u00f3ria RAM ainda \u00e9 subdividida em outras mem\u00f3rias mas veremos isso em uma atualiza\u00e7\u00e3o desse curso. A mem\u00f3ria secund\u00e1ria \u00e9 o HD e o SSD dos nossos computadores. O processador s\u00f3 faz uso dela por meio de dispositivos de entrada e sa\u00edda. A vantagem dela \u00e9 o seu pre\u00e7o que \u00e9 infinitamente menor que as mem\u00f3rias mais r\u00e1pidas. Entrada e Sa\u00edda S\u00e3o os componentes que permitem os usu\u00e1rios acessar e visualizar os resultados dos ciclos de processamento. E/S de entrada - Teclado, Mouse, Scanner ... E/S de sa\u00edda - Impressoras, Monitores, Caixas de Som ... Interface de E/S - S\u00e3o os programas que intermediam a comunica\u00e7\u00e3o entre o CPU e o dispositivos Existem alguns tipos de comunica\u00e7\u00f5es entre os dispositivos de Entrada e Sa\u00edda mas n\u00f3s vamos parar por aqui. Arquitetura de Computadores Arquiteturas RISC e CISC Como o processador exerce um papel central na atividade de um computador moderno, n\u00e3o \u00e9 nada estranho se preocupar muito sobre como ele \u00e9 capaz de compreender as instru\u00e7\u00f5es e executar. Na verdade, existe um campo espec\u00edfico de pesquisa chamado arquitetura de instru\u00e7\u00f5es do processador . Esse campo estuda o formato das instru\u00e7\u00f5es, os c\u00f3digos de opera\u00e7\u00e3o, os registradores, a mem\u00f3ria de dados e outros t\u00f3picos relacionados a atividade desse componente. Na primeira gera\u00e7\u00e3o de processadores, o conjunto de opera\u00e7\u00f5es era reduzido para simplifica\u00e7\u00e3o da constru\u00e7\u00e3o desse componente. Na d\u00e9cada de 60, a quantidade de opera\u00e7\u00f5es aumentou junto com a complexidade dos processadores. A essa fam\u00edlia d\u00e1-se o nome de CISC - Complex Instruction Set Computer . Os computadores da fam\u00edlia CISC possuem uma maior quantidade de instru\u00e7\u00f5es, contudo, o seu ciclo de processamento \u00e9 mais lento. O exemplo dessa fam\u00edlia de processadores \u00e9 a Intel: 286, 386, 486 e Pentium. No final da d\u00e9cada de 80, os processadores com um conjunto reduzido de instru\u00e7\u00f5es voltaram a serem utilizados sob o nome de RISC - Reduced Instruction Set Computer . A ideia era a de melhorar o desempenho dos processadores via simplifica\u00e7\u00e3o e ganho de velocidade. Os exemplos s\u00e3o os processadores MIPS e a arquitetura ARM (muito usados nos smartphones). Hoje em dia os processadores possuem ambas as abordagens implementadas simultaneamente. Arquitetura do Conjunto de Instru\u00e7\u00f5es: Exemplo do MIPS No t\u00f3pico anterior, nosso foco foi na hist\u00f3ria dos desenhos f\u00edsicos dos processadores. Agora, nossa aten\u00e7\u00e3o ser\u00e1 voltada para a arquitetura das instru\u00e7\u00f5es, ou seja, as opera\u00e7\u00f5es nativas que os processadores j\u00e1 vem de f\u00e1brica capazes de fazer. Diferente da arquitetura f\u00edsica, o mercado acabou por convergir para um padr\u00e3o relativamente comum de arquitetura de instru\u00e7\u00f5es b\u00e1sicas. Como exemplo, o material cita o Microprocessor Without Interlocked Pipeline Stages - MIPS . Desenvolvido na d\u00e9cada de 80, o MIPS foi implementado mesmo antes da RISC ser criada. Hoje em dia, podemo encontrar essa arquitetura de opare\u00e7\u00f5es em equipamentos da Cisco, Nintendo, Toshiba, Sony e etc. A arquitetura do conjunto de instru\u00e7\u00f5es define os tipos de instru\u00e7\u00f5es execut\u00e1veis pelo processador, o formato de cada instru\u00e7\u00e3o, o tamanho em bits delas, o m\u00e9todos de endere\u00e7amento e outras taregas importantes para o funcionamento desse componente. Podemos elencar algumas classes de instru\u00e7\u00f5es que o MIPS 32 bits \u00e9 capaz de executar: Opera\u00e7\u00f5es Aritm\u00e9ticas Opera\u00e7\u00f5es L\u00f3gicas Transfer\u00eancia de Dados Desvios Condicionais Desvios Incondicionais Linguagem de Montagem J\u00e1 sabemos que o processador s\u00f3 trabalha com n\u00famero em bin\u00e1rio, entretanto, tamb\u00e9m sabemos que os programas s\u00e3o escritos em linguagens de programa\u00e7\u00e3o que n\u00e3o s\u00e3o, definitivamente, escritas em bin\u00e1rio. Existe uma linguagem que est\u00e1 mais pr\u00f3xima do bin\u00e1rio mas ao mesmo tempo pode ser lida (com a devida pr\u00e1tica do leitor) e escrita para constru\u00e7\u00e3o de programas. Essa linguagem \u00e9 a linguagem assembly ou de montagem . Em assembly, cada instru\u00e7\u00e3o \u00e9 definida por um mnem\u00f4nico (ADD, SUB, LW, SW, ...) que indica um operador nativo do processador. Cada instru\u00e7\u00e3o dessa possui um correspondente em bin\u00e1rio do lado do processador de modo que \u00e9 poss\u00edvel converter de um para o outro por um programa chamado assembler ou montador . No MIPS, cada instru\u00e7\u00e3o assembly \u00e9 convertida em um bin\u00e1rio de 32 bits no formato RIJ. O assembly cont\u00e9m um conjunto de classes de instru\u00e7\u00f5es que, a primeira vista, se parecem muito com qualquer linguagem de alto n\u00edvel: Instru\u00e7\u00f5es Aritm\u00e9ticas add $t1, $t2, $t3 \u00e9 igual a t1 = t2 + t3 sub $t1, $t2, $t3 \u00e9 igual a t1 = t2 - t3 addi $t1, $t2, 10 \u00e9 igual a t1 = t2 + 10 Instru\u00e7\u00f5es L\u00f3gicas and $s1, $s2, $t0 \u00e9 igual a s1 = s2 AND t0 or $s1, $s2, $t0 \u00e9 igual a s1 = t2 OR t0 Instru\u00e7\u00f5es de Uso de Mem\u00f3ria lw $t0, 0($s3) \u00e9 igual a t0 receber valor de s3 sw $t0, 0($s3) \u00e9 igual a t0 \u00e9 armazenado em s3 Instru\u00e7\u00f5es de Controle de Fluxo # Codigo em C # Codigo em Assembly if (i == j) bne $s3, $s4, Else # vai pra else se s3 != s4 f = g + h; add $s0, $s1, $s2 # f=g+h else j Exit # salto para Exit f = h - h; Else: sub $s0, $s1, $s2 Exit: J\u00e1 conseguimos ver que em assembly \u00e9 necess\u00e1rio mais linhas quando comparamos a uma linguagem de alto n\u00edvel. Para finalizar, vamos comparar a declara\u00e7\u00e3o de uma fun\u00e7\u00e3o em C e em assembly. // c # Constru\u00e7\u00e3o da mesma fun\u00e7\u00e3o em C int func ( int g , int h , int i , int j ) { int f ; f = ( g + h ) - ( i + j ); return f ; } # Constru\u00e7\u00e3o da mesma fun\u00e7\u00e3o em assembly func : add t0 , a0 , a1 # t0 recebe g + h add t1 , a2 , a3 # t1 recebe i + j sub s0 , t0 , t1 # s0 recebe t0 - t1 add v0 , s0 , zero # v0 recebe s0 + 0 jr ra # retorna o resultado Dica: Caso, em algum momento da sua vida, voc\u00ea precise programar em assembly, uma boa dica \u00e9 usar o simulador/IDE MARS - MIPS Assembler and Runtime Simulator. Dispon\u00edvel nesse link . Conceito de Pipeline de Instru\u00e7\u00f5es A essa altura, j\u00e1 compreendemos relativamente bem como um processador \u00e9 capaz de trabalhar e como a ordem da execu\u00e7\u00e3o das instru\u00e7\u00f5es \u00e9 relevante para o trabalho dele. Entretanto, existem etapas de processamento que n\u00e3o s\u00e3o necessariamente encadeadas, ou seja, n\u00e3o dependem uma do resultado da outra. Diante dessa constata\u00e7\u00e3o, o conceito de pipeline surge como uma t\u00e9cnica de otimiza\u00e7\u00e3o que executa instru\u00e7\u00f5es simultaneamente parecido com uma linha de montagem industrial. O pipeline pode ser pensando como uma \"trilha\" que o processador possui para trabalhar a cada ciclo de clock. Nos processadores modernos, temos v\u00e1rias linhas de trabalho simult\u00e2neo que podem ser usadas para paralelismo de tarefas. Se pensarmos que, para cada instru\u00e7\u00e3o, o processador deve passar pelos 6 est\u00e1gios abaixo: FI - Fetch Instruction/Busca da Instru\u00e7\u00e3o DI - Decodifica\u00e7\u00e3o da Instru\u00e7\u00e3o CO - C\u00e1lculo dos Endere\u00e7os dos Operandos BO - Busca do Operandos EI - Execu\u00e7\u00e3o da Instru\u00e7\u00e3o WO - Armazenamento do Operando Destino A cada ciclo de clock, ent\u00e3o, ao inv\u00e9s de termos um \u00fanico programa sendo executado por uma linha de pipeline do processador, podemos separar esse programa em unidades menores independentes que executam, cada uma em uma linha pr\u00f3pria, suas etapas paralelamente a cada ciclo de clock. Abaixo n\u00f3s temos uma tabela demonstrando o ganho de tempo com o uso dessa t\u00e9cnica para duas instru\u00e7\u00f5es. 0 1 2 3 4 5 6 7 Instru\u00e7\u00e3o 1 FI DI CO FO EI WO Instru\u00e7\u00e3o 2 FI DI CO FO EI WO Podemos ver que as duas instru\u00e7\u00f5es estar\u00e3o finalizadas em apenas 7 ciclos de clock. Sem o paralelismo, ter\u00edamos levado 12 ciclos para completar essas mesmas duas instru\u00e7\u00f5es. Paralelismo em N\u00edvel de Instru\u00e7\u00f5es e Processadores Existem dois tipos de paralelismo para obten\u00e7\u00e3o de desempenho sem aumento do clock do processador: Existem duas abordagens t\u00edpicas para o paralelismo a n\u00edvel de instru\u00e7\u00e3o: Superpipeline - H\u00e1 uma quebra de est\u00e1gios de pipeline em est\u00e1gios menores que 1 clock mas. Um exemplo \u00e9 o MIPS R4000 que \u00e9 um RISC com Superpipeline. Superescalar - M\u00faltiplas unidades funcionais independentes que executam mais de uma instru\u00e7\u00e3o por clock. \u00c9 como se houvesse mais de um pipeline dentro do processador. Os intel x86 usam essa t\u00e9cnica. Paralelismo a n\u00edvel de processador \u00c9 feito pelo uso de v\u00e1rios processadores ao mesmo tempo. E existem duas classes de computadores com essa abordagem: Multiprocessadores - Sistema com mais de uma CPU que compartilham a mem\u00f3ria principal por meio de um processo coordenado. Podem ser implementados por barramento \u00fanico ou mem\u00f3rias locais. CPUs fortemente acompladas. Multicomputadores - Sistema com computadores interligados em rede com alguma topologia. O foco est\u00e1 na comunica\u00e7\u00e3o entre eles. Processadores fracamente acoplados. Bibliografia Bibliografia B\u00e1sica STALLINGS, William. Arquitetura e organiza\u00e7\u00e3o de computadores . 10. ed. S\u00e3o Paulo: Pearson, c2018. E-book. ISBN 9788543020532 CORR\u00caA, Ana Grasielle Dion\u00edsio (Org.). Organiza\u00e7\u00e3o e arquitetura de computadores . S\u00e3o Paulo: Pearson, 2017. E-book. ISBN 9788543020327 PATTERSON, David A. Organiza\u00e7\u00e3o e projeto de computadores a interface hardware/software . Rio de Janeiro, GEN LTC 2017. 1 recurso online. ISBN 9788595152908 TANENBAUM, Andrew S.; AUSTIN, Todd. Organiza\u00e7\u00e3o estruturada de computadores . 6. ed. S\u00e3o Paulo, SP: Pearson Education do Brasil, 2013. E-book. ISBN 9788581435398 MONTEIRO, M\u00e1rio A. Introdu\u00e7\u00e3o \u00e0 organiza\u00e7\u00e3o de computadores . 5. ed. Rio de Janeiro: LTC - Livros T\u00e9cnicos e Cient\u00edficos, c2007. E-book. ISBN 978-85-216-1973-4 Sempre que voc\u00ea est\u00e1 vendo uma tela de loading, \u00e9 isso que est\u00e1 acontecendo no seu computador. Paralelismo a n\u00edvel de instru\u00e7\u00e3o \u21a9 Sempre que voc\u00ea est\u00e1 vendo uma tela de loading, \u00e9 isso que est\u00e1 acontecendo no seu computador. \u21a9","title":"Organiza\u00e7\u00e3o de Computadores"},{"location":"nav/PUC/periodo1/organizacao_computadores/#assuntos","text":"Fundamentos de Organiza\u00e7\u00e3o de Computadores Representa\u00e7\u00e3o de Dados e Sistemas Bin\u00e1rio Conceitos de L\u00f3gica Digital Circuitos L\u00f3gicos Digitais B\u00e1sicos Introdu\u00e7\u00e3o \u00e0 Organiza\u00e7\u00e3o de Computadores Unidade Central de Processamento - UCP Mem\u00f3ria Entrada e Sa\u00edda Arquitetura de Computadores Arquiteturas RISC e CISC Arquitetura do Conjunto de Instru\u00e7\u00f5es: Exemplo do MIPS Linguagem de Montagem Conceito de Pipeline de Instru\u00e7\u00f5es Paralelismo em N\u00edvel de Instru\u00e7\u00f5es e Processadores Bibliografia","title":"Assuntos"},{"location":"nav/PUC/periodo1/organizacao_computadores/#fundamentos-de-organizacao-de-computadores","text":"","title":"Fundamentos de Organiza\u00e7\u00e3o de Computadores"},{"location":"nav/PUC/periodo1/organizacao_computadores/#representacao-de-dados-e-sistemas-binario","text":"","title":"Representa\u00e7\u00e3o de Dados e Sistemas Bin\u00e1rio"},{"location":"nav/PUC/periodo1/organizacao_computadores/#compreendendo-o-sistema-decimal","text":"Os componentes eletr\u00f4nicos digitais s\u00f3 permitem dois estados de tens\u00e3o: 0 e 1. Isso implica que toda informa\u00e7\u00e3o manipulada pelos computadores \u00e9 representado em um sistema de numera\u00e7\u00e3o bin\u00e1ria que \u00e9 correlacionada com o n\u00edvel de tens\u00e3o nos componentes da m\u00e1quina. O nosso modelo de sistema num\u00e9rico usual \u00e9 o decimal (tamb\u00e9m chamado base 10). Ele \u00e9 um sistema posicional porque o peso do d\u00edgito \u00e9 dependente da posi\u00e7\u00e3o dele no n\u00famero. Por exemplo: \\(38_{10} = 3 \\times 10^1 + 8 \\times 10^0 = 30 + 8\\) \\(17,25_{10} = 10 \\times 10^1 + 7 \\times 10^0 + 2 \\times 10^{-1} + 5 \\times 10^{-2}\\) O subscrito indica o tipo de base usado. Uma caracter\u00edstica dos sistemas posicionais \u00e9 que o d\u00edgito mais a esquerda ser\u00e1 o mais significativa (MSB - Most Significant Bit) e os \u00e0 sua direita ser\u00e3o os LSB (Less Significant Bit).","title":"Compreendendo o Sistema Decimal"},{"location":"nav/PUC/periodo1/organizacao_computadores/#conceitos-de-logica-digital","text":"Computadores s\u00e3o formados por componentes eletr\u00f4nicos. Os transistores e os diodos s\u00e3o usados para a constru\u00e7\u00e3o das portas l\u00f3gicas que nos permitem, atrav\u00e9s de circuitos el\u00e9tricos, replicar os operadores l\u00f3gicos da l\u00f3gica usados na algebra booleana. Assumindo valores em dois est\u00e1gios: 0 (de 0 a 0,6 volts) e 1 (entre 3,6 e 5 volts). Uma porta l\u00f3gica nada mais \u00e9 que um circuito que recebe sinais de entrada e, conforme a sua configura\u00e7\u00e3o, produz um sinal de sa\u00edda cujo valor \u00e9 dependente da entrada. Podemos categorizar as portas l\u00f3gicas em 3 grupos: Portas L\u00f3gicas B\u00e1sicas Opera\u00e7\u00e3o L\u00f3gica - AND Opera\u00e7\u00e3o L\u00f3gica - OR Opera\u00e7\u00e3o Inversora - NOT Fun\u00e7\u00f5es e Portas L\u00f3gicas Compostas Opera\u00e7\u00e3o L\u00f3gica - NAND (NOT-AND) Opera\u00e7\u00e3o L\u00f3gica - NOR (NOT-OR) Opera\u00e7\u00e3o L\u00f3gica - XOR (OR-EXCLUSIVA) Express\u00f5es L\u00f3gicas e Circuitos Digitais Eu j\u00e1 trabalhei bem a fundo a l\u00f3gica matem\u00e1tica no meu curso do Projeto Matem\u00e1tica. Voc\u00ea pode conferir no cap\u00edtulo 02 nesse link . A \u00fanica diferen\u00e7a \u00e9 que quando l\u00e1 for TRUE ou VERDADE, aqui ser\u00e1 1 e, claramente, quando l\u00e1 for FALSE ou FALSO, aqui ser\u00e1 0. Como nosso estudo nesse manual \u00e9 mais focado em An\u00e1lise e Desenvolvimento de Sistemas, vamos manter as anota\u00e7\u00f5es referentes \u00e0 transposi\u00e7\u00e3o da algebra booleana para os circuitos eletr\u00f4nicos. Mas caso haja alguma d\u00favida, a leitura do material acima \u00e9 recomendada.","title":"Conceitos de L\u00f3gica Digital"},{"location":"nav/PUC/periodo1/organizacao_computadores/#operadores-basicos","text":"","title":"Operadores B\u00e1sicos"},{"location":"nav/PUC/periodo1/organizacao_computadores/#operadores-compostos","text":"","title":"Operadores Compostos"},{"location":"nav/PUC/periodo1/organizacao_computadores/#expressoes-logicas-e-circuitos","text":"Podemos usar os operadores l\u00f3gicos para criar express\u00f5es do tipo $ Y = (A+B).C $ que pode ser lida como \"Y \u00e9 igual a (A ou B) e C\" 1 . Podemos tamb\u00e9m usar os diagramas de circuitos para representar exatamente essa mesma opra\u00e7\u00e3o l\u00f3gica. Para entender como cada input produz um resultado \u00e9 necess\u00e1rio usarmos uma tabela verdade que nos mostra todos os casos entre os inputs e os outputs.","title":"Express\u00f5es L\u00f3gicas e Circuitos"},{"location":"nav/PUC/periodo1/organizacao_computadores/#desafio-vamos-olhar-a-tabela-verdade-abaixo","text":"A B C Y 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 1 0 0 1 1 0 1 1 1 1 0 1 1 1 1 0 Qual fun\u00e7\u00e3o l\u00f3gica produz o resultado compat\u00edvel para a coluna Y? A resposta est\u00e1 na observa\u00e7\u00e3o cuidadosa dos valores. Podemos ver que sempre que tivermos algum valor 0 como input, o resultado ser\u00e1 1. Como existe essa altern\u00e2ncia, podemos ver que o operador de nega\u00e7\u00e3o est\u00e1 sendo usado. Al\u00e9m disso, se tiv\u00e9ssemos o operador \"ou\" aliado a um operador de nega\u00e7\u00e3o, na linha \\((0,0,1)\\) ter\u00edamos o resultado 1 que, ao ser negado, retornaria um resultado 0. Portanto, s\u00f3 nos resta acreditar que temos uma situa\u00e7\u00e3o de opera\u00e7\u00f5es do tipo \"e\" e de nega\u00e7\u00e3o. A essa estrutura damos o nome de \"NOT-AND\" ou \"NAND\". Em temos l\u00f3gicos formais, temos a express\u00e3o \\(\\neg (A \\land B \\land C)\\) e na nota\u00e7\u00e3o que usamos no curso, temos um \\(\\overline{(A . B . C)}\\) .","title":"Desafio: Vamos olhar a tabela verdade abaixo:"},{"location":"nav/PUC/periodo1/organizacao_computadores/#circuitos-logicos-digitais-basicos","text":"Com o uso das portas l\u00f3gicas, n\u00f3s podemos construir circuitos mais complexos e que desempenham fun\u00e7\u00f5es importantes para o funcionamento de um computador. Podemos agrupar esses circuitos (tamb\u00e9m chamados de m\u00f3dulos) em dois grupos: Circuitos L\u00f3gicos Combinacionais Multiplexadores Demultiplexadores Codificadores Decodificadores Circuitos Sequenciais Registradores Contadores","title":"Circuitos L\u00f3gicos Digitais B\u00e1sicos"},{"location":"nav/PUC/periodo1/organizacao_computadores/#circuitos-combinacionais","text":"Os circuitos combinacionais s\u00e3o constru\u00eddos de maneira que o resultado obtido por ele \u00e9 condiconado ao input atual nas portas l\u00f3gicas que o comp\u00f5es. Para analizarmos um circuito composto de \\(n\\) portas l\u00f3gicas e \\(m\\) sa\u00eddas, podemos usar a tabela verdade, s\u00edmbolos gr\u00e1ficos no padr\u00e3o das portas que aprendemos antes e equa\u00e7\u00f5es booleanas que convertem a l\u00f3gica eletr\u00f4nica para a matem\u00e1tica. Observemos a tabela verdade abaixo: A B C F 0 0 0 0 0 0 1 0 0 1 0 1 0 1 1 1 1 0 0 0 1 0 1 0 1 1 0 1 1 1 1 0 Para criar a representa\u00e7\u00e3o do circuito l\u00f3gico que corresponde a coluna F, basta observarmos as condi\u00e7\u00f5es necess\u00e1rias para o valor 1 na referida coluna. Temos 3 eventos em que isso acontece. Podemos demonstrar essa rela\u00e7\u00e3o pode meio da seguinte equa\u00e7\u00e3o boolena: \\(F = \\overline{A} B \\overline{C} + \\overline{A} B C + A B \\overline{C}\\) A essa primeira maneira de escrita, damos o nome de Soma de Produtos ou Sum Of Products (SOP) . Uma outra forma de representarmos o circuito F \u00e9 se focarmos na negativa das condi\u00e7\u00f5es que retornam o valor 0. Desse modo, tamb\u00e9m podemos representar o circuito da seguite maneira: \\(F = \\overline{\\overline{A B C}} . \\overline{\\overline{A B} C} . \\overline{A \\overline{B C}} . \\overline{A \\overline{B} C} . \\overline{A B C}\\) Podemos visualizar essa condi\u00e7\u00e3o no diagrama abaixo. Ao aplicarmos o teorema de DeMorgan \\((\\overline{X1 . X2}) = \\overline{X1} + \\overline{X2}\\) nessa segunda vers\u00e3o podemos desenvolve-la at\u00e9 chegarmos em uma terceira configura\u00e7\u00e3o: \\(F = (A + B + C) . (A + B + \\overline{C}) . (\\overline{A} + B + C) . (\\overline{A} + B + \\overline{C}) . (\\overline{A} + \\overline{B} + \\overline{C})\\) Que chamamos de Produto das Somas ou Product of Sums (POS) . Coment\u00e1rio: O material do microfundamento \u00e9 consideravelmente reduzido nessa parte. Mas como estou perto da prova enquanto escrevo essa parte, terei que, por agora, reduzir a profundidade e seguir como \u00e9 dado pelo material da aula. Em tempo oportuno eu volto aqui e expando essa se\u00e7\u00e3o. Agora que entendemos um pouco melhor sobre cisrcuitos l\u00f3gicos combinacionais, vamos aprender mais sobre alguns circuitos desse tipo. Os multiplexadores s\u00e3o circuitos combinacioinais que selecionam \\(n\\) entradas a uma \u00fanica sa\u00edda por meio de suas linhas de sele\u00e7\u00e3o. Para cada duas entradas, ser\u00e3o necess\u00e1rias 1 linha de sele\u00e7\u00e3o. Os demultiplexadores s\u00e3o o oposto, ligando uma \u00fanica entrada para \\(n\\) sa\u00eddas. Um codificador normalmente s\u00f3 permite que uma das entradas esteja ativa a cada instante e sua fun\u00e7\u00e3o \u00e9 converter os valores de entrada em um n\u00famero bin\u00e1rio. Similarmente, um decodificador recebe um bin\u00e1rio como entrada e a sa\u00edda ser\u00e1 alguma linha previamente definida.","title":"Circuitos Combinacionais"},{"location":"nav/PUC/periodo1/organizacao_computadores/#circuitos-sequenciais","text":"Por outro lado, os circuitos sequenciais usam elementos armazenadores chamados latches e flip-flops e possuem a capacidade de armazenamento de informa\u00e7\u00f5es. Um latch \u00e9 um circuito capaz de armazenar o valor de 1 bit e pode ser constru\u00eddo com 2 portas NOR ou NAND como na imagem abaixo. A entrada S \u00e9 chamada de Set e atribui um valor ao sistema. A porta R \u00e9 chamada de Reset e retorna o valor 0 para o nosso circuito. Se ambos s\u00e3o 0, o nosso sistema retorna um status inalterado memorizando o estado anterior. Com o latch podemos usar o controle de tempo (chamado de clock ) para controlarmos o comportamento oscilante de alguns circuitos sequenciais mais complexos. Os circuitos sequenciais s\u00e3o criados com o uso dos latchs e sinais de controle por clock. S\u00e3o muito relevantes para os computadores pois permitem a capacidade de memoriza\u00e7\u00e3o de informa\u00e7\u00e3o na mem\u00f3ria de trabalho. Aqui, n\u00e3o estamos falando dos discos r\u00edgidos ou mem\u00f3ria flash. Existem dois tipos de circuitos sequenciais muito importantes para a estrutura dos computadores modernos. O primeiro deles \u00e9 o registradores que s\u00e3o usados para memorizar temporariamente informa\u00e7\u00f5es em mem\u00f3ria maiores que 1 bit (as de 1 bit podem ser armazenadas diretamente pelo latch). Os contadores usam o clock para a contagem da passagem do tempo.","title":"Circuitos Sequenciais"},{"location":"nav/PUC/periodo1/organizacao_computadores/#introducao-a-organizacao-de-computadores","text":"A medida que os computadores foram evoluindo, a representa\u00e7\u00e3o das suas partes por meio das portas digitais se tornou invi\u00e1vel devido ao n\u00famero exponencial de portas que faziam parte de cada nova gera\u00e7\u00e3o de computadores. Desse modo, a representa\u00e7\u00e3o por meio da hierarquia de subsistemas se tornou mais adequada. O objetivo \u00e9 conseguirmos compreender como cada subsistema se interliga com os demais e desempenha fun\u00e7\u00f5es espec\u00edficas para o correto funcionamento do equipamento. Para prosseguirmos, \u00e9 necess\u00e1rio definirmos o que seria esse \"correto funcionamento\" dos computadores. Em suma, podemos afirmar que um computador deve realizar 4 fun\u00e7\u00f5es: Processamento de Dados - Produzir nova informa\u00e7\u00e3o a partir de informa\u00e7\u00e3o anterior Armazenamento de Dados - Capacidade de memorizar tanto no prazo de trabalho quanto no longo prazo Transfer\u00eancia de Dados - Envio das informa\u00e7\u00f5es por meio dos dispositivos de entrada e sa\u00edda Controle - Para a garantia das 3 fun\u00e7\u00f5es acima Para realizar esses trabalhos, podemos dividir o computador moderno nos seguintes subsistemas: Unidade Central de Processamento (CPU) - Que faz o controle de toda a opera\u00e7\u00e3o do computador Mem\u00f3ria Principal - Conectada por meio de um barramento ao CPU, armazena os dados necess\u00e1rios para o CPU realizar as opera\u00e7\u00f5es desejadas Entrada e Sa\u00edda de Dados - S\u00e3o os elementos que inputam informa\u00e7\u00f5es ao CPU e retiram dele os resultados para o mundo exterior Barramento - Meio f\u00edsico de comunica\u00e7\u00e3o entre os subsistemas do computador","title":"Introdu\u00e7\u00e3o \u00e0 Organiza\u00e7\u00e3o de Computadores"},{"location":"nav/PUC/periodo1/organizacao_computadores/#organizacao-x-arquitetura","text":"Embora esses conceitos sejam muito parecidos. Podemos definir a organiza\u00e7\u00e3o de computadores como a descri\u00e7\u00e3o de computadores por meio dos seus subsistemas, suas fun\u00e7\u00f5es e interconex\u00f5es. Por sua vez, a arquitetura de computadores est\u00e1 relacionada \u00e0 conex\u00e3o entre o projeto de computador e a execu\u00e7\u00e3o dos programas, ou seja, \u00e9 o estudo de como uma mudan\u00e7a no design de um computador impacta na execu\u00e7\u00e3o dos programas. Uma mesma arquitetura pode ser implementada em v\u00e1rias organiza\u00e7\u00f5es poss\u00edveis. A arquitetura tem foco na abstra\u00e7\u00e3o do computador e a organiza\u00e7\u00e3o tem foco na implementa\u00e7\u00e3o. Para facilitar a diferencia\u00e7\u00e3o dos termos, vamos elencar alguns t\u00f3picos de estudo dessas \u00e1reas. Organiza\u00e7\u00e3o de Computadores Implementa\u00e7\u00e3o de hardware Implementa\u00e7\u00e3o de sistemas de controle que transmitem a execu\u00e7\u00e3o das instru\u00e7\u00f5es Comunica\u00e7\u00e3o entre o computador e seus perif\u00e9ricos Tecnologia usada pra a mem\u00f3ria Arquitetura de Computadores Conjunto de instru\u00e7\u00f5es que a CPU processa O formato das instru\u00e7\u00f5es Maneiras de endere\u00e7amento de mem\u00f3ria Representa\u00e7\u00e3o dos tipos de dados usados nas instru\u00e7\u00f5es","title":"Organiza\u00e7\u00e3o x Arquitetura"},{"location":"nav/PUC/periodo1/organizacao_computadores/#organizacao-basica-de-um-computador-digital-modelo-de-von-neumann","text":"Antigamente, os programas executados pelos computadores eram feitos por meio do arranjo f\u00edsico dos seus componentes. A programa\u00e7\u00e3o era feita diretamente no hardware. contudo, uma nova arquitetura foi necess\u00e1ria porque se buscava a constru\u00e7\u00e3o de um mecanismo que permitisse, ao mesmo tempo, o salvamento tanto dos dados quanto das instru\u00e7\u00f5es necess\u00e1rias para o processamento dos mesmo. Foi nesse contexto que a arquitetura de Von Neumann foi constru\u00edda. Ela \u00e9 constitu\u00edda de, basicamente, 3 componentes principais interligados por um barramento: CPU Mem\u00f3ria Principal Dispositivos de Entrada e sa\u00edda","title":"Organiza\u00e7\u00e3o B\u00e1sica de um Computador Digital - Modelo de Von Neumann"},{"location":"nav/PUC/periodo1/organizacao_computadores/#unidade-central-de-processamento-ucp","text":"Na se\u00e7\u00e3o passada, n\u00f3s vimos que a arquitetura de Von Neumann possui o CPU (tamb\u00e9m chamado de processador) como um dos seus componentes. Durante um ciclo de execu\u00e7\u00e3o , o processador deve buscar as instru\u00e7\u00f5es na mem\u00f3ria, decodific\u00e1-la e execut\u00e1-la. Para entender melhor como ele faz tudo isso, podemos subdividi-lo nas seguintes partes: Unidade de Controle - \u00c9 quem faz a busca na mem\u00f3ria e permite a execu\u00e7\u00e3o das instru\u00e7\u00f5es (programas) Unidade L\u00f3gica e Aritm\u00e9tica (ULA) - Executa as instru\u00e7\u00f5es enviadas pela unidade de controle referentes \u00e0s opera\u00e7\u00f5es l\u00f3gicas e aritm\u00e9ticas Registradores - S\u00e3o componentes de mem\u00f3ria de extrema velocidade de leitura mas baixa disponibilidade. Essa mem\u00f3ria \u00e9 usada temporariamente para auxiliar o ciclo de execu\u00e7\u00e3o","title":"Unidade Central de Processamento - UCP"},{"location":"nav/PUC/periodo1/organizacao_computadores/#ciclo-de-execucao-de-instrucoes","text":"As instru\u00e7\u00f5es sempre s\u00e3o executadas sequencialmente. Quem controle o fluxo de qual instru\u00e7\u00e3o ser\u00e1 executada a cada ciclo \u00e9 um registrador chamado controlador de programas (PC) . Ele armazena o endere\u00e7o da pr\u00f3xima instru\u00e7\u00e3o a ser executada e, a cada ciclo, \u00e9 reescrito com o novo endere\u00e7o de execu\u00e7\u00e3o. O ciclo de execu\u00e7\u00e3o \u00e9 composto seguintes etapas: Busca da pr\u00f3xima execu\u00e7\u00e3o - O PC indica o endere\u00e7o na mem\u00f3ria da instru\u00e7\u00e3o a ser executada. Esse endere\u00e7o \u00e9 carregado em outro registrador chamado registrador de instru\u00e7\u00f5es (RI) e ent\u00e3o o PC recebe o endere\u00e7o da pr\u00f3xima instru\u00e7\u00e3o Decodifica\u00e7\u00e3o da instru\u00e7\u00e3o - o endere\u00e7o armazenado no RI (tamb\u00e9m chamado de opcode ) \u00e9 lido pela unidade de controle e o comando \u00e0 ULA \u00e9 feito para execu\u00e7\u00e3o da instru\u00e7\u00e3o Busca dos operandos - A unidade de controle busca todos os dados necess\u00e1rios \u00e0 execu\u00e7\u00e3o da instru\u00e7\u00e3o por meio do envio de sinais atrav\u00e9s do barramento 2 Execu\u00e7\u00e3o da Instru\u00e7\u00e3o - A ULA, de posse dos dados, faz a execu\u00e7\u00e3o da instru\u00e7\u00e3o lendo os operandos carregados em mem\u00f3ria pela unidade de controle Repeti\u00e7\u00e3o do processo","title":"Ciclo de Execu\u00e7\u00e3o de Instru\u00e7\u00f5es"},{"location":"nav/PUC/periodo1/organizacao_computadores/#memoria","text":"Idealmente, a mem\u00f3ria deveria ser super r\u00e1pida e abundante. O problema \u00e9 que existe um trade-off entre essas duas qualidades. Quanto mais r\u00e1pida \u00e9 a leitura, mais cara \u00e9 a mem\u00f3ria. Esse \u00e9 o motivo de, na arquitetura dos computadores atuais, existirem diversos tipos de mem\u00f3ria. A ordem de velocidade \u00e9 dada por: Registradores Memoria Cache Memoria Principal Memoria Secund\u00e1ria As primeiras s\u00e3o as mem\u00f3rias mais r\u00e1pidas e caras. As demais, est\u00e3o as mais lentas e baratas. A mem\u00f3ria principal \u00e9 a mem\u00f3ria RAM e ROM dos nossos computadores. Dela, a CPU l\u00ea as instru\u00e7\u00f5es escritas em alguma linguagem de programa\u00e7\u00e3o e \u00e9 nela que o processador salva o resultado das opera\u00e7\u00f5es. Para entender como a mem\u00f3ria principal e funciona, basta pensarmos em um conjunto de pequenas c\u00e9lulas (posi\u00e7\u00f5es) de armazenamento de informa\u00e7\u00e3o. Todas as c\u00e9lulas da mem\u00f3ria possuem o mesmo tamanho (medido em quantidade de bits). Os endere\u00e7os s\u00e3o os identificadores da posi\u00e7\u00e3o f\u00edsica de cada c\u00e9lula no material de armazenamento (disco magn\u00e9tico ou chip). Se soubermos a quantidade de bits em cada c\u00e9lula e a quantidade de c\u00e9lulas, saberemos a capacidade de armazenamento do dispositivo por meio do c\u00e1lculo \\(\\textrm{Capacidade} = 2^{ \\textrm{Numero de Celulas}} * \\textrm{Numero de bits por celula}\\) A mem\u00f3ria principal pode ser divida em mem\u00f3ria RAM - Random Access Memory , que pode ser lida e apagada a qualquer momento mas n\u00e3o \u00e9 capaz de armazenar os dados ap\u00f3s o desligamento do computador, e a mem\u00f3ria ROM - Read Only Memory que n\u00e3o pode ser alterada na execu\u00e7\u00e3o do programa mas se mant\u00e9m ap\u00f3s o desligamento do computador. Coment\u00e1rio: A mem\u00f3ria RAM ainda \u00e9 subdividida em outras mem\u00f3rias mas veremos isso em uma atualiza\u00e7\u00e3o desse curso. A mem\u00f3ria secund\u00e1ria \u00e9 o HD e o SSD dos nossos computadores. O processador s\u00f3 faz uso dela por meio de dispositivos de entrada e sa\u00edda. A vantagem dela \u00e9 o seu pre\u00e7o que \u00e9 infinitamente menor que as mem\u00f3rias mais r\u00e1pidas.","title":"Mem\u00f3ria"},{"location":"nav/PUC/periodo1/organizacao_computadores/#entrada-e-saida","text":"S\u00e3o os componentes que permitem os usu\u00e1rios acessar e visualizar os resultados dos ciclos de processamento. E/S de entrada - Teclado, Mouse, Scanner ... E/S de sa\u00edda - Impressoras, Monitores, Caixas de Som ... Interface de E/S - S\u00e3o os programas que intermediam a comunica\u00e7\u00e3o entre o CPU e o dispositivos Existem alguns tipos de comunica\u00e7\u00f5es entre os dispositivos de Entrada e Sa\u00edda mas n\u00f3s vamos parar por aqui.","title":"Entrada e Sa\u00edda"},{"location":"nav/PUC/periodo1/organizacao_computadores/#arquitetura-de-computadores","text":"","title":"Arquitetura de Computadores"},{"location":"nav/PUC/periodo1/organizacao_computadores/#arquiteturas-risc-e-cisc","text":"Como o processador exerce um papel central na atividade de um computador moderno, n\u00e3o \u00e9 nada estranho se preocupar muito sobre como ele \u00e9 capaz de compreender as instru\u00e7\u00f5es e executar. Na verdade, existe um campo espec\u00edfico de pesquisa chamado arquitetura de instru\u00e7\u00f5es do processador . Esse campo estuda o formato das instru\u00e7\u00f5es, os c\u00f3digos de opera\u00e7\u00e3o, os registradores, a mem\u00f3ria de dados e outros t\u00f3picos relacionados a atividade desse componente. Na primeira gera\u00e7\u00e3o de processadores, o conjunto de opera\u00e7\u00f5es era reduzido para simplifica\u00e7\u00e3o da constru\u00e7\u00e3o desse componente. Na d\u00e9cada de 60, a quantidade de opera\u00e7\u00f5es aumentou junto com a complexidade dos processadores. A essa fam\u00edlia d\u00e1-se o nome de CISC - Complex Instruction Set Computer . Os computadores da fam\u00edlia CISC possuem uma maior quantidade de instru\u00e7\u00f5es, contudo, o seu ciclo de processamento \u00e9 mais lento. O exemplo dessa fam\u00edlia de processadores \u00e9 a Intel: 286, 386, 486 e Pentium. No final da d\u00e9cada de 80, os processadores com um conjunto reduzido de instru\u00e7\u00f5es voltaram a serem utilizados sob o nome de RISC - Reduced Instruction Set Computer . A ideia era a de melhorar o desempenho dos processadores via simplifica\u00e7\u00e3o e ganho de velocidade. Os exemplos s\u00e3o os processadores MIPS e a arquitetura ARM (muito usados nos smartphones). Hoje em dia os processadores possuem ambas as abordagens implementadas simultaneamente.","title":"Arquiteturas RISC e CISC"},{"location":"nav/PUC/periodo1/organizacao_computadores/#arquitetura-do-conjunto-de-instrucoes-exemplo-do-mips","text":"No t\u00f3pico anterior, nosso foco foi na hist\u00f3ria dos desenhos f\u00edsicos dos processadores. Agora, nossa aten\u00e7\u00e3o ser\u00e1 voltada para a arquitetura das instru\u00e7\u00f5es, ou seja, as opera\u00e7\u00f5es nativas que os processadores j\u00e1 vem de f\u00e1brica capazes de fazer. Diferente da arquitetura f\u00edsica, o mercado acabou por convergir para um padr\u00e3o relativamente comum de arquitetura de instru\u00e7\u00f5es b\u00e1sicas. Como exemplo, o material cita o Microprocessor Without Interlocked Pipeline Stages - MIPS . Desenvolvido na d\u00e9cada de 80, o MIPS foi implementado mesmo antes da RISC ser criada. Hoje em dia, podemo encontrar essa arquitetura de opare\u00e7\u00f5es em equipamentos da Cisco, Nintendo, Toshiba, Sony e etc. A arquitetura do conjunto de instru\u00e7\u00f5es define os tipos de instru\u00e7\u00f5es execut\u00e1veis pelo processador, o formato de cada instru\u00e7\u00e3o, o tamanho em bits delas, o m\u00e9todos de endere\u00e7amento e outras taregas importantes para o funcionamento desse componente. Podemos elencar algumas classes de instru\u00e7\u00f5es que o MIPS 32 bits \u00e9 capaz de executar: Opera\u00e7\u00f5es Aritm\u00e9ticas Opera\u00e7\u00f5es L\u00f3gicas Transfer\u00eancia de Dados Desvios Condicionais Desvios Incondicionais","title":"Arquitetura do Conjunto de Instru\u00e7\u00f5es: Exemplo do MIPS"},{"location":"nav/PUC/periodo1/organizacao_computadores/#linguagem-de-montagem","text":"J\u00e1 sabemos que o processador s\u00f3 trabalha com n\u00famero em bin\u00e1rio, entretanto, tamb\u00e9m sabemos que os programas s\u00e3o escritos em linguagens de programa\u00e7\u00e3o que n\u00e3o s\u00e3o, definitivamente, escritas em bin\u00e1rio. Existe uma linguagem que est\u00e1 mais pr\u00f3xima do bin\u00e1rio mas ao mesmo tempo pode ser lida (com a devida pr\u00e1tica do leitor) e escrita para constru\u00e7\u00e3o de programas. Essa linguagem \u00e9 a linguagem assembly ou de montagem . Em assembly, cada instru\u00e7\u00e3o \u00e9 definida por um mnem\u00f4nico (ADD, SUB, LW, SW, ...) que indica um operador nativo do processador. Cada instru\u00e7\u00e3o dessa possui um correspondente em bin\u00e1rio do lado do processador de modo que \u00e9 poss\u00edvel converter de um para o outro por um programa chamado assembler ou montador . No MIPS, cada instru\u00e7\u00e3o assembly \u00e9 convertida em um bin\u00e1rio de 32 bits no formato RIJ. O assembly cont\u00e9m um conjunto de classes de instru\u00e7\u00f5es que, a primeira vista, se parecem muito com qualquer linguagem de alto n\u00edvel: Instru\u00e7\u00f5es Aritm\u00e9ticas add $t1, $t2, $t3 \u00e9 igual a t1 = t2 + t3 sub $t1, $t2, $t3 \u00e9 igual a t1 = t2 - t3 addi $t1, $t2, 10 \u00e9 igual a t1 = t2 + 10 Instru\u00e7\u00f5es L\u00f3gicas and $s1, $s2, $t0 \u00e9 igual a s1 = s2 AND t0 or $s1, $s2, $t0 \u00e9 igual a s1 = t2 OR t0 Instru\u00e7\u00f5es de Uso de Mem\u00f3ria lw $t0, 0($s3) \u00e9 igual a t0 receber valor de s3 sw $t0, 0($s3) \u00e9 igual a t0 \u00e9 armazenado em s3 Instru\u00e7\u00f5es de Controle de Fluxo # Codigo em C # Codigo em Assembly if (i == j) bne $s3, $s4, Else # vai pra else se s3 != s4 f = g + h; add $s0, $s1, $s2 # f=g+h else j Exit # salto para Exit f = h - h; Else: sub $s0, $s1, $s2 Exit: J\u00e1 conseguimos ver que em assembly \u00e9 necess\u00e1rio mais linhas quando comparamos a uma linguagem de alto n\u00edvel. Para finalizar, vamos comparar a declara\u00e7\u00e3o de uma fun\u00e7\u00e3o em C e em assembly. // c # Constru\u00e7\u00e3o da mesma fun\u00e7\u00e3o em C int func ( int g , int h , int i , int j ) { int f ; f = ( g + h ) - ( i + j ); return f ; } # Constru\u00e7\u00e3o da mesma fun\u00e7\u00e3o em assembly func : add t0 , a0 , a1 # t0 recebe g + h add t1 , a2 , a3 # t1 recebe i + j sub s0 , t0 , t1 # s0 recebe t0 - t1 add v0 , s0 , zero # v0 recebe s0 + 0 jr ra # retorna o resultado Dica: Caso, em algum momento da sua vida, voc\u00ea precise programar em assembly, uma boa dica \u00e9 usar o simulador/IDE MARS - MIPS Assembler and Runtime Simulator. Dispon\u00edvel nesse link .","title":"Linguagem de Montagem"},{"location":"nav/PUC/periodo1/organizacao_computadores/#conceito-de-pipeline-de-instrucoes","text":"A essa altura, j\u00e1 compreendemos relativamente bem como um processador \u00e9 capaz de trabalhar e como a ordem da execu\u00e7\u00e3o das instru\u00e7\u00f5es \u00e9 relevante para o trabalho dele. Entretanto, existem etapas de processamento que n\u00e3o s\u00e3o necessariamente encadeadas, ou seja, n\u00e3o dependem uma do resultado da outra. Diante dessa constata\u00e7\u00e3o, o conceito de pipeline surge como uma t\u00e9cnica de otimiza\u00e7\u00e3o que executa instru\u00e7\u00f5es simultaneamente parecido com uma linha de montagem industrial. O pipeline pode ser pensando como uma \"trilha\" que o processador possui para trabalhar a cada ciclo de clock. Nos processadores modernos, temos v\u00e1rias linhas de trabalho simult\u00e2neo que podem ser usadas para paralelismo de tarefas. Se pensarmos que, para cada instru\u00e7\u00e3o, o processador deve passar pelos 6 est\u00e1gios abaixo: FI - Fetch Instruction/Busca da Instru\u00e7\u00e3o DI - Decodifica\u00e7\u00e3o da Instru\u00e7\u00e3o CO - C\u00e1lculo dos Endere\u00e7os dos Operandos BO - Busca do Operandos EI - Execu\u00e7\u00e3o da Instru\u00e7\u00e3o WO - Armazenamento do Operando Destino A cada ciclo de clock, ent\u00e3o, ao inv\u00e9s de termos um \u00fanico programa sendo executado por uma linha de pipeline do processador, podemos separar esse programa em unidades menores independentes que executam, cada uma em uma linha pr\u00f3pria, suas etapas paralelamente a cada ciclo de clock. Abaixo n\u00f3s temos uma tabela demonstrando o ganho de tempo com o uso dessa t\u00e9cnica para duas instru\u00e7\u00f5es. 0 1 2 3 4 5 6 7 Instru\u00e7\u00e3o 1 FI DI CO FO EI WO Instru\u00e7\u00e3o 2 FI DI CO FO EI WO Podemos ver que as duas instru\u00e7\u00f5es estar\u00e3o finalizadas em apenas 7 ciclos de clock. Sem o paralelismo, ter\u00edamos levado 12 ciclos para completar essas mesmas duas instru\u00e7\u00f5es.","title":"Conceito de Pipeline de Instru\u00e7\u00f5es"},{"location":"nav/PUC/periodo1/organizacao_computadores/#paralelismo-em-nivel-de-instrucoes-e-processadores","text":"Existem dois tipos de paralelismo para obten\u00e7\u00e3o de desempenho sem aumento do clock do processador: Existem duas abordagens t\u00edpicas para o paralelismo a n\u00edvel de instru\u00e7\u00e3o: Superpipeline - H\u00e1 uma quebra de est\u00e1gios de pipeline em est\u00e1gios menores que 1 clock mas. Um exemplo \u00e9 o MIPS R4000 que \u00e9 um RISC com Superpipeline. Superescalar - M\u00faltiplas unidades funcionais independentes que executam mais de uma instru\u00e7\u00e3o por clock. \u00c9 como se houvesse mais de um pipeline dentro do processador. Os intel x86 usam essa t\u00e9cnica. Paralelismo a n\u00edvel de processador \u00c9 feito pelo uso de v\u00e1rios processadores ao mesmo tempo. E existem duas classes de computadores com essa abordagem: Multiprocessadores - Sistema com mais de uma CPU que compartilham a mem\u00f3ria principal por meio de um processo coordenado. Podem ser implementados por barramento \u00fanico ou mem\u00f3rias locais. CPUs fortemente acompladas. Multicomputadores - Sistema com computadores interligados em rede com alguma topologia. O foco est\u00e1 na comunica\u00e7\u00e3o entre eles. Processadores fracamente acoplados.","title":"Paralelismo em N\u00edvel de Instru\u00e7\u00f5es e Processadores"},{"location":"nav/PUC/periodo1/organizacao_computadores/#bibliografia","text":"Bibliografia B\u00e1sica STALLINGS, William. Arquitetura e organiza\u00e7\u00e3o de computadores . 10. ed. S\u00e3o Paulo: Pearson, c2018. E-book. ISBN 9788543020532 CORR\u00caA, Ana Grasielle Dion\u00edsio (Org.). Organiza\u00e7\u00e3o e arquitetura de computadores . S\u00e3o Paulo: Pearson, 2017. E-book. ISBN 9788543020327 PATTERSON, David A. Organiza\u00e7\u00e3o e projeto de computadores a interface hardware/software . Rio de Janeiro, GEN LTC 2017. 1 recurso online. ISBN 9788595152908 TANENBAUM, Andrew S.; AUSTIN, Todd. Organiza\u00e7\u00e3o estruturada de computadores . 6. ed. S\u00e3o Paulo, SP: Pearson Education do Brasil, 2013. E-book. ISBN 9788581435398 MONTEIRO, M\u00e1rio A. Introdu\u00e7\u00e3o \u00e0 organiza\u00e7\u00e3o de computadores . 5. ed. Rio de Janeiro: LTC - Livros T\u00e9cnicos e Cient\u00edficos, c2007. E-book. ISBN 978-85-216-1973-4 Sempre que voc\u00ea est\u00e1 vendo uma tela de loading, \u00e9 isso que est\u00e1 acontecendo no seu computador. Paralelismo a n\u00edvel de instru\u00e7\u00e3o \u21a9 Sempre que voc\u00ea est\u00e1 vendo uma tela de loading, \u00e9 isso que est\u00e1 acontecendo no seu computador. \u21a9","title":"Bibliografia"},{"location":"nav/PUC/periodo1/pensamento_comp/","text":"hljs.initHighlightingOnLoad(); Assuntos Conceitos e Compet\u00eancias de Pensamento Computacional Computa\u00e7\u00e3o Desplugada Bibliografia Conceitos e Compet\u00eancias de Pensamento Computacional Existem diverg\u00eancias quanto ao significado preciso desse conceito, contudo, as interpreta\u00e7\u00f5es vigentes costumam convergir para a defini\u00e7\u00e3o que o pensamento computacional \u00e9 a maneira de organizar o racioc\u00ednio de modo a pensar de maneira organizada, l\u00f3gica e propor solu\u00e7\u00f5es \u00fateis para os problemas propostos. Podemos elencar alguns pilares que fundamentam o processo de pensamento computacional: Abstra\u00e7\u00e3o - Constru\u00e7\u00e3o de um modelo simplificado da quest\u00e3o. Decomposi\u00e7\u00e3o - Separa\u00e7\u00e3o do problema em diferentes partes. Reconhecimento de Padr\u00f5es - Identifica\u00e7\u00e3o de processos que se repetem. Automa\u00e7\u00e3o (aka Algoritmo) - Constru\u00e7\u00e3o de um processo de solu\u00e7\u00e3o do problema. Al\u00e9m desses passos, podemos acrescentar mais algumas etapas ao esfor\u00e7o de solu\u00e7\u00e3o de problemas: Paraleliza\u00e7\u00e3o - Etapas paralelas e independentes. Particionamento de Dados - Quebra de um grande volume de dados para processamento paralelo e posterior uni\u00e3o do resultado. Particionamento de Tarefas - Quebra do processo em diferentes unidades executoras paralelas. Simula\u00e7\u00e3o - Simplifica\u00e7\u00e3o do caso real para melhor compreender o problema. Avalia\u00e7\u00e3o de Solu\u00e7\u00f5es - An\u00e1lise dos impactos das solu\u00e7\u00f5es propostas. \u00c9 importante \u00e9 saber que pensamento computacional n\u00e3o \u00e9 pensar como um computador e sim de maneira organizada. Esses passos n\u00e3o s\u00e3o necessariamente seguidos nessa ordem 1 . Podemos pensar nessa lista como etapas necess\u00e1rias mas n\u00e3o sucessivas. Agora veremos um pouco mais sobre cada uma delas. Computa\u00e7\u00e3o Desplugada O foco dessa se\u00e7\u00e3o \u00e9 elencar algum problemas que podem ser resolvidos com algoritmos que foram constru\u00eddos usando o uso das etapas aprendidas na se\u00e7\u00e3o anterior. V\u00e1rias situa\u00e7\u00f5es que n\u00f3s encontramos no processo de constru\u00e7\u00e3o de uma solu\u00e7\u00e3o podem ser entendidas como an\u00e1logas a algum dos problemas elencados aqui. Por isso \u00e9 bom manter anota\u00e7\u00f5es sempre que aprendermos uma t\u00e9cnica de resolu\u00e7\u00e3o nova para um problema. Compres\u00e3o de Texto: Resolvido com a substitui\u00e7\u00e3o de se\u00e7\u00f5es longas por caracteres menores antes da transmiss\u00e3o. Depois enviamos as regras de codifica\u00e7\u00e3o para processamento da mensagem original. T\u00f3pico te\u00f3rico: Teoria da Informa\u00e7\u00e3o; Codifica\u00e7\u00e3o. Adivinha\u00e7\u00e3o de um N\u00famero: Basta ir perguntando pela metade das op\u00e7\u00f5es. Essa \u00e9 a solu\u00e7\u00e3o de menor rodadas. T\u00f3pico te\u00f3rico: \u00c1rvore de Decis\u00e3o; Efici\u00eancia de Algoritmos. Problema do Caixeiro Viajante: Constru\u00e7\u00e3o de um grafo e escolha do caminho de menor soma entre as dist\u00e2ncias dos n\u00f3s. T\u00f3pico te\u00f3rico: Teoria dos Grafos. Nonograma: Procurar as regras de constru\u00e7\u00e3o das imagens para cada linha at\u00e9 que se tenha um conjunto de regras para ser aplicadas nas instru\u00e7\u00f5es iniciais. Desafio dif\u00edcil de implementar por linguagem de programa\u00e7\u00e3o. T\u00f3picos te\u00f3ricos: Abstra\u00e7\u00e3o; Modelagem. Bibliografia BEECHER, Karl. Computational Thinking - A beginner's guide to problem-solving and programming . Swindon, UK: BCS Learning \\& Development Limited, 2017. (O\u00b4Reilly) EPUB ISBN-13: 978-1-78017-36-65 FORBELLONE, Andr\u00e9 Luiz Villar; EBERSPACHER, Henri Frederico. L\u00f3gica de programa\u00e7\u00e3o: a constru\u00e7\u00e3o de algoritmos e estruturas de dados . 3. ed. S\u00e3o Paulo: Prentice Hall, 2005. xii, 218 p. ISBN 8576050242 MANZANO, Jos\u00e9 Augusto N. G; OLIVEIRA, Jayr Figueiredo de. Algoritmos: l\u00f3gica para desenvolvimento de programa\u00e7\u00e3o de computadores . 28. ed. rev. e atual. S\u00e3o Paulo, SP: \u00c9rica, 2016. ISBN 9788536518657 GUEDES, S\u00e9rgio (Org). L\u00f3gica de programa\u00e7\u00e3o algor\u00edtmica . S\u00e3o Paulo: Pearson, 2014. ISBN 9788543005546 MANZANO, Jos\u00e9 Augusto N. G. Estudo dirigido de algoritmos . 15. S\u00e3o Paulo Erica 2011 1 recurso online ISBN 9788536519067 SOUZA, Marcos Fernando Ferreira de. Computadores e sociedade: da filosofia \u00e0s linguagens de programa\u00e7\u00e3o . Editora Intersaberes 208 ISBN 9788559722116 TORRES, Fernando E. et al. Pensamento computacional . Porto Alegre: SAGAH, 2019. ISBN 978-85-9502-997-2 FORBELLONE, Andr\u00e9 Luiz Villar; EBERSPACHER, Henri Frederico. L\u00f3gica de programa\u00e7\u00e3o: a constru\u00e7\u00e3o de algoritmos e estruturas de dados . 3. ed. S\u00e3o Paulo: Prentice Hall, 2005. xii, 218 p. ISBN 8576050242 Embora, na minha opini\u00e3o, faz todo sentido seguir nessas etapas mesmo. \u21a9","title":"Pensamento Computacional"},{"location":"nav/PUC/periodo1/pensamento_comp/#assuntos","text":"Conceitos e Compet\u00eancias de Pensamento Computacional Computa\u00e7\u00e3o Desplugada Bibliografia","title":"Assuntos"},{"location":"nav/PUC/periodo1/pensamento_comp/#conceitos-e-competencias-de-pensamento-computacional","text":"Existem diverg\u00eancias quanto ao significado preciso desse conceito, contudo, as interpreta\u00e7\u00f5es vigentes costumam convergir para a defini\u00e7\u00e3o que o pensamento computacional \u00e9 a maneira de organizar o racioc\u00ednio de modo a pensar de maneira organizada, l\u00f3gica e propor solu\u00e7\u00f5es \u00fateis para os problemas propostos. Podemos elencar alguns pilares que fundamentam o processo de pensamento computacional: Abstra\u00e7\u00e3o - Constru\u00e7\u00e3o de um modelo simplificado da quest\u00e3o. Decomposi\u00e7\u00e3o - Separa\u00e7\u00e3o do problema em diferentes partes. Reconhecimento de Padr\u00f5es - Identifica\u00e7\u00e3o de processos que se repetem. Automa\u00e7\u00e3o (aka Algoritmo) - Constru\u00e7\u00e3o de um processo de solu\u00e7\u00e3o do problema. Al\u00e9m desses passos, podemos acrescentar mais algumas etapas ao esfor\u00e7o de solu\u00e7\u00e3o de problemas: Paraleliza\u00e7\u00e3o - Etapas paralelas e independentes. Particionamento de Dados - Quebra de um grande volume de dados para processamento paralelo e posterior uni\u00e3o do resultado. Particionamento de Tarefas - Quebra do processo em diferentes unidades executoras paralelas. Simula\u00e7\u00e3o - Simplifica\u00e7\u00e3o do caso real para melhor compreender o problema. Avalia\u00e7\u00e3o de Solu\u00e7\u00f5es - An\u00e1lise dos impactos das solu\u00e7\u00f5es propostas. \u00c9 importante \u00e9 saber que pensamento computacional n\u00e3o \u00e9 pensar como um computador e sim de maneira organizada. Esses passos n\u00e3o s\u00e3o necessariamente seguidos nessa ordem 1 . Podemos pensar nessa lista como etapas necess\u00e1rias mas n\u00e3o sucessivas. Agora veremos um pouco mais sobre cada uma delas.","title":"Conceitos e Compet\u00eancias de Pensamento Computacional"},{"location":"nav/PUC/periodo1/pensamento_comp/#computacao-desplugada","text":"O foco dessa se\u00e7\u00e3o \u00e9 elencar algum problemas que podem ser resolvidos com algoritmos que foram constru\u00eddos usando o uso das etapas aprendidas na se\u00e7\u00e3o anterior. V\u00e1rias situa\u00e7\u00f5es que n\u00f3s encontramos no processo de constru\u00e7\u00e3o de uma solu\u00e7\u00e3o podem ser entendidas como an\u00e1logas a algum dos problemas elencados aqui. Por isso \u00e9 bom manter anota\u00e7\u00f5es sempre que aprendermos uma t\u00e9cnica de resolu\u00e7\u00e3o nova para um problema. Compres\u00e3o de Texto: Resolvido com a substitui\u00e7\u00e3o de se\u00e7\u00f5es longas por caracteres menores antes da transmiss\u00e3o. Depois enviamos as regras de codifica\u00e7\u00e3o para processamento da mensagem original. T\u00f3pico te\u00f3rico: Teoria da Informa\u00e7\u00e3o; Codifica\u00e7\u00e3o. Adivinha\u00e7\u00e3o de um N\u00famero: Basta ir perguntando pela metade das op\u00e7\u00f5es. Essa \u00e9 a solu\u00e7\u00e3o de menor rodadas. T\u00f3pico te\u00f3rico: \u00c1rvore de Decis\u00e3o; Efici\u00eancia de Algoritmos. Problema do Caixeiro Viajante: Constru\u00e7\u00e3o de um grafo e escolha do caminho de menor soma entre as dist\u00e2ncias dos n\u00f3s. T\u00f3pico te\u00f3rico: Teoria dos Grafos. Nonograma: Procurar as regras de constru\u00e7\u00e3o das imagens para cada linha at\u00e9 que se tenha um conjunto de regras para ser aplicadas nas instru\u00e7\u00f5es iniciais. Desafio dif\u00edcil de implementar por linguagem de programa\u00e7\u00e3o. T\u00f3picos te\u00f3ricos: Abstra\u00e7\u00e3o; Modelagem.","title":"Computa\u00e7\u00e3o Desplugada"},{"location":"nav/PUC/periodo1/pensamento_comp/#bibliografia","text":"BEECHER, Karl. Computational Thinking - A beginner's guide to problem-solving and programming . Swindon, UK: BCS Learning \\& Development Limited, 2017. (O\u00b4Reilly) EPUB ISBN-13: 978-1-78017-36-65 FORBELLONE, Andr\u00e9 Luiz Villar; EBERSPACHER, Henri Frederico. L\u00f3gica de programa\u00e7\u00e3o: a constru\u00e7\u00e3o de algoritmos e estruturas de dados . 3. ed. S\u00e3o Paulo: Prentice Hall, 2005. xii, 218 p. ISBN 8576050242 MANZANO, Jos\u00e9 Augusto N. G; OLIVEIRA, Jayr Figueiredo de. Algoritmos: l\u00f3gica para desenvolvimento de programa\u00e7\u00e3o de computadores . 28. ed. rev. e atual. S\u00e3o Paulo, SP: \u00c9rica, 2016. ISBN 9788536518657 GUEDES, S\u00e9rgio (Org). L\u00f3gica de programa\u00e7\u00e3o algor\u00edtmica . S\u00e3o Paulo: Pearson, 2014. ISBN 9788543005546 MANZANO, Jos\u00e9 Augusto N. G. Estudo dirigido de algoritmos . 15. S\u00e3o Paulo Erica 2011 1 recurso online ISBN 9788536519067 SOUZA, Marcos Fernando Ferreira de. Computadores e sociedade: da filosofia \u00e0s linguagens de programa\u00e7\u00e3o . Editora Intersaberes 208 ISBN 9788559722116 TORRES, Fernando E. et al. Pensamento computacional . Porto Alegre: SAGAH, 2019. ISBN 978-85-9502-997-2 FORBELLONE, Andr\u00e9 Luiz Villar; EBERSPACHER, Henri Frederico. L\u00f3gica de programa\u00e7\u00e3o: a constru\u00e7\u00e3o de algoritmos e estruturas de dados . 3. ed. S\u00e3o Paulo: Prentice Hall, 2005. xii, 218 p. ISBN 8576050242 Embora, na minha opini\u00e3o, faz todo sentido seguir nessas etapas mesmo. \u21a9","title":"Bibliografia"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/","text":"hljs.initHighlightingOnLoad(); Assuntos Aviso Cole\u00e7\u00f5es Nativas das Linguagens de Programa\u00e7\u00e3o Principais Cole\u00e7\u00f5es Cole\u00e7\u00f5es Gen\u00e9ricas Tipos Abstratos de Dados Listas \u00c1rvore Bin\u00e1ria e Tabela Hash Bibliografia Aviso Essa disciplina costuma ser muito mais dif\u00edcil em um contexto de bacharel de an\u00e1lise e desenvolvimento de sistemas, engenharia de computa\u00e7\u00e3o e ci\u00eancia da computa\u00e7\u00e3o. N\u00e3o sei precisar o porqu\u00ea mas nessa forma\u00e7\u00e3o n\u00f3s vamos ver apenas o b\u00e1sico de algumas estruturas e como implement\u00e1-las em c# por meio das collections. Como sempre, n\u00e3o podemos nunca parar de estudar mais a fundo os assuntos introduzidos nos t\u00f3picos mais a frente. A bibliografia recomendada pode ser de grande valia. Cole\u00e7\u00f5es Nativas das Linguagens de Programa\u00e7\u00e3o Vamos relembrar alguns assuntos que aprendemos no per\u00edodo passado na mat\u00e9ria de Algoritmos e Abstra\u00e7\u00e3o de Dados. Arrays S\u00e3o um tipo de tipo abstrato de dados homog\u00eaneos. \u00c9 um conjunto de vari\u00e1veis apresentadas em uma lista onde cada elemento recebe um \u00edndice de 0 a n-1. A nota\u00e7\u00e3o de um array depende do tipo nativo da vari\u00e1vel com um par de colchetes. // c# int [] array ; // array de inteiros double [] nota ; // array de ponto flutuante Para criarmos um vetor em c# usamos o token new . // c# ind = new int [ 10 ]; nota = new double [ 12 ]; No exemplo acima, criamos dois arrays. O primeiro \u00e9 um array de inteiros de 10 posi\u00e7\u00f5es e o segundo \u00e9 um array de double de 12 posi\u00e7\u00f5es. Para popularmos o array com valores, usamos o \u00edndice da posi\u00e7\u00e3o como nos exemplos abaixo. // c# int vet = new int [ 3 ]; vet [ 0 ] = 1 ; // valor 1 na primeira posi\u00e7\u00e3o vet [ 1 ] = 10 ; // valor 10 na segunda posi\u00e7\u00e3o // valor 1 como a soma dos valores // da posi\u00e7\u00e3o 2 e 12 vet [ 0 ] = vet [ 1 ] + vet [ 11 ]; Podemos nos valer dos operadores de repeti\u00e7\u00e3o para sistematicamente fazer uso dos valores de um array. // c# // operador de posi\u00e7\u00e3o do array int pos = 0 ; // Loop para inserir manualmente os // valores no nosso vetor de 3 posicoes for ( int i = 0 ; i < 3 ; i ++ ) { vet [ i ] = int . Parse ( Console . ReadLine ()); } // Loop para sabermos quais valores foram // salvos pelo user for ( int i = 0 ; i < 3 ; i ++ ) { Console . WriteLine ( vet [ i ]); } Se tentarmos acessar um valor fora do index de um array com uma posi\u00e7\u00e3o n\u00e3o aceita, vamos receber um erro chamado Index out of Range Exception . Coment\u00e1rio: Aqui o professor prop\u00f5e um exerc\u00edcio onde fazemos o input de um nome de aluno e a nota dele. A partir disso, o sistema calcula a m\u00e9dia da turma e mostra a lista dos alunos que est\u00e3o acima de m\u00e9dia da turma. Fica ai o desafio para o leitor. Listas, Pilhas e Filas A partir do array, podemos entender tipos abstratos de dados que nos dar\u00e3o a base para o estudo desse microfundamento. O primeiro TAD que vamos aprender \u00e9 a Lista . Uma lista \u00e9 um objeto que cont\u00e9m um array que recebe elementos em qualquer posi\u00e7\u00e3o, um contador de elementos no array e m\u00e9todos de inser\u00e7\u00e3o e remo\u00e7\u00e3o. Uma lista possui alguns m\u00e9todos \u00fateis para manipula\u00e7\u00e3o dos dados: Construtores Inser\u00e7\u00e3o de Elementos Remo\u00e7\u00e3o de Elementos Mostrar Elemento Pesquisar index Ordenar Como estamos falando de um objeto, o comportamento de cada m\u00e9todo deve ser analisado na classe que ser\u00e1 instanciada nele. Principais Cole\u00e7\u00f5es Aprendemos na disciplina de programa\u00e7\u00e3o modular que existem v\u00e1rias cole\u00e7\u00f5es nativas no ambiente .NET que s\u00e3o otimizadas e devem compor o nosso repert\u00f3rio de solu\u00e7\u00f5es. Vale lembrar que para ter acesso \u00e0s cole\u00e7\u00f5es precisaremos acessar o namespace System.Collections . Agora vamos aprender algumas classes interessantes para o nosso estudo. ArrayList O ArrayList \u00e9 um objeto similar ao array com a vantagem de podermos redimensionar dinamicamente o seu tamanho (o array simples tem tamanho fixo). A documenta\u00e7\u00e3o oficial pode ser encontrada nesse link . Possui um m\u00e9todo chamado Capacity que permite a manipula\u00e7\u00e3o da capacidade do nosso ArrayList. Por default, o seu valor \u00e9 zero e, ao inserirmos um elemento, ele muda para quatro. A capacidade do ArrayList dobra automaticamente sempre que temos a necessidade de inserir novos elementos al\u00e9m da capacidade anterior. Al\u00e9m do m\u00e9todo de capacidade, temos o Count que nos d\u00e1 o n\u00famero de elementos no ArrayList. O uso dele \u00e9 feito atrav\u00e9s da instancia\u00e7\u00e3o do objeto por meio de dois comandos poss\u00edvels. // c# // cria\u00e7\u00e3o sem informar a capacidade ArrayList al1 = new ArrayList (); // cria\u00e7\u00e3o informando a capacidade inicial ArrayList al2 = new ArrayList ( 10 ); Aqui temos um exemplo simples da utiliza\u00e7\u00e3o desse objeto 1 . // c# using System ; using System.Collections ; class MainClass { public static void Main ( string [] args ){ ArrayList al = new ArrayList (); Console . Write ( \"al.Capacity({0}) | al.Count({1})\" , al . Capacity , al . Count ); al . Add ( 1 ); al . Add ( \"string qualquer\" ); al . Add ( 3.1415 ); Console . Write ( \"al.Capacity({0}) | al.Count({1})\" , al . Capacity , al . Count ); } } Outra manipula\u00e7\u00e3o comum de se utilizar \u00e9 a de opera\u00e7\u00f5es em todos os elementos de um ArrayList. Para isso, podemos usar os operadores de repeti\u00e7\u00e3o como o for e, al\u00e9m desse, um operador cujo token \u00e9 foreach . // c# [...] ArrayList al = new ArrayList (); [...] // forma 1 for ( int i = 0 ; i < al . Count (); i ++ ) { Console . WriteLine ( al [ i ]); } // forma 2 foreach ( object o in al ) { Console . WriteLine ( al [ o ]); } // forma 3 foreach ( int num in al ) { soma = soma + num ; } Al\u00e9m dos m\u00e9todos de capacidade e contagem, temos m\u00e9todos que nos permitem interagir com o nosso arraylist: Add - Insert de um valor com retorno da posi\u00e7\u00e3o Insert - Insert de um valor na posi\u00e7\u00e3o indicada Remove - Remove um valor RemoveAt - Remove um valor em um determinado index RemoveRange - Remove uma quantidade de elementos a partir de um index Clear - Remove todos os elementos Contains - Teste l\u00f3gico se um valor existe no arraylist IndexOf - Retorna o index da primeira ocorr\u00eancia de um valor LastIndexOf - Retorna o index da \u00faltima ocorr\u00eancia de um valor Reverse - Inverte a ordem Sort - Ordena os elementos ToArray - Copia os valores em um array TrimToSize - Altera o capacity BinarySearch - Realiza uma busca binaria 2 Podemos aprender um pouco melhor o uso de alguns desses m\u00e9todos a partir de um exemplo. Vamos construir um programa que l\u00ea 5 inteiros, somar todos em um arraylist e calcular a m\u00e9dia deles. Depois disso, vamos mostrar os valores que s\u00e3o maiores que a m\u00e9dia. Para isso, vamos usar dois m\u00e9todos de la\u00e7os de repeti\u00e7\u00e3o, um for e um foreach . // c# using System.Collections ; ArrayList list = new ArrayList (); double media = 0 ; for ( int i = 0 ; i < 5 ; i ++ d ) { int valor = int . Parse ( Console . ReadLine ()); list . Add ( valor ); media += valor ; } media /= 5 ; foreach ( object o in lista ) { if (( int ) o > media ) { Console . WriteLine ( o ); } } Coment\u00e1rio: O comando dentro da condicional (int)o \u00e9 uma das v\u00e1rias maneiras de se converter um item de uma lista em um inteiro. Chamamos essa maneira de TypeCasting 3 Al\u00e9m dela poder\u00edamos usar int.Parse() ou Convert.ToInt32() . Aqui tem um texto falando mais sobre isso e a aqui temos a pr\u00f3pria documenta\u00e7\u00e3o da Microsoft. Queue, Stack e Hashtable Al\u00e9m da lista vamos aprender outros conceitos de estrutura de dados muito usados no desenvolvimento de aplica\u00e7\u00f5es: Pilhas e Filas. Uma Pilha ou Stack \u00e9 um TAD que possui a caracter\u00edstica que o primeiro elemento que entra \u00e9 o \u00faltimo elemento que sai . A essa caracter\u00edstica damos o nome de First In, Last Out (FILO). Coment\u00e1rio: Pense em uma pilha de pratos sujos na pia. O prato que foi colocado primeiro \u00e9 o \u00faltimo prato que ser\u00e1 limpo pois est\u00e1 na base da pilha de lou\u00e7a suja. Uma Fila ou Queue \u00e9 um TAD em que o primeiro elemento que entra \u00e9 o primeiro a sair . O nome dessa caracter\u00edstica \u00e9 Fist In, First Out (FIFO). As duas classes possuem m\u00e9todos parecidos (dadas as diferen\u00e7as j\u00e1 comentadas acima): enqueue / push - Inser\u00e7\u00e3o de objetos dequeue / pop - Remo\u00e7\u00e3o de objetos clear - Remo\u00e7\u00e3o de todos os objetos contains - Retorno se um objeto est\u00e1 contido peek - Retorna o pr\u00f3ximo objeto na ordem de remo\u00e7\u00e3o count - Quantidade de elementos na estrutura Aqui o professor prop\u00f5e um desafio bem legal. Vamos ver um c\u00f3digo c# com um programa de fila e transcrever para idioma o que o programa faz. // c# Queue f = new Queue (); f . Enqueue ( 1 ); f . Enqueue ( 2 ); f . Enqueue ( 3 ); Console . Write ( \"Fila: ({0}) / ({1}) / ({2})\" , f . Contains ( 1 ), f . Count , f . Peek ()); Console . WriteLine ( f . Dequeue ()); Console . Write ( \"Fila: ({0}) / ({1}) / ({2})\" , f . Contains ( 1 ), f . Count , f . Peek ()); Agora um outro programa para uma pilha. // c# Stack p = new Stack (); p . Push ( 1 ); p . Push ( 2 ); p . Push ( 3 ); Console . Write ( \"Pilha: ({0}) / ({1}) / ({2})\" , p . Contains ( 1 ), p . Count , p . Peek ()); Console . WriteLine ( p . Pop ()); Console . Write ( \"Pilha: ({0}) / ({1}) / ({2})\" , p . Contains ( 1 ), p . Count , p . Peek ()); A terceira estrutura de dados que vamos aprender \u00e9 chamada Hashtable . Essa estrutura \u00e9 do tipo dicion\u00e1rio, ou seja, para cada entrada de dados, temos uma par chave-valor. Podemos dividir o nome desse TAD em duas palavras: hash e table . Table \u00e9 simplesmente uma alus\u00e3o \u00e0 tabela. O que temos de novidade aqui \u00e9 o termo hash . Coment\u00e1rio: Esse material \u00e9, em tese, um resumo dos conte\u00fados dados na gradua\u00e7\u00e3o da PUC-MG, entretanto, quando eu sinto que o t\u00f3pico est\u00e1 demasiadamente superficial, eu simplesmente n\u00e3o consigo evitar de expandir o conte\u00fado originalmente dado. Essa parte eu tirei do livro \"Data Structures and Algorithms with Python\". A primeira coisa que precisamos para entender o que \u00e9 esse conceito de hash \u00e9 compreender que programas acessam a mem\u00f3ria e que o tempo necess\u00e1rio para realizar esse trabalho pode variar de acordo com a maneira que os programas s\u00e3o constru\u00eddos. Para lidar com essa preocupa\u00e7\u00e3o os cientistas da computa\u00e7\u00e3o criaram o conceito de nota\u00e7\u00e3o Omnicron ou Big-Oh. Formalmente, dada uma lista qualquer de tamanho \\(n\\) , cujo tempo de acesso m\u00e9dio para coleta de um elemento dessa lista \u00e9 dado pode \\(f(n)\\) . Podemos definir que: \\(\\mathcal{O}(g(n)) = \\{ f | \\exists d > 0, n_0 \\in \\mathbb{Z}^+ i 0 \\leq f(n) \\leq d g(n),\\forall n \\geq n_0 \\}\\) Calma, respira. N\u00e3o \u00e9 nada dif\u00edcil. Essa nota\u00e7\u00e3o matem\u00e1tica toda ai quer dizer que podemos definir um grupo fun\u00e7\u00f5es \\(\\mathcal{O}(g(n))\\) que s\u00e3o formadas por todas as fun\u00e7\u00f5es \\(f\\) 4 em que temos algum \\(d\\) maior que zero e um \\(n_0\\) que \u00e9 inteiro e positivo, de modo que, \\(f(n)\\) \u00e9 maior igual a zero e menor igual a \\(d\\) vezes \\(g(n)\\) para todo \\(n\\) maior igual a \\(n_0\\) . Quando dizemos que um determinado programa tem \\(\\mathcal{O}(1)\\) , estamos dizendo que \\(g(n) = 1\\) , ou seja, que nosso programa pertence ao conjunto de fun\u00e7\u00f5es \\(f\\) que, dado um valor qualquer de \\(d\\) , tem o tempo de leitura de um elemento entre a faixa de tempo \\(0 \\leq f(n) \\leq d\\) para qualquer \\(n\\) da nossa lista. Tudo isso \u00e9 pra dizer que essa nota\u00e7\u00e3o \u00e9 usada para designar a rela\u00e7\u00e3o entre o tempo de completude de uma tarefa e o tamanho dos dados necess\u00e1rios para a sua realiza\u00e7\u00e3o (que come\u00e7a em \\(n_0\\) e vai at\u00e9 \\(n\\) ). Quando esse acesso \u00e0 informa\u00e7\u00e3o de um elemento qualquer n\u00e3o \u00e9 afetado pelo volume de dados da lista, dizemos que ele possui um tempo de execu\u00e7\u00e3o constante denotado por \\(\\mathcal{O}(1)\\) . V\u00e1rias opera\u00e7\u00f5es b\u00e1sicas possuem essa caracter\u00edstica como somar, multiplicar ou comparar valores, levam apenas o tempo de um ciclo de computa\u00e7\u00e3o para ser realizadas. Agora que entendemos (bem por cima). o conceito de complexidade, podemos entender o conceito de hash. A primeira coisa que precisamos saber \u00e9 que hashing \u00e9 uma t\u00e9cnica muito eficiente de pesquisar por um valor. Imaginem que temos um conjunto de v\u00e1rios elementos e queremos testar se um valor qualquer faz parte ou n\u00e3o desse conjunto. N\u00e3o \u00e9 dif\u00edcil perceber que, caso o tamanho do conjunto aumente muito, o tempo necess\u00e1rio para essa verifica\u00e7\u00e3o ser\u00e1 cada vez maior porque ter\u00edamos de verificar se todos os \u00edtens do nosso conjunto s\u00e3o iguais ao elemento que queremos verificar. Entretanto, \u00e9 ai que podemos aplicar a t\u00e9cnica de hashing para reduzir a complexidade dessa tarefa para \\(\\mathcal{O}(1)\\) . Para isso, precisamos compreender que, pelo princ\u00edpio do acesso rand\u00f4mico , o acesso a qualquer elemento em uma lista \u00e9 \\(\\mathcal{O}(1)\\) . Tudo que precisamos fazer \u00e9 usar uma fun\u00e7\u00e3o que \"traduza\" os elementos do nosso conjunto para uma lista de refer\u00eancia (ou index). A partir disso, podemos verificar a pertin\u00eancia de um elemento qualquer simplesmente usando a mesma fun\u00e7\u00e3o para ver se esse novo index j\u00e1 existe na nossa lista de index do conjunto. Essa fun\u00e7\u00e3o especial \u00e9 chamada de fun\u00e7\u00e3o de hash . Tal qual as outras classes, tamb\u00e9m temos m\u00e9todos muito \u00fateis que vale a pena conhecer: add - Insere um objeto com o index na tabela remove - Remove um objeto clear - Remove todos os objetos contains - Teste se a tabela cont\u00e9m um objeto com uma dada chave containsKey - idem contains containsValue - Teste se a tabela cont\u00e9m um determinado valor count - Quantos objetos temos S\u00f3 temos que ter alguns cuidados ao usarmos uma estrutura de hashtable porque podemos ter problemas de colis\u00f5es prim\u00e1rias que acontecem quando a posi\u00e7\u00e3o no array de index j\u00e1 est\u00e1 ocupada por um elemento. Cole\u00e7\u00f5es Gen\u00e9ricas Come\u00e7amos a ver esse assunto em programa\u00e7\u00e3o modular e agora vamos adentrar um pouco mais nele. Uma grande diferen\u00e7a entre as cole\u00e7\u00f5es anteriores e \u00e0s gen\u00e9ricas \u00e9 que nas \u00faltimas temos que declarar os tipos no momento da cria\u00e7\u00e3o sem possibilidade de misturar tipos dentro do objeto. Enquanto as classes padr\u00f5es permitiam qualquer tipo de dados misturados. Coment\u00e1rio: O <T> na escrita dessas classes \u00e9 justamente para indicar que somos obrigados a indicar o tipo do dado no momento da cria\u00e7\u00e3o do objeto. Cada collection apresentada nas se\u00e7\u00f5es anteriores desse cap\u00edtulo possui uma vers\u00e3o gen\u00e9rica de modo que seus m\u00e9todos e propriedade s\u00e3o, em algum grau, an\u00e1logos. Todas elas s\u00e3o acess\u00edveis pelo namespace System.Collections.Generic . Em termos de analogias, podemos fazer os seguintes paralelos. Padr\u00e3o Generic ArrayList List<T> ou LinkedList<T> Queue Queue<T> Stack Stack<T> Hashtable Dictionary<TKey,TValue> List A documenta\u00e7\u00e3o oficial pode ser encontrada nesse link . A declara\u00e7\u00e3o \u00e9 feita por: List<T> variavel = new List<T>() ; As propriedades de contagem e capacidade s\u00e3o iguais \u00e0s da arraylist. Os m\u00e9todos de busca, inser\u00e7\u00e3o, remo\u00e7\u00e3o, convers\u00e3o para array e outros s\u00e3o iguais tamb\u00e9m. Uma mudan\u00e7a que vale a pena destacar \u00e9 no m\u00e9todo TrimToSize() que na lista gen\u00e9rica vira o m\u00e9todo TrimExcess() . Para aprendermos melhor a diferen\u00e7a entre o ArrayList e a lista gen\u00e9rica, vamos definir uma classe Aluno que vamos usar na constru\u00e7\u00e3o de dois programas que far\u00e3o a mesma atividade. // c# class Aluno { public int matricula ; public string nome ; public string email ; // construtor vazio public Aluno () { this . nome = \"\" ; this . email = \"\" ; this . matricula = 0 ; } // construtor public Aluno ( string nome , int matricula , string email ) { this . nome = nome ; this . email = email ; this . matricula = matricula ; } // procedimento public void Mostrar () { Console . WriteLine ( \"nome: \" + nome + \"mat: \" + matricula + \" email: \" + email ); } } Podemos ver que essa classe possui dois construtores e um m\u00e9todo chamado Mostrar que imprime na tela os dados do objeto. Agora vamos comparar dois programas que realizam a mesma tarefa onde, em um usamos ArrayList e, no outro, usamos Lista gen\u00e9rica. // c# // PROGRAMA USANDO ARRAYLIST // using System ; using System.Collections ; class Aluno { [...] } // Procedimento de impress\u00e3o dos elementos da ArrayList public static void Mostrar ( ArrayList al ) { foreach ( object o in al ) { (( Aluno ) o ). Mostrar (); } } // programa usando o ArrayList public static void Main ( string [] args ) { ArrayList al = new ArrayList (); // Inserindo 5 alunos usando n\u00fameros aleat\u00f3rios for ( int i = 0 ; i < 5 ; i ++ ) { int num = Math . Abs (( new Random ()). Next ()) % 100 ; al . Add ( new Aluno ( \"Aluno \" + num , num , \"aluno\" + num + \"@a.com.br\" )); } // Inserindo um aluno manualmente Aluno a = new Aluno ( \"Bruno\" , 101 , \"bruno@gmail.com\" ); al . Insert ( 2 , a ); // Mostrando o primeiro elemento (( Aluno ) al [ 0 ]). Mostrar (); // Removendo o aluno inserido manualmente al . Remove ( a ); // Teste de Contains if ( al . Contains ( a ) == true ) { Console . WriteLine ( \"Elemento encontrado!\" ); } else { Console . WriteLine ( \"Elemento n\u00e3o encontrado!\" ); } // Reduzindo a capacidade para o n\u00famero de elementos al . TrimToSize (); // Removendo todos os elementos al . Clear (); } // c# // PROGRAMA USANDO LISTA GEN\u00c9RICA // using System ; using System.Collections.Generic ; class Aluno { [...] } // Procedimento de impress\u00e3o dos elementos da ArrayList public static void Mostrar ( List < Aluno > l ) { foreach ( Aluno a in l ) { a . Mostrar (); } } public static void Main ( string [] args ) { List < Aluno > l = new List < Aluno > (); // Inserindo 5 alunos usando n\u00fameros aleat\u00f3rios for ( int i = 0 ; i < 5 ; i ++ ) { int num = Math . Abs (( new Random ()). Next ()) % 100 ; l . Add ( new Aluno ( \"Aluno \" + num , num , \"aluno\" + num + \"@a.com.br\" )); } // Inserindo um aluno manualmente Aluno a = new Aluno ( \"Bruno\" , 101 , \"bruno@gmail.com\" ); al . Insert ( 2 , a ); // Mostrando o primeiro elemento l [ 0 ]. Mostrar (); // Removendo o aluno inserido manualmente l . Remove ( a ); // Teste de Contains if ( l . Contains ( a ) == true ) { Console . WriteLine ( \"Elemento encontrado!\" ); } else { Console . WriteLine ( \"Elemento n\u00e3o encontrado!\" ); } // Reduzindo a capacidade para o n\u00famero de elementos l . TrimExcess (); // Removendo todos os elementos l . Clear (); } Comparando os dois programas, podemos ver que existem diferen\u00e7as no modo como usamos elementos contidos nas duas estruturas de dados. Quando usamos um elemento de um ArrayList, o c# precisa converter o elemento de object para algum tipo primitivo. Chamamos esse processo de boxing . Esse \u00e9 o motivo de termos que usar o TypeCasting. Essa necessidade n\u00e3o existe na lista gen\u00e9rica porque ela nos obriga a declarar o tipo dos elementos no momento da cria\u00e7\u00e3o do objeto. Por isso a recupera\u00e7\u00e3o dos elementos \u00e9 mais simples de ser feita apenas com a passagem do index. LinkedList<T> A documenta\u00e7\u00e3o oficial est\u00e1 dispon\u00edvel nesse link . A linkedlist \u00e9 a aplica\u00e7\u00e3o em c# de uma lista flex\u00edvel. Isso quer dizer que a mem\u00f3ria \u00e9 alocada somente quando existe a necessidade, uma c\u00e9lula por vez e n\u00e3o em \"blocos\" de 4 unidades como na lista gen\u00e9rica. Outa diferen\u00e7a \u00e9 que, do lado do hardware, a lista gen\u00e9rica salva os seus valores continuamente ao longo da mem\u00f3ria. Por sua vez, a LinkedList salva em cada c\u00e9lula duas informa\u00e7\u00f5es: o valor do item na posi\u00e7\u00e3o e a refer\u00eancia para a pr\u00f3xima c\u00e9lula alocada na mem\u00f3ria. Ou seja, o nome linkedlist ou lista ligada \u00e9 porque os nossos valores s\u00e3o \"ligados\" entre si por meio dessa fila de valores e refer\u00eancias de posi\u00e7\u00f5es na mem\u00f3ria 5 . O final da fila sempre apontar\u00e1 para um endere\u00e7o nulo. Essa \u00e9 a indica\u00e7\u00e3o que ele \u00e9 o \u00faltimo elemento da linkedlist. Agora vamos ver alguns m\u00e9todos \u00fateis dessa classe: AddAfter - Adiciona um valor novo como refer\u00eancia de um c\u00e9lula anterior ao novo valor AddBefore - Adiciona um valor novo como refer\u00eancia de um c\u00e9lula posterior ao novo valor AddFirst - Muda o item de posi\u00e7\u00e3o 0 AddLast - Muda item de posi\u00e7\u00e3o n-1 Remove - Libera o espa\u00e7o na mem\u00f3ria para uma nova aloca\u00e7\u00e3o da primeira apari\u00e7\u00e3o do valor RemoveFirst RemoveLast Clear Contains Find - Retorna a primeira ocorr\u00eancia FindLast - Retorna a \u00faltima ocorr\u00eancia Agora vamos ver um programa que utilize alguns desses m\u00e9todos. // c# using System ; using System.Collections.Generic ; static void Main ( string [] args ) { LinkedList < string > meses = new LinkedList < string > (); meses . AddFirst ( \"janeiro\" ); meses . AddLast ( \"Fevereiro\" ); meses . AddLast ( \"Mar\u00e7o\" ); meses . RemoveFirst (); LinkedListNode < int > i = meses . Find ( \"Fevereiro\" ); meses . AddBefore ( i , \"Janeiro\" ); foreach ( string mes in meses ) { Console . WriteLine ( mes ); } } Queue e Stack As documenta\u00e7\u00f5es oficiais podem ser encontradas aqui e aqui . Essas duas classes s\u00e3o muito parecidas com as vers\u00f5es padr\u00f5es. A novidade aqui \u00e9 que temos que definir os tipos nas cole\u00e7\u00f5es gen\u00e9ricas. De resto, s\u00e3o praticamente a mesma coisa. Vamos ver um exemplo dessas classes. // c# using System ; using System.Collections.Generic ; static void Main ( string [] args ) { Queue < int > f = new Queue < int > (); f . Enqueue ( 1 ); f . Enqueue ( 2 ); f . Enqueue ( 3 ); // remove o primeiro f . Dequeue (); Stack < int > p = new Stack < int > (); p . Push ( 1 ); p . Push ( 2 ); p . Push ( 3 ); // remove o \u00faltimo p . Pop (); } Dictionary A documenta\u00e7\u00e3o oficial pode ser lida aqui . Os m\u00e9todos s\u00e3o bem parecidos com os da hashtable. Com a novidade do m\u00e9todo TryGetValue(TKey,out TValue) onde, ao passarmos o valor da chave, caso ela exista no dicion\u00e1rio gen\u00e9rico, teremos como resposta um true junto do valor relacionado ao da chave pesquisada. Dentre as propriedades podemos destacar as que retornam os valores do dicion\u00e1rio: Item - Retorna a cole\u00e7\u00e3o do tipo KeyValuePair<TKey,TValue> Keys - Retorna uma cole\u00e7\u00e3o do tipo KeyCollection Values - Retorna uma cole\u00e7\u00e3o do tipo ValueCollection Agora vamos ver um programa usando alguns m\u00e9todos dessa classe. // c# using System ; using System.Collections.Generic ; static void Main ( string [] args ) { Dictionary < string , Dictionary < string , int >> nota = new Dictionary < string , Dictionary < string , int >> (); nota . Add ( \"AED\" , new Dictionary < string , int > () { { \"Maria\" , 60 }, { \"Pedro\" , 10 }, { \"Jo\u00e3o\" , 25 } }); nota . Add ( \"Calculo\" , new Dictionary < string , int > () { { \"Tatiano\" , 29 }, { \"Ana Paula\" , 16 }, { \"Kleber\" , 22 } }); nota [ \"AED\" ]. Add ( \"Astrolabio\" , 99 ); foreach ( KeyValuePair < string , Dictionary < string , int >> disciplina in nota ) { Console . WriteLine ( disciplina . Key ); Console . WriteLine ( \" Alunos:\" ); double media = 0 ; foreach ( KeyValuePair < string , int > Aluno in disciplina . Value ) { Console . WriteLine ( Aluno . Key + \"Nota: \" + Aluno . Value ); media += Aluno . Value ; } media /= disciplina . Value . Count ; Console . WriteLine ( \"M\u00e9dia da Turma: \" + media ); } } Coment\u00e1rio: Aqui o professor n\u00e3o teve pena. E eu tamb\u00e9m n\u00e3o vou ter. N\u00e3o siga adiante se voc\u00ea n\u00e3o for capaz de entender o que esse programa faz. Analise o c\u00f3digo at\u00e9 fazer sentido. Tipos Abstratos de Dados A partir de agora, vamos estudar o funcionamento b\u00e1sico de algumas estruturas muito comuns na resolu\u00e7\u00e3o de problemas comput\u00e1veis: listas, \u00e1rvores bin\u00e1rias e tabelas hash. Na se\u00e7\u00e3o anterior, n\u00f3s aprendemos como usar algumas implementa\u00e7\u00f5es desses conceitos em c#. Agora, vamos estudar um pouco da teoria por tr\u00e1s dessas classes. Coment\u00e1rio: A partir de agora, vamos ver muito c\u00f3digo. S\u00e9rio. Se prepare, pegue uma boa dose de caf\u00e9 e vamos embarcar nessa tonelada de c\u00f3digo c#. Listas As listas podem ser divididas em 2 tipos: lineares e n\u00e3o lineares. Das collections que vimos, podemos dizer que ArrayList e List<T> s\u00e3o exemplos de listas lineares e que a LinkedList<T> \u00e9 um exemplo de lista n\u00e3o linear. Lista linear Uma lista linear, tamb\u00e9m chamada de sequencial, possui estruturas formadas por um array e um contador. Possuem m\u00e9todo de inser\u00e7\u00e3o e remo\u00e7\u00e3o de elementos e, por ter tamanho definido, precisa ter alguma resolu\u00e7\u00e3o para o caso onde uma inser\u00e7\u00e3o \u00e9 solicitada mas o tamanho da lista j\u00e1 foi alcan\u00e7ado. A primeira forma de se pensar na solu\u00e7\u00e3o para o problema acima \u00e9 simplesmente proibir que uma inser\u00e7\u00e3o ocorra quando o contador indicar que a lista alcan\u00e7ou o tamanho delimitado. Essa abordagem \u00e9 mais simples e faremos uso dela logo mais a frente. A segunda, \u00e9 simplesmente permitir que esse limite seja expandido. Essa \u00e9 justamente a abordagem usada nas collections ArrayList e List<T> . Ao se chegar no limite inicial, o processador cria um novo array de tamanho maior copiando todos os itens anteriores. Nesta se\u00e7\u00e3o vamos construir uma lista linear \"na unha\". Assim vamos aprender melhor como esses m\u00e9todos s\u00e3o implementados nas classes que usaremos ao longo da nossa jornada como desenvolvedores .NET. // c# // Cria\u00e7\u00e3o de uma lista linear class ListaLinear { private int [] array ; private int n ; // construtor vazio ListaLinear () { array = new int [ 6 ]; n = 6 ; } // construtor com defini\u00e7\u00e3o do tamanho ListaLinear ( int tamanho ) { array = new int [ tamanho ]; n = 0 ; } // rela\u00e7\u00e3o de procedimentos e m\u00e9todos void InserirInicio () {...} void InserirFinal () {...} void Inserir () {...} int RemoverInicio () {...} int RemoverFinal () {...} int Remover () {...} void Mostrar () {...} } Agora vamos passar para a cria\u00e7\u00e3o dos m\u00e9todos indicados na parte final do nosso c\u00f3digo. // c# // InserirInicio void InserirInicio ( int x ) { // c\u00f3digo encerra se tivermos mais \u00edtens do que // a lista pode comportar if ( n >= array . Length ) Environment . Exit ( 0 ); for ( int i = n ; i > 0 ; i -- ) { array [ i ] = array [ i - 1 ]; } array [ 0 ] = x ; n ++ ; } // InserirFinal void InserirFinal ( int x ) { if ( n >= array . Length ) Environment . Exit ( 0 ); array [ n ] = x ; n ++ ; }; // Inserir em qualquer posi\u00e7\u00e3o void Inserir ( int x , int pos ) { if ( n >= array . Length || pos < 0 || os > n ) { Environment . Exit ( 0 ); // leva os elementos para o final do array for ( int i = n ; i > pos ; i -- ){ array [ i ] = array [ i - 1 ]; } array [ pos ] = x ; n ++ ; } }; Esses 3 m\u00e9todos de inser\u00e7\u00e3o s\u00e3o tranquilos de entendermos. No caso do primeiro, ele move todo mundo pra direita e acrescenta o valor novo no index 0. No caso do inserir no final, ele simplesmente olha o contador e insere um elemento no index dele. Por fim, no caso do inserir gen\u00e9rico, ele primeiro move todos os elementos para a direita do index da posi\u00e7\u00e3o indicada para depois inserir o elemento nela. Coment\u00e1rio: Bem legal vermos como um simples m\u00e9todo de adi\u00e7\u00e3o pode dar uma dor de cabe\u00e7a para se pensar em como implementar a melhor maneira. Nas pr\u00f3ximas vezes que usar um simples insert em uma lista, podemos pensar o que t\u00e1 acontecendo por tr\u00e1s das bibliotecas que usamos. Agora vamos para os m\u00e9todos de remo\u00e7\u00e3o. S\u00e3o an\u00e1logos aos m\u00e9todos de inser\u00e7\u00e3o s\u00f3 que no caminho reverso. // c# // Remover primeiro elemento int RemoverInicio () { if ( n == 0 ) Environment . Exit ( 0 ); int resp = array [ 0 ]; n -- ; for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = array [ i + 1 ]; } return resp ; } // Remover o \u00faltimo elemento int RemoverFim () { if ( n == 0 ) Environment . Exit ( 0 ); return array [ -- n ]; } // Remove um elemento da posi\u00e7\u00e3o // movendo o resto para a esquerda int Remover ( int pos ) { if ( n == 0 || pos < 0 || pos >= n ) Environment . Exit ( 0 ); int resp = array [ pos ]; n -- ; for ( int i = pos ; i < n ; n ++ ) { array [ i ] = array [ i + 1 ]; } return resp ; } Coment\u00e1rio: Novamente, se voc\u00ea est\u00e1 com dificuldade em entender esse c\u00f3digo. Pare agora e revise o conte\u00fado . N\u00e3o basta pegar o c\u00f3digo e rodar no seu computador. Voc\u00ea \u00e9 que deve ser capaz de ler e entender o c\u00f3digo. Agora s\u00f3 precisamos de um \u00faltimo m\u00e9todo de mostrar os elementos da nossa lista linear. // c# // Mostra todos os elementos da lista void Mostrar () { Console . Write ( \"[\" ); for ( int i = 0 ; i < n ; i ++ ) { Console . Write ( array [ i ] + \" \" ); } Console . Write ( \"]\" ); } Coment\u00e1rio: Aqui vai um pequeno teste. Imagine que eu crie uma lista com essa classe instanciada. Qual ser\u00e1 o output obtido caso a gente use o m\u00e9todo Mostrar() ? O c\u00f3digo integral desse programa pode ser encontrado no meu github gist . Classe Autorreferencial Uma classe autorreferencial possui a peculiaridade de fazer refer\u00eancia para objetos do seu pr\u00f3prio tipo. A LinkedListNode<T> \u00e9 um exemplo dessa classe. Abaixo temos um exemplo de c\u00f3digo que implementa essa caracter\u00edstica. // c# class Celula { public int elemento ; // referencia para a pr\u00f3xima c\u00e9lula public Celula prox ; // construtor vazio public Celula () { this . elemento = 0 ; this . prox = null ; } // construtor com a passagem do par\u00e2metro public Celula ( int x ) { this . elemento = x ; this . prox = null ; } } A vantagem dessa abordagem \u00e9 que podemos criar elementos em cadeia. No exemplo acima, cada instancia\u00e7\u00e3o da classe pode ser relacionada a outra de maneira recursiva. Coment\u00e1rio: A gente viu um pouco sobre recurs\u00e3o l\u00e1 no microfundamento de programa\u00e7\u00e3o modular mas no contexto de uma fun\u00e7\u00e3o. Lista flex\u00edvel Uma lista flex\u00edvel \u00e9 justamente a constru\u00e7\u00e3o feita pelas classes autorreferenciais que acabamos de ver. Cada elemento instanciado \u00e9 salvo na mem\u00f3ria de modo a ocupar uma sequ\u00eancia aleat\u00f3ria de armazenamento no hardware da mem\u00f3ria. O LinkedList<T> \u00e9 a implementa\u00e7\u00e3o em c# desse conceito. Existem duas maneiras de se criar uma lista flex\u00edvel. A primeira, cont\u00e9m um primeiro elemento cujo valor elemento \u00e9 null (chamamos esse elemento de \"cabe\u00e7a\"). A segunda maneira, \u00e9 colocarmos o valor do primeiro elemento diretamente no primeiro n\u00f3 da cadeia de elementos. A vantagem da primeira abordagem (com cabe\u00e7a) \u00e9 que tratamos o m\u00e9todo de inserir em uma lista vazia exatamente do mesmo modo de inserir em uma lista de elementos. A raz\u00e3o disso \u00e9 que s\u00f3 precisaremos mudar o atributo prox da cabe\u00e7a. No caso da abordagem sem cabe\u00e7a, ter\u00edamos que primeiro verificar se existem elementos para, em caso negativo, alterarmos o atributo prox para null desse primeiro elemento. Abaixo temos a implementa\u00e7\u00e3o de uma lista flex\u00edvel que usa a classe autorrefencial da se\u00e7\u00e3o anterior. // c# class ListaFlex { // instancia\u00e7\u00e3o das posi\u00e7\u00f5es obrigat\u00f3rias // de primeiro e \u00faltimo como objetos autorreferenciados private Celula primeiro , ultimo ; // construtor vazio public ListaFlex () { ultimo = primeiro = new Celula (); } // obtendo o tamanho da lista public int Tamanho () { int tamamho = 0 ; for ( Celula i = primeiro ; i != ultimo ; i = i . prox ) tamanho ++ ; return tamanho ; } // lista dos m\u00e9todos public void InserirFim ( int x ) { ultimo . prox = new Celula ( x ); ultimo = ultimo . prox ; } public void InserirInicio ( int x ) { Celula tmp = new Celula ( x ); tmp . prox = primeiro . prox ; primeiro . prox = tmp ; if ( primeiro == ultimo ) { ultimo = tmp ; } tmp = null ; } public int RemoverFim () { if ( primeiro == ultimo ) Environment . Exit ( 0 ); // loop para se chegar no pen\u00faltimo elemento for ( Celula i = primeiro ; i . prox != ultimo ; i = i . prox ) int elemento = ultimo . elemento ; ultimo = i ; i = ultimo . prox = null ; return elemento ; } public int RemoverInicio () { // esse m\u00e9todo mant\u00e9m a cabe\u00e7a da lista if ( primeiro == ultimo ) Environment . Exit ( 0 ); Celula tmp = primeiro . prox ; // a cabe\u00e7a agora vai apontar para // o segundo elemento \"pulando\" o primeiro primeiro . prox = primeiro . prox . prox ; int elemento = tmp . elemento ; tmp . prox = null ; tmp = null ; return elemento ; } // aten\u00e7\u00e3o aqui: a posi\u00e7\u00e3o 0 n\u00e3o \u00e9 a da cabe\u00e7a e sim // do primeiro elemento ap\u00f3s ela, ou seja, primeiro.prox public void Inserir ( int x , int pos ) { int tamanho = Tamanho (); if ( pos < 0 || pos > tamanho ) { Environment . Exit ( 0 ); } else if ( pos == 0 ) { InserirInicio ( x ); } else if ( pos == tamanho ) { InserirFim ( x ); } else { Celula i = primeiro ; for ( int j = 0 ; j < pos ; j ++ ) i = i . prox ; Celula tmp = new Celula ( x ); tmp . prox = i . prox ; i . prox = tmp ; tmp = i = null ; } } public int Remover ( int pos ) { int tamanho = Tamanho (); if ( primeiro == ultimo || pos < 0 ) { Environment . Exit ( 0 ); } else if ( pos == 0 ) { elemento = RemoverInicio (); } else if ( pos == tamanho - 1 ) { elemento = RemoverFim (); } else { Celula i = primeiro ; for ( int j = 0 ; j < pos ; j ++ ) i = i . prox ; Celula tmp = i . prox ; elemento = tmp . elemento ; i . prox = tmp . prox ; tmp . prox = null ; i = tmp = null ; } return elemento ; } public void Mostrar () { Console . Write ( \"[\" ); for ( Celula i = primeiro . prox ; i != null ; i = i . prox ) { Console . Write ( i . elemento + \" \" ); } Console . Write ( \"]\" ); } } O c\u00f3digo dessa classe est\u00e1 dispon\u00edvel nesse github gist . \u00c1rvore Bin\u00e1ria e Tabela Hash \u00c1rvore Bin\u00e1ria Tabela Hash Bibliografia DEITEL, Harvey M. C#: como programar . Editora Pearson. SHARP, John. Microsoft Visual C# 2008 . Porto Alegre Bookman 2014. ZIVIANI, N. Projeto de Algoritmos com implementa\u00e7\u00e3o em Java e C++ . CORMEN, T. H., Algoritmos: Teoria e Pr\u00e1tica . S\u00e3o Paulo GEN LTC 2012. SZWARCFITER, J. L.. Estruturas de dados e seus algoritmos LTC 2010. GOODRICH, M. T., Estruturas de dados e Algoritmos em Java . Porto Alegre: Bookman, 2013. DROZDEZ, A. Estrutura de dados e algoritmos em C++ . S\u00e3o Paulo, Cengage Learning, 2018. Eu n\u00e3o vou mais explicar nos detalhes o que os c\u00f3digos v\u00e3o fazer porque voc\u00ea j\u00e1 deve ser capaz de analisar e entender sozinho. \u21a9 Ainda n\u00e3o vimos esse assunto mas aqui tem um link de um v\u00eddeo do youtube que explica muito bem o conceito (em ingl\u00eas). \u21a9 Vamos usar esse tipo de sintaxe mais a frente nesse microfundamento. Preste aten\u00e7\u00e3o nele!. \u21a9 Que a gente definiu logo acima como fun\u00e7\u00f5es que medem o tempo m\u00e9dio de acesso de leitura para qualquer elemento em uma lista de tamanho \\(n\\) . \u21a9 Pelo princ\u00edpio do acesso aleat\u00f3rio, o fato de termos aloca\u00e7\u00f5es ``espalhadas'' n\u00e3o deve ser um problema na hora de recuperar os valores da lista. \u21a9","title":"Algoritmos e Estrutura de Dados"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#assuntos","text":"Aviso Cole\u00e7\u00f5es Nativas das Linguagens de Programa\u00e7\u00e3o Principais Cole\u00e7\u00f5es Cole\u00e7\u00f5es Gen\u00e9ricas Tipos Abstratos de Dados Listas \u00c1rvore Bin\u00e1ria e Tabela Hash Bibliografia","title":"Assuntos"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#aviso","text":"Essa disciplina costuma ser muito mais dif\u00edcil em um contexto de bacharel de an\u00e1lise e desenvolvimento de sistemas, engenharia de computa\u00e7\u00e3o e ci\u00eancia da computa\u00e7\u00e3o. N\u00e3o sei precisar o porqu\u00ea mas nessa forma\u00e7\u00e3o n\u00f3s vamos ver apenas o b\u00e1sico de algumas estruturas e como implement\u00e1-las em c# por meio das collections. Como sempre, n\u00e3o podemos nunca parar de estudar mais a fundo os assuntos introduzidos nos t\u00f3picos mais a frente. A bibliografia recomendada pode ser de grande valia.","title":"Aviso"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#colecoes-nativas-das-linguagens-de-programacao","text":"Vamos relembrar alguns assuntos que aprendemos no per\u00edodo passado na mat\u00e9ria de Algoritmos e Abstra\u00e7\u00e3o de Dados. Arrays S\u00e3o um tipo de tipo abstrato de dados homog\u00eaneos. \u00c9 um conjunto de vari\u00e1veis apresentadas em uma lista onde cada elemento recebe um \u00edndice de 0 a n-1. A nota\u00e7\u00e3o de um array depende do tipo nativo da vari\u00e1vel com um par de colchetes. // c# int [] array ; // array de inteiros double [] nota ; // array de ponto flutuante Para criarmos um vetor em c# usamos o token new . // c# ind = new int [ 10 ]; nota = new double [ 12 ]; No exemplo acima, criamos dois arrays. O primeiro \u00e9 um array de inteiros de 10 posi\u00e7\u00f5es e o segundo \u00e9 um array de double de 12 posi\u00e7\u00f5es. Para popularmos o array com valores, usamos o \u00edndice da posi\u00e7\u00e3o como nos exemplos abaixo. // c# int vet = new int [ 3 ]; vet [ 0 ] = 1 ; // valor 1 na primeira posi\u00e7\u00e3o vet [ 1 ] = 10 ; // valor 10 na segunda posi\u00e7\u00e3o // valor 1 como a soma dos valores // da posi\u00e7\u00e3o 2 e 12 vet [ 0 ] = vet [ 1 ] + vet [ 11 ]; Podemos nos valer dos operadores de repeti\u00e7\u00e3o para sistematicamente fazer uso dos valores de um array. // c# // operador de posi\u00e7\u00e3o do array int pos = 0 ; // Loop para inserir manualmente os // valores no nosso vetor de 3 posicoes for ( int i = 0 ; i < 3 ; i ++ ) { vet [ i ] = int . Parse ( Console . ReadLine ()); } // Loop para sabermos quais valores foram // salvos pelo user for ( int i = 0 ; i < 3 ; i ++ ) { Console . WriteLine ( vet [ i ]); } Se tentarmos acessar um valor fora do index de um array com uma posi\u00e7\u00e3o n\u00e3o aceita, vamos receber um erro chamado Index out of Range Exception . Coment\u00e1rio: Aqui o professor prop\u00f5e um exerc\u00edcio onde fazemos o input de um nome de aluno e a nota dele. A partir disso, o sistema calcula a m\u00e9dia da turma e mostra a lista dos alunos que est\u00e3o acima de m\u00e9dia da turma. Fica ai o desafio para o leitor. Listas, Pilhas e Filas A partir do array, podemos entender tipos abstratos de dados que nos dar\u00e3o a base para o estudo desse microfundamento. O primeiro TAD que vamos aprender \u00e9 a Lista . Uma lista \u00e9 um objeto que cont\u00e9m um array que recebe elementos em qualquer posi\u00e7\u00e3o, um contador de elementos no array e m\u00e9todos de inser\u00e7\u00e3o e remo\u00e7\u00e3o. Uma lista possui alguns m\u00e9todos \u00fateis para manipula\u00e7\u00e3o dos dados: Construtores Inser\u00e7\u00e3o de Elementos Remo\u00e7\u00e3o de Elementos Mostrar Elemento Pesquisar index Ordenar Como estamos falando de um objeto, o comportamento de cada m\u00e9todo deve ser analisado na classe que ser\u00e1 instanciada nele.","title":"Cole\u00e7\u00f5es Nativas das Linguagens de Programa\u00e7\u00e3o"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#principais-colecoes","text":"Aprendemos na disciplina de programa\u00e7\u00e3o modular que existem v\u00e1rias cole\u00e7\u00f5es nativas no ambiente .NET que s\u00e3o otimizadas e devem compor o nosso repert\u00f3rio de solu\u00e7\u00f5es. Vale lembrar que para ter acesso \u00e0s cole\u00e7\u00f5es precisaremos acessar o namespace System.Collections . Agora vamos aprender algumas classes interessantes para o nosso estudo.","title":"Principais Cole\u00e7\u00f5es"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#arraylist","text":"O ArrayList \u00e9 um objeto similar ao array com a vantagem de podermos redimensionar dinamicamente o seu tamanho (o array simples tem tamanho fixo). A documenta\u00e7\u00e3o oficial pode ser encontrada nesse link . Possui um m\u00e9todo chamado Capacity que permite a manipula\u00e7\u00e3o da capacidade do nosso ArrayList. Por default, o seu valor \u00e9 zero e, ao inserirmos um elemento, ele muda para quatro. A capacidade do ArrayList dobra automaticamente sempre que temos a necessidade de inserir novos elementos al\u00e9m da capacidade anterior. Al\u00e9m do m\u00e9todo de capacidade, temos o Count que nos d\u00e1 o n\u00famero de elementos no ArrayList. O uso dele \u00e9 feito atrav\u00e9s da instancia\u00e7\u00e3o do objeto por meio de dois comandos poss\u00edvels. // c# // cria\u00e7\u00e3o sem informar a capacidade ArrayList al1 = new ArrayList (); // cria\u00e7\u00e3o informando a capacidade inicial ArrayList al2 = new ArrayList ( 10 ); Aqui temos um exemplo simples da utiliza\u00e7\u00e3o desse objeto 1 . // c# using System ; using System.Collections ; class MainClass { public static void Main ( string [] args ){ ArrayList al = new ArrayList (); Console . Write ( \"al.Capacity({0}) | al.Count({1})\" , al . Capacity , al . Count ); al . Add ( 1 ); al . Add ( \"string qualquer\" ); al . Add ( 3.1415 ); Console . Write ( \"al.Capacity({0}) | al.Count({1})\" , al . Capacity , al . Count ); } } Outra manipula\u00e7\u00e3o comum de se utilizar \u00e9 a de opera\u00e7\u00f5es em todos os elementos de um ArrayList. Para isso, podemos usar os operadores de repeti\u00e7\u00e3o como o for e, al\u00e9m desse, um operador cujo token \u00e9 foreach . // c# [...] ArrayList al = new ArrayList (); [...] // forma 1 for ( int i = 0 ; i < al . Count (); i ++ ) { Console . WriteLine ( al [ i ]); } // forma 2 foreach ( object o in al ) { Console . WriteLine ( al [ o ]); } // forma 3 foreach ( int num in al ) { soma = soma + num ; } Al\u00e9m dos m\u00e9todos de capacidade e contagem, temos m\u00e9todos que nos permitem interagir com o nosso arraylist: Add - Insert de um valor com retorno da posi\u00e7\u00e3o Insert - Insert de um valor na posi\u00e7\u00e3o indicada Remove - Remove um valor RemoveAt - Remove um valor em um determinado index RemoveRange - Remove uma quantidade de elementos a partir de um index Clear - Remove todos os elementos Contains - Teste l\u00f3gico se um valor existe no arraylist IndexOf - Retorna o index da primeira ocorr\u00eancia de um valor LastIndexOf - Retorna o index da \u00faltima ocorr\u00eancia de um valor Reverse - Inverte a ordem Sort - Ordena os elementos ToArray - Copia os valores em um array TrimToSize - Altera o capacity BinarySearch - Realiza uma busca binaria 2 Podemos aprender um pouco melhor o uso de alguns desses m\u00e9todos a partir de um exemplo. Vamos construir um programa que l\u00ea 5 inteiros, somar todos em um arraylist e calcular a m\u00e9dia deles. Depois disso, vamos mostrar os valores que s\u00e3o maiores que a m\u00e9dia. Para isso, vamos usar dois m\u00e9todos de la\u00e7os de repeti\u00e7\u00e3o, um for e um foreach . // c# using System.Collections ; ArrayList list = new ArrayList (); double media = 0 ; for ( int i = 0 ; i < 5 ; i ++ d ) { int valor = int . Parse ( Console . ReadLine ()); list . Add ( valor ); media += valor ; } media /= 5 ; foreach ( object o in lista ) { if (( int ) o > media ) { Console . WriteLine ( o ); } } Coment\u00e1rio: O comando dentro da condicional (int)o \u00e9 uma das v\u00e1rias maneiras de se converter um item de uma lista em um inteiro. Chamamos essa maneira de TypeCasting 3 Al\u00e9m dela poder\u00edamos usar int.Parse() ou Convert.ToInt32() . Aqui tem um texto falando mais sobre isso e a aqui temos a pr\u00f3pria documenta\u00e7\u00e3o da Microsoft.","title":"ArrayList"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#queue-stack-e-hashtable","text":"Al\u00e9m da lista vamos aprender outros conceitos de estrutura de dados muito usados no desenvolvimento de aplica\u00e7\u00f5es: Pilhas e Filas. Uma Pilha ou Stack \u00e9 um TAD que possui a caracter\u00edstica que o primeiro elemento que entra \u00e9 o \u00faltimo elemento que sai . A essa caracter\u00edstica damos o nome de First In, Last Out (FILO). Coment\u00e1rio: Pense em uma pilha de pratos sujos na pia. O prato que foi colocado primeiro \u00e9 o \u00faltimo prato que ser\u00e1 limpo pois est\u00e1 na base da pilha de lou\u00e7a suja. Uma Fila ou Queue \u00e9 um TAD em que o primeiro elemento que entra \u00e9 o primeiro a sair . O nome dessa caracter\u00edstica \u00e9 Fist In, First Out (FIFO). As duas classes possuem m\u00e9todos parecidos (dadas as diferen\u00e7as j\u00e1 comentadas acima): enqueue / push - Inser\u00e7\u00e3o de objetos dequeue / pop - Remo\u00e7\u00e3o de objetos clear - Remo\u00e7\u00e3o de todos os objetos contains - Retorno se um objeto est\u00e1 contido peek - Retorna o pr\u00f3ximo objeto na ordem de remo\u00e7\u00e3o count - Quantidade de elementos na estrutura Aqui o professor prop\u00f5e um desafio bem legal. Vamos ver um c\u00f3digo c# com um programa de fila e transcrever para idioma o que o programa faz. // c# Queue f = new Queue (); f . Enqueue ( 1 ); f . Enqueue ( 2 ); f . Enqueue ( 3 ); Console . Write ( \"Fila: ({0}) / ({1}) / ({2})\" , f . Contains ( 1 ), f . Count , f . Peek ()); Console . WriteLine ( f . Dequeue ()); Console . Write ( \"Fila: ({0}) / ({1}) / ({2})\" , f . Contains ( 1 ), f . Count , f . Peek ()); Agora um outro programa para uma pilha. // c# Stack p = new Stack (); p . Push ( 1 ); p . Push ( 2 ); p . Push ( 3 ); Console . Write ( \"Pilha: ({0}) / ({1}) / ({2})\" , p . Contains ( 1 ), p . Count , p . Peek ()); Console . WriteLine ( p . Pop ()); Console . Write ( \"Pilha: ({0}) / ({1}) / ({2})\" , p . Contains ( 1 ), p . Count , p . Peek ()); A terceira estrutura de dados que vamos aprender \u00e9 chamada Hashtable . Essa estrutura \u00e9 do tipo dicion\u00e1rio, ou seja, para cada entrada de dados, temos uma par chave-valor. Podemos dividir o nome desse TAD em duas palavras: hash e table . Table \u00e9 simplesmente uma alus\u00e3o \u00e0 tabela. O que temos de novidade aqui \u00e9 o termo hash . Coment\u00e1rio: Esse material \u00e9, em tese, um resumo dos conte\u00fados dados na gradua\u00e7\u00e3o da PUC-MG, entretanto, quando eu sinto que o t\u00f3pico est\u00e1 demasiadamente superficial, eu simplesmente n\u00e3o consigo evitar de expandir o conte\u00fado originalmente dado. Essa parte eu tirei do livro \"Data Structures and Algorithms with Python\". A primeira coisa que precisamos para entender o que \u00e9 esse conceito de hash \u00e9 compreender que programas acessam a mem\u00f3ria e que o tempo necess\u00e1rio para realizar esse trabalho pode variar de acordo com a maneira que os programas s\u00e3o constru\u00eddos. Para lidar com essa preocupa\u00e7\u00e3o os cientistas da computa\u00e7\u00e3o criaram o conceito de nota\u00e7\u00e3o Omnicron ou Big-Oh. Formalmente, dada uma lista qualquer de tamanho \\(n\\) , cujo tempo de acesso m\u00e9dio para coleta de um elemento dessa lista \u00e9 dado pode \\(f(n)\\) . Podemos definir que: \\(\\mathcal{O}(g(n)) = \\{ f | \\exists d > 0, n_0 \\in \\mathbb{Z}^+ i 0 \\leq f(n) \\leq d g(n),\\forall n \\geq n_0 \\}\\) Calma, respira. N\u00e3o \u00e9 nada dif\u00edcil. Essa nota\u00e7\u00e3o matem\u00e1tica toda ai quer dizer que podemos definir um grupo fun\u00e7\u00f5es \\(\\mathcal{O}(g(n))\\) que s\u00e3o formadas por todas as fun\u00e7\u00f5es \\(f\\) 4 em que temos algum \\(d\\) maior que zero e um \\(n_0\\) que \u00e9 inteiro e positivo, de modo que, \\(f(n)\\) \u00e9 maior igual a zero e menor igual a \\(d\\) vezes \\(g(n)\\) para todo \\(n\\) maior igual a \\(n_0\\) . Quando dizemos que um determinado programa tem \\(\\mathcal{O}(1)\\) , estamos dizendo que \\(g(n) = 1\\) , ou seja, que nosso programa pertence ao conjunto de fun\u00e7\u00f5es \\(f\\) que, dado um valor qualquer de \\(d\\) , tem o tempo de leitura de um elemento entre a faixa de tempo \\(0 \\leq f(n) \\leq d\\) para qualquer \\(n\\) da nossa lista. Tudo isso \u00e9 pra dizer que essa nota\u00e7\u00e3o \u00e9 usada para designar a rela\u00e7\u00e3o entre o tempo de completude de uma tarefa e o tamanho dos dados necess\u00e1rios para a sua realiza\u00e7\u00e3o (que come\u00e7a em \\(n_0\\) e vai at\u00e9 \\(n\\) ). Quando esse acesso \u00e0 informa\u00e7\u00e3o de um elemento qualquer n\u00e3o \u00e9 afetado pelo volume de dados da lista, dizemos que ele possui um tempo de execu\u00e7\u00e3o constante denotado por \\(\\mathcal{O}(1)\\) . V\u00e1rias opera\u00e7\u00f5es b\u00e1sicas possuem essa caracter\u00edstica como somar, multiplicar ou comparar valores, levam apenas o tempo de um ciclo de computa\u00e7\u00e3o para ser realizadas. Agora que entendemos (bem por cima). o conceito de complexidade, podemos entender o conceito de hash. A primeira coisa que precisamos saber \u00e9 que hashing \u00e9 uma t\u00e9cnica muito eficiente de pesquisar por um valor. Imaginem que temos um conjunto de v\u00e1rios elementos e queremos testar se um valor qualquer faz parte ou n\u00e3o desse conjunto. N\u00e3o \u00e9 dif\u00edcil perceber que, caso o tamanho do conjunto aumente muito, o tempo necess\u00e1rio para essa verifica\u00e7\u00e3o ser\u00e1 cada vez maior porque ter\u00edamos de verificar se todos os \u00edtens do nosso conjunto s\u00e3o iguais ao elemento que queremos verificar. Entretanto, \u00e9 ai que podemos aplicar a t\u00e9cnica de hashing para reduzir a complexidade dessa tarefa para \\(\\mathcal{O}(1)\\) . Para isso, precisamos compreender que, pelo princ\u00edpio do acesso rand\u00f4mico , o acesso a qualquer elemento em uma lista \u00e9 \\(\\mathcal{O}(1)\\) . Tudo que precisamos fazer \u00e9 usar uma fun\u00e7\u00e3o que \"traduza\" os elementos do nosso conjunto para uma lista de refer\u00eancia (ou index). A partir disso, podemos verificar a pertin\u00eancia de um elemento qualquer simplesmente usando a mesma fun\u00e7\u00e3o para ver se esse novo index j\u00e1 existe na nossa lista de index do conjunto. Essa fun\u00e7\u00e3o especial \u00e9 chamada de fun\u00e7\u00e3o de hash . Tal qual as outras classes, tamb\u00e9m temos m\u00e9todos muito \u00fateis que vale a pena conhecer: add - Insere um objeto com o index na tabela remove - Remove um objeto clear - Remove todos os objetos contains - Teste se a tabela cont\u00e9m um objeto com uma dada chave containsKey - idem contains containsValue - Teste se a tabela cont\u00e9m um determinado valor count - Quantos objetos temos S\u00f3 temos que ter alguns cuidados ao usarmos uma estrutura de hashtable porque podemos ter problemas de colis\u00f5es prim\u00e1rias que acontecem quando a posi\u00e7\u00e3o no array de index j\u00e1 est\u00e1 ocupada por um elemento.","title":"Queue, Stack e Hashtable"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#colecoes-genericas","text":"Come\u00e7amos a ver esse assunto em programa\u00e7\u00e3o modular e agora vamos adentrar um pouco mais nele. Uma grande diferen\u00e7a entre as cole\u00e7\u00f5es anteriores e \u00e0s gen\u00e9ricas \u00e9 que nas \u00faltimas temos que declarar os tipos no momento da cria\u00e7\u00e3o sem possibilidade de misturar tipos dentro do objeto. Enquanto as classes padr\u00f5es permitiam qualquer tipo de dados misturados. Coment\u00e1rio: O <T> na escrita dessas classes \u00e9 justamente para indicar que somos obrigados a indicar o tipo do dado no momento da cria\u00e7\u00e3o do objeto. Cada collection apresentada nas se\u00e7\u00f5es anteriores desse cap\u00edtulo possui uma vers\u00e3o gen\u00e9rica de modo que seus m\u00e9todos e propriedade s\u00e3o, em algum grau, an\u00e1logos. Todas elas s\u00e3o acess\u00edveis pelo namespace System.Collections.Generic . Em termos de analogias, podemos fazer os seguintes paralelos. Padr\u00e3o Generic ArrayList List<T> ou LinkedList<T> Queue Queue<T> Stack Stack<T> Hashtable Dictionary<TKey,TValue>","title":"Cole\u00e7\u00f5es Gen\u00e9ricas"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#list","text":"A documenta\u00e7\u00e3o oficial pode ser encontrada nesse link . A declara\u00e7\u00e3o \u00e9 feita por: List<T> variavel = new List<T>() ; As propriedades de contagem e capacidade s\u00e3o iguais \u00e0s da arraylist. Os m\u00e9todos de busca, inser\u00e7\u00e3o, remo\u00e7\u00e3o, convers\u00e3o para array e outros s\u00e3o iguais tamb\u00e9m. Uma mudan\u00e7a que vale a pena destacar \u00e9 no m\u00e9todo TrimToSize() que na lista gen\u00e9rica vira o m\u00e9todo TrimExcess() . Para aprendermos melhor a diferen\u00e7a entre o ArrayList e a lista gen\u00e9rica, vamos definir uma classe Aluno que vamos usar na constru\u00e7\u00e3o de dois programas que far\u00e3o a mesma atividade. // c# class Aluno { public int matricula ; public string nome ; public string email ; // construtor vazio public Aluno () { this . nome = \"\" ; this . email = \"\" ; this . matricula = 0 ; } // construtor public Aluno ( string nome , int matricula , string email ) { this . nome = nome ; this . email = email ; this . matricula = matricula ; } // procedimento public void Mostrar () { Console . WriteLine ( \"nome: \" + nome + \"mat: \" + matricula + \" email: \" + email ); } } Podemos ver que essa classe possui dois construtores e um m\u00e9todo chamado Mostrar que imprime na tela os dados do objeto. Agora vamos comparar dois programas que realizam a mesma tarefa onde, em um usamos ArrayList e, no outro, usamos Lista gen\u00e9rica. // c# // PROGRAMA USANDO ARRAYLIST // using System ; using System.Collections ; class Aluno { [...] } // Procedimento de impress\u00e3o dos elementos da ArrayList public static void Mostrar ( ArrayList al ) { foreach ( object o in al ) { (( Aluno ) o ). Mostrar (); } } // programa usando o ArrayList public static void Main ( string [] args ) { ArrayList al = new ArrayList (); // Inserindo 5 alunos usando n\u00fameros aleat\u00f3rios for ( int i = 0 ; i < 5 ; i ++ ) { int num = Math . Abs (( new Random ()). Next ()) % 100 ; al . Add ( new Aluno ( \"Aluno \" + num , num , \"aluno\" + num + \"@a.com.br\" )); } // Inserindo um aluno manualmente Aluno a = new Aluno ( \"Bruno\" , 101 , \"bruno@gmail.com\" ); al . Insert ( 2 , a ); // Mostrando o primeiro elemento (( Aluno ) al [ 0 ]). Mostrar (); // Removendo o aluno inserido manualmente al . Remove ( a ); // Teste de Contains if ( al . Contains ( a ) == true ) { Console . WriteLine ( \"Elemento encontrado!\" ); } else { Console . WriteLine ( \"Elemento n\u00e3o encontrado!\" ); } // Reduzindo a capacidade para o n\u00famero de elementos al . TrimToSize (); // Removendo todos os elementos al . Clear (); } // c# // PROGRAMA USANDO LISTA GEN\u00c9RICA // using System ; using System.Collections.Generic ; class Aluno { [...] } // Procedimento de impress\u00e3o dos elementos da ArrayList public static void Mostrar ( List < Aluno > l ) { foreach ( Aluno a in l ) { a . Mostrar (); } } public static void Main ( string [] args ) { List < Aluno > l = new List < Aluno > (); // Inserindo 5 alunos usando n\u00fameros aleat\u00f3rios for ( int i = 0 ; i < 5 ; i ++ ) { int num = Math . Abs (( new Random ()). Next ()) % 100 ; l . Add ( new Aluno ( \"Aluno \" + num , num , \"aluno\" + num + \"@a.com.br\" )); } // Inserindo um aluno manualmente Aluno a = new Aluno ( \"Bruno\" , 101 , \"bruno@gmail.com\" ); al . Insert ( 2 , a ); // Mostrando o primeiro elemento l [ 0 ]. Mostrar (); // Removendo o aluno inserido manualmente l . Remove ( a ); // Teste de Contains if ( l . Contains ( a ) == true ) { Console . WriteLine ( \"Elemento encontrado!\" ); } else { Console . WriteLine ( \"Elemento n\u00e3o encontrado!\" ); } // Reduzindo a capacidade para o n\u00famero de elementos l . TrimExcess (); // Removendo todos os elementos l . Clear (); } Comparando os dois programas, podemos ver que existem diferen\u00e7as no modo como usamos elementos contidos nas duas estruturas de dados. Quando usamos um elemento de um ArrayList, o c# precisa converter o elemento de object para algum tipo primitivo. Chamamos esse processo de boxing . Esse \u00e9 o motivo de termos que usar o TypeCasting. Essa necessidade n\u00e3o existe na lista gen\u00e9rica porque ela nos obriga a declarar o tipo dos elementos no momento da cria\u00e7\u00e3o do objeto. Por isso a recupera\u00e7\u00e3o dos elementos \u00e9 mais simples de ser feita apenas com a passagem do index.","title":"List"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#linkedlistt","text":"A documenta\u00e7\u00e3o oficial est\u00e1 dispon\u00edvel nesse link . A linkedlist \u00e9 a aplica\u00e7\u00e3o em c# de uma lista flex\u00edvel. Isso quer dizer que a mem\u00f3ria \u00e9 alocada somente quando existe a necessidade, uma c\u00e9lula por vez e n\u00e3o em \"blocos\" de 4 unidades como na lista gen\u00e9rica. Outa diferen\u00e7a \u00e9 que, do lado do hardware, a lista gen\u00e9rica salva os seus valores continuamente ao longo da mem\u00f3ria. Por sua vez, a LinkedList salva em cada c\u00e9lula duas informa\u00e7\u00f5es: o valor do item na posi\u00e7\u00e3o e a refer\u00eancia para a pr\u00f3xima c\u00e9lula alocada na mem\u00f3ria. Ou seja, o nome linkedlist ou lista ligada \u00e9 porque os nossos valores s\u00e3o \"ligados\" entre si por meio dessa fila de valores e refer\u00eancias de posi\u00e7\u00f5es na mem\u00f3ria 5 . O final da fila sempre apontar\u00e1 para um endere\u00e7o nulo. Essa \u00e9 a indica\u00e7\u00e3o que ele \u00e9 o \u00faltimo elemento da linkedlist. Agora vamos ver alguns m\u00e9todos \u00fateis dessa classe: AddAfter - Adiciona um valor novo como refer\u00eancia de um c\u00e9lula anterior ao novo valor AddBefore - Adiciona um valor novo como refer\u00eancia de um c\u00e9lula posterior ao novo valor AddFirst - Muda o item de posi\u00e7\u00e3o 0 AddLast - Muda item de posi\u00e7\u00e3o n-1 Remove - Libera o espa\u00e7o na mem\u00f3ria para uma nova aloca\u00e7\u00e3o da primeira apari\u00e7\u00e3o do valor RemoveFirst RemoveLast Clear Contains Find - Retorna a primeira ocorr\u00eancia FindLast - Retorna a \u00faltima ocorr\u00eancia Agora vamos ver um programa que utilize alguns desses m\u00e9todos. // c# using System ; using System.Collections.Generic ; static void Main ( string [] args ) { LinkedList < string > meses = new LinkedList < string > (); meses . AddFirst ( \"janeiro\" ); meses . AddLast ( \"Fevereiro\" ); meses . AddLast ( \"Mar\u00e7o\" ); meses . RemoveFirst (); LinkedListNode < int > i = meses . Find ( \"Fevereiro\" ); meses . AddBefore ( i , \"Janeiro\" ); foreach ( string mes in meses ) { Console . WriteLine ( mes ); } } Queue e Stack As documenta\u00e7\u00f5es oficiais podem ser encontradas aqui e aqui . Essas duas classes s\u00e3o muito parecidas com as vers\u00f5es padr\u00f5es. A novidade aqui \u00e9 que temos que definir os tipos nas cole\u00e7\u00f5es gen\u00e9ricas. De resto, s\u00e3o praticamente a mesma coisa. Vamos ver um exemplo dessas classes. // c# using System ; using System.Collections.Generic ; static void Main ( string [] args ) { Queue < int > f = new Queue < int > (); f . Enqueue ( 1 ); f . Enqueue ( 2 ); f . Enqueue ( 3 ); // remove o primeiro f . Dequeue (); Stack < int > p = new Stack < int > (); p . Push ( 1 ); p . Push ( 2 ); p . Push ( 3 ); // remove o \u00faltimo p . Pop (); } Dictionary A documenta\u00e7\u00e3o oficial pode ser lida aqui . Os m\u00e9todos s\u00e3o bem parecidos com os da hashtable. Com a novidade do m\u00e9todo TryGetValue(TKey,out TValue) onde, ao passarmos o valor da chave, caso ela exista no dicion\u00e1rio gen\u00e9rico, teremos como resposta um true junto do valor relacionado ao da chave pesquisada. Dentre as propriedades podemos destacar as que retornam os valores do dicion\u00e1rio: Item - Retorna a cole\u00e7\u00e3o do tipo KeyValuePair<TKey,TValue> Keys - Retorna uma cole\u00e7\u00e3o do tipo KeyCollection Values - Retorna uma cole\u00e7\u00e3o do tipo ValueCollection Agora vamos ver um programa usando alguns m\u00e9todos dessa classe. // c# using System ; using System.Collections.Generic ; static void Main ( string [] args ) { Dictionary < string , Dictionary < string , int >> nota = new Dictionary < string , Dictionary < string , int >> (); nota . Add ( \"AED\" , new Dictionary < string , int > () { { \"Maria\" , 60 }, { \"Pedro\" , 10 }, { \"Jo\u00e3o\" , 25 } }); nota . Add ( \"Calculo\" , new Dictionary < string , int > () { { \"Tatiano\" , 29 }, { \"Ana Paula\" , 16 }, { \"Kleber\" , 22 } }); nota [ \"AED\" ]. Add ( \"Astrolabio\" , 99 ); foreach ( KeyValuePair < string , Dictionary < string , int >> disciplina in nota ) { Console . WriteLine ( disciplina . Key ); Console . WriteLine ( \" Alunos:\" ); double media = 0 ; foreach ( KeyValuePair < string , int > Aluno in disciplina . Value ) { Console . WriteLine ( Aluno . Key + \"Nota: \" + Aluno . Value ); media += Aluno . Value ; } media /= disciplina . Value . Count ; Console . WriteLine ( \"M\u00e9dia da Turma: \" + media ); } } Coment\u00e1rio: Aqui o professor n\u00e3o teve pena. E eu tamb\u00e9m n\u00e3o vou ter. N\u00e3o siga adiante se voc\u00ea n\u00e3o for capaz de entender o que esse programa faz. Analise o c\u00f3digo at\u00e9 fazer sentido.","title":"LinkedList&lt;T>"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#tipos-abstratos-de-dados","text":"A partir de agora, vamos estudar o funcionamento b\u00e1sico de algumas estruturas muito comuns na resolu\u00e7\u00e3o de problemas comput\u00e1veis: listas, \u00e1rvores bin\u00e1rias e tabelas hash. Na se\u00e7\u00e3o anterior, n\u00f3s aprendemos como usar algumas implementa\u00e7\u00f5es desses conceitos em c#. Agora, vamos estudar um pouco da teoria por tr\u00e1s dessas classes. Coment\u00e1rio: A partir de agora, vamos ver muito c\u00f3digo. S\u00e9rio. Se prepare, pegue uma boa dose de caf\u00e9 e vamos embarcar nessa tonelada de c\u00f3digo c#.","title":"Tipos Abstratos de Dados"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#listas","text":"As listas podem ser divididas em 2 tipos: lineares e n\u00e3o lineares. Das collections que vimos, podemos dizer que ArrayList e List<T> s\u00e3o exemplos de listas lineares e que a LinkedList<T> \u00e9 um exemplo de lista n\u00e3o linear.","title":"Listas"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#lista-linear","text":"Uma lista linear, tamb\u00e9m chamada de sequencial, possui estruturas formadas por um array e um contador. Possuem m\u00e9todo de inser\u00e7\u00e3o e remo\u00e7\u00e3o de elementos e, por ter tamanho definido, precisa ter alguma resolu\u00e7\u00e3o para o caso onde uma inser\u00e7\u00e3o \u00e9 solicitada mas o tamanho da lista j\u00e1 foi alcan\u00e7ado. A primeira forma de se pensar na solu\u00e7\u00e3o para o problema acima \u00e9 simplesmente proibir que uma inser\u00e7\u00e3o ocorra quando o contador indicar que a lista alcan\u00e7ou o tamanho delimitado. Essa abordagem \u00e9 mais simples e faremos uso dela logo mais a frente. A segunda, \u00e9 simplesmente permitir que esse limite seja expandido. Essa \u00e9 justamente a abordagem usada nas collections ArrayList e List<T> . Ao se chegar no limite inicial, o processador cria um novo array de tamanho maior copiando todos os itens anteriores. Nesta se\u00e7\u00e3o vamos construir uma lista linear \"na unha\". Assim vamos aprender melhor como esses m\u00e9todos s\u00e3o implementados nas classes que usaremos ao longo da nossa jornada como desenvolvedores .NET. // c# // Cria\u00e7\u00e3o de uma lista linear class ListaLinear { private int [] array ; private int n ; // construtor vazio ListaLinear () { array = new int [ 6 ]; n = 6 ; } // construtor com defini\u00e7\u00e3o do tamanho ListaLinear ( int tamanho ) { array = new int [ tamanho ]; n = 0 ; } // rela\u00e7\u00e3o de procedimentos e m\u00e9todos void InserirInicio () {...} void InserirFinal () {...} void Inserir () {...} int RemoverInicio () {...} int RemoverFinal () {...} int Remover () {...} void Mostrar () {...} } Agora vamos passar para a cria\u00e7\u00e3o dos m\u00e9todos indicados na parte final do nosso c\u00f3digo. // c# // InserirInicio void InserirInicio ( int x ) { // c\u00f3digo encerra se tivermos mais \u00edtens do que // a lista pode comportar if ( n >= array . Length ) Environment . Exit ( 0 ); for ( int i = n ; i > 0 ; i -- ) { array [ i ] = array [ i - 1 ]; } array [ 0 ] = x ; n ++ ; } // InserirFinal void InserirFinal ( int x ) { if ( n >= array . Length ) Environment . Exit ( 0 ); array [ n ] = x ; n ++ ; }; // Inserir em qualquer posi\u00e7\u00e3o void Inserir ( int x , int pos ) { if ( n >= array . Length || pos < 0 || os > n ) { Environment . Exit ( 0 ); // leva os elementos para o final do array for ( int i = n ; i > pos ; i -- ){ array [ i ] = array [ i - 1 ]; } array [ pos ] = x ; n ++ ; } }; Esses 3 m\u00e9todos de inser\u00e7\u00e3o s\u00e3o tranquilos de entendermos. No caso do primeiro, ele move todo mundo pra direita e acrescenta o valor novo no index 0. No caso do inserir no final, ele simplesmente olha o contador e insere um elemento no index dele. Por fim, no caso do inserir gen\u00e9rico, ele primeiro move todos os elementos para a direita do index da posi\u00e7\u00e3o indicada para depois inserir o elemento nela. Coment\u00e1rio: Bem legal vermos como um simples m\u00e9todo de adi\u00e7\u00e3o pode dar uma dor de cabe\u00e7a para se pensar em como implementar a melhor maneira. Nas pr\u00f3ximas vezes que usar um simples insert em uma lista, podemos pensar o que t\u00e1 acontecendo por tr\u00e1s das bibliotecas que usamos. Agora vamos para os m\u00e9todos de remo\u00e7\u00e3o. S\u00e3o an\u00e1logos aos m\u00e9todos de inser\u00e7\u00e3o s\u00f3 que no caminho reverso. // c# // Remover primeiro elemento int RemoverInicio () { if ( n == 0 ) Environment . Exit ( 0 ); int resp = array [ 0 ]; n -- ; for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = array [ i + 1 ]; } return resp ; } // Remover o \u00faltimo elemento int RemoverFim () { if ( n == 0 ) Environment . Exit ( 0 ); return array [ -- n ]; } // Remove um elemento da posi\u00e7\u00e3o // movendo o resto para a esquerda int Remover ( int pos ) { if ( n == 0 || pos < 0 || pos >= n ) Environment . Exit ( 0 ); int resp = array [ pos ]; n -- ; for ( int i = pos ; i < n ; n ++ ) { array [ i ] = array [ i + 1 ]; } return resp ; } Coment\u00e1rio: Novamente, se voc\u00ea est\u00e1 com dificuldade em entender esse c\u00f3digo. Pare agora e revise o conte\u00fado . N\u00e3o basta pegar o c\u00f3digo e rodar no seu computador. Voc\u00ea \u00e9 que deve ser capaz de ler e entender o c\u00f3digo. Agora s\u00f3 precisamos de um \u00faltimo m\u00e9todo de mostrar os elementos da nossa lista linear. // c# // Mostra todos os elementos da lista void Mostrar () { Console . Write ( \"[\" ); for ( int i = 0 ; i < n ; i ++ ) { Console . Write ( array [ i ] + \" \" ); } Console . Write ( \"]\" ); } Coment\u00e1rio: Aqui vai um pequeno teste. Imagine que eu crie uma lista com essa classe instanciada. Qual ser\u00e1 o output obtido caso a gente use o m\u00e9todo Mostrar() ? O c\u00f3digo integral desse programa pode ser encontrado no meu github gist .","title":"Lista linear"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#classe-autorreferencial","text":"Uma classe autorreferencial possui a peculiaridade de fazer refer\u00eancia para objetos do seu pr\u00f3prio tipo. A LinkedListNode<T> \u00e9 um exemplo dessa classe. Abaixo temos um exemplo de c\u00f3digo que implementa essa caracter\u00edstica. // c# class Celula { public int elemento ; // referencia para a pr\u00f3xima c\u00e9lula public Celula prox ; // construtor vazio public Celula () { this . elemento = 0 ; this . prox = null ; } // construtor com a passagem do par\u00e2metro public Celula ( int x ) { this . elemento = x ; this . prox = null ; } } A vantagem dessa abordagem \u00e9 que podemos criar elementos em cadeia. No exemplo acima, cada instancia\u00e7\u00e3o da classe pode ser relacionada a outra de maneira recursiva. Coment\u00e1rio: A gente viu um pouco sobre recurs\u00e3o l\u00e1 no microfundamento de programa\u00e7\u00e3o modular mas no contexto de uma fun\u00e7\u00e3o.","title":"Classe Autorreferencial"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#lista-flexivel","text":"Uma lista flex\u00edvel \u00e9 justamente a constru\u00e7\u00e3o feita pelas classes autorreferenciais que acabamos de ver. Cada elemento instanciado \u00e9 salvo na mem\u00f3ria de modo a ocupar uma sequ\u00eancia aleat\u00f3ria de armazenamento no hardware da mem\u00f3ria. O LinkedList<T> \u00e9 a implementa\u00e7\u00e3o em c# desse conceito. Existem duas maneiras de se criar uma lista flex\u00edvel. A primeira, cont\u00e9m um primeiro elemento cujo valor elemento \u00e9 null (chamamos esse elemento de \"cabe\u00e7a\"). A segunda maneira, \u00e9 colocarmos o valor do primeiro elemento diretamente no primeiro n\u00f3 da cadeia de elementos. A vantagem da primeira abordagem (com cabe\u00e7a) \u00e9 que tratamos o m\u00e9todo de inserir em uma lista vazia exatamente do mesmo modo de inserir em uma lista de elementos. A raz\u00e3o disso \u00e9 que s\u00f3 precisaremos mudar o atributo prox da cabe\u00e7a. No caso da abordagem sem cabe\u00e7a, ter\u00edamos que primeiro verificar se existem elementos para, em caso negativo, alterarmos o atributo prox para null desse primeiro elemento. Abaixo temos a implementa\u00e7\u00e3o de uma lista flex\u00edvel que usa a classe autorrefencial da se\u00e7\u00e3o anterior. // c# class ListaFlex { // instancia\u00e7\u00e3o das posi\u00e7\u00f5es obrigat\u00f3rias // de primeiro e \u00faltimo como objetos autorreferenciados private Celula primeiro , ultimo ; // construtor vazio public ListaFlex () { ultimo = primeiro = new Celula (); } // obtendo o tamanho da lista public int Tamanho () { int tamamho = 0 ; for ( Celula i = primeiro ; i != ultimo ; i = i . prox ) tamanho ++ ; return tamanho ; } // lista dos m\u00e9todos public void InserirFim ( int x ) { ultimo . prox = new Celula ( x ); ultimo = ultimo . prox ; } public void InserirInicio ( int x ) { Celula tmp = new Celula ( x ); tmp . prox = primeiro . prox ; primeiro . prox = tmp ; if ( primeiro == ultimo ) { ultimo = tmp ; } tmp = null ; } public int RemoverFim () { if ( primeiro == ultimo ) Environment . Exit ( 0 ); // loop para se chegar no pen\u00faltimo elemento for ( Celula i = primeiro ; i . prox != ultimo ; i = i . prox ) int elemento = ultimo . elemento ; ultimo = i ; i = ultimo . prox = null ; return elemento ; } public int RemoverInicio () { // esse m\u00e9todo mant\u00e9m a cabe\u00e7a da lista if ( primeiro == ultimo ) Environment . Exit ( 0 ); Celula tmp = primeiro . prox ; // a cabe\u00e7a agora vai apontar para // o segundo elemento \"pulando\" o primeiro primeiro . prox = primeiro . prox . prox ; int elemento = tmp . elemento ; tmp . prox = null ; tmp = null ; return elemento ; } // aten\u00e7\u00e3o aqui: a posi\u00e7\u00e3o 0 n\u00e3o \u00e9 a da cabe\u00e7a e sim // do primeiro elemento ap\u00f3s ela, ou seja, primeiro.prox public void Inserir ( int x , int pos ) { int tamanho = Tamanho (); if ( pos < 0 || pos > tamanho ) { Environment . Exit ( 0 ); } else if ( pos == 0 ) { InserirInicio ( x ); } else if ( pos == tamanho ) { InserirFim ( x ); } else { Celula i = primeiro ; for ( int j = 0 ; j < pos ; j ++ ) i = i . prox ; Celula tmp = new Celula ( x ); tmp . prox = i . prox ; i . prox = tmp ; tmp = i = null ; } } public int Remover ( int pos ) { int tamanho = Tamanho (); if ( primeiro == ultimo || pos < 0 ) { Environment . Exit ( 0 ); } else if ( pos == 0 ) { elemento = RemoverInicio (); } else if ( pos == tamanho - 1 ) { elemento = RemoverFim (); } else { Celula i = primeiro ; for ( int j = 0 ; j < pos ; j ++ ) i = i . prox ; Celula tmp = i . prox ; elemento = tmp . elemento ; i . prox = tmp . prox ; tmp . prox = null ; i = tmp = null ; } return elemento ; } public void Mostrar () { Console . Write ( \"[\" ); for ( Celula i = primeiro . prox ; i != null ; i = i . prox ) { Console . Write ( i . elemento + \" \" ); } Console . Write ( \"]\" ); } } O c\u00f3digo dessa classe est\u00e1 dispon\u00edvel nesse github gist .","title":"Lista flex\u00edvel"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#arvore-binaria-e-tabela-hash","text":"","title":"\u00c1rvore Bin\u00e1ria e Tabela Hash"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#arvore-binaria","text":"","title":"\u00c1rvore Bin\u00e1ria"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#tabela-hash","text":"","title":"Tabela Hash"},{"location":"nav/PUC/periodo2/algoritmo_estrutura_dados/#bibliografia","text":"DEITEL, Harvey M. C#: como programar . Editora Pearson. SHARP, John. Microsoft Visual C# 2008 . Porto Alegre Bookman 2014. ZIVIANI, N. Projeto de Algoritmos com implementa\u00e7\u00e3o em Java e C++ . CORMEN, T. H., Algoritmos: Teoria e Pr\u00e1tica . S\u00e3o Paulo GEN LTC 2012. SZWARCFITER, J. L.. Estruturas de dados e seus algoritmos LTC 2010. GOODRICH, M. T., Estruturas de dados e Algoritmos em Java . Porto Alegre: Bookman, 2013. DROZDEZ, A. Estrutura de dados e algoritmos em C++ . S\u00e3o Paulo, Cengage Learning, 2018. Eu n\u00e3o vou mais explicar nos detalhes o que os c\u00f3digos v\u00e3o fazer porque voc\u00ea j\u00e1 deve ser capaz de analisar e entender sozinho. \u21a9 Ainda n\u00e3o vimos esse assunto mas aqui tem um link de um v\u00eddeo do youtube que explica muito bem o conceito (em ingl\u00eas). \u21a9 Vamos usar esse tipo de sintaxe mais a frente nesse microfundamento. Preste aten\u00e7\u00e3o nele!. \u21a9 Que a gente definiu logo acima como fun\u00e7\u00f5es que medem o tempo m\u00e9dio de acesso de leitura para qualquer elemento em uma lista de tamanho \\(n\\) . \u21a9 Pelo princ\u00edpio do acesso aleat\u00f3rio, o fato de termos aloca\u00e7\u00f5es ``espalhadas'' n\u00e3o deve ser um problema na hora de recuperar os valores da lista. \u21a9","title":"Bibliografia"},{"location":"nav/PUC/periodo2/design_interacao/","text":"hljs.initHighlightingOnLoad(); Assuntos Elementos do Design de Intera\u00e7\u00e3o Sistemas Interativos em Contexto Atributos de Qualidade da Intera\u00e7\u00e3o (Cogni\u00e7\u00e3o e Semi\u00f3tica) Processo de Design de Intera\u00e7\u00e3o Perspectivas de Design A Pr\u00e1tica de Design Avalia\u00e7\u00e3o da Qualidade de Sistemas Interativos Abordagens de Avalia\u00e7\u00e3o M\u00e9todos de Avalia\u00e7\u00e3o Bibliografia Elementos do Design de Intera\u00e7\u00e3o Ao longo desse microfundamento, teremos o objetivo de responder a seguinte pergunta: \"O que leva um usu\u00e1rio a gostar de usar um sistema?\". Assumiremos um papel chamado de projetista de sistemas interativos . A base desse trabalho \u00e9 compreender o usu\u00e1rio, os sistemas interativos e a rela\u00e7\u00e3o entre usu\u00e1rio e sistemas. Vamos aprender a projetar essas intera\u00e7\u00f5es bem como avaliar se os objetivos determinados foram alcan\u00e7ados. Coment\u00e1rio: Essa mat\u00e9ria tem abordagem bem te\u00f3rica. Ent\u00e3o esse material vai ser o mais resumido poss\u00edvel sobre os temas abordados. Quem tiver interesse em se aprofundar, pode buscar esse diferencial na bibliografia. Sistemas Interativos em Contexto Em qualquer planejamento de intera\u00e7\u00f5es existem dois atores: o usu\u00e1rio humano e o computador. Ambos s\u00e3o pe\u00e7as fundamentais para o desenho das intera\u00e7\u00f5es, entretanto, a maneira como modelamos o comportamento desses agentes pode variar de acordo com o contexto e o objetivo de design. Podemos dizer que existem quarto perpectivas b\u00e1sicas para modelagem das intera\u00e7\u00f5es user-computador: Perspectiva Sistema - Abora a intera\u00e7\u00e3o user-pc como a intera\u00e7\u00e3o entre dois sistemas. Uma caracter\u00edstica marcante dessa abordagem \u00e9 o uso de formas codificadas como atalhos de teclas ou linguagem formal. A \u00eanfase \u00e9 dada ao computador e na transmiss\u00e3o de dados. Dados como tempo de intera\u00e7\u00e3o e n\u00famero de erros s\u00e3o importantes para avalia\u00e7\u00e3o. Perspectiva Parceiro do Discurso - O ponto focal de avalia\u00e7\u00e3o est\u00e1 mais pr\u00f3ximo do usu\u00e1rio. Existem intera\u00e7\u00e3o por linguagem natural e infer\u00eancia. Um exemplo dessa abordagem s\u00e3o as pesquisas relacionadas em sites de buscas. Dados como a qualidade da resposta provida pelo sistemas s\u00e3o importantes para essa abordagem. Perspectiva Ferramenta - O sistema \u00e9 modelado como ferramenta para alcance de algum resultado. Existe claramente a presen\u00e7a de um resultado da intera\u00e7\u00e3o (um artefato) que define o sucesso ou fracasso da intera\u00e7\u00e3o. Dados sobre uso das fun\u00e7\u00f5es dispon\u00edveis e facilidade de uso s\u00e3o importantes. Perspectiva M\u00eddia - O foco aqui \u00e9 na comunica\u00e7\u00e3o entre pessoas. Nesse caso o sistema atua como meio de comunica\u00e7\u00e3o entre usu\u00e1rios. A qualidade da comunica\u00e7\u00e3o \u00e9 um dos dados mais importantes nessa abordagem. Atributos de Qualidade da Intera\u00e7\u00e3o (Cogni\u00e7\u00e3o e Semi\u00f3tica) Perspectiva te\u00f3rica do Humano na Intera\u00e7\u00e3o Humano-Computador A intera\u00e7\u00e3o Humano-Computador (IHC) \u00e9 o estudo dos sistemas computacionais que s\u00e3o projetados para receberem intera\u00e7\u00f5es de usu\u00e1rios humanos. O foco principal \u00e9 a implementa\u00e7\u00e3o, avalia\u00e7\u00e3o e investiga\u00e7\u00e3o dos sistemas e fen\u00f4menos relacionados ao seus usos. Os usu\u00e1rios dos sistemas s\u00e3o humanos. Isso implica que a IHC leva em considera\u00e7\u00e3o aspectos do sistema cognitivo com suas prefer\u00eancias e comportamentos. Tamb\u00e9m entendem que existem diferen\u00e7as entre usu\u00e1rios e, at\u00e9 mesmo, varia\u00e7\u00f5es entre o mesmo usu\u00e1rios ao longo do tempo. O m\u00e9todo de investiga\u00e7\u00e3o da IHC \u00e9 te\u00f3rico por meio do uso de abordagens distintas. No ramo das abordagens da psicologia experimental s\u00e3o usados dados mensur\u00e1veis e modelagem de comportamento humano. No ramo da psicologia cognitiva, temos a aplica\u00e7\u00e3o de conceitos te\u00f3ricos para a interpreta\u00e7\u00e3o de algumas intera\u00e7\u00f5es e comportamentos observados. Al\u00e9m dos caminhos de pesquisa baseados na psicologia, temos tamb\u00e9m a ado\u00e7\u00e3o de m\u00e9todos oriundos do estudo da lingu\u00edstica que investigam os signos usados na comunica\u00e7\u00e3o e metacomunica\u00e7\u00e3o por meio de artefatos. Para citar algumas dessas abordagens temos: Leis de Hick-Hyman, Leis de Fitts, Processador Humano de Informa\u00e7\u00e3o, Princ\u00edpios da Gestalt, Teoria da Atividade, Cogni\u00e7\u00e3o Distribu\u00edda, Engenharia Cognitiva, Teoria da A\u00e7\u00e3o, Engenharia Semi\u00f3tica e etc. O Contexto da Experi\u00eancia do Usu\u00e1rios Chamamos de contexto de uso todos os fatos que interferem e interagem com o uso de um sistema. Para citar alguns temos: tempo, ambiente f\u00edsico, social e cultural, disponibilidade e outros fatores. A intera\u00e7\u00e3o do usu\u00e1rio sempre tem algum objetivo em mente que pode ser simples ou complexo. Qualquer intera\u00e7\u00e3o, como cadastro de um funcion\u00e1rio, \u00e9 analisada como uma intera\u00e7\u00e3o. As intera\u00e7\u00f5es humano-computador acontecem por meio de uma interface . Ela atua como \u00fanico meio entre os modos de processamento de informa\u00e7\u00f5es org\u00e2nicos e biol\u00f3gicos do ser humano e os recursos de m\u00e1quina do computador. A interface tamb\u00e9m atua como agende limitador das intera\u00e7\u00f5es, visto que, ela \u00e9 quem define as fun\u00e7\u00f5es acess\u00edveis ao usu\u00e1rio em dado tempo. Outra limita\u00e7\u00e3o que a interface imp\u00f5e a a respeito da acessibilidade. Se o sistema apenas possui uma interface de intra\u00e7\u00e3o por CLI (Command Line Interface), o uso dessa aplica\u00e7\u00e3o ser\u00e1 totalmente diferente de um outro sistema com GUI (Graphic User Interface), por exemplo. Tamb\u00e9m podemos definir intera\u00e7\u00e3o como a troca de informa\u00e7\u00f5es e influ\u00eancia entre o usu\u00e1rio e o sistema atrav\u00e9s da interface. Interagir sempre implica em provar dados e receber novas informa\u00e7\u00f5es como retorno. \u00c9 no contexto de uso que temos a Experi\u00eancia do Usu\u00e1rio (User eXperience ou UX) . Esse conceito t\u00e3o famoso envolve a interface, a intera\u00e7\u00e3o e o ambiente de intera\u00e7\u00e3o. O processo de projetar a UX (UX Design) \u00e9 levar em conta todos esses v\u00e1rios pontos para proporcionar sempre a melhor experi\u00eancia poss\u00edvel. A interface de usu\u00e1rio (UI) \u00e9 a constru\u00e7\u00e3o do modo em que a informa\u00e7\u00e3o ser\u00e1 disposta ao usu\u00e1rio por meio da arquitetura da informa\u00e7\u00e3o (IA) . Ela \u00e9 quem define quais ser\u00e3o as partes em destaque e o que pode ser ``escondido'' por tr\u00e1s de um menu, por exemplo. Para concluir esses conceitos, vamos coloca-los todos juntos: Por meio da interface e dentro de um contexto de uso \u00e9 que ocorrem as intera\u00e7\u00f5es de modo que a UX desse usu\u00e1rio \u00e9 definida, al\u00e9m desses dois primeiros fatores, pela IA 1 . O estudo de todas as vari\u00e1veis que amarramos acima \u00e9 chamado de Design de Intera\u00e7\u00e3o (IxD) . N\u00e3o \u00e9 nenhum espanto constatar que em v\u00e1rias equipes de IxD tenhamos a presen\u00e7a de profissionais de v\u00e1rios campos de estudos que variam da lingu\u00edstica at\u00e9 a antropologia. Atributos de Usabilidade, Comunicabilidade e Acessibilidade Quais seriam os atributos necess\u00e1rios para que possamos avaliar uma intera\u00e7\u00e3o como adequada? Podemos definir quatro caracter\u00edsticas que podem nos ajudar a julgar essa mat\u00e9ria: Usabilidade - Grau em que um produto \u00e9 usado por usu\u00e1rios espec\u00edficos para se atingir um objetivo espec\u00edfico em um dado contexto de uso. Acessibilidade - Uso do sistema sem que a interface imponha obst\u00e1culos ao usu\u00e1rio. Experi\u00eancia de Uso - Como o usu\u00e1rio se sente ao interagir com o sistema. Pode ser grandemente impactada por todos os elementos do contexto de uso. Comunicabilidade - Capacidade da interface comunicar ao usu\u00e1rio a l\u00f3gica que rege o seu funcionamento. Existem alguns normativos que regem os consensos da comunidade ao longo dessas quest\u00f5es. Podemos destacar a ISO/IEC 25010:2011 e a ISO 9241-11:2018(en) . A intera\u00e7\u00e3o pela Lente Cognitiva Em 1986, um pesquisador chamado Donal Norman lan\u00e7ou os fundamentos do que hoje \u00e9 conhecida como Engenharia Cognitiva (EC) . Esse ramo de estudos busca compreender os fundamentos da a\u00e7\u00e3o e desempenho humano que sejam relevantes para a constru\u00e7\u00e3o de design de modo a possibilitar a cria\u00e7\u00e3o de sistemas agrad\u00e1veis e engajantes. Em sua base a EC considera que existem dois grupos de vari\u00e1veis: 1) Vari\u00e1veis Psicol\u00f3gicas e 2) Vari\u00e1veis F\u00edsicas (estados do sistema) e Controles F\u00edsicos (mecanismos de intera\u00e7\u00e3o). como s\u00e3o conjuntos de vari\u00e1veis muito diferentes entre si. Podem existir discrep\u00e2ncias causadas nas tentativas de construir modos de intera\u00e7\u00e3o entre esses dois \"mundos\" distintos. Podemos destacar tr\u00eas tipos de problemas: Problemas de Mapeamento - As vari\u00e1veis psicol\u00f3gicas precisar ser conectadas \u00e0s vari\u00e1veis f\u00edsicas por meio da interface. Qualquer imprecis\u00e3o no meio de comunica\u00e7\u00e3o entre user e computador gera problemas de mapeamento. Dificuldade de Controle - O qu\u00e3o f\u00e1cil \u00e9 controlar as vari\u00e1veis f\u00edsicas para se alcan\u00e7ar o objetivo proposto pela solu\u00e7\u00e3o. Dificuldade de Avaliza\u00e7\u00e3o - O qu\u00e3o f\u00e1cil \u00e9 avaliar se o resultado da intera\u00e7\u00e3o do user est\u00e1 de acordo com o objetivo da intera\u00e7\u00e3o. Os problemas descritos acima s\u00e3o origin\u00e1rios da diferen\u00e7a entre como o designer entende o sistema e como o usu\u00e1rio entende o sistema. Podemos criar alguns conceitos para organizar melhor essa problem\u00e1tica de meios de interpreta\u00e7\u00e3o diversos do mesmo sistema. \u00c9 poss\u00edvel separar essas interpreta\u00e7\u00f5es em tr\u00eas componentes: Modelo de Design - Modelo conceitual que o sistema \u00e9 compreendido pelo design. Imagem do Sistema F\u00edsico - \u00c9 o sistema f\u00edsico constru\u00eddo a partir do modelo de design. Modelo do Usu\u00e1rio - \u00c9 o modelo constru\u00eddo internamente pelo usu\u00e1rio ao longo das intera\u00e7\u00f5es com o sistema. Coment\u00e1rio: Cada conceito que vimos at\u00e9 agora levam anos de pesquisa at\u00e9 se ter algum dom\u00ednio. Nosso foco por agora \u00e9 apenas conhecer a exist\u00eancia desses conceitos bem como uma vers\u00e3o resumida do que s\u00e3o. Fontes Complementares: NORMAN, Donald A. Steps toward a cognitive engineering: Design rules based on analyses of human error (Links para um site externo.). In: Proceedings of the 1982 conference on Human factors in computing systems. 1982. p. 378-382. Acesso em 15 de Mai. de 2021. NORMAN, Donald A. Cognitive engineering. User centered system design, v. 31, p. 61, 1986. A intera\u00e7\u00e3o pela Lente Semi\u00f3tica Coment\u00e1rio: Eu n\u00e3o sei voc\u00eas, mas, pra mim, a palavra semi\u00f3tica \u00e9 o tipo de palavra que apenas eruditos e intelectuais costumam usar. Ent\u00e3o, finalmente, chegou a nossa hora de aprender o que significa isso. Podemos definir a Semi\u00f3tica como o ramo da lingu\u00edstica que estuda como e porque as pessoas atribuem significado \u00e0s coisas e, al\u00e9m disso, como usam esses objetos dotados de significado para se comunicar. Por sua vez, a Engenharia Semi\u00f3tica busca compreender a intera\u00e7\u00e3o humano-computador como um caso particular de comunica\u00e7\u00e3o humana mediada por sistemas computacionais. Esse processo de comunica\u00e7\u00e3o ocorre em dois n\u00edveis: Comunica\u00e7\u00e3o direta user-sistema Metacomunica\u00e7\u00e3o designer-user mediada pela interface do sistema. A interface pode ser entendida como um meio da mensagem passada pelo designer. Essa comunica\u00e7\u00e3o se d\u00e1 por meio de signos (coisas com significado), significados (tarefas que desejamos executar) e representa\u00e7\u00f5es (janelas, bot\u00f5es, menus e etc). Existem tr\u00eas tipos de signos: Est\u00e1ticos - Comunicam seu significado integral por meio de telas fixas do sistema Din\u00e2micos - Comunicam seu significado integral em sequ\u00eancia de telas e n\u00e3o e apenas uma vis\u00e3o. Metalingu\u00edsticos - S\u00e3o signos que explicam outros signos (est\u00e1ticos ou din\u00e2micos). Processo de Design de Intera\u00e7\u00e3o Perspectivas de Design M\u00e9todos de se Projetar um Sistema No esfor\u00e7o de construir boas interfaces de sistemas, podemos partir de abordagens diferentes que focam em pressupostos de interpreta\u00e7\u00e3o da intera\u00e7\u00e3o user-computador. Grosso modo, podemos agrupar essas abordagens em dois grupos: De Dentro para Fora - Foco no software. Primeiro se projeta a estrutura de dados, l\u00f3gica do sistema e, por fim, a interface. As m\u00e9tricas s\u00e3o focadas na efici\u00eancia de funcionamento do sistema. De Fora para Dentro - Foco no usu\u00e1rio. Come\u00e7a-se com o projeto da interface para, depois, seguir o planejamento da l\u00f3gica e a organiza\u00e7\u00e3o dos dados. Essa abordagem demanda um amplo conhecimento da pessoas que far\u00e3o uso do sistema. Graus de Import\u00e2ncia do Usu\u00e1rio Existem algumas maneiras de se considerar o usu\u00e1rio na hora de construirmos a interface das aplica\u00e7\u00f5es. Podemos definir tr\u00eas graus de relev\u00e2ncia do usu\u00e1rio na constru\u00e7\u00e3o das aplica\u00e7\u00f5es: Projeto Independente - Esse modelo n\u00e3o conhece nem consulta o usu\u00e1rio no processo de constru\u00e7\u00e3o do software. O usu\u00e1rio ter\u00e1 de se adaptar \u00e0 l\u00f3gica do sistemas. Deve aceitar o que o sistema permite e n\u00e3o permite. Essa abordagem n\u00e3o \u00e9 a ideal para sistemas interativos. Design Centrado no Usu\u00e1rio - H\u00e1 a preocupa\u00e7\u00e3o em entender quem s\u00e3o os usu\u00e1rios e quais s\u00e3o os seus objetivos. S\u00e3o coletados dados emp\u00edricos de uso, simula\u00e7\u00f5es e prot\u00f3tipos. Costumam ter quatro atividades para a constru\u00e7\u00e3o: Identifica\u00e7\u00e3o das necessidades Constru\u00e7\u00e3o do design do sistemas Constru\u00e7\u00e3o da vers\u00e3o Interativa Avalia\u00e7\u00e3o do artefato Design Participativo - O usu\u00e1rio tem voz ativa no processo. Amplo foco na usabilidade. Fontes Complementares: KUHN, Sara; WINOGRAD, Terry. Participatory Design (Links para um site externo.). In: Bringing Design to Software. New York: Addison-Wesley, 1996. Acesso em: 01 Jul. 2021. PONCIANO, Lesandro. HCI Support Card: Creating and Using a Support Card for Education in Human-Computer Interaction (Links para um site externo.). In: Workshop sobre Educa\u00e7\u00e3o em IHC. Simp\u00f3sio Brasileiro de Fatores Humanos em Sistemas Computacionais. 2019, Vit\u00f3ria. Porto Alegre: Sociedade Brasileira de Computa\u00e7\u00e3o, 2019. p. 106-111. Acesso em: 01 Jul. 2021. Desing \u00e9 T\u00e9cnica ou Arte? Coment\u00e1rio: Eu, particularmente, acho esse tipo de discuss\u00e3o pouco relevante. Ent\u00e3o vou apenas resumir e indicar as bibliografias. Basicamente, temos duas maneiras de enxergar o conhecimento de constru\u00e7\u00e3o de design de intera\u00e7\u00f5es: Racionalismo T\u00e9cnico - Existem problemas conhecidos com solu\u00e7\u00f5es pre-determinadas. O papel do designer seria \"enxergar\" as equival\u00eancias do caso pr\u00e1tico dele com a teoria. Al\u00e9m disso, teria a responsabilidade de aumentar o seu repert\u00f3rio de solu\u00e7\u00f5es para sempre ter uma sa\u00edda a um problema de design encontrado. Reflex\u00e3o em A\u00e7\u00e3o - Existem problemas e solu\u00e7\u00f5es \u00fanicas onde os m\u00e9todos e ferramentas atuam apenas como auxiliadores do processo de constru\u00e7\u00e3o do design. Nessa abordagem a criatividade do designer possui amplo espa\u00e7o para constru\u00e7\u00e3o. Fontes Complementares: PONCIANO, Lesandro. Debate Estruturado: Uma Estrat\u00e9gia Pedag\u00f3gica para Ensino e Aprendizagem de Valores Humanos em Intera\u00e7\u00e3o Humano-ComputadorLinks para um site externo.. In: Workshop sobre Educa\u00e7\u00e3o em IHC - Simp\u00f3sio Brasiliero de Fatores humanos em Sistemas Computacionais, 17., 2018, Bel\u00e9m. Porto Alegre: Sociedade Brasileira de Computa\u00e7\u00e3o, 2018. Acessso em: 01 de Jul. de 2021. PONCIANO, Lesandro; ANDRADE, Nazareno. Perspectivas em Computa\u00e7\u00e3o SocialLinks para um site externo.. Computa\u00e7\u00e3o Brasil, Raquel Prates and Thais Castro (Eds.), v. 36, p. 30-33, 2018. Acesso em 01 de Jul. de 2021. A Pr\u00e1tica de Design At\u00e9 agora tivemos guiado nossa caminhada no mundo dos conceitos. \u00c9 importante saber os termos usados no mercado bem como suas refer\u00eancias bibliogr\u00e1ficas, entretanto, o vi\u00e9s da nossa forma\u00e7\u00e3o nos direciona para uma abordagem mais pr\u00e1tica tamb\u00e9m. Modelagem de Usu\u00e1rios e Necessidades Como designers de uma aplica\u00e7\u00e3o um dos nossos objetivos \u00e9 alcan\u00e7ar a usabilidade que, pela ISO 9241-11 (2018), pode ser entendida como o grau de utiliza\u00e7\u00e3o do produto para o alcance dos objetivos de modo eficiente, eficaz e satisfat\u00f3rio. Pois bem, sabemos que quem usar\u00e1 os nossos sistemas s\u00e3o os usu\u00e1rios , diante disso, s\u00f3 podemos construir aplica\u00e7\u00f5es com usabilidade se pensarmos no nossos usu\u00e1rios. Para pensarmos melhor a respeito deles, precisamos de informa\u00e7\u00f5es que podem vir das mais diversas fontes: pesquisar, entrevistas, viv\u00eancia e etc. A partir dessas informa\u00e7\u00f5es, podemos realizar um processo chamado de Modelagem de Usu\u00e1rios . A modelagem de usu\u00e1rios pode ser feita por meio de tr\u00eas t\u00e9cnicas: Perfil de Usu\u00e1rio - Descri\u00e7\u00e3o detalhada das caracter\u00edsticas. \u00c9 u agrupamento de conjuntos caracter\u00edsticos para um grupo de usu\u00e1rios reais (jovens, idosos, professores, alunos e etc) focam em algumas caracter\u00edsticas e ignorando outras. Persona de Usu\u00e1rio - \u00c9 o uso de uma fabula\u00e7\u00e3o a respeito do uso. Criamos uma hist\u00f3ria fict\u00edcia que elucida as funcionalidades que nosso sistema deve ter para que o objetivo do nosso personagem seja alcan\u00e7ado. Mapa de Empatia - Descri\u00e7\u00e3o do usu\u00e1rio por meio dos meios de fala, pensamento, sentimento, a\u00e7\u00e3o e contexto. Usa-se um mapa como esse aqui . Fontes Complementares: Artigo cient\u00edfico com exemplos de perfis: PONCIANO, Lesandro; BRASILEIRO, Francisco. Finding Volunteers' Engagement Profiles in Human Computation for Citizen Science Projects (Links para um site externo.). Human Computation, v. 1, n. 2, 2014. Acesso em: 01 de Jul. de 2021. Artigo cient\u00edfico com exemplos de perfis: LOUZADA, Henrique; CHAVES, Gabriel; PONCIANO, Lesandro. Exploring user profiles based on their explainability requirements in interactive systems (Links para um site externo.). In: Proceedings of the 19th Brazilian Symposium on Human Factors in Computing Systems. 2020. p. 1-6. Acesso em: 01 de Jul. de 2021. Abordagens de Prototipagem Agora que temos nossos modelos de usu\u00e1rios, o pr\u00f3ximo passo \u00e9 construir o prot\u00f3tipo da nossa solu\u00e7\u00e3o. O objetivo dessa t\u00e9cnica \u00e9 obter feedback dos interessados antes da constru\u00e7\u00e3o final do projeto. Desse modo, uma boa fase de prototipagem pode economizar verdadeiras fortunas para as empresas e clientes. Usualmente, o processo de prototipagem consiste em quatro etapas: Defini\u00e7\u00e3o do feedback a ser coletado Constru\u00e7\u00e3o dos prot\u00f3tipos Avalia\u00e7\u00e3o dos interessados Descarte do prot\u00f3tipo Agora que sabemos as etapas gerais do processo, nos resta saber quem seriam esses interessados . A resposta para essa pergunta depende muito de quem se propor a respond\u00ea-la mas, no geral, clientes, outros designers e usu\u00e1rios s\u00e3o boas fontes de feedback. M\u00e9todos de constru\u00e7\u00e3o de Prot\u00f3tipos Para a constru\u00e7\u00e3o de prot\u00f3tipos temos uma infinidade de t\u00e9cnicas poss\u00edveis. Vamos destacar algumas: Wireframe - Telas de baixa fidelidade com foco na arquitetura da informa\u00e7\u00e3o e o layout. Mock-Up - Telas de alta fidelidade com inclus\u00e3o de detalhes e funcionalidades mas com escopo de atua\u00e7\u00e3o reduzido 2 . Storyboards - Prototipagem por figuras similares a um diagrama de fluxo que ilustram detalhes na sequ\u00eancia de intera\u00e7\u00e3o. Prototipa\u00e7\u00e3o em V\u00eddeo - Cria\u00e7\u00e3o de uma narrativa visual de utiliza\u00e7\u00e3o da solu\u00e7\u00e3o com exemplo do que ser\u00e1 feito na experi\u00eancia real. Prot\u00f3tipo em Papel - Desenho livre das funcionalidades. Permite uma alta ajustabilidade mas \u00e9 desaconselhado para projetos de alta complexidade. Graus de Fidelidade em Prototipagem Agora que aprendemos alguns dos m\u00e9todos usados na constru\u00e7\u00e3o dos prot\u00f3tipos, podemos ver que existem diferentes n\u00edveis de abstra\u00e7\u00e3o a depender de qual m\u00e9todo optarmos. Chamamos de prototipa\u00e7\u00e3o horizontal os m\u00e9todos que temos menor profundidade nos detalhes, entretanto, uma maior amplitude na quantidade de caracter\u00edsticas do sistema. Do outro lado, temos a prototipa\u00e7\u00e3o vertical que foca em poucas caracter\u00edsticas mas com uma abordagem muito mais profunda. Al\u00e9m do escopo da quantidade de caracter\u00edsticas, podemos avaliar os prot\u00f3tipos relativamente ao grau de fidelidade. Os m\u00e9todos de baixa fidelidade s\u00e3o mais r\u00e1pidos e baratos por focarem em abstrair a maioria dos detalhes em detrimento das ideias simples e iniciais. No outro espectro, m\u00e9todos de alta fidelidade tentam se aproximar grandemente do que ser\u00e1 o resultado final com o m\u00e1ximo de detalhes poss\u00edveis. Cores, Fontes e Harmoniza\u00e7\u00e3o A tipografia \u00e9 o ramo que estuda as diferentes caracter\u00edsticas entre os ``tipos''. Geralmente, agrupados por meio de fam\u00edlias, \u00e9poca e estilo. Al\u00e9m das fontes de texto, as cores tamb\u00e9m s\u00e3o importantes no quesito da est\u00e9tica da aplica\u00e7\u00e3o. Cores podem ser entendidas em termo de ``temperatura'' como cores quentes para objetos em destaque e cores frias para objetos de background. Para auxiliar a escolha da identidade visual, podemos usar ferramentas como o c\u00edrculo crom\u00e1tico para escolher cores de diferentes padr\u00f5es como, por exemplo: Complementares - Opostas no c\u00edrculo crom\u00e1tico An\u00e1logas - Tr\u00eas cores vizinhas no c\u00edrculo crom\u00e1tico Tr\u00edades - Tr\u00eas cores equidistantes no c\u00edrculo crom\u00e1tico Divis\u00e3o Complementar - Tr\u00eas cores. Uma principal e uma cor de cada lado (sendo ambas complementares entre si) Esquema Quadrado - Dois pares de cores complementares Esquema Ret\u00e2ngulo - Quatro cores sendo um par complementar e um par an\u00e1logo Outra maneira de escolhermos cores \u00e9 por meio de escalas padr\u00e3o. Uma escala divergente \u00e9 a que vai de um polo de cor at\u00e9 o outro. Uma escala sequencial \u00e9 a que vai degradando uma mesma cor para a composi\u00e7\u00e3o da escala. Uma escala qualitativa \u00e9 a que re\u00fane cores diferentes em uma mesma paleta. E, por fim, uma escala de cores com sem\u00e2nticas convencionais s\u00e3o escalas de cores que j\u00e1 possuem certo consenso na comunidade (por exemplo a escala Manchester usada em hospitais). Componentes e Recomenda\u00e7\u00f5es Ergon\u00f4micas Toda aplica\u00e7\u00e3o de ter o que chamamos de comportamentos elementares que podem ser entendidos como o b\u00e1sico para qualquer boa intera\u00e7\u00e3o usu\u00e1rio-computador. Esses comportamentos ergon\u00f4micos elementares s\u00e3o: Provis\u00e3o de convite \u00e0 intera\u00e7\u00e3o por meio da indica\u00e7\u00e3o das a\u00e7\u00f5es poss\u00edveis Provis\u00e3o do apoio \u00e0s a\u00e7\u00f5es via redu\u00e7\u00e3o da carga de trabalho Provis\u00e3o de feedback ao usu\u00e1rio em cada entrada de dados A grande maioria das intera\u00e7\u00f5es hoje em dia se d\u00e3o por interm\u00e9dio de uma Graphical User Interface (GUI) que, normalmente, utiliza padr\u00f5es de janelas, \u00edcones, menus e apontadores (WINP 3 ). A abordagem usada para essas aplica\u00e7\u00f5es usa o padr\u00e3o \"reconhecer, em vez de recordar\" que, como o nome diz, foca no uso guiado pelo reconhecimento de padr\u00f5es em tela e n\u00e3o via memoriza\u00e7\u00e3o de padr\u00f5es de uso. \u00cdcones Durante a elabora\u00e7\u00e3o de qualquer aplica\u00e7\u00e3o, o projeto de \u00edcones \u00e9 relevante porque s\u00e3o eles que o usu\u00e1rio usa para o reconhecimento dos padr\u00f5es de refer\u00eancia para o uso. Para o alcance desse objetivo, temos alguns princ\u00edpios norteadores para o uso dos \u00edcones: Met\u00e1fora - O uso de um conhecimento em um contexto para facilitar o entendimento. O exemplo cl\u00e1ssico \u00e9 o uso do \u00edcone de um disquete como elemento de salvamento. Mapeamento Direto - Imagem parecida com o \u00edcone a ser representado. Conven\u00e7\u00e3o - O significado de um \u00edcone de se manter consistente ao longo de todo o sistema. Erros e Alertas Durante a comunica\u00e7\u00e3o entre computador e usu\u00e1rio, \u00e9 muito comum o uso de mensagens de alerta e erro. Podemos elencar algumas boas pr\u00e1ticas para o uso dessas ferramentas: Uso de linguagem branda N\u00e3o usar dupla negativas O sentido dos verbos sempre deve apontar para o sistema. Por exemplo, \"Comando n\u00e3o reconhecimento\" ao inv\u00e9s de \"Comando incorreto\" Evitar o uso de caixa alta Objetos de Intera\u00e7\u00e3o Aqui vamos ter uma s\u00e9rie de recomenda\u00e7\u00f5es sobre as melhores pr\u00e1ticas a respeito dos objetos usados na elabora\u00e7\u00e3o de uma interface. Em se tratando de objetos de sele\u00e7\u00e3o tamb\u00e9m temos algumas boas pr\u00e1ticas a serem seguidas: Listbox - Ordenar os elementos para facilitar a pesquisa Radio Button - Itens mutualmente excludentes Check Box - Sempre permitir a sele\u00e7\u00e3o de m\u00faltiplas alternativas Nos objetos de apresenta\u00e7\u00e3o , temos de ficar atentos em: N\u00e3o usar h\u00edfen no final das linhas M\u00e1ximo 60 caracteres por linha Usar espa\u00e7amento entre par\u00e1grafos Usar bordas impl\u00edcitas ou expl\u00edcitas Evitar caixa alta Fontes serifadas para textos longos Fontes sem serifa para t\u00edtulos e r\u00f3tulos No quesito preenchimento de formul\u00e1rios temos: Usar diferencia\u00e7\u00e3o entre r\u00f3tulo e dados Usar diferencia\u00e7\u00e3o entre campos obrigat\u00f3rios e opcionais Indicar o que for text default Usar feedback sempre que houver envio dos dados ou salvamento Sempre ordenar de maneira satisfat\u00f3ria a navega\u00e7\u00e3o entre campos com uso da tecla tab No fronte de interface podemos destacar: Interfaces Web Maior aten\u00e7\u00e3o \u00e0 arquitetura da informa\u00e7\u00e3o Indica\u00e7\u00e3o de como se mover no site Dispositivos M\u00f3veis Minimizar os n\u00edveis de navega\u00e7\u00e3o Minimizar a quantidade de conte\u00fado exibido Reduzir a quantidade de entradas necess\u00e1rias pelo usu\u00e1rio Aplica\u00e7\u00e3o tolerante com perda de sinal e desligamento do aparelho Princ\u00edpios e Regras de Design Agora vamos aprender alguns princ\u00edpios gerais por dois grupos. Os princ\u00edpios gest\u00e1lticos s\u00e3o oriundos da escolha de pensamento Gestalt muito usada no estudo da psicologia. Complementarmente, vamos ver uma lista de princ\u00edpios chamados de regras de ouro . O princ\u00edpios gest\u00e1lticos s\u00e3o: Proximidade - Entidades visuais pr\u00f3ximas s\u00e3o entendidas como grupo. Alinhamento - Alinhamento s\u00e3o melhor percebidos que contornos irregulares. Simetria - Objetos sim\u00e9tricos s\u00e3o percebidos melhor que objetos assim\u00e9tricos. Similaridade - Semelhan\u00e7a de objetos implica em unidade. Destino Comum - Objetos com um mesmo sentido s\u00e3o percebidos como grupo. Fecho - A mente costuma completar figuras incompleta para gerar regularidade. Regi\u00e3o Comum - Objetos dentro de um contorno s\u00e3o percebidos como unidade. Conectividade - Objetos conectados s\u00e3o entendidos como unidade. As regras de ouro s\u00e3o: Consist\u00eancia Fornecer Atalhos Fornecer Feedbacks Informativos Marcar o Final dos Di\u00e1logos Permitir Revers\u00e3o de A\u00e7\u00f5es Fornecer Controle de Iniciativa do User Reduzir a Carga de Mem\u00f3ria de Trabalho Fontes Complementares: Aqui tem um artigo sobre as regras de ouro que explica melhor cada um desses pontos. Em tempo oportuno essa se\u00e7\u00e3o ser\u00e1 atualizada com um resumo deles. Avalia\u00e7\u00e3o da Qualidade de Sistemas Interativos Abordagens de Avalia\u00e7\u00e3o O Processo de Avalia\u00e7\u00e3o de Sistemas Interativos Podemos definir as abordagens de avalia\u00e7\u00e3o de sistemas em diferentes modos. No primeiro modo de separa\u00e7\u00e3o, podemos nos ater ao momento da avalia\u00e7\u00e3o. Nesse caso podemos ter uma avalia\u00e7\u00e3o no come\u00e7o ou no final do Desenvolvimento do sistema. Quando realizamos a avalia\u00e7\u00e3o no in\u00edcio do processo de projeto para nos asseguramos que estamos no caminho certo, estamos realizando a Avalia\u00e7\u00e3o Formativa . Na outra ponta, quando avaliamos no final do processo se todos os objetivos foram atingidos, \u00e9 dito que fizemos a Avalia\u00e7\u00e3o Somativa . A outra maneira de separar as abordagens de avalia\u00e7\u00e3o \u00e9 quanto ao m\u00e9todo de avalia\u00e7\u00e3o. Nesse caso, podemos destacar tr\u00eas abordagens: Avalia\u00e7\u00e3o por Inspe\u00e7\u00e3o - Nessa abordagem o usu\u00e1rio n\u00e3o \u00e9 envolvido. Ao inv\u00e9s disso, simulamos um usu\u00e1rio por meio de um inspetor que tenta se colocar na posi\u00e7\u00e3o de user. Avalia\u00e7\u00e3o por Observa\u00e7\u00e3o - Nessa abordagem os usu\u00e1rios participam e a avalia\u00e7\u00e3o \u00e9 feita atrav\u00e9s do uso direto do sistema ou de alguma representa\u00e7\u00e3o do mesmo. Avalia\u00e7\u00e3o por Investiga\u00e7\u00e3o - Nessa abordagem os usu\u00e1rios participam, entretanto, a avalia\u00e7\u00e3o \u00e9 feita mediante a aplica\u00e7\u00e3o de t\u00e9cnicas de investiga\u00e7\u00e3o (question\u00e1rio, focus group e etc). M\u00e9todos de Avalia\u00e7\u00e3o Inspe\u00e7\u00e3o do Percurso Cognitivo Agora que aprendemos sobre algumas das abordagens de avalia\u00e7\u00e3o, podemos nos aprofundar um pouco mais em como colocar alguma dessas abordagens em pr\u00e1tica por meio de m\u00e9todos. Nesse t\u00f3pico, focaremos nos m\u00e9todos de avalia\u00e7\u00e3o por inspe\u00e7\u00e3o. No m\u00e9todo de Avalia\u00e7\u00e3o Heur\u00edstica , nos baseamos em um conjunto de dez heur\u00edsticas (que s\u00e3o m\u00e9todos de investiga\u00e7\u00e3o) para avaliarmos se o sistema possui as caracter\u00edsticas desejadas. As dez heur\u00edsticas de Nielses s\u00e3o: Visibilidade do Estado do Sistema Correspond\u00eancia Sistema - Mundo Real Controle e Liberdade do User Consist\u00eancia e Padroniza\u00e7\u00e3o Reconhecimento ao inv\u00e9s de Memoriza\u00e7\u00e3o Preven\u00e7\u00e3o de Erros Flexibilidade e Efici\u00eancia de Uso Projeto Est\u00e9tico e Minimalista Ajuda ao User com Erros Ajuda e Documenta\u00e7\u00e3o Outra metodologia poss\u00edvel \u00e9 a chamada Avalia\u00e7\u00e3o do Percurso Cognitivo . Nesse m\u00e9todo, n\u00f3s nos baseamos em quatro quest\u00f5es: O user tenta alcan\u00e7ar o resultado desejado? O user nota que existe uma a\u00e7\u00e3o correta dispon\u00edvel? O user consegue associar a a\u00e7\u00e3o correta ao efeito que se quer atingir? O user percebe que est\u00e1 progredindo em dire\u00e7\u00e3o \u00e0 conclus\u00e3o da tarefa? Em ambos os m\u00e9todos temos a coleta de dados, avalia\u00e7\u00e3o e prepara\u00e7\u00e3o de avalia\u00e7\u00e3o baseadas nos fluxos e princ\u00edpios que levantamos antes. Inspe\u00e7\u00e3o Semi\u00f3tica Nessa se\u00e7\u00e3o vamos aprender duas abordagens de avalia\u00e7\u00e3o da comunicabilidade de sistemas tamb\u00e9m baseados no processo de inspe\u00e7\u00e3o. O M\u00e9todo de Inspe\u00e7\u00e3o Semi\u00f3tica (MIS) \u00e9 um tipo de avalia\u00e7\u00e3o que busca analisar a comunicabilidade do sistema por meio da emiss\u00e3o da metacomunica\u00e7\u00e3o. Metacomunica\u00e7\u00e3o \u00e9 o estudo da capacidade de comunicar a pr\u00f3pria din\u00e2mica da comunica\u00e7\u00e3o entre interlocutores, ou seja, \u00e9 o estudo da informa\u00e7\u00e3o sobre a informa\u00e7\u00e3o. Coment\u00e1rio: Bem filos\u00f3fico n\u00e9?! Eu, sinceramente, acho que n\u00e3o vale a pena entrar muito profundamente em cada t\u00f3pico desse por agora. Vamos ficar apenas na superf\u00edcie por enquanto. O protocolo MIS \u00e9 baseado em: Inspe\u00e7\u00e3o da metacomunica\u00e7\u00e3o de recursos de ajuda e documenta\u00e7\u00e3o Inspe\u00e7\u00e3o da metacomunica\u00e7\u00e3o em signos est\u00e1ticos inspe\u00e7\u00e3o da metacomunica\u00e7\u00e3o em signos din\u00e2micos Confronto dos resultados anteriores An\u00e1lise da qualidade da metacomunica\u00e7\u00e3o Cada item do protocolo leva em considera\u00e7\u00e3o os seguintes elementos: Quem \u00e9 o user O que se quer fazer Qual a maneira preferida de se executar essa tarefa Qual \u00e9 o sistema projetado Qual a maneira que o sistema est\u00e1 projetado para realizar essa tarefa Al\u00e9m dessa metodologia, temos o M\u00e9todo de Avalia\u00e7\u00e3o da Comunicabilidade (MAC) que \u00e9 baseado em observa\u00e7\u00e3o. O foco \u00e9 avaliar a comunica\u00e7\u00e3o entre o designer e o user por meio da interface. Sempre que o user n\u00e3o compreender o que foi proposto pelo designer ou n\u00e3o souber expressar sua vontade por meio do sistema, dizemos que houve uma ruptura de comunicabilidade. A maneira de investiga\u00e7\u00e3o \u00e9 baseada em 13 etiquetas com frases que simulam o que um user diria diante das situa\u00e7\u00f5es experimentadas: Cade? E agora? O que \u00e9 isso? Epa! Onde estou? O que houve? Por que n\u00e3o funciona? Assim n\u00e3o d\u00e1 Vai de outro jeito N\u00e3o, obrigado Pra mim est\u00e1 bom Socorro! Desisto Coment\u00e1rio: De todos os assuntos, esse ai foi o que eu achei mais estranho. Talvez precisaremos expandir mais essa se\u00e7\u00e3o mas por hora, \u00e9 o que temos. Avalia\u00e7\u00e3o da Acessibilidade No quesito acessibilidade, queremos que a interface tenha os requisitos necess\u00e1rios dispositivos na an\u00e1lise Web Content Accessibility Guidelines (WCAG). Esse m\u00e9todo de avalia\u00e7\u00e3o possui quatro princ\u00edpios que devem ser observados nas interfaces: Percep\u00e7\u00e3o : Alternativas em texto para todo conte\u00fado n\u00e3o textual Alternativas multim\u00eddia din\u00e2mica e temporal Conte\u00fado apresent\u00e1vel em diferentes formas sem perda da informa\u00e7\u00e3o ou estrutura Facilita\u00e7\u00e3o a percep\u00e7\u00e3o visual e auditiva por meio da separa\u00e7\u00e3o entre planos de fundo e primeiro plano Opera\u00e7\u00e3o : Garantir que toda funcionalidade esteja dispon\u00edvel a partir do teclado Tempo de leitura de conte\u00fado suficiente Evitar formas de exibi\u00e7\u00e3o que podem provocar convuls\u00f5es Facilitar a navega\u00e7\u00e3o, localiza\u00e7\u00e3o de conte\u00fados e localiza\u00e7\u00e3o das informa\u00e7\u00f5es Compreens\u00e3o : Conte\u00fado textual leg\u00edvel e compreens\u00edvel P\u00e1ginas web funcionais Aux\u00edliar \u00e0 corre\u00e7\u00e3o de erros Robustez : Maximizar a compatibilidade com utilizadores atuais e futuros Teste de Usabilidade O teste de usabilidade \u00e9 um tipo de avalia\u00e7\u00e3o por observa\u00e7\u00e3o e costumam responder perguntas sobre o funcionamento do sistema. Durante o teste de usabilidade, cada tarefa realizada \u00e9 medida para se obter dados como: Grau de sucesso da execu\u00e7\u00e3o Total de erros cometidos Quantos erros por tipo ocorreram Tempo necess\u00e1rio para a conclus\u00e3o A coleta das informa\u00e7\u00f5es pode variar de acordo com a vontade do designer. Pode variar desde observa\u00e7\u00e3o visual simples at\u00e9 instrumentaliza\u00e7\u00e3o por meio de instrumentos. Antes de se realizar o teste, \u00e9 necess\u00e1rio definir as tarefas a serem executadas, qual o perfil de usu\u00e1rio, recrutamento dos usu\u00e1rios, material para observa\u00e7\u00e3o, execu\u00e7\u00e3o do teste-piloto a ser feito na se\u00e7\u00e3o de uso. Essa \u00e9 a etapa de prepara\u00e7\u00e3o do teste . Ap\u00f3s isso, passamos para a etapa de coleta dos dados por meio da aplica\u00e7\u00e3o dos testes e coleta das performances de uso. Por fim, temos a interpreta\u00e7\u00e3o e consolida\u00e7\u00e3o dos resultados que nos permite sumarizar os dados afim de tirarmos conclus\u00f5es \u00fateis sobre eles. Investiga\u00e7\u00e3o da Usabilidade Por fim, vamos aprender um pouco sobre a avalia\u00e7\u00e3o da usabilidade 4 por meio da an\u00e1lise System Usability Scale (SUS) que usa o modelo de avalia\u00e7\u00e3o por investiga\u00e7\u00e3o. Como j\u00e1 aprendemos, esse tipo de avalia\u00e7\u00e3o permite a intera\u00e7\u00e3o do user com o sistema ou algum representante dele. O SUS foi criado em 1986 e utiliza um questin\u00e1rio de 10 quest\u00f5es aplicadas ap\u00f3s o uso do sistema ou do conhecimento sobre como ele funciona. As quest\u00f5es aplicadas s\u00e3o: Eu acho que gostaria de usar esse sistema com frequ\u00eancia Eu acho o sistema desnecessariamente complexo Eu achei o sistema f\u00e1cil de usar Eu acho que o precisaria de ajuda com conhecimentos t\u00e9cnicos para usar o sistema Eu acho que as fun\u00e7\u00f5es do sistema s\u00e3o bem integradas Eu acho que o sistema apresenta muita inconsist\u00eancia Eu imagino que as pessoas aprender\u00e3o como usar o sistema rapidamente Eu achei o sistema atrapalhado de usar Eu me senti confiante ao usar o sistema Eu precisei aprender v\u00e1rias coisas novas antes de conseguir usar o sistema Onde para cada item, temos as seguintes op\u00e7\u00f5es baseadas na escala Likert de resposta: Discordo completamente Discordo parcialmente N\u00e3o concordo nem discordo Concordo parcialmente Concordo completamente Para a compila\u00e7\u00e3o usamos o seguinte c\u00e1lculo de pontua\u00e7\u00e3o: 1) para as quest\u00f5es \u00edmpares, subtraia 1 ponto da pontua\u00e7\u00e3o respondida; 2) para os itens pares subtraia 5; 3) Some todos os pontos; 4) multiplique por 2,5. A pontua\u00e7\u00e3o variar\u00e1 entre 0 a 100. Um resultado esperado m\u00e9dio gira em torno de 68 pontos. Abaixo de 50 \u00e9 sinal de problemas que podem indicar insucesso na solu\u00e7\u00e3o. Fontes Complementares: : Trabalho de conclus\u00e3o de curso que avalia um aplicativo empregando o m\u00e9todo SUS: SAPFI: um sistema de alerta para evitar aglomera\u00e7\u00f5es em filas de espera de pra\u00e7as de alimenta\u00e7\u00e3oLinks para um site externo. link . Trabalho de conclus\u00e3o de curso que avalia um sistema empregando o m\u00e9todo SUS: Proposta, Prototipa\u00e7\u00e3o e Avalia\u00e7\u00e3o de Aplica\u00e7\u00e3o para Colabora\u00e7\u00e3o e Compartilhamento entre TorcedoresLinks para um site externo. link . Bibliografia BENYON, David. Intera\u00e7\u00e3o Humano-Computador - 2\u00aa edi\u00e7\u00e3o . Pearson 466 ISBN 9788579361098. PADUA FILHO, Wilson de Paula. Multim\u00eddia conceitos e aplica\u00e7\u00f5es . 2. Rio de Janeiro LTC 2010 ISBN 978-85-216-1993-2. ROGERS, Yvonne; PREECE, Jennifer; SHARP, Helen. Interaction Design: beyond human-computer interaction , 5rd Edition. Wiley (O\u2019Reilly). May 2019. ISBN: 9780470665763. COLBORNE, Giles. Simple and Usable Web, Mobile, and Interaction Design, Second Edition . New Riders (O\u2019Reilly). ISBN: 9780134778181. PEREZ, Clotilde; BARBOSA, Ivan Santo. Hiperpublicidade, v. 1. Fundamentos e interfaces . S\u00e3o Paulo Cengage Learning 2018. ISBN 9788522116294 (Recurso online). Information Arquiteture, n\u00e3o confundir com AI (Artificial Inteligence). \u21a9 Por exemplo, usando uma base de dados de teste. \u21a9 Do ingl\u00eas Windows, Icons, Menus and Pointing Devices. \u21a9 Eu n\u00e3o fa\u00e7o ideia do motivo de termos a se\u00e7\u00e3o anterior chamada \"Teste de usabilidade\" a agora termos a se\u00e7\u00e3o \"Investiga\u00e7\u00e3o da usabilidade\" mas vamos l\u00e1. \u21a9","title":"Design de Intera\u00e7\u00e3o"},{"location":"nav/PUC/periodo2/design_interacao/#assuntos","text":"Elementos do Design de Intera\u00e7\u00e3o Sistemas Interativos em Contexto Atributos de Qualidade da Intera\u00e7\u00e3o (Cogni\u00e7\u00e3o e Semi\u00f3tica) Processo de Design de Intera\u00e7\u00e3o Perspectivas de Design A Pr\u00e1tica de Design Avalia\u00e7\u00e3o da Qualidade de Sistemas Interativos Abordagens de Avalia\u00e7\u00e3o M\u00e9todos de Avalia\u00e7\u00e3o Bibliografia","title":"Assuntos"},{"location":"nav/PUC/periodo2/design_interacao/#elementos-do-design-de-interacao","text":"Ao longo desse microfundamento, teremos o objetivo de responder a seguinte pergunta: \"O que leva um usu\u00e1rio a gostar de usar um sistema?\". Assumiremos um papel chamado de projetista de sistemas interativos . A base desse trabalho \u00e9 compreender o usu\u00e1rio, os sistemas interativos e a rela\u00e7\u00e3o entre usu\u00e1rio e sistemas. Vamos aprender a projetar essas intera\u00e7\u00f5es bem como avaliar se os objetivos determinados foram alcan\u00e7ados. Coment\u00e1rio: Essa mat\u00e9ria tem abordagem bem te\u00f3rica. Ent\u00e3o esse material vai ser o mais resumido poss\u00edvel sobre os temas abordados. Quem tiver interesse em se aprofundar, pode buscar esse diferencial na bibliografia.","title":"Elementos do Design de Intera\u00e7\u00e3o"},{"location":"nav/PUC/periodo2/design_interacao/#sistemas-interativos-em-contexto","text":"Em qualquer planejamento de intera\u00e7\u00f5es existem dois atores: o usu\u00e1rio humano e o computador. Ambos s\u00e3o pe\u00e7as fundamentais para o desenho das intera\u00e7\u00f5es, entretanto, a maneira como modelamos o comportamento desses agentes pode variar de acordo com o contexto e o objetivo de design. Podemos dizer que existem quarto perpectivas b\u00e1sicas para modelagem das intera\u00e7\u00f5es user-computador: Perspectiva Sistema - Abora a intera\u00e7\u00e3o user-pc como a intera\u00e7\u00e3o entre dois sistemas. Uma caracter\u00edstica marcante dessa abordagem \u00e9 o uso de formas codificadas como atalhos de teclas ou linguagem formal. A \u00eanfase \u00e9 dada ao computador e na transmiss\u00e3o de dados. Dados como tempo de intera\u00e7\u00e3o e n\u00famero de erros s\u00e3o importantes para avalia\u00e7\u00e3o. Perspectiva Parceiro do Discurso - O ponto focal de avalia\u00e7\u00e3o est\u00e1 mais pr\u00f3ximo do usu\u00e1rio. Existem intera\u00e7\u00e3o por linguagem natural e infer\u00eancia. Um exemplo dessa abordagem s\u00e3o as pesquisas relacionadas em sites de buscas. Dados como a qualidade da resposta provida pelo sistemas s\u00e3o importantes para essa abordagem. Perspectiva Ferramenta - O sistema \u00e9 modelado como ferramenta para alcance de algum resultado. Existe claramente a presen\u00e7a de um resultado da intera\u00e7\u00e3o (um artefato) que define o sucesso ou fracasso da intera\u00e7\u00e3o. Dados sobre uso das fun\u00e7\u00f5es dispon\u00edveis e facilidade de uso s\u00e3o importantes. Perspectiva M\u00eddia - O foco aqui \u00e9 na comunica\u00e7\u00e3o entre pessoas. Nesse caso o sistema atua como meio de comunica\u00e7\u00e3o entre usu\u00e1rios. A qualidade da comunica\u00e7\u00e3o \u00e9 um dos dados mais importantes nessa abordagem.","title":"Sistemas Interativos em Contexto"},{"location":"nav/PUC/periodo2/design_interacao/#atributos-de-qualidade-da-interacao-cognicao-e-semiotica","text":"","title":"Atributos de Qualidade da Intera\u00e7\u00e3o (Cogni\u00e7\u00e3o e Semi\u00f3tica)"},{"location":"nav/PUC/periodo2/design_interacao/#perspectiva-teorica-do-humano-na-interacao-humano-computador","text":"A intera\u00e7\u00e3o Humano-Computador (IHC) \u00e9 o estudo dos sistemas computacionais que s\u00e3o projetados para receberem intera\u00e7\u00f5es de usu\u00e1rios humanos. O foco principal \u00e9 a implementa\u00e7\u00e3o, avalia\u00e7\u00e3o e investiga\u00e7\u00e3o dos sistemas e fen\u00f4menos relacionados ao seus usos. Os usu\u00e1rios dos sistemas s\u00e3o humanos. Isso implica que a IHC leva em considera\u00e7\u00e3o aspectos do sistema cognitivo com suas prefer\u00eancias e comportamentos. Tamb\u00e9m entendem que existem diferen\u00e7as entre usu\u00e1rios e, at\u00e9 mesmo, varia\u00e7\u00f5es entre o mesmo usu\u00e1rios ao longo do tempo. O m\u00e9todo de investiga\u00e7\u00e3o da IHC \u00e9 te\u00f3rico por meio do uso de abordagens distintas. No ramo das abordagens da psicologia experimental s\u00e3o usados dados mensur\u00e1veis e modelagem de comportamento humano. No ramo da psicologia cognitiva, temos a aplica\u00e7\u00e3o de conceitos te\u00f3ricos para a interpreta\u00e7\u00e3o de algumas intera\u00e7\u00f5es e comportamentos observados. Al\u00e9m dos caminhos de pesquisa baseados na psicologia, temos tamb\u00e9m a ado\u00e7\u00e3o de m\u00e9todos oriundos do estudo da lingu\u00edstica que investigam os signos usados na comunica\u00e7\u00e3o e metacomunica\u00e7\u00e3o por meio de artefatos. Para citar algumas dessas abordagens temos: Leis de Hick-Hyman, Leis de Fitts, Processador Humano de Informa\u00e7\u00e3o, Princ\u00edpios da Gestalt, Teoria da Atividade, Cogni\u00e7\u00e3o Distribu\u00edda, Engenharia Cognitiva, Teoria da A\u00e7\u00e3o, Engenharia Semi\u00f3tica e etc.","title":"Perspectiva te\u00f3rica do Humano na Intera\u00e7\u00e3o Humano-Computador"},{"location":"nav/PUC/periodo2/design_interacao/#o-contexto-da-experiencia-do-usuarios","text":"Chamamos de contexto de uso todos os fatos que interferem e interagem com o uso de um sistema. Para citar alguns temos: tempo, ambiente f\u00edsico, social e cultural, disponibilidade e outros fatores. A intera\u00e7\u00e3o do usu\u00e1rio sempre tem algum objetivo em mente que pode ser simples ou complexo. Qualquer intera\u00e7\u00e3o, como cadastro de um funcion\u00e1rio, \u00e9 analisada como uma intera\u00e7\u00e3o. As intera\u00e7\u00f5es humano-computador acontecem por meio de uma interface . Ela atua como \u00fanico meio entre os modos de processamento de informa\u00e7\u00f5es org\u00e2nicos e biol\u00f3gicos do ser humano e os recursos de m\u00e1quina do computador. A interface tamb\u00e9m atua como agende limitador das intera\u00e7\u00f5es, visto que, ela \u00e9 quem define as fun\u00e7\u00f5es acess\u00edveis ao usu\u00e1rio em dado tempo. Outra limita\u00e7\u00e3o que a interface imp\u00f5e a a respeito da acessibilidade. Se o sistema apenas possui uma interface de intra\u00e7\u00e3o por CLI (Command Line Interface), o uso dessa aplica\u00e7\u00e3o ser\u00e1 totalmente diferente de um outro sistema com GUI (Graphic User Interface), por exemplo. Tamb\u00e9m podemos definir intera\u00e7\u00e3o como a troca de informa\u00e7\u00f5es e influ\u00eancia entre o usu\u00e1rio e o sistema atrav\u00e9s da interface. Interagir sempre implica em provar dados e receber novas informa\u00e7\u00f5es como retorno. \u00c9 no contexto de uso que temos a Experi\u00eancia do Usu\u00e1rio (User eXperience ou UX) . Esse conceito t\u00e3o famoso envolve a interface, a intera\u00e7\u00e3o e o ambiente de intera\u00e7\u00e3o. O processo de projetar a UX (UX Design) \u00e9 levar em conta todos esses v\u00e1rios pontos para proporcionar sempre a melhor experi\u00eancia poss\u00edvel. A interface de usu\u00e1rio (UI) \u00e9 a constru\u00e7\u00e3o do modo em que a informa\u00e7\u00e3o ser\u00e1 disposta ao usu\u00e1rio por meio da arquitetura da informa\u00e7\u00e3o (IA) . Ela \u00e9 quem define quais ser\u00e3o as partes em destaque e o que pode ser ``escondido'' por tr\u00e1s de um menu, por exemplo. Para concluir esses conceitos, vamos coloca-los todos juntos: Por meio da interface e dentro de um contexto de uso \u00e9 que ocorrem as intera\u00e7\u00f5es de modo que a UX desse usu\u00e1rio \u00e9 definida, al\u00e9m desses dois primeiros fatores, pela IA 1 . O estudo de todas as vari\u00e1veis que amarramos acima \u00e9 chamado de Design de Intera\u00e7\u00e3o (IxD) . N\u00e3o \u00e9 nenhum espanto constatar que em v\u00e1rias equipes de IxD tenhamos a presen\u00e7a de profissionais de v\u00e1rios campos de estudos que variam da lingu\u00edstica at\u00e9 a antropologia.","title":"O Contexto da Experi\u00eancia do Usu\u00e1rios"},{"location":"nav/PUC/periodo2/design_interacao/#atributos-de-usabilidade-comunicabilidade-e-acessibilidade","text":"Quais seriam os atributos necess\u00e1rios para que possamos avaliar uma intera\u00e7\u00e3o como adequada? Podemos definir quatro caracter\u00edsticas que podem nos ajudar a julgar essa mat\u00e9ria: Usabilidade - Grau em que um produto \u00e9 usado por usu\u00e1rios espec\u00edficos para se atingir um objetivo espec\u00edfico em um dado contexto de uso. Acessibilidade - Uso do sistema sem que a interface imponha obst\u00e1culos ao usu\u00e1rio. Experi\u00eancia de Uso - Como o usu\u00e1rio se sente ao interagir com o sistema. Pode ser grandemente impactada por todos os elementos do contexto de uso. Comunicabilidade - Capacidade da interface comunicar ao usu\u00e1rio a l\u00f3gica que rege o seu funcionamento. Existem alguns normativos que regem os consensos da comunidade ao longo dessas quest\u00f5es. Podemos destacar a ISO/IEC 25010:2011 e a ISO 9241-11:2018(en) .","title":"Atributos de Usabilidade, Comunicabilidade e Acessibilidade"},{"location":"nav/PUC/periodo2/design_interacao/#a-interacao-pela-lente-cognitiva","text":"Em 1986, um pesquisador chamado Donal Norman lan\u00e7ou os fundamentos do que hoje \u00e9 conhecida como Engenharia Cognitiva (EC) . Esse ramo de estudos busca compreender os fundamentos da a\u00e7\u00e3o e desempenho humano que sejam relevantes para a constru\u00e7\u00e3o de design de modo a possibilitar a cria\u00e7\u00e3o de sistemas agrad\u00e1veis e engajantes. Em sua base a EC considera que existem dois grupos de vari\u00e1veis: 1) Vari\u00e1veis Psicol\u00f3gicas e 2) Vari\u00e1veis F\u00edsicas (estados do sistema) e Controles F\u00edsicos (mecanismos de intera\u00e7\u00e3o). como s\u00e3o conjuntos de vari\u00e1veis muito diferentes entre si. Podem existir discrep\u00e2ncias causadas nas tentativas de construir modos de intera\u00e7\u00e3o entre esses dois \"mundos\" distintos. Podemos destacar tr\u00eas tipos de problemas: Problemas de Mapeamento - As vari\u00e1veis psicol\u00f3gicas precisar ser conectadas \u00e0s vari\u00e1veis f\u00edsicas por meio da interface. Qualquer imprecis\u00e3o no meio de comunica\u00e7\u00e3o entre user e computador gera problemas de mapeamento. Dificuldade de Controle - O qu\u00e3o f\u00e1cil \u00e9 controlar as vari\u00e1veis f\u00edsicas para se alcan\u00e7ar o objetivo proposto pela solu\u00e7\u00e3o. Dificuldade de Avaliza\u00e7\u00e3o - O qu\u00e3o f\u00e1cil \u00e9 avaliar se o resultado da intera\u00e7\u00e3o do user est\u00e1 de acordo com o objetivo da intera\u00e7\u00e3o. Os problemas descritos acima s\u00e3o origin\u00e1rios da diferen\u00e7a entre como o designer entende o sistema e como o usu\u00e1rio entende o sistema. Podemos criar alguns conceitos para organizar melhor essa problem\u00e1tica de meios de interpreta\u00e7\u00e3o diversos do mesmo sistema. \u00c9 poss\u00edvel separar essas interpreta\u00e7\u00f5es em tr\u00eas componentes: Modelo de Design - Modelo conceitual que o sistema \u00e9 compreendido pelo design. Imagem do Sistema F\u00edsico - \u00c9 o sistema f\u00edsico constru\u00eddo a partir do modelo de design. Modelo do Usu\u00e1rio - \u00c9 o modelo constru\u00eddo internamente pelo usu\u00e1rio ao longo das intera\u00e7\u00f5es com o sistema. Coment\u00e1rio: Cada conceito que vimos at\u00e9 agora levam anos de pesquisa at\u00e9 se ter algum dom\u00ednio. Nosso foco por agora \u00e9 apenas conhecer a exist\u00eancia desses conceitos bem como uma vers\u00e3o resumida do que s\u00e3o. Fontes Complementares: NORMAN, Donald A. Steps toward a cognitive engineering: Design rules based on analyses of human error (Links para um site externo.). In: Proceedings of the 1982 conference on Human factors in computing systems. 1982. p. 378-382. Acesso em 15 de Mai. de 2021. NORMAN, Donald A. Cognitive engineering. User centered system design, v. 31, p. 61, 1986.","title":"A intera\u00e7\u00e3o pela Lente Cognitiva"},{"location":"nav/PUC/periodo2/design_interacao/#a-interacao-pela-lente-semiotica","text":"Coment\u00e1rio: Eu n\u00e3o sei voc\u00eas, mas, pra mim, a palavra semi\u00f3tica \u00e9 o tipo de palavra que apenas eruditos e intelectuais costumam usar. Ent\u00e3o, finalmente, chegou a nossa hora de aprender o que significa isso. Podemos definir a Semi\u00f3tica como o ramo da lingu\u00edstica que estuda como e porque as pessoas atribuem significado \u00e0s coisas e, al\u00e9m disso, como usam esses objetos dotados de significado para se comunicar. Por sua vez, a Engenharia Semi\u00f3tica busca compreender a intera\u00e7\u00e3o humano-computador como um caso particular de comunica\u00e7\u00e3o humana mediada por sistemas computacionais. Esse processo de comunica\u00e7\u00e3o ocorre em dois n\u00edveis: Comunica\u00e7\u00e3o direta user-sistema Metacomunica\u00e7\u00e3o designer-user mediada pela interface do sistema. A interface pode ser entendida como um meio da mensagem passada pelo designer. Essa comunica\u00e7\u00e3o se d\u00e1 por meio de signos (coisas com significado), significados (tarefas que desejamos executar) e representa\u00e7\u00f5es (janelas, bot\u00f5es, menus e etc). Existem tr\u00eas tipos de signos: Est\u00e1ticos - Comunicam seu significado integral por meio de telas fixas do sistema Din\u00e2micos - Comunicam seu significado integral em sequ\u00eancia de telas e n\u00e3o e apenas uma vis\u00e3o. Metalingu\u00edsticos - S\u00e3o signos que explicam outros signos (est\u00e1ticos ou din\u00e2micos).","title":"A intera\u00e7\u00e3o pela Lente Semi\u00f3tica"},{"location":"nav/PUC/periodo2/design_interacao/#processo-de-design-de-interacao","text":"","title":"Processo de Design de Intera\u00e7\u00e3o"},{"location":"nav/PUC/periodo2/design_interacao/#perspectivas-de-design","text":"","title":"Perspectivas de Design"},{"location":"nav/PUC/periodo2/design_interacao/#metodos-de-se-projetar-um-sistema","text":"No esfor\u00e7o de construir boas interfaces de sistemas, podemos partir de abordagens diferentes que focam em pressupostos de interpreta\u00e7\u00e3o da intera\u00e7\u00e3o user-computador. Grosso modo, podemos agrupar essas abordagens em dois grupos: De Dentro para Fora - Foco no software. Primeiro se projeta a estrutura de dados, l\u00f3gica do sistema e, por fim, a interface. As m\u00e9tricas s\u00e3o focadas na efici\u00eancia de funcionamento do sistema. De Fora para Dentro - Foco no usu\u00e1rio. Come\u00e7a-se com o projeto da interface para, depois, seguir o planejamento da l\u00f3gica e a organiza\u00e7\u00e3o dos dados. Essa abordagem demanda um amplo conhecimento da pessoas que far\u00e3o uso do sistema. Graus de Import\u00e2ncia do Usu\u00e1rio Existem algumas maneiras de se considerar o usu\u00e1rio na hora de construirmos a interface das aplica\u00e7\u00f5es. Podemos definir tr\u00eas graus de relev\u00e2ncia do usu\u00e1rio na constru\u00e7\u00e3o das aplica\u00e7\u00f5es: Projeto Independente - Esse modelo n\u00e3o conhece nem consulta o usu\u00e1rio no processo de constru\u00e7\u00e3o do software. O usu\u00e1rio ter\u00e1 de se adaptar \u00e0 l\u00f3gica do sistemas. Deve aceitar o que o sistema permite e n\u00e3o permite. Essa abordagem n\u00e3o \u00e9 a ideal para sistemas interativos. Design Centrado no Usu\u00e1rio - H\u00e1 a preocupa\u00e7\u00e3o em entender quem s\u00e3o os usu\u00e1rios e quais s\u00e3o os seus objetivos. S\u00e3o coletados dados emp\u00edricos de uso, simula\u00e7\u00f5es e prot\u00f3tipos. Costumam ter quatro atividades para a constru\u00e7\u00e3o: Identifica\u00e7\u00e3o das necessidades Constru\u00e7\u00e3o do design do sistemas Constru\u00e7\u00e3o da vers\u00e3o Interativa Avalia\u00e7\u00e3o do artefato Design Participativo - O usu\u00e1rio tem voz ativa no processo. Amplo foco na usabilidade. Fontes Complementares: KUHN, Sara; WINOGRAD, Terry. Participatory Design (Links para um site externo.). In: Bringing Design to Software. New York: Addison-Wesley, 1996. Acesso em: 01 Jul. 2021. PONCIANO, Lesandro. HCI Support Card: Creating and Using a Support Card for Education in Human-Computer Interaction (Links para um site externo.). In: Workshop sobre Educa\u00e7\u00e3o em IHC. Simp\u00f3sio Brasileiro de Fatores Humanos em Sistemas Computacionais. 2019, Vit\u00f3ria. Porto Alegre: Sociedade Brasileira de Computa\u00e7\u00e3o, 2019. p. 106-111. Acesso em: 01 Jul. 2021.","title":"M\u00e9todos de se Projetar um Sistema"},{"location":"nav/PUC/periodo2/design_interacao/#desing-e-tecnica-ou-arte","text":"Coment\u00e1rio: Eu, particularmente, acho esse tipo de discuss\u00e3o pouco relevante. Ent\u00e3o vou apenas resumir e indicar as bibliografias. Basicamente, temos duas maneiras de enxergar o conhecimento de constru\u00e7\u00e3o de design de intera\u00e7\u00f5es: Racionalismo T\u00e9cnico - Existem problemas conhecidos com solu\u00e7\u00f5es pre-determinadas. O papel do designer seria \"enxergar\" as equival\u00eancias do caso pr\u00e1tico dele com a teoria. Al\u00e9m disso, teria a responsabilidade de aumentar o seu repert\u00f3rio de solu\u00e7\u00f5es para sempre ter uma sa\u00edda a um problema de design encontrado. Reflex\u00e3o em A\u00e7\u00e3o - Existem problemas e solu\u00e7\u00f5es \u00fanicas onde os m\u00e9todos e ferramentas atuam apenas como auxiliadores do processo de constru\u00e7\u00e3o do design. Nessa abordagem a criatividade do designer possui amplo espa\u00e7o para constru\u00e7\u00e3o. Fontes Complementares: PONCIANO, Lesandro. Debate Estruturado: Uma Estrat\u00e9gia Pedag\u00f3gica para Ensino e Aprendizagem de Valores Humanos em Intera\u00e7\u00e3o Humano-ComputadorLinks para um site externo.. In: Workshop sobre Educa\u00e7\u00e3o em IHC - Simp\u00f3sio Brasiliero de Fatores humanos em Sistemas Computacionais, 17., 2018, Bel\u00e9m. Porto Alegre: Sociedade Brasileira de Computa\u00e7\u00e3o, 2018. Acessso em: 01 de Jul. de 2021. PONCIANO, Lesandro; ANDRADE, Nazareno. Perspectivas em Computa\u00e7\u00e3o SocialLinks para um site externo.. Computa\u00e7\u00e3o Brasil, Raquel Prates and Thais Castro (Eds.), v. 36, p. 30-33, 2018. Acesso em 01 de Jul. de 2021.","title":"Desing \u00e9 T\u00e9cnica ou Arte?"},{"location":"nav/PUC/periodo2/design_interacao/#a-pratica-de-design","text":"At\u00e9 agora tivemos guiado nossa caminhada no mundo dos conceitos. \u00c9 importante saber os termos usados no mercado bem como suas refer\u00eancias bibliogr\u00e1ficas, entretanto, o vi\u00e9s da nossa forma\u00e7\u00e3o nos direciona para uma abordagem mais pr\u00e1tica tamb\u00e9m.","title":"A Pr\u00e1tica de Design"},{"location":"nav/PUC/periodo2/design_interacao/#modelagem-de-usuarios-e-necessidades","text":"Como designers de uma aplica\u00e7\u00e3o um dos nossos objetivos \u00e9 alcan\u00e7ar a usabilidade que, pela ISO 9241-11 (2018), pode ser entendida como o grau de utiliza\u00e7\u00e3o do produto para o alcance dos objetivos de modo eficiente, eficaz e satisfat\u00f3rio. Pois bem, sabemos que quem usar\u00e1 os nossos sistemas s\u00e3o os usu\u00e1rios , diante disso, s\u00f3 podemos construir aplica\u00e7\u00f5es com usabilidade se pensarmos no nossos usu\u00e1rios. Para pensarmos melhor a respeito deles, precisamos de informa\u00e7\u00f5es que podem vir das mais diversas fontes: pesquisar, entrevistas, viv\u00eancia e etc. A partir dessas informa\u00e7\u00f5es, podemos realizar um processo chamado de Modelagem de Usu\u00e1rios . A modelagem de usu\u00e1rios pode ser feita por meio de tr\u00eas t\u00e9cnicas: Perfil de Usu\u00e1rio - Descri\u00e7\u00e3o detalhada das caracter\u00edsticas. \u00c9 u agrupamento de conjuntos caracter\u00edsticos para um grupo de usu\u00e1rios reais (jovens, idosos, professores, alunos e etc) focam em algumas caracter\u00edsticas e ignorando outras. Persona de Usu\u00e1rio - \u00c9 o uso de uma fabula\u00e7\u00e3o a respeito do uso. Criamos uma hist\u00f3ria fict\u00edcia que elucida as funcionalidades que nosso sistema deve ter para que o objetivo do nosso personagem seja alcan\u00e7ado. Mapa de Empatia - Descri\u00e7\u00e3o do usu\u00e1rio por meio dos meios de fala, pensamento, sentimento, a\u00e7\u00e3o e contexto. Usa-se um mapa como esse aqui . Fontes Complementares: Artigo cient\u00edfico com exemplos de perfis: PONCIANO, Lesandro; BRASILEIRO, Francisco. Finding Volunteers' Engagement Profiles in Human Computation for Citizen Science Projects (Links para um site externo.). Human Computation, v. 1, n. 2, 2014. Acesso em: 01 de Jul. de 2021. Artigo cient\u00edfico com exemplos de perfis: LOUZADA, Henrique; CHAVES, Gabriel; PONCIANO, Lesandro. Exploring user profiles based on their explainability requirements in interactive systems (Links para um site externo.). In: Proceedings of the 19th Brazilian Symposium on Human Factors in Computing Systems. 2020. p. 1-6. Acesso em: 01 de Jul. de 2021.","title":"Modelagem de Usu\u00e1rios e Necessidades"},{"location":"nav/PUC/periodo2/design_interacao/#abordagens-de-prototipagem","text":"Agora que temos nossos modelos de usu\u00e1rios, o pr\u00f3ximo passo \u00e9 construir o prot\u00f3tipo da nossa solu\u00e7\u00e3o. O objetivo dessa t\u00e9cnica \u00e9 obter feedback dos interessados antes da constru\u00e7\u00e3o final do projeto. Desse modo, uma boa fase de prototipagem pode economizar verdadeiras fortunas para as empresas e clientes. Usualmente, o processo de prototipagem consiste em quatro etapas: Defini\u00e7\u00e3o do feedback a ser coletado Constru\u00e7\u00e3o dos prot\u00f3tipos Avalia\u00e7\u00e3o dos interessados Descarte do prot\u00f3tipo Agora que sabemos as etapas gerais do processo, nos resta saber quem seriam esses interessados . A resposta para essa pergunta depende muito de quem se propor a respond\u00ea-la mas, no geral, clientes, outros designers e usu\u00e1rios s\u00e3o boas fontes de feedback. M\u00e9todos de constru\u00e7\u00e3o de Prot\u00f3tipos Para a constru\u00e7\u00e3o de prot\u00f3tipos temos uma infinidade de t\u00e9cnicas poss\u00edveis. Vamos destacar algumas: Wireframe - Telas de baixa fidelidade com foco na arquitetura da informa\u00e7\u00e3o e o layout. Mock-Up - Telas de alta fidelidade com inclus\u00e3o de detalhes e funcionalidades mas com escopo de atua\u00e7\u00e3o reduzido 2 . Storyboards - Prototipagem por figuras similares a um diagrama de fluxo que ilustram detalhes na sequ\u00eancia de intera\u00e7\u00e3o. Prototipa\u00e7\u00e3o em V\u00eddeo - Cria\u00e7\u00e3o de uma narrativa visual de utiliza\u00e7\u00e3o da solu\u00e7\u00e3o com exemplo do que ser\u00e1 feito na experi\u00eancia real. Prot\u00f3tipo em Papel - Desenho livre das funcionalidades. Permite uma alta ajustabilidade mas \u00e9 desaconselhado para projetos de alta complexidade. Graus de Fidelidade em Prototipagem Agora que aprendemos alguns dos m\u00e9todos usados na constru\u00e7\u00e3o dos prot\u00f3tipos, podemos ver que existem diferentes n\u00edveis de abstra\u00e7\u00e3o a depender de qual m\u00e9todo optarmos. Chamamos de prototipa\u00e7\u00e3o horizontal os m\u00e9todos que temos menor profundidade nos detalhes, entretanto, uma maior amplitude na quantidade de caracter\u00edsticas do sistema. Do outro lado, temos a prototipa\u00e7\u00e3o vertical que foca em poucas caracter\u00edsticas mas com uma abordagem muito mais profunda. Al\u00e9m do escopo da quantidade de caracter\u00edsticas, podemos avaliar os prot\u00f3tipos relativamente ao grau de fidelidade. Os m\u00e9todos de baixa fidelidade s\u00e3o mais r\u00e1pidos e baratos por focarem em abstrair a maioria dos detalhes em detrimento das ideias simples e iniciais. No outro espectro, m\u00e9todos de alta fidelidade tentam se aproximar grandemente do que ser\u00e1 o resultado final com o m\u00e1ximo de detalhes poss\u00edveis.","title":"Abordagens de Prototipagem"},{"location":"nav/PUC/periodo2/design_interacao/#cores-fontes-e-harmonizacao","text":"A tipografia \u00e9 o ramo que estuda as diferentes caracter\u00edsticas entre os ``tipos''. Geralmente, agrupados por meio de fam\u00edlias, \u00e9poca e estilo. Al\u00e9m das fontes de texto, as cores tamb\u00e9m s\u00e3o importantes no quesito da est\u00e9tica da aplica\u00e7\u00e3o. Cores podem ser entendidas em termo de ``temperatura'' como cores quentes para objetos em destaque e cores frias para objetos de background. Para auxiliar a escolha da identidade visual, podemos usar ferramentas como o c\u00edrculo crom\u00e1tico para escolher cores de diferentes padr\u00f5es como, por exemplo: Complementares - Opostas no c\u00edrculo crom\u00e1tico An\u00e1logas - Tr\u00eas cores vizinhas no c\u00edrculo crom\u00e1tico Tr\u00edades - Tr\u00eas cores equidistantes no c\u00edrculo crom\u00e1tico Divis\u00e3o Complementar - Tr\u00eas cores. Uma principal e uma cor de cada lado (sendo ambas complementares entre si) Esquema Quadrado - Dois pares de cores complementares Esquema Ret\u00e2ngulo - Quatro cores sendo um par complementar e um par an\u00e1logo Outra maneira de escolhermos cores \u00e9 por meio de escalas padr\u00e3o. Uma escala divergente \u00e9 a que vai de um polo de cor at\u00e9 o outro. Uma escala sequencial \u00e9 a que vai degradando uma mesma cor para a composi\u00e7\u00e3o da escala. Uma escala qualitativa \u00e9 a que re\u00fane cores diferentes em uma mesma paleta. E, por fim, uma escala de cores com sem\u00e2nticas convencionais s\u00e3o escalas de cores que j\u00e1 possuem certo consenso na comunidade (por exemplo a escala Manchester usada em hospitais).","title":"Cores, Fontes e Harmoniza\u00e7\u00e3o"},{"location":"nav/PUC/periodo2/design_interacao/#componentes-e-recomendacoes-ergonomicas","text":"Toda aplica\u00e7\u00e3o de ter o que chamamos de comportamentos elementares que podem ser entendidos como o b\u00e1sico para qualquer boa intera\u00e7\u00e3o usu\u00e1rio-computador. Esses comportamentos ergon\u00f4micos elementares s\u00e3o: Provis\u00e3o de convite \u00e0 intera\u00e7\u00e3o por meio da indica\u00e7\u00e3o das a\u00e7\u00f5es poss\u00edveis Provis\u00e3o do apoio \u00e0s a\u00e7\u00f5es via redu\u00e7\u00e3o da carga de trabalho Provis\u00e3o de feedback ao usu\u00e1rio em cada entrada de dados A grande maioria das intera\u00e7\u00f5es hoje em dia se d\u00e3o por interm\u00e9dio de uma Graphical User Interface (GUI) que, normalmente, utiliza padr\u00f5es de janelas, \u00edcones, menus e apontadores (WINP 3 ). A abordagem usada para essas aplica\u00e7\u00f5es usa o padr\u00e3o \"reconhecer, em vez de recordar\" que, como o nome diz, foca no uso guiado pelo reconhecimento de padr\u00f5es em tela e n\u00e3o via memoriza\u00e7\u00e3o de padr\u00f5es de uso. \u00cdcones Durante a elabora\u00e7\u00e3o de qualquer aplica\u00e7\u00e3o, o projeto de \u00edcones \u00e9 relevante porque s\u00e3o eles que o usu\u00e1rio usa para o reconhecimento dos padr\u00f5es de refer\u00eancia para o uso. Para o alcance desse objetivo, temos alguns princ\u00edpios norteadores para o uso dos \u00edcones: Met\u00e1fora - O uso de um conhecimento em um contexto para facilitar o entendimento. O exemplo cl\u00e1ssico \u00e9 o uso do \u00edcone de um disquete como elemento de salvamento. Mapeamento Direto - Imagem parecida com o \u00edcone a ser representado. Conven\u00e7\u00e3o - O significado de um \u00edcone de se manter consistente ao longo de todo o sistema. Erros e Alertas Durante a comunica\u00e7\u00e3o entre computador e usu\u00e1rio, \u00e9 muito comum o uso de mensagens de alerta e erro. Podemos elencar algumas boas pr\u00e1ticas para o uso dessas ferramentas: Uso de linguagem branda N\u00e3o usar dupla negativas O sentido dos verbos sempre deve apontar para o sistema. Por exemplo, \"Comando n\u00e3o reconhecimento\" ao inv\u00e9s de \"Comando incorreto\" Evitar o uso de caixa alta Objetos de Intera\u00e7\u00e3o Aqui vamos ter uma s\u00e9rie de recomenda\u00e7\u00f5es sobre as melhores pr\u00e1ticas a respeito dos objetos usados na elabora\u00e7\u00e3o de uma interface. Em se tratando de objetos de sele\u00e7\u00e3o tamb\u00e9m temos algumas boas pr\u00e1ticas a serem seguidas: Listbox - Ordenar os elementos para facilitar a pesquisa Radio Button - Itens mutualmente excludentes Check Box - Sempre permitir a sele\u00e7\u00e3o de m\u00faltiplas alternativas Nos objetos de apresenta\u00e7\u00e3o , temos de ficar atentos em: N\u00e3o usar h\u00edfen no final das linhas M\u00e1ximo 60 caracteres por linha Usar espa\u00e7amento entre par\u00e1grafos Usar bordas impl\u00edcitas ou expl\u00edcitas Evitar caixa alta Fontes serifadas para textos longos Fontes sem serifa para t\u00edtulos e r\u00f3tulos No quesito preenchimento de formul\u00e1rios temos: Usar diferencia\u00e7\u00e3o entre r\u00f3tulo e dados Usar diferencia\u00e7\u00e3o entre campos obrigat\u00f3rios e opcionais Indicar o que for text default Usar feedback sempre que houver envio dos dados ou salvamento Sempre ordenar de maneira satisfat\u00f3ria a navega\u00e7\u00e3o entre campos com uso da tecla tab No fronte de interface podemos destacar: Interfaces Web Maior aten\u00e7\u00e3o \u00e0 arquitetura da informa\u00e7\u00e3o Indica\u00e7\u00e3o de como se mover no site Dispositivos M\u00f3veis Minimizar os n\u00edveis de navega\u00e7\u00e3o Minimizar a quantidade de conte\u00fado exibido Reduzir a quantidade de entradas necess\u00e1rias pelo usu\u00e1rio Aplica\u00e7\u00e3o tolerante com perda de sinal e desligamento do aparelho","title":"Componentes e Recomenda\u00e7\u00f5es Ergon\u00f4micas"},{"location":"nav/PUC/periodo2/design_interacao/#principios-e-regras-de-design","text":"Agora vamos aprender alguns princ\u00edpios gerais por dois grupos. Os princ\u00edpios gest\u00e1lticos s\u00e3o oriundos da escolha de pensamento Gestalt muito usada no estudo da psicologia. Complementarmente, vamos ver uma lista de princ\u00edpios chamados de regras de ouro . O princ\u00edpios gest\u00e1lticos s\u00e3o: Proximidade - Entidades visuais pr\u00f3ximas s\u00e3o entendidas como grupo. Alinhamento - Alinhamento s\u00e3o melhor percebidos que contornos irregulares. Simetria - Objetos sim\u00e9tricos s\u00e3o percebidos melhor que objetos assim\u00e9tricos. Similaridade - Semelhan\u00e7a de objetos implica em unidade. Destino Comum - Objetos com um mesmo sentido s\u00e3o percebidos como grupo. Fecho - A mente costuma completar figuras incompleta para gerar regularidade. Regi\u00e3o Comum - Objetos dentro de um contorno s\u00e3o percebidos como unidade. Conectividade - Objetos conectados s\u00e3o entendidos como unidade. As regras de ouro s\u00e3o: Consist\u00eancia Fornecer Atalhos Fornecer Feedbacks Informativos Marcar o Final dos Di\u00e1logos Permitir Revers\u00e3o de A\u00e7\u00f5es Fornecer Controle de Iniciativa do User Reduzir a Carga de Mem\u00f3ria de Trabalho Fontes Complementares: Aqui tem um artigo sobre as regras de ouro que explica melhor cada um desses pontos. Em tempo oportuno essa se\u00e7\u00e3o ser\u00e1 atualizada com um resumo deles.","title":"Princ\u00edpios e Regras de Design"},{"location":"nav/PUC/periodo2/design_interacao/#avaliacao-da-qualidade-de-sistemas-interativos","text":"","title":"Avalia\u00e7\u00e3o da Qualidade de Sistemas Interativos"},{"location":"nav/PUC/periodo2/design_interacao/#abordagens-de-avaliacao","text":"","title":"Abordagens de Avalia\u00e7\u00e3o"},{"location":"nav/PUC/periodo2/design_interacao/#o-processo-de-avaliacao-de-sistemas-interativos","text":"Podemos definir as abordagens de avalia\u00e7\u00e3o de sistemas em diferentes modos. No primeiro modo de separa\u00e7\u00e3o, podemos nos ater ao momento da avalia\u00e7\u00e3o. Nesse caso podemos ter uma avalia\u00e7\u00e3o no come\u00e7o ou no final do Desenvolvimento do sistema. Quando realizamos a avalia\u00e7\u00e3o no in\u00edcio do processo de projeto para nos asseguramos que estamos no caminho certo, estamos realizando a Avalia\u00e7\u00e3o Formativa . Na outra ponta, quando avaliamos no final do processo se todos os objetivos foram atingidos, \u00e9 dito que fizemos a Avalia\u00e7\u00e3o Somativa . A outra maneira de separar as abordagens de avalia\u00e7\u00e3o \u00e9 quanto ao m\u00e9todo de avalia\u00e7\u00e3o. Nesse caso, podemos destacar tr\u00eas abordagens: Avalia\u00e7\u00e3o por Inspe\u00e7\u00e3o - Nessa abordagem o usu\u00e1rio n\u00e3o \u00e9 envolvido. Ao inv\u00e9s disso, simulamos um usu\u00e1rio por meio de um inspetor que tenta se colocar na posi\u00e7\u00e3o de user. Avalia\u00e7\u00e3o por Observa\u00e7\u00e3o - Nessa abordagem os usu\u00e1rios participam e a avalia\u00e7\u00e3o \u00e9 feita atrav\u00e9s do uso direto do sistema ou de alguma representa\u00e7\u00e3o do mesmo. Avalia\u00e7\u00e3o por Investiga\u00e7\u00e3o - Nessa abordagem os usu\u00e1rios participam, entretanto, a avalia\u00e7\u00e3o \u00e9 feita mediante a aplica\u00e7\u00e3o de t\u00e9cnicas de investiga\u00e7\u00e3o (question\u00e1rio, focus group e etc).","title":"O Processo de Avalia\u00e7\u00e3o de Sistemas Interativos"},{"location":"nav/PUC/periodo2/design_interacao/#metodos-de-avaliacao","text":"","title":"M\u00e9todos de Avalia\u00e7\u00e3o"},{"location":"nav/PUC/periodo2/design_interacao/#inspecao-do-percurso-cognitivo","text":"Agora que aprendemos sobre algumas das abordagens de avalia\u00e7\u00e3o, podemos nos aprofundar um pouco mais em como colocar alguma dessas abordagens em pr\u00e1tica por meio de m\u00e9todos. Nesse t\u00f3pico, focaremos nos m\u00e9todos de avalia\u00e7\u00e3o por inspe\u00e7\u00e3o. No m\u00e9todo de Avalia\u00e7\u00e3o Heur\u00edstica , nos baseamos em um conjunto de dez heur\u00edsticas (que s\u00e3o m\u00e9todos de investiga\u00e7\u00e3o) para avaliarmos se o sistema possui as caracter\u00edsticas desejadas. As dez heur\u00edsticas de Nielses s\u00e3o: Visibilidade do Estado do Sistema Correspond\u00eancia Sistema - Mundo Real Controle e Liberdade do User Consist\u00eancia e Padroniza\u00e7\u00e3o Reconhecimento ao inv\u00e9s de Memoriza\u00e7\u00e3o Preven\u00e7\u00e3o de Erros Flexibilidade e Efici\u00eancia de Uso Projeto Est\u00e9tico e Minimalista Ajuda ao User com Erros Ajuda e Documenta\u00e7\u00e3o Outra metodologia poss\u00edvel \u00e9 a chamada Avalia\u00e7\u00e3o do Percurso Cognitivo . Nesse m\u00e9todo, n\u00f3s nos baseamos em quatro quest\u00f5es: O user tenta alcan\u00e7ar o resultado desejado? O user nota que existe uma a\u00e7\u00e3o correta dispon\u00edvel? O user consegue associar a a\u00e7\u00e3o correta ao efeito que se quer atingir? O user percebe que est\u00e1 progredindo em dire\u00e7\u00e3o \u00e0 conclus\u00e3o da tarefa? Em ambos os m\u00e9todos temos a coleta de dados, avalia\u00e7\u00e3o e prepara\u00e7\u00e3o de avalia\u00e7\u00e3o baseadas nos fluxos e princ\u00edpios que levantamos antes.","title":"Inspe\u00e7\u00e3o do Percurso Cognitivo"},{"location":"nav/PUC/periodo2/design_interacao/#inspecao-semiotica","text":"Nessa se\u00e7\u00e3o vamos aprender duas abordagens de avalia\u00e7\u00e3o da comunicabilidade de sistemas tamb\u00e9m baseados no processo de inspe\u00e7\u00e3o. O M\u00e9todo de Inspe\u00e7\u00e3o Semi\u00f3tica (MIS) \u00e9 um tipo de avalia\u00e7\u00e3o que busca analisar a comunicabilidade do sistema por meio da emiss\u00e3o da metacomunica\u00e7\u00e3o. Metacomunica\u00e7\u00e3o \u00e9 o estudo da capacidade de comunicar a pr\u00f3pria din\u00e2mica da comunica\u00e7\u00e3o entre interlocutores, ou seja, \u00e9 o estudo da informa\u00e7\u00e3o sobre a informa\u00e7\u00e3o. Coment\u00e1rio: Bem filos\u00f3fico n\u00e9?! Eu, sinceramente, acho que n\u00e3o vale a pena entrar muito profundamente em cada t\u00f3pico desse por agora. Vamos ficar apenas na superf\u00edcie por enquanto. O protocolo MIS \u00e9 baseado em: Inspe\u00e7\u00e3o da metacomunica\u00e7\u00e3o de recursos de ajuda e documenta\u00e7\u00e3o Inspe\u00e7\u00e3o da metacomunica\u00e7\u00e3o em signos est\u00e1ticos inspe\u00e7\u00e3o da metacomunica\u00e7\u00e3o em signos din\u00e2micos Confronto dos resultados anteriores An\u00e1lise da qualidade da metacomunica\u00e7\u00e3o Cada item do protocolo leva em considera\u00e7\u00e3o os seguintes elementos: Quem \u00e9 o user O que se quer fazer Qual a maneira preferida de se executar essa tarefa Qual \u00e9 o sistema projetado Qual a maneira que o sistema est\u00e1 projetado para realizar essa tarefa Al\u00e9m dessa metodologia, temos o M\u00e9todo de Avalia\u00e7\u00e3o da Comunicabilidade (MAC) que \u00e9 baseado em observa\u00e7\u00e3o. O foco \u00e9 avaliar a comunica\u00e7\u00e3o entre o designer e o user por meio da interface. Sempre que o user n\u00e3o compreender o que foi proposto pelo designer ou n\u00e3o souber expressar sua vontade por meio do sistema, dizemos que houve uma ruptura de comunicabilidade. A maneira de investiga\u00e7\u00e3o \u00e9 baseada em 13 etiquetas com frases que simulam o que um user diria diante das situa\u00e7\u00f5es experimentadas: Cade? E agora? O que \u00e9 isso? Epa! Onde estou? O que houve? Por que n\u00e3o funciona? Assim n\u00e3o d\u00e1 Vai de outro jeito N\u00e3o, obrigado Pra mim est\u00e1 bom Socorro! Desisto Coment\u00e1rio: De todos os assuntos, esse ai foi o que eu achei mais estranho. Talvez precisaremos expandir mais essa se\u00e7\u00e3o mas por hora, \u00e9 o que temos.","title":"Inspe\u00e7\u00e3o Semi\u00f3tica"},{"location":"nav/PUC/periodo2/design_interacao/#avaliacao-da-acessibilidade","text":"No quesito acessibilidade, queremos que a interface tenha os requisitos necess\u00e1rios dispositivos na an\u00e1lise Web Content Accessibility Guidelines (WCAG). Esse m\u00e9todo de avalia\u00e7\u00e3o possui quatro princ\u00edpios que devem ser observados nas interfaces: Percep\u00e7\u00e3o : Alternativas em texto para todo conte\u00fado n\u00e3o textual Alternativas multim\u00eddia din\u00e2mica e temporal Conte\u00fado apresent\u00e1vel em diferentes formas sem perda da informa\u00e7\u00e3o ou estrutura Facilita\u00e7\u00e3o a percep\u00e7\u00e3o visual e auditiva por meio da separa\u00e7\u00e3o entre planos de fundo e primeiro plano Opera\u00e7\u00e3o : Garantir que toda funcionalidade esteja dispon\u00edvel a partir do teclado Tempo de leitura de conte\u00fado suficiente Evitar formas de exibi\u00e7\u00e3o que podem provocar convuls\u00f5es Facilitar a navega\u00e7\u00e3o, localiza\u00e7\u00e3o de conte\u00fados e localiza\u00e7\u00e3o das informa\u00e7\u00f5es Compreens\u00e3o : Conte\u00fado textual leg\u00edvel e compreens\u00edvel P\u00e1ginas web funcionais Aux\u00edliar \u00e0 corre\u00e7\u00e3o de erros Robustez : Maximizar a compatibilidade com utilizadores atuais e futuros","title":"Avalia\u00e7\u00e3o da Acessibilidade"},{"location":"nav/PUC/periodo2/design_interacao/#teste-de-usabilidade","text":"O teste de usabilidade \u00e9 um tipo de avalia\u00e7\u00e3o por observa\u00e7\u00e3o e costumam responder perguntas sobre o funcionamento do sistema. Durante o teste de usabilidade, cada tarefa realizada \u00e9 medida para se obter dados como: Grau de sucesso da execu\u00e7\u00e3o Total de erros cometidos Quantos erros por tipo ocorreram Tempo necess\u00e1rio para a conclus\u00e3o A coleta das informa\u00e7\u00f5es pode variar de acordo com a vontade do designer. Pode variar desde observa\u00e7\u00e3o visual simples at\u00e9 instrumentaliza\u00e7\u00e3o por meio de instrumentos. Antes de se realizar o teste, \u00e9 necess\u00e1rio definir as tarefas a serem executadas, qual o perfil de usu\u00e1rio, recrutamento dos usu\u00e1rios, material para observa\u00e7\u00e3o, execu\u00e7\u00e3o do teste-piloto a ser feito na se\u00e7\u00e3o de uso. Essa \u00e9 a etapa de prepara\u00e7\u00e3o do teste . Ap\u00f3s isso, passamos para a etapa de coleta dos dados por meio da aplica\u00e7\u00e3o dos testes e coleta das performances de uso. Por fim, temos a interpreta\u00e7\u00e3o e consolida\u00e7\u00e3o dos resultados que nos permite sumarizar os dados afim de tirarmos conclus\u00f5es \u00fateis sobre eles.","title":"Teste de Usabilidade"},{"location":"nav/PUC/periodo2/design_interacao/#investigacao-da-usabilidade","text":"Por fim, vamos aprender um pouco sobre a avalia\u00e7\u00e3o da usabilidade 4 por meio da an\u00e1lise System Usability Scale (SUS) que usa o modelo de avalia\u00e7\u00e3o por investiga\u00e7\u00e3o. Como j\u00e1 aprendemos, esse tipo de avalia\u00e7\u00e3o permite a intera\u00e7\u00e3o do user com o sistema ou algum representante dele. O SUS foi criado em 1986 e utiliza um questin\u00e1rio de 10 quest\u00f5es aplicadas ap\u00f3s o uso do sistema ou do conhecimento sobre como ele funciona. As quest\u00f5es aplicadas s\u00e3o: Eu acho que gostaria de usar esse sistema com frequ\u00eancia Eu acho o sistema desnecessariamente complexo Eu achei o sistema f\u00e1cil de usar Eu acho que o precisaria de ajuda com conhecimentos t\u00e9cnicos para usar o sistema Eu acho que as fun\u00e7\u00f5es do sistema s\u00e3o bem integradas Eu acho que o sistema apresenta muita inconsist\u00eancia Eu imagino que as pessoas aprender\u00e3o como usar o sistema rapidamente Eu achei o sistema atrapalhado de usar Eu me senti confiante ao usar o sistema Eu precisei aprender v\u00e1rias coisas novas antes de conseguir usar o sistema Onde para cada item, temos as seguintes op\u00e7\u00f5es baseadas na escala Likert de resposta: Discordo completamente Discordo parcialmente N\u00e3o concordo nem discordo Concordo parcialmente Concordo completamente Para a compila\u00e7\u00e3o usamos o seguinte c\u00e1lculo de pontua\u00e7\u00e3o: 1) para as quest\u00f5es \u00edmpares, subtraia 1 ponto da pontua\u00e7\u00e3o respondida; 2) para os itens pares subtraia 5; 3) Some todos os pontos; 4) multiplique por 2,5. A pontua\u00e7\u00e3o variar\u00e1 entre 0 a 100. Um resultado esperado m\u00e9dio gira em torno de 68 pontos. Abaixo de 50 \u00e9 sinal de problemas que podem indicar insucesso na solu\u00e7\u00e3o. Fontes Complementares: : Trabalho de conclus\u00e3o de curso que avalia um aplicativo empregando o m\u00e9todo SUS: SAPFI: um sistema de alerta para evitar aglomera\u00e7\u00f5es em filas de espera de pra\u00e7as de alimenta\u00e7\u00e3oLinks para um site externo. link . Trabalho de conclus\u00e3o de curso que avalia um sistema empregando o m\u00e9todo SUS: Proposta, Prototipa\u00e7\u00e3o e Avalia\u00e7\u00e3o de Aplica\u00e7\u00e3o para Colabora\u00e7\u00e3o e Compartilhamento entre TorcedoresLinks para um site externo. link .","title":"Investiga\u00e7\u00e3o da Usabilidade"},{"location":"nav/PUC/periodo2/design_interacao/#bibliografia","text":"BENYON, David. Intera\u00e7\u00e3o Humano-Computador - 2\u00aa edi\u00e7\u00e3o . Pearson 466 ISBN 9788579361098. PADUA FILHO, Wilson de Paula. Multim\u00eddia conceitos e aplica\u00e7\u00f5es . 2. Rio de Janeiro LTC 2010 ISBN 978-85-216-1993-2. ROGERS, Yvonne; PREECE, Jennifer; SHARP, Helen. Interaction Design: beyond human-computer interaction , 5rd Edition. Wiley (O\u2019Reilly). May 2019. ISBN: 9780470665763. COLBORNE, Giles. Simple and Usable Web, Mobile, and Interaction Design, Second Edition . New Riders (O\u2019Reilly). ISBN: 9780134778181. PEREZ, Clotilde; BARBOSA, Ivan Santo. Hiperpublicidade, v. 1. Fundamentos e interfaces . S\u00e3o Paulo Cengage Learning 2018. ISBN 9788522116294 (Recurso online). Information Arquiteture, n\u00e3o confundir com AI (Artificial Inteligence). \u21a9 Por exemplo, usando uma base de dados de teste. \u21a9 Do ingl\u00eas Windows, Icons, Menus and Pointing Devices. \u21a9 Eu n\u00e3o fa\u00e7o ideia do motivo de termos a se\u00e7\u00e3o anterior chamada \"Teste de usabilidade\" a agora termos a se\u00e7\u00e3o \"Investiga\u00e7\u00e3o da usabilidade\" mas vamos l\u00e1. \u21a9","title":"Bibliografia"},{"location":"nav/PUC/periodo2/dev_web_backend/","text":"hljs.initHighlightingOnLoad(); Assuntos Aviso Essa mat\u00e9ria tem uma abordagem muito pr\u00e1tica. Desse modo, escrever um passo a passo detalhado de maneira escrita \u00e9 a pior maneira de ensinar esse conhecimento por ser algo extremamente enfadonho tanto para mim (que estou escrevendo) quando para voc\u00eas que estar\u00e3o lendo. Dessa feita, eu vou criar um reposit\u00f3rio no github dedicado para esse microfundamento onde cada commit ser\u00e1 uma etapa do processo de desenvolvimento da aplica\u00e7\u00e3o. Aqui no material restar\u00e1 apenas a parte te\u00f3rica e um resumo das transforma\u00e7\u00f5es feitas ao longo do processo de desenvolvimento da aplica\u00e7\u00e3o. Arquitetura e Linguagens de Programa\u00e7\u00e3o de Aplica\u00e7\u00f5es Web Back-End No nosso projeto de primeiro semestre, desenvolvemos uma aplica\u00e7\u00e3o web front-end. Como aprendemos at\u00e9 ent\u00e3o, o front-end de uma aplica\u00e7\u00e3o \u00e9 a parte da aplica\u00e7\u00e3o que tem foco na interface de intera\u00e7\u00e3o com o usu\u00e1rio. Por outro lado, uma aplica\u00e7\u00e3o back-end tem foco nos servi\u00e7os e tecnologias necess\u00e1rias para atendimento das regras de neg\u00f3cio que a aplica\u00e7\u00e3o deve obedecer. No back-end, temas como banco de dados, gerenciamento de rotas, sess\u00e3o de usu\u00e1rio, cookies, seguran\u00e7a, templates e outros s\u00e3o relevantes e aprenderemos um pouco sobre cada um desses assuntos ao longo da nossa forma\u00e7\u00e3o. Outro objetivo \u00e9 o contato com as principais linguagens usadas para o desenvolvimento back-end assim como os principais frameworks para desenvolvimento de aplica\u00e7\u00f5es web. Como a forma\u00e7\u00e3o da PUC-MG \u00e9 baseada no .NET, vamos aprender a usarmos o ASP.NET Core MVC para cria\u00e7\u00e3o de aplica\u00e7\u00f5es web completas. Arquitetura Back-End Arquitetura de Software Durante o desenvolvimento de uma aplica\u00e7\u00e3o, \u00e9 comum 1 iniciarmos um projeto e irmos criando novas fun\u00e7\u00f5es e m\u00f3dulos a medida que precisamos. Essa maneira de desenvolvimento recebe o apelido de bola de lama por sua representa\u00e7\u00e3o visual de liga\u00e7\u00e3o entre as classes parecer uma \"bola\". Na norma ISO/IEC/IEEE 42010, temos a defini\u00e7\u00e3o de Arquitetura de Software como sendo os \"conceitos ou propriedades fundamentais de um sistema em seu ambiente incorporados em seus elementos, relacionamentos e nos princ\u00edpios de seu design e evolu\u00e7\u00e3o\". Dessa frase, podemos depreender que uma arquitetura de software \u00e9 parte fundamental de um sistema. Esse sistema existe em um ambiente que \u00e9 considerado pela arquitetura. Em Clements e Kazman (2012) temos outra defini\u00e7\u00e3o de arquitetura de software: \"A arquitetura de software de um programa ou sistema de computa\u00e7\u00e3o \u00e9 a estrutura ou estruturas do sistema, que compreendem elementos de software, as propriedades externamente vis\u00edveis desses elementos e as rela\u00e7\u00f5es entre eles\". Ou seja, a arquitetura de software \u00e9 uma abstra\u00e7\u00e3o de um sistema de software que serve de base para a constru\u00e7\u00e3o do pr\u00f3prio sistema. Ao elicitar os requisitos necess\u00e1rios para o atendimento de uma determinada demanda, o pr\u00f3ximo passo \u00e9 justamente definir as caracter\u00edsticas arquitet\u00f4nicas que compor\u00e3o a solu\u00e7\u00e3o de software. Desse modo, podemos ver que al\u00e9m da codifica\u00e7\u00e3o e do design, uma solu\u00e7\u00e3o de software tamb\u00e9m possui uma camada de arquitetura em sua constru\u00e7\u00e3o. Tal qual aprendemos nas boas pr\u00e1ticas de desenvolvimento e design de aplica\u00e7\u00f5es, a arquitetura de software tamb\u00e9m possui atributos de qualidade para sua avalia\u00e7\u00e3o. Normalmente, podemos separar esses atributos em tr\u00eas grandes grupos: Operacional Disponibilidade Desempenho Recuperabilidade Confiabilidade\\Seguran\u00e7a Robustez Escalabilidade Estrutural Configurabilidade Extensibilidade Installabilty Localiza\u00e7\u00e3o\\Tradu\u00e7\u00e3o Capacidade de Manuten\u00e7\u00e3o Portabilidade Suportabilidade Capacidade de Atualiza\u00e7\u00e3o Transversal Acessibilidade Arquivabilidade Autentica\u00e7\u00e3o Autoriza\u00e7\u00e3o Privacidade Seguran\u00e7a Legal Usabilidade\\Capacidade de Realiza\u00e7\u00e3o Coment\u00e1rio: Infelizmente, enquanto eu escrevo essa parte do material, estou com pouqu\u00edssimo tempo dispon\u00edvel para me aprofundar mais em alguns t\u00f3picos. Em tempo oportuno voltaremos a rever essas se\u00e7\u00f5es com a devida aten\u00e7\u00e3o que elas merecem. Estilos Arquiteturais J\u00e1 entendemos que, na constru\u00e7\u00e3o de uma solu\u00e7\u00e3o, precisaremos nos perguntar qual ser\u00e1 o tipo de arquitetura de software que ser\u00e1 usada para preencher todos os requisitos elicitados na etapa inicial de planejamento. Nessa se\u00e7\u00e3o, vamos ver os principais modelos\\estilos de arquiteturas de back-end usados hoje em dia. Podemos agrupar alguns modelos segundo suas formas de organizar o sistema em componentes que interagem entre si. Entretanto, precisamos estar sempre cientes que essas divis\u00f5es s\u00e3o apenas para fins did\u00e1ticos. Na vida real, o mais comum \u00e9 vermos v\u00e1rias caracter\u00edsticas de modelos de arquiteturas integradas em uma mesma solu\u00e7\u00e3o. Arquitetura Monol\u00edtica \u00c9 o modelo de arquitetura baseado em um alto acoplamento onde o programa \u00e9 projetado para funcionar como uma unidade \u00fanica e independente. Esse modelo era mais utilizado nos prim\u00f3rdios do desenvolvimento quando n\u00e3o existia uma clara separa\u00e7\u00e3o entre hardware e software. Hoje em dia, podemos ver um espelho desse tipo de arquitetura nos sistemas embarcados e em produtos de tecnologia que executam apenas uma aplica\u00e7\u00e3o. Arquitetura Microkernel (Baseada em Plugins) Esse tipo de arquitetura permite a inser\u00e7\u00e3o de extens\u00f5es din\u00e2micas por meio de plugins. O melhor exemplo hoje em dia \u00e9 o navegador que permite a instala\u00e7\u00e3o de extens\u00f5es de terceiros para extender as funcionalidades dos navegadores. A vantagem \u00e9 que esse tipo de arquitetura permite a extensibilidade de funcionalidades de modo mais simples quando comparamos com o modelo monol\u00edtico que demandaria a recompila\u00e7\u00e3o de toda a aplica\u00e7\u00e3o sempre que houver alguma mudan\u00e7a. Arquitetura Pipes and Filters (Pipeline) Esse modelo de constru\u00e7\u00e3o \u00e9 usado quando temos processos de tratamento de informa\u00e7\u00f5es seriadas. Imaginemos que temos um arquivo a ser processado por um programa para gerar informa\u00e7\u00f5es \u00fateis para o usu\u00e1rio. Ao usarmos a arquitetura de pipeline, n\u00f3s criamos uma s\u00e9rie de etapas de processamento (chamadas de filters) que s\u00e3o independentes entre si e interconectadas pelos pipes que nada mais s\u00e3o que as liga\u00e7\u00f5es l\u00f3gicas entre os filters onde o resultado de um filter \u00e9 recebido como input do pr\u00f3ximo filter por meio do pipe. Arquitetura em Camadas (Layred) Uma maneira de se evitar a complexidade gerada por alto acoplamento na arquitetura monol\u00edtica \u00e9 a separa\u00e7\u00e3o das fun\u00e7\u00f5es do sistema em camadas que podem, ou n\u00e3o, se comunicar livremente entre si. A arquitetura web \u00e9 a principal implementa\u00e7\u00e3o desse tipo de arquitetura (camada de user, camada de api, camada de banco de dados e etc). Quando separamos um sistema em camadas, podemos definir a capacidade de cada em emitir e receber dados de modo a termos um controle da seguran\u00e7a dos dados e desempenho. Coment\u00e1rio: Na literatura, podemos achar o termo multi-tier que se refere a separa\u00e7\u00e3o f\u00edsica entre as camadas e multi-layer que se refere a separa\u00e7\u00e3o l\u00f3gica . Arquitetura Cliente/Servidor \u00c9 um tipo especial de arquitetura em camadas de duas camadas. \u00c9 amplamente usada para solu\u00e7\u00f5es web onde trabalhamos as comunica\u00e7\u00f5es entre as camadas usando um protocolo de request/response. A principal dificuldade \u00e9 a escalabilidade para p\u00e1ginas que possuem um grande volume de acessos que poderiam inviabilizar a resposta pelo servidor. Arquitetura Peer-to-Peer Esse \u00e9 o mais novo tipo de arquitetura onde cada n\u00f3 da rede \u00e9 tido como simultaneamente um cliente e um servidor. \u00c9 amplamente usado para escalabilidade de solu\u00e7\u00f5es e \u00e9 um dos motores da chamada web 3.0. Como exemplo, temos os torrents e as blockchains usados para a cria\u00e7\u00e3o e manuten\u00e7\u00e3o das criptomoedas. Coment\u00e1rio: Como dito no in\u00edcio, essas separa\u00e7\u00f5es s\u00e3o apenas did\u00e1ticas e n\u00e3o definitivas. N\u00e3o existe arquitetura errada. Tudo depende do problema a ser resolvido. Tipos de Aplica\u00e7\u00f5es Web Quando definimos que um dado problema ser\u00e1 resolvido por meio de uma aplica\u00e7\u00e3o web. Temos que decidir a arquitetura dessa aplica\u00e7\u00e3o levando-se em conta coisas como: desempenho esperado, custos de servidor, seguran\u00e7a da informa\u00e7\u00e3o e etc. Nessa se\u00e7\u00e3o vamos aprender sobre os principais modelos de constru\u00e7\u00e3o de solu\u00e7\u00f5es web usadas na atualidade. Multi-Page Application (MPA) Tem como vantagens: a) Um melhor desempenho nos sistemas de pesquisa SEO pois as p\u00e1ginas s\u00e3o servidas com as metatags otimizadas para os mecanismos de busca; b) Um tempo de inicializa\u00e7\u00e3o mais r\u00e1pido devido o fato do processamento estar muito focado na camada do servidor que envia a p\u00e1gina j\u00e1 renderizada para o client apenas mostrar para o user. Tem como desvantagens: a) Uma experi\u00eancia mais desagrad\u00e1vel para o user que precisa ver a p\u00e1gina inteira ser renderizada sempre que fizer uma solicita\u00e7\u00e3o de nova informa\u00e7\u00e3o; b) Alto acoplamento entre front e back-end visto que o server precisa ter o controle das camadas de front-end para o processamento adequado do html a ser servido no client com alto controle sobre rotas. Single Page Applicatoin (SPA) Tem como vantagens: a) Uma \u00fanica \"viagem\" de ida e volta ao server pois no primeiro acesso, os dados de visualiza\u00e7\u00e3o s\u00e3o baixados e salvos nos cookies do client evitando a din\u00e2mica de ter que baixar todo o front-end em cada p\u00e1gina nova o que melhora a experi\u00eancia do usu\u00e1rio; b) Controle de rotas mais eficiente porque o novo conte\u00fado \u00e9 renderizado dentro do mesmo arquivo html sem a necessidade de v\u00e1rias rotas novas; c) Como a quantidade de arquivos servidor \u00e9 menor, tamb\u00e9m temos uma melhora no desempenho da aplica\u00e7\u00e3o a depender do SDK JS usado. Tem como desvantagens: a) Uma piora nos mecanismos de pesquisa uma vez que o conte\u00fado das SPA \u00e9 dinamicamente gerado de modo que os crawlers n\u00e3o conseguem tagear de maneira eficiente os sites que usam essa tecnologia; b) Tempo de carregamento inicial mais alto devido o fato de, no primeiro acesso, toda a carga de assets usados no front-end ser servida pelo server para o client. Server-Side Rendered (SSR) Com o advento do Node.js em 2009, o JS se tornou uma linguagem que pode ser usada tanto no front quanto no back-end 2 . Agora, podemos pensar em aplica\u00e7\u00f5es que atuam como um intermedi\u00e1rio entre as abordagens SPA e MPA com o uso do JS isom\u00f3rfico. Tem como vantagens: a) Tempo de carregamento mais r\u00e1pido; b) Melhor suporte de SEO e c) Melhor experi\u00eancia do user pois a visualiza\u00e7\u00e3o se parece muito com o SPA. Tem com desvantagens: a) A necessidade de um server em Node.js e b) Possui um desenvolvimento mais complexo com gest\u00e3o de plugins e pacotes de terceiros que podem gerar muitos problemas em aplica\u00e7\u00f5es grandes. Static Site Generators (SSG) Uma outra abordagem \u00e9 a de se gerar todas as p\u00e1ginas antecipadamente no server e envia-las todas de uma vez ao client no acesso ao site. Tem como vantagens: a) Tempo de inicializa\u00e7\u00e3o mais r\u00e1pido porque o consumo \u00e9 de p\u00e1ginas html est\u00e1ticas; b) Otimizado para SEO; c) Implanta\u00e7\u00e3o mais simples porque s\u00f3 lidamos com p\u00e1ginas html est\u00e1ticas sem camada de servidor. Tem como desvantagens: a) Falta de suporte no server side que impede qualquer processamento mais elaborado de dados e b) Sem renderiza\u00e7\u00e3o em tempo real que prejudica a customiza\u00e7\u00e3o da experi\u00eancia de uso. Bibliografia Ingeno, Joseph. Software Architect's Handbook . Packt Publishing, 2018. Lauret, Arnaud. Web Application Architecture: Principles, Protocols and Practices , 2nd Edition. Wiley. 2009. Lock, Andrew. ASP.NET Core in Action , Second Edition. Manning Publications. 2021 Mead, Andrew. Learning Node.js Development . Packt Publishing. 2018. Tatroe, Kevin; MacIntyre, Peter. Programming PHP , 4th Edition. O'Reilly Media, Inc. 2020. FinTech. Web Application Architecture: Principles, Protocols and Practices , 2nd Edition. Wiley. 2009. Bass, Len; Clements, Paul; Kazman, Rick. Software Architecture in Practice , Third Edition. Addison-Wesley Professional, 2012. Kok, Lau Tiam. Hands-on Nuxt.js Web Development . Packt Publishing. 2020. Richards, Mark. Software Architecture Patterns . O'Reilly Media, Inc., 2015. Richards, Mark; Ford, Neal. Fundamentals of Software Architecture . O'Reilly Media, Inc., 2020. Sanctis, Valerio De. ASP.NET Core 2 and Angular 5 . Packt Publishing. 2017. ASP.NET. Essential ASP.NET with Examples in C# . Addison-Wesley Professional. 2003 Busuioc, Alexandru; Carr, David; Gray, Markus; Joshi, Vijay; McCollum, Mark; McLeod, Bart; Tonu, M A Hossain. The PHP Workshop . Packt Publishing. 2019. Principalmente para aqueles que aprendem a programar por conta pr\u00f3pria. \u21a9 Chamamos essa caracter\u00edstica de isom\u00f3rfica. \u21a9","title":"Dev web backend"},{"location":"nav/PUC/periodo2/dev_web_backend/#assuntos","text":"","title":"Assuntos"},{"location":"nav/PUC/periodo2/dev_web_backend/#aviso","text":"Essa mat\u00e9ria tem uma abordagem muito pr\u00e1tica. Desse modo, escrever um passo a passo detalhado de maneira escrita \u00e9 a pior maneira de ensinar esse conhecimento por ser algo extremamente enfadonho tanto para mim (que estou escrevendo) quando para voc\u00eas que estar\u00e3o lendo. Dessa feita, eu vou criar um reposit\u00f3rio no github dedicado para esse microfundamento onde cada commit ser\u00e1 uma etapa do processo de desenvolvimento da aplica\u00e7\u00e3o. Aqui no material restar\u00e1 apenas a parte te\u00f3rica e um resumo das transforma\u00e7\u00f5es feitas ao longo do processo de desenvolvimento da aplica\u00e7\u00e3o.","title":"Aviso"},{"location":"nav/PUC/periodo2/dev_web_backend/#arquitetura-e-linguagens-de-programacao-de-aplicacoes-web-back-end","text":"No nosso projeto de primeiro semestre, desenvolvemos uma aplica\u00e7\u00e3o web front-end. Como aprendemos at\u00e9 ent\u00e3o, o front-end de uma aplica\u00e7\u00e3o \u00e9 a parte da aplica\u00e7\u00e3o que tem foco na interface de intera\u00e7\u00e3o com o usu\u00e1rio. Por outro lado, uma aplica\u00e7\u00e3o back-end tem foco nos servi\u00e7os e tecnologias necess\u00e1rias para atendimento das regras de neg\u00f3cio que a aplica\u00e7\u00e3o deve obedecer. No back-end, temas como banco de dados, gerenciamento de rotas, sess\u00e3o de usu\u00e1rio, cookies, seguran\u00e7a, templates e outros s\u00e3o relevantes e aprenderemos um pouco sobre cada um desses assuntos ao longo da nossa forma\u00e7\u00e3o. Outro objetivo \u00e9 o contato com as principais linguagens usadas para o desenvolvimento back-end assim como os principais frameworks para desenvolvimento de aplica\u00e7\u00f5es web. Como a forma\u00e7\u00e3o da PUC-MG \u00e9 baseada no .NET, vamos aprender a usarmos o ASP.NET Core MVC para cria\u00e7\u00e3o de aplica\u00e7\u00f5es web completas.","title":"Arquitetura e Linguagens de Programa\u00e7\u00e3o de Aplica\u00e7\u00f5es Web Back-End"},{"location":"nav/PUC/periodo2/dev_web_backend/#arquitetura-back-end","text":"","title":"Arquitetura Back-End"},{"location":"nav/PUC/periodo2/dev_web_backend/#arquitetura-de-software","text":"Durante o desenvolvimento de uma aplica\u00e7\u00e3o, \u00e9 comum 1 iniciarmos um projeto e irmos criando novas fun\u00e7\u00f5es e m\u00f3dulos a medida que precisamos. Essa maneira de desenvolvimento recebe o apelido de bola de lama por sua representa\u00e7\u00e3o visual de liga\u00e7\u00e3o entre as classes parecer uma \"bola\". Na norma ISO/IEC/IEEE 42010, temos a defini\u00e7\u00e3o de Arquitetura de Software como sendo os \"conceitos ou propriedades fundamentais de um sistema em seu ambiente incorporados em seus elementos, relacionamentos e nos princ\u00edpios de seu design e evolu\u00e7\u00e3o\". Dessa frase, podemos depreender que uma arquitetura de software \u00e9 parte fundamental de um sistema. Esse sistema existe em um ambiente que \u00e9 considerado pela arquitetura. Em Clements e Kazman (2012) temos outra defini\u00e7\u00e3o de arquitetura de software: \"A arquitetura de software de um programa ou sistema de computa\u00e7\u00e3o \u00e9 a estrutura ou estruturas do sistema, que compreendem elementos de software, as propriedades externamente vis\u00edveis desses elementos e as rela\u00e7\u00f5es entre eles\". Ou seja, a arquitetura de software \u00e9 uma abstra\u00e7\u00e3o de um sistema de software que serve de base para a constru\u00e7\u00e3o do pr\u00f3prio sistema. Ao elicitar os requisitos necess\u00e1rios para o atendimento de uma determinada demanda, o pr\u00f3ximo passo \u00e9 justamente definir as caracter\u00edsticas arquitet\u00f4nicas que compor\u00e3o a solu\u00e7\u00e3o de software. Desse modo, podemos ver que al\u00e9m da codifica\u00e7\u00e3o e do design, uma solu\u00e7\u00e3o de software tamb\u00e9m possui uma camada de arquitetura em sua constru\u00e7\u00e3o. Tal qual aprendemos nas boas pr\u00e1ticas de desenvolvimento e design de aplica\u00e7\u00f5es, a arquitetura de software tamb\u00e9m possui atributos de qualidade para sua avalia\u00e7\u00e3o. Normalmente, podemos separar esses atributos em tr\u00eas grandes grupos: Operacional Disponibilidade Desempenho Recuperabilidade Confiabilidade\\Seguran\u00e7a Robustez Escalabilidade Estrutural Configurabilidade Extensibilidade Installabilty Localiza\u00e7\u00e3o\\Tradu\u00e7\u00e3o Capacidade de Manuten\u00e7\u00e3o Portabilidade Suportabilidade Capacidade de Atualiza\u00e7\u00e3o Transversal Acessibilidade Arquivabilidade Autentica\u00e7\u00e3o Autoriza\u00e7\u00e3o Privacidade Seguran\u00e7a Legal Usabilidade\\Capacidade de Realiza\u00e7\u00e3o Coment\u00e1rio: Infelizmente, enquanto eu escrevo essa parte do material, estou com pouqu\u00edssimo tempo dispon\u00edvel para me aprofundar mais em alguns t\u00f3picos. Em tempo oportuno voltaremos a rever essas se\u00e7\u00f5es com a devida aten\u00e7\u00e3o que elas merecem.","title":"Arquitetura de Software"},{"location":"nav/PUC/periodo2/dev_web_backend/#estilos-arquiteturais","text":"J\u00e1 entendemos que, na constru\u00e7\u00e3o de uma solu\u00e7\u00e3o, precisaremos nos perguntar qual ser\u00e1 o tipo de arquitetura de software que ser\u00e1 usada para preencher todos os requisitos elicitados na etapa inicial de planejamento. Nessa se\u00e7\u00e3o, vamos ver os principais modelos\\estilos de arquiteturas de back-end usados hoje em dia. Podemos agrupar alguns modelos segundo suas formas de organizar o sistema em componentes que interagem entre si. Entretanto, precisamos estar sempre cientes que essas divis\u00f5es s\u00e3o apenas para fins did\u00e1ticos. Na vida real, o mais comum \u00e9 vermos v\u00e1rias caracter\u00edsticas de modelos de arquiteturas integradas em uma mesma solu\u00e7\u00e3o. Arquitetura Monol\u00edtica \u00c9 o modelo de arquitetura baseado em um alto acoplamento onde o programa \u00e9 projetado para funcionar como uma unidade \u00fanica e independente. Esse modelo era mais utilizado nos prim\u00f3rdios do desenvolvimento quando n\u00e3o existia uma clara separa\u00e7\u00e3o entre hardware e software. Hoje em dia, podemos ver um espelho desse tipo de arquitetura nos sistemas embarcados e em produtos de tecnologia que executam apenas uma aplica\u00e7\u00e3o. Arquitetura Microkernel (Baseada em Plugins) Esse tipo de arquitetura permite a inser\u00e7\u00e3o de extens\u00f5es din\u00e2micas por meio de plugins. O melhor exemplo hoje em dia \u00e9 o navegador que permite a instala\u00e7\u00e3o de extens\u00f5es de terceiros para extender as funcionalidades dos navegadores. A vantagem \u00e9 que esse tipo de arquitetura permite a extensibilidade de funcionalidades de modo mais simples quando comparamos com o modelo monol\u00edtico que demandaria a recompila\u00e7\u00e3o de toda a aplica\u00e7\u00e3o sempre que houver alguma mudan\u00e7a. Arquitetura Pipes and Filters (Pipeline) Esse modelo de constru\u00e7\u00e3o \u00e9 usado quando temos processos de tratamento de informa\u00e7\u00f5es seriadas. Imaginemos que temos um arquivo a ser processado por um programa para gerar informa\u00e7\u00f5es \u00fateis para o usu\u00e1rio. Ao usarmos a arquitetura de pipeline, n\u00f3s criamos uma s\u00e9rie de etapas de processamento (chamadas de filters) que s\u00e3o independentes entre si e interconectadas pelos pipes que nada mais s\u00e3o que as liga\u00e7\u00f5es l\u00f3gicas entre os filters onde o resultado de um filter \u00e9 recebido como input do pr\u00f3ximo filter por meio do pipe. Arquitetura em Camadas (Layred) Uma maneira de se evitar a complexidade gerada por alto acoplamento na arquitetura monol\u00edtica \u00e9 a separa\u00e7\u00e3o das fun\u00e7\u00f5es do sistema em camadas que podem, ou n\u00e3o, se comunicar livremente entre si. A arquitetura web \u00e9 a principal implementa\u00e7\u00e3o desse tipo de arquitetura (camada de user, camada de api, camada de banco de dados e etc). Quando separamos um sistema em camadas, podemos definir a capacidade de cada em emitir e receber dados de modo a termos um controle da seguran\u00e7a dos dados e desempenho. Coment\u00e1rio: Na literatura, podemos achar o termo multi-tier que se refere a separa\u00e7\u00e3o f\u00edsica entre as camadas e multi-layer que se refere a separa\u00e7\u00e3o l\u00f3gica . Arquitetura Cliente/Servidor \u00c9 um tipo especial de arquitetura em camadas de duas camadas. \u00c9 amplamente usada para solu\u00e7\u00f5es web onde trabalhamos as comunica\u00e7\u00f5es entre as camadas usando um protocolo de request/response. A principal dificuldade \u00e9 a escalabilidade para p\u00e1ginas que possuem um grande volume de acessos que poderiam inviabilizar a resposta pelo servidor. Arquitetura Peer-to-Peer Esse \u00e9 o mais novo tipo de arquitetura onde cada n\u00f3 da rede \u00e9 tido como simultaneamente um cliente e um servidor. \u00c9 amplamente usado para escalabilidade de solu\u00e7\u00f5es e \u00e9 um dos motores da chamada web 3.0. Como exemplo, temos os torrents e as blockchains usados para a cria\u00e7\u00e3o e manuten\u00e7\u00e3o das criptomoedas. Coment\u00e1rio: Como dito no in\u00edcio, essas separa\u00e7\u00f5es s\u00e3o apenas did\u00e1ticas e n\u00e3o definitivas. N\u00e3o existe arquitetura errada. Tudo depende do problema a ser resolvido.","title":"Estilos Arquiteturais"},{"location":"nav/PUC/periodo2/dev_web_backend/#tipos-de-aplicacoes-web","text":"Quando definimos que um dado problema ser\u00e1 resolvido por meio de uma aplica\u00e7\u00e3o web. Temos que decidir a arquitetura dessa aplica\u00e7\u00e3o levando-se em conta coisas como: desempenho esperado, custos de servidor, seguran\u00e7a da informa\u00e7\u00e3o e etc. Nessa se\u00e7\u00e3o vamos aprender sobre os principais modelos de constru\u00e7\u00e3o de solu\u00e7\u00f5es web usadas na atualidade. Multi-Page Application (MPA) Tem como vantagens: a) Um melhor desempenho nos sistemas de pesquisa SEO pois as p\u00e1ginas s\u00e3o servidas com as metatags otimizadas para os mecanismos de busca; b) Um tempo de inicializa\u00e7\u00e3o mais r\u00e1pido devido o fato do processamento estar muito focado na camada do servidor que envia a p\u00e1gina j\u00e1 renderizada para o client apenas mostrar para o user. Tem como desvantagens: a) Uma experi\u00eancia mais desagrad\u00e1vel para o user que precisa ver a p\u00e1gina inteira ser renderizada sempre que fizer uma solicita\u00e7\u00e3o de nova informa\u00e7\u00e3o; b) Alto acoplamento entre front e back-end visto que o server precisa ter o controle das camadas de front-end para o processamento adequado do html a ser servido no client com alto controle sobre rotas. Single Page Applicatoin (SPA) Tem como vantagens: a) Uma \u00fanica \"viagem\" de ida e volta ao server pois no primeiro acesso, os dados de visualiza\u00e7\u00e3o s\u00e3o baixados e salvos nos cookies do client evitando a din\u00e2mica de ter que baixar todo o front-end em cada p\u00e1gina nova o que melhora a experi\u00eancia do usu\u00e1rio; b) Controle de rotas mais eficiente porque o novo conte\u00fado \u00e9 renderizado dentro do mesmo arquivo html sem a necessidade de v\u00e1rias rotas novas; c) Como a quantidade de arquivos servidor \u00e9 menor, tamb\u00e9m temos uma melhora no desempenho da aplica\u00e7\u00e3o a depender do SDK JS usado. Tem como desvantagens: a) Uma piora nos mecanismos de pesquisa uma vez que o conte\u00fado das SPA \u00e9 dinamicamente gerado de modo que os crawlers n\u00e3o conseguem tagear de maneira eficiente os sites que usam essa tecnologia; b) Tempo de carregamento inicial mais alto devido o fato de, no primeiro acesso, toda a carga de assets usados no front-end ser servida pelo server para o client. Server-Side Rendered (SSR) Com o advento do Node.js em 2009, o JS se tornou uma linguagem que pode ser usada tanto no front quanto no back-end 2 . Agora, podemos pensar em aplica\u00e7\u00f5es que atuam como um intermedi\u00e1rio entre as abordagens SPA e MPA com o uso do JS isom\u00f3rfico. Tem como vantagens: a) Tempo de carregamento mais r\u00e1pido; b) Melhor suporte de SEO e c) Melhor experi\u00eancia do user pois a visualiza\u00e7\u00e3o se parece muito com o SPA. Tem com desvantagens: a) A necessidade de um server em Node.js e b) Possui um desenvolvimento mais complexo com gest\u00e3o de plugins e pacotes de terceiros que podem gerar muitos problemas em aplica\u00e7\u00f5es grandes. Static Site Generators (SSG) Uma outra abordagem \u00e9 a de se gerar todas as p\u00e1ginas antecipadamente no server e envia-las todas de uma vez ao client no acesso ao site. Tem como vantagens: a) Tempo de inicializa\u00e7\u00e3o mais r\u00e1pido porque o consumo \u00e9 de p\u00e1ginas html est\u00e1ticas; b) Otimizado para SEO; c) Implanta\u00e7\u00e3o mais simples porque s\u00f3 lidamos com p\u00e1ginas html est\u00e1ticas sem camada de servidor. Tem como desvantagens: a) Falta de suporte no server side que impede qualquer processamento mais elaborado de dados e b) Sem renderiza\u00e7\u00e3o em tempo real que prejudica a customiza\u00e7\u00e3o da experi\u00eancia de uso.","title":"Tipos de Aplica\u00e7\u00f5es Web"},{"location":"nav/PUC/periodo2/dev_web_backend/#bibliografia","text":"Ingeno, Joseph. Software Architect's Handbook . Packt Publishing, 2018. Lauret, Arnaud. Web Application Architecture: Principles, Protocols and Practices , 2nd Edition. Wiley. 2009. Lock, Andrew. ASP.NET Core in Action , Second Edition. Manning Publications. 2021 Mead, Andrew. Learning Node.js Development . Packt Publishing. 2018. Tatroe, Kevin; MacIntyre, Peter. Programming PHP , 4th Edition. O'Reilly Media, Inc. 2020. FinTech. Web Application Architecture: Principles, Protocols and Practices , 2nd Edition. Wiley. 2009. Bass, Len; Clements, Paul; Kazman, Rick. Software Architecture in Practice , Third Edition. Addison-Wesley Professional, 2012. Kok, Lau Tiam. Hands-on Nuxt.js Web Development . Packt Publishing. 2020. Richards, Mark. Software Architecture Patterns . O'Reilly Media, Inc., 2015. Richards, Mark; Ford, Neal. Fundamentals of Software Architecture . O'Reilly Media, Inc., 2020. Sanctis, Valerio De. ASP.NET Core 2 and Angular 5 . Packt Publishing. 2017. ASP.NET. Essential ASP.NET with Examples in C# . Addison-Wesley Professional. 2003 Busuioc, Alexandru; Carr, David; Gray, Markus; Joshi, Vijay; McCollum, Mark; McLeod, Bart; Tonu, M A Hossain. The PHP Workshop . Packt Publishing. 2019. Principalmente para aqueles que aprendem a programar por conta pr\u00f3pria. \u21a9 Chamamos essa caracter\u00edstica de isom\u00f3rfica. \u21a9","title":"Bibliografia"},{"location":"nav/PUC/periodo2/engenharia_requisitos/","text":"hljs.initHighlightingOnLoad(); Assuntos Tipos e Elicita\u00e7\u00e3o de Requisitos de Software Caracter\u00edsticas e Tipos de Requisitos Elicita\u00e7\u00e3o de Requisitos de Software (#processos-da-engenharia-de-requisitos-e-tecnicas-de-elicitacao) Modelagem, Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o de Requisitos Modelagem de Requisitos Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o de Requisitos Bibliografia Tipos e Elicita\u00e7\u00e3o de Requisitos de Software Caracter\u00edsticas e Tipos de Requisitos Conceitos e Caracter\u00edsticas de Requisitos Coment\u00e1rio: Essa mat\u00e9ria ir\u00e1 aprofundar o conte\u00fado que aprendemos na disciplina de Fundamentos de Engenharia de Software. Os conceitos s\u00e3o palavras dotadas de significados objetivos. Ao longo de todos os nossos estudos, n\u00f3s, basicamente, estamos aumentando nosso repert\u00f3rio de conceitos e ligando conceitos novos aos que j\u00e1 aprendemos previamente. Desse modo, n\u00e3o \u00e9 nenhuma novidade come\u00e7ar nosso estudo por meio da defini\u00e7\u00e3o dos conceitos que vamos usar ao longo do microfundamento. Chamamos de Requisito toda Caracter\u00edstica que um produto deve possui para ser aceito. Dessa feita, podemos definir como Engenharia de Requisitos , o conjunto das t\u00e9cnicas usadas para levantamento, detalhamento e valida\u00e7\u00e3o desses requisitos de um produto. Ao tomarmos notas a respeito dos requisitos, precisaremos garantir que os mesmos tenham as seguintes Caracter\u00edsticas: Completude - Descri\u00e7\u00e3o integral da necessidade a ser atendida. Corre\u00e7\u00e3o - Descri\u00e7\u00e3o exata e associada ao software que ser\u00e1 desenvolvido. Exequidade - Um requisito de ser pass\u00edvel de execu\u00e7\u00e3o. Prioridade - Descri\u00e7\u00e3o do n\u00edvel: Obrigat\u00f3rio, Desej\u00e1vel ou Opcional. Modifica\u00e7\u00e3o - Capacidade de altera\u00e7\u00e3o do requisito ao longo do processo. Verificabilidade - Capacidade de se realizar testes que verifiquem se o requisito fora alcan\u00e7ado. Rastreabilidade - Rela\u00e7\u00e3o entre c\u00f3digo e requisito de maneira clara e rec\u00edproca. Tipos de Requisitos Podemos separar os requisitos segundo a sua rela\u00e7\u00e3o com a funcionalidade do software: Requisito Funcional - \u00c9 diretamente relacionado ao funcionamento do programa. Descreve uma fun\u00e7\u00e3o a ser desempenhada pelo produto com maior foco no neg\u00f3cio e n\u00e3o na tecnologia. Requisito N\u00e3o Funcional - \u00c9 relacionado a tecnologia de desenvolvimento. Ele especifica/restringem o comportamento desejado do software. Requisito de Desempenho - Especifica atributos como velocidade ou consumo de mem\u00f3ria que o sistema deve ter. Requisito de Confiabilidade - Especifica a taxa aceit\u00e1vel de falhas do sistema. Requisito de Prote\u00e7\u00e3o - Relacionado a seguran\u00e7a do software. Requisito de Usabilidade - Caracter\u00edsticas desejadas de usabilidade. Elicita\u00e7\u00e3o de Requisitos de Software Processos da Engenharia de Requisitos e T\u00e9cnicas de Elicita\u00e7\u00e3o Elicitar \u00e9 o processo de extrair ou obter o m\u00e1ximo de informa\u00e7\u00e3o poss\u00edvel para o conhecimento de um objeto desejado. Logo, Elicita\u00e7\u00e3o de Requisitos \u00e9 o processo de extrair dos clientes as reais necessidades da demanda dele, ou seja, os requisitos da demanda. Al\u00e9m disso, a classifica\u00e7\u00e3o desses requisitos nas categorias que aprendemos na se\u00e7\u00e3o passada. Para se extrair essas informa\u00e7\u00f5es podemos usar uma mir\u00edade de t\u00e9cnicas: Entrevista - Com roteiro para as principais quest\u00f5es. Prioritariamente algo r\u00e1pido e n\u00e3o cansativo. Pode ser individual ou em grupo. Brainstorming - Reuni\u00e3o sem roteiro definido. A criatividade \u00e9 o foco na constru\u00e7\u00e3o de propostas de resolu\u00e7\u00e3o de um determinado problema. Question\u00e1rio - Com perguntas fechadas ou abertas. Tem como vantagem a praticidade. Prot\u00f3tipo - \u00c9 indicado para situa\u00e7\u00f5es onde o user n\u00e3o tem facilidade em se expressar. A elicita\u00e7\u00e3o \u00e9 feita pela intera\u00e7\u00e3o entre user e prot\u00f3tipo. Etnografia - \u00c9 a observa\u00e7\u00e3o da realidade do cliente por um per\u00edodo. Ap\u00f3s as coletas de todas as informa\u00e7\u00f5es, passamos para fase de Estudo de Documentos em que os dados ser\u00e3o convertidos em requisitos funcionais e n\u00e3o funcionais do projeto. Modelagem, Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o de Requisitos Modelagem de Requisitos Modelagem de Requisitos e Introdu\u00e7\u00e3o \u00e0 UML A Unified Modeling Language (UML) \u00e9 uma linguagem de modelagem unificada. Surgida em 1997 como resultado de um esfor\u00e7o de v\u00e1rias empresas para a constru\u00e7\u00e3o de um padr\u00e3o para a modelagem de engenharia de software. Vale ressaltar que a UML n\u00e3o \u00e9 uma metodologia e apenas uma maneira de expor processos de software. A Modelagem de Requisitos ou An\u00e1lise de Requisitos \u00e9 a produ\u00e7\u00e3o da lista de requisitos funcionais e n\u00e3o-funcionais para um projeto. Para padroniza\u00e7\u00e3o desses produtos, usamos a UML como linguagem de representa\u00e7\u00e3o. A UML possui 3 tipos de diagramas: Diagrama de Estrutura - Foco na vis\u00e3o est\u00e1tica. Diagrama de Classes Diagrama de Pacotes Diagrama de Comportamento - Foco na vis\u00e3o din\u00e2mica. Diagrama de Caso de Uso Diagrama de Intera\u00e7\u00e3o - Representa\u00e7\u00e3o da comunica\u00e7\u00e3o entre objetos. Modelagem de Casos de Uso UML Como acabamos de ver, o diagrama de casos de uso \u00e9 um tipo de diagrama de comportamento e, logicamente, tem foco no comportamento din\u00e2mico entre as partes envolvidas no funcionamento do sistema. O diagrama de casos de uso \u00e9 geralmente o primeiro diagrama UML usado na fase de requisitos pois permite o detalhe dos requisitos funcionais na fase de elicita\u00e7\u00e3o. \u00c9 importante notar que, por ter foco na intera\u00e7\u00e3o entre as partes, esse tipo de diagrama n\u00e3o \u00e9 usado para elicita\u00e7\u00e3o dos requisitos n\u00e3o-funcionais. As partes integrantes do diagrama de casos de uso s\u00e3o: Atores - S\u00e3o as representa\u00e7\u00f5es da entidades que interagem com o sistema. Sejam elas seres humanos, sensores ou outros sistemas. Casos de Uso - S\u00e3o as transa\u00e7\u00f5es entre as partes. Relacionamentos - Podem ser divididos em quatro tipos: Associa\u00e7\u00e3o - \u00c9 o relacionamento mais comum. Representado por uma seta aberta (ou uma linha reta) que liga os atores aos casos de uso. N\u00e3o pode ligar atores a atores ou casos de uso a casos de uso. Generaliza\u00e7\u00e3o - Acontece quando h\u00e1 uma rela\u00e7\u00e3o de heran\u00e7a entre elementos. Pode acontecer entre atores e atores e casos de uso e casos de uso. Inclus\u00e3o (Include) - S\u00e3o usados para representar rotinas comuns entre transa\u00e7\u00f5es do sistema por meio do uso de uma seta pontilhada com a lable de include. S\u00f3 ocorre entre casos de uso. Exclus\u00e3o (Extend) - \u00c9 usada para indicar exce\u00e7\u00f5es. Tem a nota\u00e7\u00e3o parecida com o include mas no lable est\u00e1 escrito exclude. Abaixo temos um exemplo desse diagrama. Pr\u00e1ticas de Diagrama de Casos de Uso Essa se\u00e7\u00e3o \u00e9 um exerc\u00edcio proposto de constru\u00e7\u00e3o de um diagrama de casos de uso. O problema proposto \u00e9: O cliente cadastra os dados pessoais, depois do ve\u00edculo e finalmente a proposta da seguradora. Alguns clientes s\u00e3o da categoria \"especial\" do programa de fidelidade da seguradora e cadastram as propostas de seguros com desconto. A seguradora formata a proposta baseada nos dados dos ve\u00edculos cadastrados. Depois, os clientes pagam as presta\u00e7\u00f5es do seguro. Caso haja inadimpl\u00eancia, a seguradora cancela o seguro. Comunicando o cliente. Em caso de acidente, o cliente comunica o sinistro \u00e0 seguradora. Ela paga as despesas do conserto. Em casos raros, a seguradora paga ao cliente o valor integral do ve\u00edculo. Coment\u00e1rio: Antes de olhar como ficou. Tente fazer o diagrama sozinho. Uma boa ferramenta para isso \u00e9 o Lucidchart ou o Draw.io . Abaixo temos uma representa\u00e7\u00e3o de caso de uso poss\u00edvel para o caso exemplo. Modelagem de Classes UML Come\u00e7aremos a ver os diagramas de estrutura pelo Diagrama de Classes de UML. Seu objetivo \u00e9 definir a estrutura est\u00e1tica de relacionamento entre classes. L\u00e1 em programa\u00e7\u00e3o modular n\u00f3s aprendemos que uma classe \u00e9 um conjunto de objetos com propriedades similares. Toda classe tem um nome e atributos que descrevem as suas propriedades. Al\u00e9m disso, possuem m\u00e9todos que s\u00e3o as fun\u00e7\u00f5es internas da classe. Coment\u00e1rio: Esse \u00faltimo par\u00e1grafo faz muito sentido para todos que j\u00e1 passaram pela mat\u00e9ria de programa\u00e7\u00e3o modular. Se n\u00e3o for o seu caso, corre l\u00e1 depois que terminar esse microfundamento. Tamb\u00e9m sabemos que classes podem ser relacionadas entre si pela rela\u00e7\u00e3o de heran\u00e7a que \u00e9 um dos pilares da programa\u00e7\u00e3o orientada \u00e0 objetos. No contexto da UML, podemos chamar essa rela\u00e7\u00e3o de heran\u00e7a de Generaliza\u00e7\u00e3o-Especializa\u00e7\u00e3o . A representa\u00e7\u00e3o entre a superclasse e as classes filhas \u00e9 feita com o uso de uma seta de ponta fechada onde a seta sempre sai da subclasse e aponta para a superclasse. O outro modelo de relacionamento \u00e9 a agrega\u00e7\u00e3o ou Estrutura Todo-Parte . Nesse relacionamento n\u00e3o h\u00e1 heran\u00e7a, entretanto, existe alguma rela\u00e7\u00e3o de pertin\u00eancia de modo que cada parte \u00e9 um elemento do todo. Possui a representa\u00e7\u00e3o da multiplicidade (1...*) para indicar a quantidade de itens que o relacionamento suporta. A agrega\u00e7\u00e3o pode ser representada de dois modos. Na Agrega\u00e7\u00e3o Simples usamos um losango em branco e indica que a parte possui vida al\u00e9m do todo 1 . Por outro lado, na Agrega\u00e7\u00e3o por Composi\u00e7\u00e3o , usamos o losango preenchido para indicar que a parte n\u00e3o tem vida al\u00e9m do todo. Coment\u00e1rio: A ideia nessa dota\u00e7\u00e3o da multiplicidade \u00e9 simples. Imagine que temos uma classe \"Estoque\" e uma classe \"Produto\". Uma vez que um estoque \u00e9 justamente o todo dos produtos armazenados, \u00e9 plenamente poss\u00edvel termos a rela\u00e7\u00e3o entre essas classes. Podemos usar a rela\u00e7\u00e3o de agrega\u00e7\u00e3o para indicar esse caso. Quando ligamos as classes, n\u00f3s indicamos quantos objetos s\u00e3o aceitos na rela\u00e7\u00e3o. No nosso exemplo \u00e9 poss\u00edvel termos um estoque de zero itens 2 de cada produto, logo, a multiplicidade indicada ser\u00e1 de 0...* que deve ser lida como ``Podemos ter entre zero e n produtos no nos\" estoque\". Para terminar essa se\u00e7\u00e3o, temos apenas mais uma rela\u00e7\u00e3o a ser aprendida. Na Associa\u00e7\u00e3o , tamb\u00e9m n\u00e3o temos rela\u00e7\u00e3o de heran\u00e7a e tamb\u00e9m temos multiplicidade. A diferen\u00e7a est\u00e1 no fato que n\u00e3o existe rela\u00e7\u00e3o de todo e parte, ou seja, o v\u00ednculo entre as classes \u00e9 mais fraco. Normalmente, a associa\u00e7\u00e3o \u00e9 indicada por uma linha reta entre as classes com as multiplicidades com asteriscos nos dois lados. Al\u00e9m disso, podemos ter uma classe `\"endurada\" entre a associa\u00e7\u00e3o para indicar o modo. Modelagem de Pacotes UML Uma vez que tenhamos feito nossos diagrama de classes, temos um diagrama que \u00e9 capaz de \"empacotar\" classes relacionadas. Esse diagrama recebe o nome de Diagrama de Pacotes . Tal qual o diagrama de classes, o diagrama de pacotes \u00e9 um digrama estrutural da UML. N\u00e3o existe muita exatid\u00e3o no processo de constru\u00e7\u00e3o de pacotes. A ideia \u00e9 que a associa\u00e7\u00e3o entre classes fa\u00e7a sentido e, nessas horas, o bom senso \u00e9 a nossa melhor ferramenta. No geral, podemos elencar algumas regras para nos ajudar na cria\u00e7\u00e3o de pacotes: Deve ter duas ou mais classes Nome gen\u00e9rico ou da classe mais importante Representa\u00e7\u00e3o na UML pelo \u00edcone da uma pasta Uma classe pode pertencer a mais de um pacote Nenhuma classe deve ficar fora do diagrama de pacotes Um pacote pode depender de outros pacotes A depend\u00eancia de pacotes \u00e9 dada no UML pelo uso de uma seta pontilhada Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o de Requisitos Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o de Requisitos Uma vez que temos nosso sistema modelado, podemos nos perguntar se ``estamos construindo o pro\"to certo\". Chamamos de valida\u00e7\u00e3o o trabalho de verifica\u00e7\u00e3o da resposta a essa pergunta. Ou seja, estamos verificando a efic\u00e1cia da nossa solu\u00e7\u00e3o. Do outro lado, dizemos que a verifica\u00e7\u00e3o tem rela\u00e7\u00e3o com a efici\u00eancia. Isso quer dizer que queremos saber se al\u00e9m de cumprir o objetivo, nossa solu\u00e7\u00e3o o faz com a otiliza\u00e7\u00e3o dos recursos de maneira certa. Para realizarmos essas duas verifica\u00e7\u00f5es podemos fazer uso da Revis\u00e3o T\u00e9cnica que avalia esses aspectos por meio um time das partes envolvidas no processo para a busca das seguintes falhas: erros no conte\u00fado\\interpreta\u00e7\u00e3o informa\u00e7\u00f5es faltantes inconsist\u00eancias requisitos conflitantes\\irreais Para realizar essas verifica\u00e7\u00f5es, podemos usar v\u00e1rias abordagens: Inspe\u00e7\u00f5es de C\u00f3digo Comandos de Banco de Dados An\u00e1lise dos Requisitos Testes de Software Bibliografia SOMMERVILLE, Ian. Engenharia de Software . S\u00e3o Paulo: Pearson, 2019. BEZERRA, Eduardo. Princ\u00edpios de An\u00e1lise e Projeto de Sistemas com UML . S\u00e3o Paulo: Elsevier, 2006. PRESSMAN, Roger; MAXIM, Bruce. Engenharia de Software . S\u00e3o Paulo: Bookman, 2016. LARMAN, Craig. Utilizando UML e padr\u00f5es: uma introdu\u00e7\u00e3o \u00e1 an\u00e1lise e ao projeto orientados a objetos e desenvolvimento iterativo . 3. ed. Porto Alegre: Bookman, 2007. E-book (695 p\u00e1ginas) ISBN 9788577800476. PAULA FILHO, Wilson de P\u00e1dua. Engenharia de software , v. 2 projetos e processos. 4. Rio de Janeiro LTC 2019 1 recurso online ISBN 9788521636748. WAZLAWICK, Raul Sidnei. Engenharia de software conceitos e pr\u00e1ticas . Rio de Janeiro GEN LTC 2013 1 recurso online ISBN 9788595156173. GUEDES, Gilleanes. UML 2 - Uma Abordagem Pr\u00e1tica . S\u00e3o Paulo: Novatec, 2018. Isso \u00e9 um jeito estranho de dizer que a parte n\u00e3o est\u00e1 inteiramente contida no todo. \u21a9 Ou seja, \u00e9 o caso onde n\u00e3o temos o produto estocado. \u21a9","title":"Engenharia de Requisitos"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#assuntos","text":"Tipos e Elicita\u00e7\u00e3o de Requisitos de Software Caracter\u00edsticas e Tipos de Requisitos Elicita\u00e7\u00e3o de Requisitos de Software (#processos-da-engenharia-de-requisitos-e-tecnicas-de-elicitacao) Modelagem, Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o de Requisitos Modelagem de Requisitos Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o de Requisitos Bibliografia","title":"Assuntos"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#tipos-e-elicitacao-de-requisitos-de-software","text":"","title":"Tipos e Elicita\u00e7\u00e3o de Requisitos de Software"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#caracteristicas-e-tipos-de-requisitos","text":"","title":"Caracter\u00edsticas e Tipos de Requisitos"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#conceitos-e-caracteristicas-de-requisitos","text":"Coment\u00e1rio: Essa mat\u00e9ria ir\u00e1 aprofundar o conte\u00fado que aprendemos na disciplina de Fundamentos de Engenharia de Software. Os conceitos s\u00e3o palavras dotadas de significados objetivos. Ao longo de todos os nossos estudos, n\u00f3s, basicamente, estamos aumentando nosso repert\u00f3rio de conceitos e ligando conceitos novos aos que j\u00e1 aprendemos previamente. Desse modo, n\u00e3o \u00e9 nenhuma novidade come\u00e7ar nosso estudo por meio da defini\u00e7\u00e3o dos conceitos que vamos usar ao longo do microfundamento. Chamamos de Requisito toda Caracter\u00edstica que um produto deve possui para ser aceito. Dessa feita, podemos definir como Engenharia de Requisitos , o conjunto das t\u00e9cnicas usadas para levantamento, detalhamento e valida\u00e7\u00e3o desses requisitos de um produto. Ao tomarmos notas a respeito dos requisitos, precisaremos garantir que os mesmos tenham as seguintes Caracter\u00edsticas: Completude - Descri\u00e7\u00e3o integral da necessidade a ser atendida. Corre\u00e7\u00e3o - Descri\u00e7\u00e3o exata e associada ao software que ser\u00e1 desenvolvido. Exequidade - Um requisito de ser pass\u00edvel de execu\u00e7\u00e3o. Prioridade - Descri\u00e7\u00e3o do n\u00edvel: Obrigat\u00f3rio, Desej\u00e1vel ou Opcional. Modifica\u00e7\u00e3o - Capacidade de altera\u00e7\u00e3o do requisito ao longo do processo. Verificabilidade - Capacidade de se realizar testes que verifiquem se o requisito fora alcan\u00e7ado. Rastreabilidade - Rela\u00e7\u00e3o entre c\u00f3digo e requisito de maneira clara e rec\u00edproca.","title":"Conceitos e Caracter\u00edsticas de Requisitos"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#tipos-de-requisitos","text":"Podemos separar os requisitos segundo a sua rela\u00e7\u00e3o com a funcionalidade do software: Requisito Funcional - \u00c9 diretamente relacionado ao funcionamento do programa. Descreve uma fun\u00e7\u00e3o a ser desempenhada pelo produto com maior foco no neg\u00f3cio e n\u00e3o na tecnologia. Requisito N\u00e3o Funcional - \u00c9 relacionado a tecnologia de desenvolvimento. Ele especifica/restringem o comportamento desejado do software. Requisito de Desempenho - Especifica atributos como velocidade ou consumo de mem\u00f3ria que o sistema deve ter. Requisito de Confiabilidade - Especifica a taxa aceit\u00e1vel de falhas do sistema. Requisito de Prote\u00e7\u00e3o - Relacionado a seguran\u00e7a do software. Requisito de Usabilidade - Caracter\u00edsticas desejadas de usabilidade.","title":"Tipos de Requisitos"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#elicitacao-de-requisitos-de-software","text":"","title":"Elicita\u00e7\u00e3o de Requisitos de Software"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#processos-da-engenharia-de-requisitos-e-tecnicas-de-elicitacao","text":"Elicitar \u00e9 o processo de extrair ou obter o m\u00e1ximo de informa\u00e7\u00e3o poss\u00edvel para o conhecimento de um objeto desejado. Logo, Elicita\u00e7\u00e3o de Requisitos \u00e9 o processo de extrair dos clientes as reais necessidades da demanda dele, ou seja, os requisitos da demanda. Al\u00e9m disso, a classifica\u00e7\u00e3o desses requisitos nas categorias que aprendemos na se\u00e7\u00e3o passada. Para se extrair essas informa\u00e7\u00f5es podemos usar uma mir\u00edade de t\u00e9cnicas: Entrevista - Com roteiro para as principais quest\u00f5es. Prioritariamente algo r\u00e1pido e n\u00e3o cansativo. Pode ser individual ou em grupo. Brainstorming - Reuni\u00e3o sem roteiro definido. A criatividade \u00e9 o foco na constru\u00e7\u00e3o de propostas de resolu\u00e7\u00e3o de um determinado problema. Question\u00e1rio - Com perguntas fechadas ou abertas. Tem como vantagem a praticidade. Prot\u00f3tipo - \u00c9 indicado para situa\u00e7\u00f5es onde o user n\u00e3o tem facilidade em se expressar. A elicita\u00e7\u00e3o \u00e9 feita pela intera\u00e7\u00e3o entre user e prot\u00f3tipo. Etnografia - \u00c9 a observa\u00e7\u00e3o da realidade do cliente por um per\u00edodo. Ap\u00f3s as coletas de todas as informa\u00e7\u00f5es, passamos para fase de Estudo de Documentos em que os dados ser\u00e3o convertidos em requisitos funcionais e n\u00e3o funcionais do projeto.","title":"Processos da Engenharia de Requisitos e T\u00e9cnicas de Elicita\u00e7\u00e3o"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#modelagem-validacao-e-verificacao-de-requisitos","text":"","title":"Modelagem, Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o de Requisitos"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#modelagem-de-requisitos","text":"","title":"Modelagem de Requisitos"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#modelagem-de-requisitos-e-introducao-a-uml","text":"A Unified Modeling Language (UML) \u00e9 uma linguagem de modelagem unificada. Surgida em 1997 como resultado de um esfor\u00e7o de v\u00e1rias empresas para a constru\u00e7\u00e3o de um padr\u00e3o para a modelagem de engenharia de software. Vale ressaltar que a UML n\u00e3o \u00e9 uma metodologia e apenas uma maneira de expor processos de software. A Modelagem de Requisitos ou An\u00e1lise de Requisitos \u00e9 a produ\u00e7\u00e3o da lista de requisitos funcionais e n\u00e3o-funcionais para um projeto. Para padroniza\u00e7\u00e3o desses produtos, usamos a UML como linguagem de representa\u00e7\u00e3o. A UML possui 3 tipos de diagramas: Diagrama de Estrutura - Foco na vis\u00e3o est\u00e1tica. Diagrama de Classes Diagrama de Pacotes Diagrama de Comportamento - Foco na vis\u00e3o din\u00e2mica. Diagrama de Caso de Uso Diagrama de Intera\u00e7\u00e3o - Representa\u00e7\u00e3o da comunica\u00e7\u00e3o entre objetos.","title":"Modelagem de Requisitos e Introdu\u00e7\u00e3o \u00e0 UML"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#modelagem-de-casos-de-uso-uml","text":"Como acabamos de ver, o diagrama de casos de uso \u00e9 um tipo de diagrama de comportamento e, logicamente, tem foco no comportamento din\u00e2mico entre as partes envolvidas no funcionamento do sistema. O diagrama de casos de uso \u00e9 geralmente o primeiro diagrama UML usado na fase de requisitos pois permite o detalhe dos requisitos funcionais na fase de elicita\u00e7\u00e3o. \u00c9 importante notar que, por ter foco na intera\u00e7\u00e3o entre as partes, esse tipo de diagrama n\u00e3o \u00e9 usado para elicita\u00e7\u00e3o dos requisitos n\u00e3o-funcionais. As partes integrantes do diagrama de casos de uso s\u00e3o: Atores - S\u00e3o as representa\u00e7\u00f5es da entidades que interagem com o sistema. Sejam elas seres humanos, sensores ou outros sistemas. Casos de Uso - S\u00e3o as transa\u00e7\u00f5es entre as partes. Relacionamentos - Podem ser divididos em quatro tipos: Associa\u00e7\u00e3o - \u00c9 o relacionamento mais comum. Representado por uma seta aberta (ou uma linha reta) que liga os atores aos casos de uso. N\u00e3o pode ligar atores a atores ou casos de uso a casos de uso. Generaliza\u00e7\u00e3o - Acontece quando h\u00e1 uma rela\u00e7\u00e3o de heran\u00e7a entre elementos. Pode acontecer entre atores e atores e casos de uso e casos de uso. Inclus\u00e3o (Include) - S\u00e3o usados para representar rotinas comuns entre transa\u00e7\u00f5es do sistema por meio do uso de uma seta pontilhada com a lable de include. S\u00f3 ocorre entre casos de uso. Exclus\u00e3o (Extend) - \u00c9 usada para indicar exce\u00e7\u00f5es. Tem a nota\u00e7\u00e3o parecida com o include mas no lable est\u00e1 escrito exclude. Abaixo temos um exemplo desse diagrama.","title":"Modelagem de Casos de Uso UML"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#praticas-de-diagrama-de-casos-de-uso","text":"Essa se\u00e7\u00e3o \u00e9 um exerc\u00edcio proposto de constru\u00e7\u00e3o de um diagrama de casos de uso. O problema proposto \u00e9: O cliente cadastra os dados pessoais, depois do ve\u00edculo e finalmente a proposta da seguradora. Alguns clientes s\u00e3o da categoria \"especial\" do programa de fidelidade da seguradora e cadastram as propostas de seguros com desconto. A seguradora formata a proposta baseada nos dados dos ve\u00edculos cadastrados. Depois, os clientes pagam as presta\u00e7\u00f5es do seguro. Caso haja inadimpl\u00eancia, a seguradora cancela o seguro. Comunicando o cliente. Em caso de acidente, o cliente comunica o sinistro \u00e0 seguradora. Ela paga as despesas do conserto. Em casos raros, a seguradora paga ao cliente o valor integral do ve\u00edculo. Coment\u00e1rio: Antes de olhar como ficou. Tente fazer o diagrama sozinho. Uma boa ferramenta para isso \u00e9 o Lucidchart ou o Draw.io . Abaixo temos uma representa\u00e7\u00e3o de caso de uso poss\u00edvel para o caso exemplo.","title":"Pr\u00e1ticas de Diagrama de Casos de Uso"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#modelagem-de-classes-uml","text":"Come\u00e7aremos a ver os diagramas de estrutura pelo Diagrama de Classes de UML. Seu objetivo \u00e9 definir a estrutura est\u00e1tica de relacionamento entre classes. L\u00e1 em programa\u00e7\u00e3o modular n\u00f3s aprendemos que uma classe \u00e9 um conjunto de objetos com propriedades similares. Toda classe tem um nome e atributos que descrevem as suas propriedades. Al\u00e9m disso, possuem m\u00e9todos que s\u00e3o as fun\u00e7\u00f5es internas da classe. Coment\u00e1rio: Esse \u00faltimo par\u00e1grafo faz muito sentido para todos que j\u00e1 passaram pela mat\u00e9ria de programa\u00e7\u00e3o modular. Se n\u00e3o for o seu caso, corre l\u00e1 depois que terminar esse microfundamento. Tamb\u00e9m sabemos que classes podem ser relacionadas entre si pela rela\u00e7\u00e3o de heran\u00e7a que \u00e9 um dos pilares da programa\u00e7\u00e3o orientada \u00e0 objetos. No contexto da UML, podemos chamar essa rela\u00e7\u00e3o de heran\u00e7a de Generaliza\u00e7\u00e3o-Especializa\u00e7\u00e3o . A representa\u00e7\u00e3o entre a superclasse e as classes filhas \u00e9 feita com o uso de uma seta de ponta fechada onde a seta sempre sai da subclasse e aponta para a superclasse. O outro modelo de relacionamento \u00e9 a agrega\u00e7\u00e3o ou Estrutura Todo-Parte . Nesse relacionamento n\u00e3o h\u00e1 heran\u00e7a, entretanto, existe alguma rela\u00e7\u00e3o de pertin\u00eancia de modo que cada parte \u00e9 um elemento do todo. Possui a representa\u00e7\u00e3o da multiplicidade (1...*) para indicar a quantidade de itens que o relacionamento suporta. A agrega\u00e7\u00e3o pode ser representada de dois modos. Na Agrega\u00e7\u00e3o Simples usamos um losango em branco e indica que a parte possui vida al\u00e9m do todo 1 . Por outro lado, na Agrega\u00e7\u00e3o por Composi\u00e7\u00e3o , usamos o losango preenchido para indicar que a parte n\u00e3o tem vida al\u00e9m do todo. Coment\u00e1rio: A ideia nessa dota\u00e7\u00e3o da multiplicidade \u00e9 simples. Imagine que temos uma classe \"Estoque\" e uma classe \"Produto\". Uma vez que um estoque \u00e9 justamente o todo dos produtos armazenados, \u00e9 plenamente poss\u00edvel termos a rela\u00e7\u00e3o entre essas classes. Podemos usar a rela\u00e7\u00e3o de agrega\u00e7\u00e3o para indicar esse caso. Quando ligamos as classes, n\u00f3s indicamos quantos objetos s\u00e3o aceitos na rela\u00e7\u00e3o. No nosso exemplo \u00e9 poss\u00edvel termos um estoque de zero itens 2 de cada produto, logo, a multiplicidade indicada ser\u00e1 de 0...* que deve ser lida como ``Podemos ter entre zero e n produtos no nos\" estoque\". Para terminar essa se\u00e7\u00e3o, temos apenas mais uma rela\u00e7\u00e3o a ser aprendida. Na Associa\u00e7\u00e3o , tamb\u00e9m n\u00e3o temos rela\u00e7\u00e3o de heran\u00e7a e tamb\u00e9m temos multiplicidade. A diferen\u00e7a est\u00e1 no fato que n\u00e3o existe rela\u00e7\u00e3o de todo e parte, ou seja, o v\u00ednculo entre as classes \u00e9 mais fraco. Normalmente, a associa\u00e7\u00e3o \u00e9 indicada por uma linha reta entre as classes com as multiplicidades com asteriscos nos dois lados. Al\u00e9m disso, podemos ter uma classe `\"endurada\" entre a associa\u00e7\u00e3o para indicar o modo.","title":"Modelagem de Classes UML"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#modelagem-de-pacotes-uml","text":"Uma vez que tenhamos feito nossos diagrama de classes, temos um diagrama que \u00e9 capaz de \"empacotar\" classes relacionadas. Esse diagrama recebe o nome de Diagrama de Pacotes . Tal qual o diagrama de classes, o diagrama de pacotes \u00e9 um digrama estrutural da UML. N\u00e3o existe muita exatid\u00e3o no processo de constru\u00e7\u00e3o de pacotes. A ideia \u00e9 que a associa\u00e7\u00e3o entre classes fa\u00e7a sentido e, nessas horas, o bom senso \u00e9 a nossa melhor ferramenta. No geral, podemos elencar algumas regras para nos ajudar na cria\u00e7\u00e3o de pacotes: Deve ter duas ou mais classes Nome gen\u00e9rico ou da classe mais importante Representa\u00e7\u00e3o na UML pelo \u00edcone da uma pasta Uma classe pode pertencer a mais de um pacote Nenhuma classe deve ficar fora do diagrama de pacotes Um pacote pode depender de outros pacotes A depend\u00eancia de pacotes \u00e9 dada no UML pelo uso de uma seta pontilhada","title":"Modelagem de Pacotes UML"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#validacao-e-verificacao-de-requisitos","text":"","title":"Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o de Requisitos"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#validacao-e-verificacao-de-requisitos_1","text":"Uma vez que temos nosso sistema modelado, podemos nos perguntar se ``estamos construindo o pro\"to certo\". Chamamos de valida\u00e7\u00e3o o trabalho de verifica\u00e7\u00e3o da resposta a essa pergunta. Ou seja, estamos verificando a efic\u00e1cia da nossa solu\u00e7\u00e3o. Do outro lado, dizemos que a verifica\u00e7\u00e3o tem rela\u00e7\u00e3o com a efici\u00eancia. Isso quer dizer que queremos saber se al\u00e9m de cumprir o objetivo, nossa solu\u00e7\u00e3o o faz com a otiliza\u00e7\u00e3o dos recursos de maneira certa. Para realizarmos essas duas verifica\u00e7\u00f5es podemos fazer uso da Revis\u00e3o T\u00e9cnica que avalia esses aspectos por meio um time das partes envolvidas no processo para a busca das seguintes falhas: erros no conte\u00fado\\interpreta\u00e7\u00e3o informa\u00e7\u00f5es faltantes inconsist\u00eancias requisitos conflitantes\\irreais Para realizar essas verifica\u00e7\u00f5es, podemos usar v\u00e1rias abordagens: Inspe\u00e7\u00f5es de C\u00f3digo Comandos de Banco de Dados An\u00e1lise dos Requisitos Testes de Software","title":"Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o de Requisitos"},{"location":"nav/PUC/periodo2/engenharia_requisitos/#bibliografia","text":"SOMMERVILLE, Ian. Engenharia de Software . S\u00e3o Paulo: Pearson, 2019. BEZERRA, Eduardo. Princ\u00edpios de An\u00e1lise e Projeto de Sistemas com UML . S\u00e3o Paulo: Elsevier, 2006. PRESSMAN, Roger; MAXIM, Bruce. Engenharia de Software . S\u00e3o Paulo: Bookman, 2016. LARMAN, Craig. Utilizando UML e padr\u00f5es: uma introdu\u00e7\u00e3o \u00e1 an\u00e1lise e ao projeto orientados a objetos e desenvolvimento iterativo . 3. ed. Porto Alegre: Bookman, 2007. E-book (695 p\u00e1ginas) ISBN 9788577800476. PAULA FILHO, Wilson de P\u00e1dua. Engenharia de software , v. 2 projetos e processos. 4. Rio de Janeiro LTC 2019 1 recurso online ISBN 9788521636748. WAZLAWICK, Raul Sidnei. Engenharia de software conceitos e pr\u00e1ticas . Rio de Janeiro GEN LTC 2013 1 recurso online ISBN 9788595156173. GUEDES, Gilleanes. UML 2 - Uma Abordagem Pr\u00e1tica . S\u00e3o Paulo: Novatec, 2018. Isso \u00e9 um jeito estranho de dizer que a parte n\u00e3o est\u00e1 inteiramente contida no todo. \u21a9 Ou seja, \u00e9 o caso onde n\u00e3o temos o produto estocado. \u21a9","title":"Bibliografia"},{"location":"nav/PUC/periodo2/programacao_modular/","text":"hljs.initHighlightingOnLoad(); Assuntos Programa\u00e7\u00e3o Orientada \u00e0 Objetos Fatores de Qualidade de Software Classes e Objetos Encapsulamento Heran\u00e7a Polimorfismo e Princ\u00edpios do Projeto Modular Polimorfismo de Inclus\u00e3o (#sobreposicao-de-metodos-virtual-e-override) Polimorfismo Param\u00e9trico Projeto Orientado para Objetos Bibliografia Programa\u00e7\u00e3o Orientada \u00e0 Objetos A essa altura j\u00e1 estamos cientes que podemos pensar em um algoritmo como uma sucess\u00e3o de passos que finda na execu\u00e7\u00e3o de um objetivo em tempo de processamento \u00fatil para um usu\u00e1rio. Antigamente, acreditava-se que todos os problemas poderiam ser expressos com o uso de apenas 3 estruturas de controle: comandos sequ\u00eancias, comandos de sele\u00e7\u00e3o (condicionais) e comandos de repeti\u00e7\u00e3o (iterativos). Nessa era, o foco estava apenas da completude do desafio proposto. A miss\u00e3o era resolver o problema por meio de um software. Mas n\u00e3o demorou muito para as organiza\u00e7\u00f5es perceberem que v\u00e1rias tarefas estavam presentes em diferentes problemas com apenas algumas altera\u00e7\u00f5es. Al\u00e9m disso, o custo e a complexidade dos problemas evolui e coisas como efici\u00eancia e padroniza\u00e7\u00e3o come\u00e7aram a ficar mais relevantes no meio empresarial que j\u00e1 passava a se cristalizar em grandes corpora\u00e7\u00f5es. Para sanar essas necessidades, as linguagens de programa\u00e7\u00e3o evolu\u00edram e passaram a suportar abstra\u00e7\u00f5es como fun\u00e7\u00f5es e procedimentos . Podemos entender uma fun\u00e7\u00e3o como uma abstra\u00e7\u00e3o de express\u00e3o que representam o mapeamento 1 de entradas em um conjunto de resultado. O professor usa o exemplo da fun\u00e7\u00e3o fatorial: \\(n! = n * (n-1)!\\) Que pode ser escrito como uma fun\u00e7\u00e3o em c# // c# using System ; class Calculo { public int fatorial ( int n ) { int res = 1 ; if ( n == 0 || n == 1 ) { return res ; } else if ( n > 0 ) { return n * fatorial ( n - 1 ); } else { return - 1 ; } } static void Main ( string [] args ) { int valor = 4 ; int resultado ; Calculo calc = new Calculo (); resultado = calc . fatorial ( valor ); Console . WriteLine ( \"{0}! = {1}\" , valor , resultado ); } } Coment\u00e1rio: Tudo que usamos nesse programa acima foi aprendido na parte 1 desse material com apenas 1 exce\u00e7\u00e3o. Pode ser que para algumas pessoas seja estranho que na defini\u00e7\u00e3o da fun\u00e7\u00e3o fatorial se fa\u00e7a uso da pr\u00f3pria fun\u00e7\u00e3o que est\u00e1 sendo criada. Chamamos esse recurso de recurs\u00e3o e \u00e9 usado bastante como ferramenta de solu\u00e7\u00e3o de problemas matem\u00e1ticos formais. Aqui tem um link sobre essa t\u00e9cnica em linguagem de programa\u00e7\u00e3o. Al\u00e9m do conceito de fun\u00e7\u00e3o, as linguagens tamb\u00e9m evolu\u00edram para o uso de procedimentos que podem ser entendidos como a abstra\u00e7\u00e3o de comandos. \u00c9 a representa\u00e7\u00e3o de um conjunto de passos que resolve um tarefa. Diferente das fun\u00e7\u00f5es que possuem um retorno, um procedimento pode ou n\u00e3o ter um resultado vis\u00edvel. // c# using System ; class MainClass { private static void Tarefa1 () { Console . Clear (); Console . WriteLine ( \"Executando tarefa 1\" ); Console . ReadLine (); } private static void Tarefa2 () { Console . Clear (); Console . WriteLine ( \"Executando tarefa 2\" ); Console . ReadLine (); } private static bool MenuPrincipal () { Console . Clear (); Console . WriteLine ( \"Escolha uma op\u00e7\u00e3o:\" ); Console . WriteLine ( \"1. Tarefa 1\\n2. Tarefa 2\\n3. Sair\" ); Console . Write ( \"Op\u00e7\u00e3o: \" ); switch ( Console . ReadLine ()) { case \"1\" : Tarefa1 (); case \"2\" : Tarefa2 (); case \"3\" : return false ; default : return true ; } } public static void Main ( string [] args ) { while ( MenuPrincipal ()) ; } } N\u00f3s aprendemos na parte 1 do material que um tipo abstrato de dado \u00e9 a constru\u00e7\u00e3o de uma classe que possui dentro de si a l\u00f3gica de estruturas e m\u00e9todos necess\u00e1rios para a constru\u00e7\u00e3o de uma solu\u00e7\u00e3o otimizada de software. Desse modo, podemos pensar em um M\u00f3dulo 2 como um tipo abstrato de dados que consegue internalizar a l\u00f3gica de implementa\u00e7\u00e3o dos seus elementos de modo a permitir que apenas alguns dos seus elementos sejam manipulados. A vantagem de se encapsular a l\u00f3gica \u00e9 permitir que os arquivos de c\u00f3digo se tornem mais leg\u00edveis porque toda a l\u00f3gica das fun\u00e7\u00f5es usadas est\u00e1 guardada nos arquivos de refer\u00eancia de cada m\u00f3dulo que foi carregado no come\u00e7o do script, al\u00e9m disso, podemos desejar que certas partes do nosso c\u00f3digo n\u00e3o estejam dispon\u00edveis para manipula\u00e7\u00e3o por parte do usu\u00e1rio. Coment\u00e1rio: J\u00e1 vimos um pouco sobre escopo quando trabalhos tipos abstratos de dados. // c# using System ; using System.Collections.Generic ; public class Conta { private DateTime _criacao ; private double _saldo = 0 ; public Conta ( double saldoInicial , DateTime criacao ) { _saldo = saldoInicial ; _criacao = criacao ; } public DateTime DataCriacao { get { return _criacao ; } } public double Sacar ( double quantia ) { if ( _saldo < quantia ) throw new ArgumentException ( \"Saque maior que saldo.\" , \"quantia\" ); _saldo -= quantia ; return quantia ; } public void Depositar ( double quantia ) { if ( quantia <= 0 ) throw new ArgumentException ( \"Dep\u00f3sito deve ser positivo.\" , \"quantia\" ); _saldo += quantia ; } public double GetSaldo () { return _saldo ; } } public class MainClass { public static void Main ( string [] args ) { Conta contaDoZe = new Conta ( 1200 , Datetime . Now ); Console . WriteLine ( \"Saldo da Conta: {0:C2}\" , contaDoZe . GetSaldo ()); double quantia = 212 ; Console . WriteLine ( \"Sacar {0:C2} da conta.\" , quantia ); contaDoZe . Sacar ( quantia ); Console . WriteLine ( \"Saldo na conta: {0:C2}\" , contaDoZe . GetSaldo ()); } } Coment\u00e1rio: Se alguns de voc\u00eas tiveram d\u00favidas na linha onde o objeto ContaDoZe \u00e9 criado pela passagem de dois par\u00e2metros Conta(1200,DateTime.Now) \u00e9 porque voc\u00eas se esqueceram do que aprendemos sobre construtores . Programa\u00e7\u00e3o Orientada \u00e0 Objetos Criado em 1967 por Alan Kay, o paradigma da programa\u00e7\u00e3o orientada \u00e0 objetos prop\u00f5e uma mudan\u00e7a no modo de entendermos como um software \u00e9 constru\u00eddo. A novidade foi a proposi\u00e7\u00e3o de m\u00f3dulos independentes que n\u00e3o compartilham dados mas s\u00e3o capazes de se comunicarem (como se fossem c\u00e9lulas). O que permite o reaproveitamento de solu\u00e7\u00f5es e o acoplamento de diferentes objetos para a cria\u00e7\u00e3o de ferramentas complexas e, ainda assim, cuja manuten\u00e7\u00e3o era mais f\u00e1cil. Claro que existem novos riscos associados \u00e0 mudan\u00e7a do paradigma. Por exemplo, chamamos de alto acoplamento a situa\u00e7\u00e3o onde os m\u00f3dulos de um sistema s\u00e3o muito interdependentes e podem, com a falha cr\u00edtica em algum deles, desencadear uma quebra generalizada na aplica\u00e7\u00e3o. Temos que focar sempre em solu\u00e7\u00f5es de baixo acoplamento. Podemos ver como os conceitos v\u00e3o evoluindo gradualmente. Primeiro aprendemos sobre estruturas de dados nativas. Depois aprendemos como criar nossas pr\u00f3prias estruras de dados. Em seguida, aprendemos sobre tipos abstratos de dados com classes e estruturas. Finalmente, agora vemos como esses conceitos foram usados para a constru\u00e7\u00e3o de um paradigma novo de desenvolvimento denominado programa\u00e7\u00e3o orientada \u00e0 objetos. Fatores de Qualidade de Software V\u00e1rias vezes ao longo do material n\u00f3s usamos termos como \"software de qualidade\" ou \"programas bem constru\u00eddos\" ou alguma ideia similar. Agora, vamos definir mais claramente quais caracter\u00edsticas uma solu\u00e7\u00e3o de software precisa ter para ser digna de tal chancela. A norma que rege esse consenso aplicado no mercado atualmente \u00e9 a ISO/IEC 25010 . Essa norma divide os fatores de qualidade de um produto em 8 fatores de qualidade: Funcionalidade Desempenho Compatibilidade Usabilidade Confiabilidade Seguran\u00e7a Manutenibilidade Portabilidade Como podemos ver, s\u00e3o v\u00e1rios crit\u00e9rios que s\u00e3o usados no trabalho de avalia\u00e7\u00e3o de uma solu\u00e7\u00e3o. Al\u00e9m dessa classifica\u00e7\u00e3o, podemos elencar os fatores em 2 grupos: fatores externos (relacionados com a din\u00e2mica de intera\u00e7\u00e3o dos usu\u00e1rios) e fatores internos (relacionados a din\u00e2mica dos programadores com a aplica\u00e7\u00e3o). Mesmo sabendo que todos os fatores s\u00e3o importantes, como estamos estudando esse conte\u00fado sob a perspectiva da programa\u00e7\u00e3o modular, vamos nos ater apenas aos fatores que s\u00e3o impactados pela decis\u00e3o de um projeto modular de aplica\u00e7\u00e3o. Fatores Externos No que tange \u00e0 experi\u00eancia do usu\u00e1rio, podemos destacar algumas caracter\u00edsticas que toda solu\u00e7\u00e3o deve apresentar para ser considerada de qualidade. Corre\u00e7\u00e3o: O sistema deve executar a atividade que foi previamente definida como objetivo para sua constru\u00e7\u00e3o. Isso garante que ele funcionar\u00e1 como o previsto. Robustez: O sistema deve funcionar mesmo em condi\u00e7\u00f5es anormais. Essa caracter\u00edsticas est\u00e1 bastante relacionada \u00e0 capacidade de lidar com erros e situa\u00e7\u00f5es n\u00e3o previstas anteriormente pelo desenvolvimento. Quando um sistema \u00e9 bem constru\u00eddo, mesmo em situa\u00e7\u00f5es de impossibilidade de funcionamento (como a aus\u00eancia de internet em um sistema web) existem diferentes modos de lidar com essa limita\u00e7\u00e3o imposta ao funcionamento da aplica\u00e7\u00e3o. Um conceito que vale a pena aprendermos \u00e9 o graceful degradation . Adapta\u00e7\u00e3o a Novas Situa\u00e7\u00f5es O desenvolvimento \u00e1gil trouxe v\u00e1rias mudan\u00e7as de postura no planejamento e execu\u00e7\u00e3o de um projeto de tecnologia. Como agora n\u00e3o \u00e9 necess\u00e1rio saber todas as caracter\u00edsticas do produto final, existe a possibilidade de novas fun\u00e7\u00f5es e ferramentas surgirem ao longo do processo de cria\u00e7\u00e3o inicialmente planejado. Para se atender as demandas geradas por esse paradigma, os produtos gerados a cada etapa deve ter as seguintes propriedades: Extensabilidade: O sistema deve se adaptar a mudan\u00e7as na sua especifica\u00e7\u00e3o. Reusabiliadde: O sistema de ter m\u00f3dulos que podem ser aproveitadas em outras solu\u00e7\u00f5es. Permitindo uma maior produtividade e celeridade do processe de desenvolvimento. Compatibilidade: O sistema deve ter partes que s\u00e3o capazes de se comunicar entre si e com outros sistemas. Nesse contexto que os padr\u00f5es de desenvolvimento e protocolos s\u00e3o t\u00e3o relevantes. Desempenho Uma caracter\u00edsticas muit\u00edssimo relevante, principalmente em projetos escal\u00e1veis \u00e9 a efici\u00eancia. Fazer bom uso do hardware economiza custos para o cliente e \u00e9 uma das qualidades mais desejadas para empresas de grande monta. Sempre devemos ter em mente que haver\u00e1 um trade-off entre a capacidade de resolu\u00e7\u00e3o dos problemas propostos e o consumo de poder de processamento dispon\u00edvel no momento. Um sistema deve fazer o que \u00e9 desejado da melhor maneira poss\u00edvel. No escopo da programa\u00e7\u00e3o modular, como os m\u00f3dulos s\u00e3o autocontidos, no contexto de sistema muito complexos haver\u00e1, muito provavelmente, uma prefer\u00eancia pela corre\u00e7\u00e3o e robustez (que garantem o resultado esperado) em detrimento da efici\u00eancia (que garante a otimiza\u00e7\u00e3o do uso dos recursos). Fatores Internos Os fatores internos de qualidade de um software s\u00e3o aqueles relacionados \u00e0s caracter\u00edsticas percebidas pelos desenvolvedores e profissionais que far\u00e3o a manuten\u00e7\u00e3o do programa. Os principais fatores internos de qualidade de software s\u00e3o: Legibilidade Manutenibilidade Modularidade A Legibilidade pode ser entendia em dois componentes: inteligibilidade que \u00e9 a facilidade de se entender a l\u00f3gica implementada naquele c\u00f3digo e a legibilidade que \u00e9 a constru\u00e7\u00e3o de c\u00f3digos de maneira a facilitar a identifica\u00e7\u00e3o dos tokens e operadores usados. Pensando na necessidade de se padronizar o uso de estilo das linguagens de programa\u00e7\u00e3o \u00e9 que surgem os Coding Standards que padronizam v\u00e1rias pr\u00e1ticas para tornar a legibilidade das linguagens mais eficiente no seu meio de uso. Um bom programador sempre est\u00e1 com os padr\u00f5es das linguagens que utiliza em dia. A Manutenibilidade \u00e9 a facilidade de se modificar e corrigir problemas encontrados na solu\u00e7\u00e3o. Em uma estrutura modular \u00e9 comum ter que identificar qual m\u00f3dulo est\u00e1 apresentando problemas e prosseguir com a corre\u00e7\u00e3o da l\u00f3gica que est\u00e1 gerando o problema. A Modularidade \u00e9 relacionada a divis\u00e3o do sistema. Um m\u00f3dulo encapsula a l\u00f3gica de uma determinada a\u00e7\u00e3o do sistema e torna o gerenciamento da solu\u00e7\u00e3o mais eficiente porque divide em v\u00e1rios arquivos menores o que antigamente ficaria em um \u00fanico arquivo texto de dif\u00edcil entendimento. Esse fator \u00e9 regido por dois pressupostos essenciais: princ\u00edpio da unidade funcional (uma fun\u00e7\u00e3o por m\u00f3dulo) e coes\u00e3o (cada m\u00f3dulo tem tudo que precisa para implementar a sua fun\u00e7\u00e3o). Classes e Objetos Atributos e M\u00e9todos Finalmente temos todos os conceitos necess\u00e1rios para aprendermos como programar usando o paradigma orientado \u00e0 objetos. A principal postura que devemos ter \u00e9 a de procurar abstrair o mundo real em objetos que s\u00e3o entidades autocontidas que possuem 3 caracter\u00edsticas: Estado Comportamento Identidade Chamamos de Classe a cole\u00e7\u00e3o de objetos que compartilham as mesmas propriedades e comportamentos. Agora vamos relembrar o que j\u00e1 aprendemos l\u00e1 em Algoritmos e Abstra\u00e7\u00e3o de dados. Podemos definir uma classe em c# para um tipo de produto qualquer do seguinte modo: // c# class Produto { public string descricao ; public float preco ; public int quantidade ; public bool emEstoque () { return ( quantidade > 0 ); } } A diferen\u00e7a agora \u00e9 que sabemos o que \u00e9 uma classe do ponto de vista dos conceitos de programa\u00e7\u00e3o orientada \u00e0 objetos. Sem\u00e2ntica de Refer\u00eancia Um objeto \u00e9 uma inst\u00e2ncia 3 de uma classe que possui um nome e uma posi\u00e7\u00e3o na mem\u00f3ria. Uma classe pode ter v\u00e1rias inst\u00e2ncias de objetos 4 . Em c# primeiro fazemos uma refer\u00eancia ao objeto para, depois, criarmos ele efetivamente usando o token new . Isso ocorre na mesma linha de c\u00f3digo. // c# class MainClass { public static void Main ( string [] args ) { Produto produto = new Produto (); produto . descricao = \"Cafe\" ; produto . preco = 1.99 ; produto . quantidade = 100 ; Console . WriteLine ( \"Em estoque: {0}\" , produto . emEstoque () ? \"sim\" : \"n\u00e3o\" ) }; } Na parte Produto produto estamos fazendo apenas a refer\u00eancia \u00e0 classe mas o objeto ainda n\u00e3o foi alocado na mem\u00f3ria. Inicialmente o objeto produto \u00e9 null . Logo ap\u00f3s a refer\u00eancia usamos o token new para, ai sim, criar um endere\u00e7o na mem\u00f3ria que onde o objeto ser\u00e1 criado. Coment\u00e1rio: Se voc\u00ea ainda est\u00e1 com d\u00favidas sobre o que esse objeto criado far\u00e1, recomendamos fortemente os fundamentos da etapa 1. Construtores Come\u00e7amos a ver esse assunto no per\u00edodo 1 do curso. Vale a pena relembrar antes de continuar essa se\u00e7\u00e3o. Como vimos antes, o comando Produto produto = new Produto(); faz a refer\u00eancia ao objeto e logo ap\u00f3s cria um endere\u00e7o na mem\u00f3ria para ele. Algumas linguagens possuem uma ferramenta autom\u00e1tica de gest\u00e3o de mem\u00f3ria chamada Coletor de lixo ou Garbage Collector que \u00e9 respons\u00e1vel pela exclus\u00e3o de itens n\u00e3o usados durante a execu\u00e7\u00e3o de um programa. Para nossa alegria, o c# possui essa ferramenta. Mais sobre esse conceito pode ser encontrado nesse link . Por causa dessa caracter\u00edstica da linguagem, no caso do objeto produto que criamos anteriormente, recebe alguns valores padr\u00f5es no momento da sua cria\u00e7\u00e3o. Se a vari\u00e1vel for num\u00e9rica, recebe o valor 0 e para as strings \u00e9 passado o valor null. Desse modo, nosso objeto foi salvo no momento da sua cria\u00e7\u00e3o com os seguintes valores: Descri\u00e7\u00e3o: null Pre\u00e7o: 0.0 Quantidade: 0 Para garantir a correta utiliza\u00e7\u00e3o de um objeto criado, devemos nos valer da capacidade de definir valores no mesmo momento em que estamos criando um novo objeto. J\u00e1 sabemos que esse conceito recebe o nome de construtor . Tamb\u00e9m sabemos que, em c#, um construtor \u00e9 criado do mesmo modo de um m\u00e9todo, a \u00fanica diferen\u00e7a \u00e9 que ele deve receber o mesmo nome do objeto e que n\u00e3o possuem valores de retorno. O n\u00famero de construtores que um objeto pode receber \u00e9 ilimitado. Como vimos antes, um objeto sempre ter\u00e1 um construtor. Se n\u00e3o o declararmos, ent\u00e3o o pr\u00f3prio c# se encarrega de definir quais ser\u00e3o os valores recebidos. De outro modo, se n\u00f3s definirmos explicitamente um construtor no objeto, o compilador do c# sempre respeitar\u00e1 os valores que definimos no construtor. Raz\u00f5es Para se Utilizar Construtores Especializados Alguns objetos possuem regras de estado v\u00e1lido que n\u00e3o comportam os dois tipos de valores do construtor default do c# (que s\u00f3 atribui 0 ou null); Alguns objetos usam a data corrente como carimbo de tempo (timestamp) que pode ser definida por meio do construtor que recebe a hora do sistema; Em objetos muito complexos, o volume de atributos pode ser muito elevado e, se n\u00e3o amarrados corretamente, pode haver algum equ\u00edvoco por parte do usu\u00e1rio na hora de definir todos os valores corretos. Um construtor garante que, pelo menos na sua cria\u00e7\u00e3o, o objeto ter\u00e1 um estado inicial v\u00e1lido para ser preenchido. Construtores na Classe de Produto Voltaremos \u00e0 nossa classe de objeto chamada de Produto para definirmos os seus construtores. // c# class Produto { public string descricao ; public float preco ; public int quantidade ; // construtor que recebe parametros public Produto ( string descricao , float preco , int quantidade ) { if ( descricao . Length >= 3 ) this . descricao = descricao ; if ( preco > 0 ) this . preco = preco ; if ( quantidade >= 0 ) this . quantidade = quantidade ; } // novo construtor default public Produto () { this . descricao = \"Novo Produto\" ; this . preco = 0.01F ; this . quantidade = 0 ; } public bool emEstoque () { return ( quantidade > 0 ); } } Coment\u00e1rio: O objeto this \u00e9 um token que faz refer\u00eancia ao escopo onde se encontra. No caso em tela, ele se refere ao objeto sendo criado e n\u00e3o ao m\u00e9todo onde est\u00e1 sendo usado. Essa parte de tokens de refer\u00eancia de escopo \u00e9 um pouco confusa a primeira vista mas com o tempo \u00e9 poss\u00edvel entender melhor. Dessa maneira, nossa nova classe melhorada de objeto chamado Produto recebe dois tipos de constru\u00e7\u00e3o. Podemos criar um objeto de produto com ou sem par\u00e2metros. // c# // Caso sem passagem de par\u00e2metros Produto produto1 = new Produto (); // Caso com passagem de par\u00e2metros Produto produto2 = new Produto ( \"caf\u00e9\" , 1.50F , 12 ); Atributos Est\u00e1ticos e Propriedades Membros Est\u00e1ticos Antes de definirmos o que seria um membro est\u00e1tico, temos que formalizar o conceito de escopo. Podemos definir escopo como a regi\u00e3o do c\u00f3digo onde a vari\u00e1vel pode ser acessada. Outra maneira de pensarmos esse conceito \u00e9 a regi\u00e3o do c\u00f3digo onde a vari\u00e1vel \u00e9 vis\u00edvel pelo programa. Podemos criar m\u00e9todos e atributos que ser\u00e3o comuns a todos os objetos que tenham refer\u00eancia a eles na sua constru\u00e7\u00e3o. At\u00e9 agora, todos os m\u00e9todos e atributos que tivemos nos nossos objetos foram criados dentro dos pr\u00f3prios objetos e, portanto, s\u00e3o salvos em diferentes endere\u00e7os de mem\u00f3ria a medida que novos objetos s\u00e3o criados ao longo do programa. Pois bem, um membro est\u00e1tico \u00e9 exatamente esse m\u00e9todo ou atributo que s\u00e3o criados em escopo global e \"inseridos\" dentro dos nossos objetos por meio da refer\u00eancia a esse membro na classe que criar\u00e1 os objetos. Eles s\u00e3o muito \u00fateis para implementa\u00e7\u00e3o de contadores ou identificadores de auto-incremento . O termo \"est\u00e1tico\" \u00e9 uma alus\u00e3o ao fato que esses construtos s\u00e3o alocados no momento que a classe \u00e9 carregada na mem\u00f3ria e n\u00e3o variam o seu endere\u00e7o ao longo de todo o programa, ou seja, eles existem antes mesmo de declararmos o primeiro objeto da classe criada. Em c# usamos o token static para a declara\u00e7\u00e3o de um membro est\u00e1tico. Exemplo de Contador Auto-incremento Como agora temos um endere\u00e7o na mem\u00f3ria que todos os objetos podem fazer refer\u00eancia, podemos criar um contador que adiciona o valor 1 sempre que um novo objeto (ou inst\u00e2ncia) da classe for criada. // c# class Produto { public int id ; // novo atributo de identifica\u00e7\u00e3o public string descricao ; public float preco ; public int quantidade ; // referencia ao membro est\u00e1tico public static int contador ; // construtor que recebe par\u00e2metros public Produto ( string descricao , float preco , int quantidade ) { this . id = ++ Produto . contador ; if ( descricao . Length >= 3 ) this . descricao = descricao ; if ( preco > 0 ) this . preco = preco ; if ( quantidade >= 0 ) this . quantidade = quantidade ; } // novo construtor default public Produto () { this . id = ++ Produto . contador ; this . descricao = \"Novo Produto\" ; this . preco = 0.01F ; this . quantidade = 0 ; } public bool emEstoque () { return ( quantidade > 0 ); } } Podemos ver que, como o contador \u00e9 um membro est\u00e1tico da classe, para acessar o seu valor temos que fazer refer\u00eancia \u00e0 classe e n\u00e3o ao objeto. A essa altura, alguns de voc\u00eas j\u00e1 devem ter percebido que toda aplica\u00e7\u00e3o c# est\u00e1 dentro de uma classe chamada MainClass . Com o nosso novo conhecimento de membro est\u00e1tico, podemos ver que o termo public static void Main possui 4 elementos dos quais n\u00f3s j\u00e1 conhecemos o significado de 3: O termo public faz refer\u00eancia ao escopo de acesso; O termo static faz refer\u00eancia \u00e0o conceito que acabamos de aprender de membro est\u00e1tico; Main \u00e9 apenas um nome dado ao m\u00e9todo da classe Mainclass . Basta aprendermos o significado do termo void e entenderemos como e porqu\u00ea os programas em c# usam essa estrutura para funcionar corretamente. Outra coisa que podemos perceber \u00e9 que, pelo fato do m\u00e9todo Main estar dentro de uma classe, se ele n\u00e3o fosse um membro est\u00e1tico, ele s\u00f3 seria executado na instancia\u00e7\u00e3o de um objeto. O problema \u00e9 que esse objeto \u00e9 justamente a aplica\u00e7\u00e3o. Ou seja, para o objeto Main ser instanciado precisar\u00edamos de uma aplica\u00e7\u00e3o mas \u00e9 justamente o objeto Main que cont\u00e9m a nossa aplica\u00e7\u00e3o. Por isso temos que usar o conceito de membro est\u00e1tico e que \u00e9 disparado no momento em que a classe \u00e9 carregada no nosso c\u00f3digo. Destrutores J\u00e1 come\u00e7amos a entender o que s\u00e3o destrutores l\u00e1 no microfundamento de algoritmo de l\u00f3gica. Recapitulando o que j\u00e1 sabemos, um destrutor \u00e9 parecido com o construtor mas \u00e9 ativado no momento em que a inst\u00e2ncia da classe \u00e9 destru\u00edda pelo garbage collector no momento em que o objeto n\u00e3o \u00e9 mais acess\u00edvel a nenhuma parte do programa. O coletor de lixo \u00e9 executado em paralelo ao programa em uma thread separada do processador. Ele \u00e9 executado esporadicamente e tem como miss\u00e3o liberar os espa\u00e7os em mem\u00f3ria sempre que identificar informa\u00e7\u00f5es em mem\u00f3ria que n\u00e3o s\u00e3o usadas ao longo da execu\u00e7\u00e3o do programa por meio da busca de refer\u00eancia das mesmas. Mesmo n\u00e3o sendo o ideal, \u00e9 poss\u00edvel for\u00e7ar o .NET (que \u00e9 o framework mais famoso de c#) a executar o garbage collector por meio do comando GC.Collect(); . Por padr\u00e3o, todo objeto em c# tem um destrutor nativo que tem como \u00fanica atividade a libera\u00e7\u00e3o do espa\u00e7o alocado em mem\u00f3ria. Mas assim como acontece com os construtores, podemos definir alguma rotina a ser executada no momento da sua exclus\u00e3o por meio da defini\u00e7\u00e3o expl\u00edcita. A regra de defini\u00e7\u00e3o \u00e9 parecida com a do construtor com a \u00fanica diferen\u00e7a de colocarmos um til como primeiro caractere. No nosso exemplo, o destrutor ser\u00e1 ~Produto() . // c# class Produto { public int id ; // novo atributo de identificacao public string descricao ; public float preco ; public int quantidade ; // referencia aos membros estaticos public static int contador ; public static int instancias = 0 ; // construtor que recebe parametros public Produto ( string descricao , float preco , int quantidade ) { this . id = ++ Produto . contador ; this . instancias = ++ Produto . instancias ; if ( descricao . Length >= 3 ) this . descricao = descricao ; if ( preco > 0 ) this . preco = preco ; if ( quantidade >= 0 ) this . quantidade = quantidade ; } // novo construtor default public Produto () { this . id = ++ Produto . contador ; this . instancias = ++ Produto . instancias ; this . descricao = \"Novo Produto\" ; this . preco = 0.01F ; this . quantidade = 0 ; } public bool emEstoque () { return ( quantidade > 0 ); } // destrutor ~ Produto () { Console . WriteLine ( \"Adeus, mundo cruel!\" ); this . instancias = Produto . instancias -- ; } } Coment\u00e1rio: Reflita sobre esse c\u00f3digo acima. N\u00e3o devemos ter nenhuma d\u00favida sobre todos os elementos da constru\u00e7\u00e3o dessa classe chamada Produto . Sempre retorne e revise os t\u00f3picos anteriores at\u00e9 que tudo tenha sentido. Encapsulamento Alguns assuntos podem parecer repetidos. Mas aprofundaremos mais a discuss\u00e3o em rela\u00e7\u00e3o ao que j\u00e1 aprendemos na primeira parte desse material. Princ\u00edpio da Oculta\u00e7\u00e3o da Informa\u00e7\u00e3o Podemos definir o princ\u00edpio da oculta\u00e7\u00e3o como sendo: \"Toda informa\u00e7\u00e3o a respeito de um m\u00f3dulo deve ser privativa do m\u00f3dulo, exceto se for explicitamente declarada como p\u00fablica.\" David Parnas introduziu esse conceito em meados de 1972. No seu paper temos a seguinte cita\u00e7\u00e3o em tradu\u00e7\u00e3o livre:\"[...] A documenta\u00e7\u00e3o dos sistema que torna todas as informa\u00e7\u00f5es acess\u00edveis a todos os trabalhadores do projeto \u00e9 discutida. A tese que essa informa\u00e7\u00f5es deve ser 'p\u00fablica' \u00e9 temer\u00e1ria porque, na maioria dos casos, \u00e9 \u00fatil que a informa\u00e7\u00e3o sobre o sistema esteja escondida da maioria dos programadores [...]\". Interface Podemos definir a interface de uma aplica\u00e7\u00e3o de software como: \"Tudo aquilo que o usu\u00e1rio do objeto v\u00ea e acessa.\" Podemos ver que esse conceito de \"usu\u00e1rio\" serve tanto para o usu\u00e1rio da aplica\u00e7\u00e3o quanto para outros programadores que usar\u00e3o algum objeto de uma classe que criamos anteriormente nos nossos m\u00f3dulos. No contexto do princ\u00edpio da oculta\u00e7\u00e3o da informa\u00e7\u00e3o, temos que pensar em interfaces que demonstrem apenas os aspectos est\u00e1veis da solu\u00e7\u00e3o. Tudo que for din\u00e2mico s\u00e3o do escopo da implementa\u00e7\u00e3o. Um m\u00f3dulo pode ocultar informa\u00e7\u00f5es como, por exemplo, Algoritmos e Representa\u00e7\u00e3o de Dados. A interface pode ser divida em duas partes: Assinatura - Nomes e Tipos de informa\u00e7\u00f5es sobre as fun\u00e7\u00f5es do m\u00f3dulo Especifica\u00e7\u00e3o - Descri\u00e7\u00e3o sobre o significado e funcionamento dessas fun\u00e7\u00f5es Coment\u00e1rio: Essa se\u00e7\u00e3o ser\u00e1 expandida em tempo oportuno porque esse assunto \u00e9 muito vasto para pararmos apenas nesses conceitos b\u00e1sicos. Encapsulamento Um m\u00f3dulo deve ter um conjunto de comandos e a especifica\u00e7\u00e3o desses comandos, j\u00e1 vimos que essa parte pode ser chamada de interface do m\u00f3dulo. O conceito de encapsulamento \u00e9 derivado do princ\u00edpio da oculta\u00e7\u00e3o da informa\u00e7\u00e3o no sentido que todo m\u00f3dulo pode receber (e normalmente recebe) atualiza\u00e7\u00f5es na sua parte de implementa\u00e7\u00e3o sem que haja mudan\u00e7as vis\u00edveis na camada de interface. Dizemos que os atributos dos m\u00f3dulos s\u00e3o protegidos pelo encapsulamento porque ficam restritos apenas \u00e0 camada interna n\u00e3o acess\u00edvel a todos. Quando queremos um input de dados do usu\u00e1rio damos sempre prefer\u00eancia aos m\u00e9todos do nosso objeto porque dessa maneira podemos validar os dados inseridos. Al\u00e9m dessa capacidade de manuten\u00e7\u00e3o na camada de implementa\u00e7\u00e3o, o encapsulamento permite a prote\u00e7\u00e3o da l\u00f3gica da regra de neg\u00f3cio para a constru\u00e7\u00e3o das classes. No exemplo do produto, podemos encapsular a vari\u00e1vel quantidade por meio do acesso mediante apenas a um m\u00e9todo pre-definido. Isso nos d\u00e1 a certeza que um usu\u00e1rio n\u00e3o poder\u00e1 inserir valores da maneira inadvertida que possam gerar resultados imprevistos no nosso sistema. Um conceito relevante que podemos destacar \u00e9 chamado de encapsulamento e princ\u00edpio da caixa preta . Que pode ser resumido como: \"Um m\u00f3dulo deve consistir de um conjunto de comandos com uma fun\u00e7\u00e3o bem definida e o mais independente poss\u00edvel em rela\u00e7\u00e3o ao resto do sistema.\" Existem outras caracter\u00edsticas relevantes na constru\u00e7\u00e3o dos m\u00f3dulos que devemos observar: Independ\u00eancia Funcional - Cada m\u00f3dulo \u00e9 respons\u00e1vel por uma fun\u00e7\u00e3o espec\u00edfica e bem definida; Coes\u00e3o - Todas as partes de um m\u00f3dulo devem estar logicamente ligadas \u00e0s outras. Assim como um sistema deve ter m\u00f3dulos logicamente relacionados; Acoplamento - Rela\u00e7\u00e3o de depend\u00eancia entre os m\u00f3dulos de um sistema. O ideal \u00e9 um baixo n\u00edvel de acoplamento Na imagem acima, cada caixa \u00e9 uma m\u00f3dulo que possui rela\u00e7\u00f5es internas (que devem ser coesas). Um alto acoplamento \u00e9 aquele que permite muitas conex\u00f5es entre os m\u00f3dulos de modo a, em caso de falha em um dos n\u00f3s da rede, existir um risco de efeito cascata em caso de falha. Modificadores de Acesso O princ\u00edpio da oculta\u00e7\u00e3o da informa\u00e7\u00e3o \u00e9 aplicado por meio do encapsulamento . O c# e outras linguagens modernas permitem que controlemos o n\u00edvel de visibilidade dos membros de uma classe de forma a ocultarmos todos os dados e m\u00e9todos que precisarmos para garantir o cumprimento da tarefa com todos aqueles requisitos de qualidade de software alcan\u00e7ados. Em c# existem 3 n\u00edveis de acesso aos atributos e m\u00e9todos que podemos usar na cria\u00e7\u00e3o de um m\u00f3dulo 5 : private - Acesso apenas na pr\u00f3pria classe; protected - Acesso permitido na pr\u00f3pria classe e em suas subclasses (ou classes filhas); public - Acesso em qualquer parte do programa Coment\u00e1rio: Por default, o c# atribui o n\u00edvel privado quando nenhum modificador de acesso \u00e9 atribu\u00eddo explicitamente. Mas \u00e9 sempre uma boa pr\u00e1tica tornar os acessos sempre explicitamente vis\u00edveis no c\u00f3digo, mesmo quando eles s\u00e3o privados. Voltando \u00e0 nossa classe Produto. O ideal seria manter todos os atributos privados com apenas os construtores e o m\u00e9todo de checagem de estoque acess\u00edveis ao usu\u00e1rio. // c# class Produto { private int id ; // novo atributo de identificacao private string descricao ; private float preco ; private int quantidade ; // referencia aos membros estaticos private static int contador ; private static int instancias = 0 ; // construtor que recebe parametros public Produto ( string descricao , float preco , int quantidade ) { this . id = ++ Produto . contador ; this . instancias = ++ Produto . instancias ; if ( descricao . Length >= 3 ) this . descricao = descricao ; if ( preco > 0 ) this . preco = preco ; if ( quantidade >= 0 ) this . quantidade = quantidade ; } // novo construtor default public Produto () { this . id = ++ Produto . contador ; this . instancias = ++ Produto . instancias ; this . descricao = \"Novo Produto\" ; this . preco = 0.01F ; this . quantidade = 0 ; } public bool emEstoque () { return ( quantidade > 0 ); } // destrutor ~ Produto () { Console . WriteLine ( \"Adeus, mundo cruel!\" ); this . instancias = Produto . instancias -- ; } } Regras de Encapsulamento Para facilitar a internaliza\u00e7\u00e3o do princ\u00edpio da oculta\u00e7\u00e3o da informa\u00e7\u00e3o. Podemos elencar algumas regras de bolso para serem usadas sempre que uma d\u00favida a respeito desse tema aparecer: Sempre opte pelo n\u00edvel de acesso mais restrito que fa\u00e7a sentido para cada membro 6 da classe; Use private a menos que haja uma boa raz\u00e3o para o contr\u00e1rio; Use public apenas para constantes Coment\u00e1rio: Os pontos 1 e 2 s\u00e3o praticamente a mesma coisa na minha vis\u00e3o. A l\u00f3gica do ponto 3 \u00e9 que quanto mais membros de classe p\u00fablicos, maior \u00e9 a chance que outros m\u00f3dulos fa\u00e7am uso deles, desse modo, o risco de um alto acoplamento se torna cada vez maior. M\u00e9todos de Acesso e Propriedades O princ\u00edpio da oculta\u00e7\u00e3o da informa\u00e7\u00e3o n\u00e3o nos impede de ter acesso aos atributos. N\u00f3s apenas nos certificamos que eles ser\u00e3o seguramente acessados por meios dos m\u00e9todos que deixaremos dispon\u00edveis para intera\u00e7\u00e3o. Chamamos de m\u00e9todos de acesso os meios criados para permitir que os usu\u00e1rios tenham capacidade de acessar da maneira desejada as informa\u00e7\u00f5es contidas nos atributos dos nossos objetos. Desse modo, temos a confian\u00e7a que os valores atribu\u00eddos aos atributos dos nossos objetos sempre obedecer\u00e3o \u00e0s regras definidas nos seus m\u00e9todos p\u00fablicos. Coment\u00e1rio: J\u00e1 iniciamos esse assunto anteriormente no nosso material. M\u00e9todos get (leitura): \u00c9 capaz de acessar um valor de atributo privado. M\u00e9todos set (escrita): \u00c9 capaz de atribuir valor a um atributo privado. At\u00e9 o momento, a nossa classe (que tamb\u00e9m chamamos de m\u00f3dulo) est\u00e1 criada de maneira que ainda n\u00e3o podemos ter acesso a seus atributos propriamente. Uma maneira de criar um m\u00e9todo de acesso get para o nosso atributo de pre\u00e7o pode ser: // c# [...] private float preco ; [...] // m\u00e9todo de acesso get para atributo preco public float GetPreco () { return preco ; } [...] Podemos ir um pouco al\u00e9m de criar um m\u00e9todo de acesso set da seguinte maneira: // c# [...] private float preco ; [...] // m\u00e9todo de acesso set para o atributo preco public void SetPreco ( float preco ) { if ( preco > 0 ) { this . preco = preco ; } } [...] Desse modo, criamos a leitura e a escrita do atributo intermediados pelos m\u00e9todos que nos permitem controlar as caracter\u00edsticas do input realizado e, assim, nos dar seguran\u00e7a que nossa aplica\u00e7\u00e3o se comportar\u00e1 da maneira desejada. Propriedades Podemos melhorar ainda mais a legibilidade do nosso c\u00f3digo por meio do uso das propriedades nativas dos atributos de um m\u00f3dulo. Podemos definir uma propriedade como um tipo especial de atributo que possui m\u00e9todos associados a ele. Temos 3 m\u00e9todos que podem nos conferir mais clareza no c\u00f3digo e alcan\u00e7ar o mesmo resultado que nossos c\u00f3digos anteriores: init - Atribui o valor inicial ao atributo da classe; set - Atualiza o valor de um atributo; get - Retorna o valor atual de um atributo Reescrevendo nossos m\u00e9todos de acesso \u00e0 propriedade de pre\u00e7o, temos que: // c# [...] private float preco ; [...] // criando a propriedade Preco public float Preco { get { return preco ; } // outra maneira de sintaxe para o get: // get => this.preco set { if ( value > 0 ) preco = value ; } } // criando a propriedade Preco2 sem nenhum verificador public float Preco { get ; set ; } O par\u00e2metro value \u00e9 passado junto ao m\u00e9todo set para atualiza\u00e7\u00e3o dos valores dos atributos. Mais informa\u00e7\u00f5es sobre as propriedades podem ser encontradas nesse link . Namespaces e Partial Classes Namespaces J\u00e1 entendemos que um m\u00f3dulo deve ser autocontido e com um prop\u00f3sito bem definido. Entretanto, isso n\u00e3o quer dizer que teremos, na constru\u00e7\u00e3o de um sistema complexo, apenas 1 m\u00f3dulo que englobe toda a solu\u00e7\u00e3o. Para tanto, quebramos as rela\u00e7\u00f5es e tarefas em v\u00e1rios m\u00f3dulos diferentes sempre respeitando os princ\u00edpios que aprendemos anteriormente sobre c\u00f3digo de qualidade. Agora que temos v\u00e1rios m\u00f3dulos, precisaremos de uma maneira de agrupa-los de maneira que fa\u00e7a sentido. \u00c9 exatamente para isso que existe o conceito de namespaces . Com esse conceito, podemos criar uma l\u00f3gica mais geral que englobe v\u00e1rios m\u00f3dulos. Os namespaces s\u00e3o usados para a cria\u00e7\u00e3o de bibliotecas de c\u00f3digo e podem ser entendidos como um conjunto de classes. Por conven\u00e7\u00e3o e organiza\u00e7\u00e3o l\u00f3gica, sempre que tivermos a necessidade de criarmos um namespace, devemos salvar todas as classes contidas nele em arquivos separados e um arquivo de c\u00f3digo por classe. Por exemplo, se nossa solu\u00e7\u00e3o possui dois namespaces com uma classe em cada, criaremos duas pastas na raiz do nosso programa, sendo cada uma delas nomeada pelo seu respectivo namespace. Abaixo temos um exemplo de organiza\u00e7\u00e3o de arquivos. |- code/ |- bin/ |- namespace1/ |------------ class1.cs |------------ class2.cs |-namespace2/ |------------ class1.cs |------------ class2.cs |------------ class3.cs |- obj/ |- Program.cs Podemos ver que nosso programa tem como diret\u00f3rio raiz a pasta \"code\". Dentro dela temos o nosso arquivo de c\u00f3digo principal Program.cs . Tamb\u00e9m podemos ver diversas classes separadas em cada pasta namespace . Isso nos permite uma manuten\u00e7\u00e3o mais simples a medida que nosso programa se torne cada vez mais complexo e refinado. Do ponto de vista do c\u00f3digo. Em c# o namespace \u00e9 declarado dentro das classes que est\u00e3o dentro dele: // c# namespace Contabil { public class Juros { public float Valor { get ; set ; } } } Tamb\u00e9m podemos importar namespaces em outros m\u00f3dulos por meio do token using : // c# using Contabil ; class MainClass { public static void Main ( string [] args ) { Contabil . Juros jurosAReceber = new Contabil . Juros (); jurosAReceber . Valor = 12345.23F ; Console . WriteLine ( $\"Juros a Receber: {jurosAReceber.Valor:C2}\" ); } } Mesmo n\u00e3o sendo o ideal, outro problema que o namespace resolve \u00e9 o de conflito de nomes de m\u00e9todos ou classes. Nos exemplos acima, s\u00f3 usamos um namespace Contabil com uma classe chamada Juros. Entretanto, poder\u00edamos, sem nenhum problema, termos criado outro namespace, Financeiro por exemplo, com uma classe chamada juros. N\u00e3o ter\u00edamos problema de conflito de nomes porque na hora de instanciarmos as classes n\u00f3s sempre fazemos refer\u00eancia ao namespace em que a classe se encontra. Partial Classes O recomendado hoje em dia \u00e9 que uma classe deve ser implementada em um \u00fanico arquivo 7 . Mas, como tudo na vida, as vezes precisamos fazer concess\u00f5es. \u00c9 poss\u00edvel definirmos uma classe em mais de um arquivo. Chamamos esse tipo de classe de partial class . A ideia \u00e9 facilitar a organiza\u00e7\u00e3o de classes muito grandes de maneis mais f\u00e1cil para manuten\u00e7\u00e3o. Esse tipo de abordagem \u00e9 especialmente relevante para programa\u00e7\u00e3o frontend de interfaces gr\u00e1ficas porque a quantidade de c\u00f3digo gerado pelo compilador \u00e9 enorme. Podemos atualizar nossa estrutura de pastas com uma partial class agora. |- code/ |- bin/ |- namespace1/ |------------ class1.cs |------------ class2.cs |-namespace2/ |------------ class1.cs |------------ class2.cs |------------ class3.cs |- partialClass1.cs |- partialClass2.cs |- obj/ |- Program.cs Desse modo podemos criar um \"peda\u00e7o\" da classe em cada arquivo separado. O c\u00f3digo ficar\u00e1 assim: // c# // parte 1 public partial class ClasseParcial { public string tarefa { get ; set ; } } // parte 2 using System ; public partial class ClasseParcial { public void ExibeTarefa () { Console . WriteLine ( \"Esu estou \" + this . tarefa ); } } No arquivo Program.cs teremos: // c# using System ; class MainClass { public static void Main ( string [] args ) { ClasseParcial classeParcial = new ClasseParcial (); classeParcial . tarefa = \"escrevendo\" ; classeParcial . ExibeTarefa (); } } A documenta\u00e7\u00e3o oficial pode ser encontrada nesse link . Heran\u00e7a Generaliza\u00e7\u00e3o e Especifica\u00e7\u00e3o Em todo processo de desenvolvimento \u00e9 normal que a solu\u00e7\u00e3o evolua com o passar do tempo e estruturas criadas anteriormente (como m\u00f3dulos) acabam evoluindo junto. Nesse contexto \u00e9 que surgem dois conceitos importantes para o nosso aprendizado: Generaliza\u00e7\u00e3o e Especifica\u00e7\u00e3o . Podemos entender como processo de Generaliza\u00e7\u00e3o a constru\u00e7\u00e3o de uma classe gen\u00e9rica a partir da abstra\u00e7\u00e3o de v\u00e1rias classes mais definidas. Como, por exemplo, ao desenvolvermos uma solu\u00e7\u00e3o que tenha v\u00e1rios objetos relacionados \u00e0 cada tipo de produto que um supermercado venda. Podemos procurar os elementos comuns em todas as classes de diferentes produtos e construir uma classe maior denominada ``produto\". Chamamos esse caminho (de baixo pra cima) de bottom-up. No caminho oposto, temos o processo de Especifica\u00e7\u00e3o . Nessa l\u00f3gica, podemos partir de uma classe maior e, pela necessidade, criamos subclasses que compartilham elementos comuns com essa classe mais geral. Como exemplo, podemos citar um sistema de gerenciamento de condom\u00ednio que pode ter a classe \"bloco\" onde vai receber todas as informa\u00e7\u00f5es e m\u00e9todos de cada bloco e, por demanda de informa\u00e7\u00f5es mais detalhadas, passemos a criar classes menores chamadas \"andar\" ou \"apartamento\" que cont\u00e9m informa\u00e7\u00f5es adicionais ao nosso objeto anterior. Esse caminho (de cima pra baixo) \u00e9 chamado de top-down. Heran\u00e7a Na cria\u00e7\u00e3o de uma classe atrav\u00e9s da generaliza\u00e7\u00e3o ou da especifica\u00e7\u00e3o \u00e9 que o conceito de heran\u00e7a \u00e9 nascido. Como estamos criando classes em termos de outras pr\u00e9-existentes, devemos descrever a rela\u00e7\u00e3o entre essas diferentes classes. No momento da defini\u00e7\u00e3o da rela\u00e7\u00e3o de heran\u00e7a podemos usar os v\u00ednculos do tipo \"\u00e9 um tipo de\" ou \"\u00e9 um\". Quando criamos uma heran\u00e7a, o objeto mais geral \u00e9 chamado de supertipo. Todos os subtipos desse objeto compartilham as caracter\u00edsticas dele e recebem novas que n\u00e3o s\u00e3o atribu\u00eddas ao supertipo. Podemos chamar os subtipos de classes derivadas , classes filhas , subclasses e etc. Por outro lado, as classes mais gerais podem ser chamadas de classes base , superclasses classes pai e etc. Existem linguagens que permite que uma subclasse receba haran\u00e7a de diferentes superclasses. Chamamos isso de heran\u00e7a m\u00faltipla e, ao contr\u00e1rio do que pode parecer, n\u00e3o \u00e9 uma ideia muito boa porque aumenta o risco de auto acoplamento. Para tanto, o c# n\u00e3o permite heran\u00e7a m\u00faltipla. Exemplo de Heran\u00e7a em c# Agora que aprendemos os conceitos, podemos aprender como criar essas rela\u00e7\u00f5es usando a linguagem c#. Partindo de uma superclasse chamada Pessoa , podemos criar as subclasses do seguinte modo: // c# // superclasse class Pessoa { [...] } // subclasses class Professor : Pessoa { [...] } class Aluno : Pessoa { [...] } Retomando nosso exemplo para o m\u00f3dulo Produto , podemos criar uma subclasse chamada BemDeConsumo : // c# using System ; class BemDeConsumo : Produto { private DateTime validade ; public DateTime Validade { get => this . validade ; set => this . validade = ( value > DateTime . Now ) ? value : DateTime . Now ; } } class BemDuravel : Produto { private in garantia ; public int Validade { get => this . garantia ; set => this . garantia = ( value > 0 ) ? value : 6 ; } } Coment\u00e1rio: N\u00e3o se assustem pela mudan\u00e7a na maneira de escrever as propriedades get e set . Esse token => \u00e9 interpretado do mesmo jeito que o par de chaves vistos anteriormente. Ao usarmos essas subclasses no nosso programa, elas ter\u00e3o os mesmo atributos e m\u00e9todos que a superclasse Produto que elaboramos durante todo esse cap\u00edtulo. Coment\u00e1rio: Existe um princ\u00edpio da programa\u00e7\u00e3o orientada \u00e0 objetos que prioria composi\u00e7\u00e3o ao inv\u00e9s da heran\u00e7a. A ideia \u00e9 que \u00e9 melhor fazer as conex\u00f5es entre classes de mesma hierarquia do que criar uma vasta linha entre superclasses e subclasses. Em tempo oportuno retomaremos essa discuss\u00e3o. Por enquanto segue esse link com esse assunto. Construtores em Classes Filhas Quando instaciamos um objeto a partir de uma classe filha, primeiro disparamos os construtores da classe pai para, depois, executarmos os construtores da subclasse. Se a classe filha n\u00e3o indicar um construtor diferente, o c# usa o construtor default da classe pai. Entretanto, \u00e9 poss\u00edvel definir quais ser\u00e3o os atributos usados tanto no processo de constru\u00e7\u00e3o herdados quanto nos nativos da subclasse. Para usarmos essa configura\u00e7\u00e3o de constru\u00e7\u00e3o, passamos os par\u00e2metros atrav\u00e9s do token : base(atributos) . Exemplo de Construtores em Classes Estendidas (Subclasses ou Classes Filhas) Para exemplo, usaremos as subclasses BemDeConsumo que j\u00e1 vimos nos exemplos passados. // c# using System ; class BemDeConsumo : Produto { private DateTime validade ; public DateTime Validade { get => this . validade ; set => this . validade = ( validade > DateTime . Now ) ? value : DateTime . Now ; } public BemDeConsumo ( string descricao , float preco , int quantidade , DateTime validade ) : base ( descricao , preco , quantidade ) { this . validade = validade ; } } No exemplo acima, o nosso construtor da classe filha receber\u00e1 4 par\u00e2metros dos quais 3 (descri\u00e7\u00e3o, pre\u00e7o e quantidade) ser\u00e3o usados no processo do construtor da classe pai. Construtores e encapsulamento s\u00e3o o primeiro passo para a garantia da corre\u00e7\u00e3o e robustez de um sistema. Sempre que usarmos a heran\u00e7a, temos que nos valer dessas t\u00e9cnicas para melhorar a qualidade dos nossos programas. Polimorfismo e Princ\u00edpios do Projeto Modular Polimorfismo de Inclus\u00e3o Nessa se\u00e7\u00e3o vamos aprender como reutilizar solu\u00e7\u00f5es de c\u00f3digo por meio do uso de hierarquia entre classes. Esse tipo de \"transforma\u00e7\u00e3o\" entre classes filhas e superclasses \u00e9 chamado de polimorfismo de inclus\u00e3o . Sobreposi\u00e7\u00e3o de M\u00e9todos (virtual e override) Podemos conceder certas liberdades aos nossos objetos derivados de superclasses. Uma dessas liberdades \u00e9 a capacidade de sobreposi\u00e7\u00e3o ou override que \u00e9 dada, quando queremos permitir que um atributo ou m\u00e9todo tenha seu funcionamento modificado nas classes filhas mantendo-se o mesmo nome que o seu referente na classe pai. Usamos o token virtual na classe pai no momento da sua constru\u00e7\u00e3o para permitir as sobreposi\u00e7\u00f5es futuras. Da mesma maneira que temos um token na classe pai, temos que usar o token override na classe filha para indicar a sobreposi\u00e7\u00e3o de atributo ou m\u00e9todo. Al\u00e9m de sobrescrever, podemos fazer uso do m\u00e9todo original da superclasse por meio do token de refer\u00eancia base 8 . Outra requisi\u00e7\u00e3o obrigat\u00f3ria no processo de sobreposi\u00e7\u00e3o \u00e9 o uso do token new na hora da cria\u00e7\u00e3o de um m\u00e9todo ou atributo de mesmo nome na classe original. Abaixo temos um exemplo de como podemos expandir um m\u00e9todo criado na classe origina por meio da sobreposi\u00e7\u00e3o. Coment\u00e1rio: At\u00e9 agora usamos v\u00e1rias vezes o token void e ainda n\u00e3o tivemos a satisfa\u00e7\u00e3o de uma defini\u00e7\u00e3o do que ele faz. O token void \u00e9 usado na constru\u00e7\u00e3o de m\u00e9todos sem retorno , ou seja, fun\u00e7\u00f5es que n\u00e3o possuem uma linha com o comando return . // c# using System ; class superClasse { public string str = \"string original\" ; // permitindo a sobrescrita por meio do token 'virtual' public virtual void mostra () { Console . WriteLine ( \"Mostra original\" ); } } class subClasse : superClasse { // criando uma vari\u00e1vel 'str' na classe filha public new string str = \"String nova\" ; // override do m\u00e9todo original public override void mostra () { Console . WriteLine ( \"-------\" ); base . mostra (); // fun\u00e7\u00e3o original Console . WriteLine ( \"-------\" ); Console . WriteLine ( \"Mostra Estendida\" ); Console . WriteLine ( \"-------\" ) } } Polimorfismo Univers\u00e3o de Inclus\u00e3o Os tr\u00eas princ\u00edpios b\u00e1sicos da programa\u00e7\u00e3o orientada \u00e0 objetos s\u00e3o: Encapsulamento Heran\u00e7a Polimorfismo J\u00e1 sabemos o que s\u00e3o os dois primeiros. Sabemos que a heran\u00e7a nos permite reaproveitar c\u00f3digos anteriores em novos contextos. Entretanto, \u00e9 raro termos aplica\u00e7\u00f5es exatamente iguais \u00e0s do momento em que as classes originais foram criadas. \u00c9 precisamente nesse contexto que surge o nosso terceiro princ\u00edpio da OOP. O Polimorfismo nos permite \"adaptar\" ou sobrepor algumas caracter\u00edstica originais trazidas pela heran\u00e7a nos objetos derivados de classes anteriormente cridas. Ele nos permite criar sobreposi\u00e7\u00f5es de m\u00e9todos derivados para o melhor aproveitamento e adapta\u00e7\u00e3o aos problemas novos. Para a exist\u00eancia do polimorfismos s\u00e3o necess\u00e1rios tr\u00eas requisitos: Heran\u00e7a Sobreposi\u00e7\u00e3o de M\u00e9todos Refer\u00eancia de uma superclasse que aponte para um objeto de uma subclasse (refer\u00eancia polim\u00f3rfica) Vamos a um exemplo de polimorfismo mas com o devido contexto. \u00c9 natural pensar que um objeto contenha um m\u00e9todo cuja sa\u00edda seja uma string com as informa\u00e7\u00f5es a respeito dele. Em c# existem m\u00e9todos nativos, ou seja, que existe por padr\u00e3o em todos os objetos, cujo um deles \u00e9 chamado toString() que retorna uma string com informa\u00e7\u00f5es sobre o objeto. Coment\u00e1rio: Mais sobre esse assunto pode ser encontrado nessa documenta\u00e7\u00e3o oficial . Mas como esse m\u00e9todo \u00e9 nativo, normalmente ele s\u00f3 tr\u00e1s algumas poucas informa\u00e7\u00f5es sobre os objetos. Pensando nos atributos de qualidade de software que aprendemos at\u00e9 agora, n\u00e3o faz sentido (ou n\u00e3o \u00e9 indicado) criarmos um m\u00e9todo novo que retorne uma string com informa\u00e7\u00f5es das nossas classes instanciadas porque j\u00e1 temos um por default. Como podemos resolver o fato desse m\u00e9todo nativo n\u00e3o ser suficientemente detalhado? Polimorfismo \u00e9 a solu\u00e7\u00e3o! Agora vamos fazer uma mudan\u00e7a no comportamento do m\u00e9todo nativo das classes em c# toString(). // c# class Produto { private int id ; private string descricao ; private float preco ; private int quantidade ; private DateTime fabricacao ; private static int contador = 0 ; private static int instancia = 0 ; [...] public override string ToString () { return $\"Produto {id}: {descricao}\\n Pre\u00e7o : { preco : C2 } \\ n Quant : { quantidade } \\ n Fabric : { fabricacao } \"; } } Coment\u00e1rio: Mas espere um segundo. Temos um override em uma classe pai?! \u00c9 isso mesmo! A raz\u00e3o disso \u00e9 que todas as classes em c# s\u00e3o, de certa maneira, classes filhas de uma classe mestre que cont\u00e9m todos os m\u00e9todos padr\u00f5es. Mesmo as classes pai. \" // c# using System ; class BemDeConsumo : Produto { private DateTime validade ; public DateTime Validade { get => this . validade ; set => this . validade = ( value > DateTime . Now ) ? value : DateTime . Now ; } // construtor public BemDeConsumo ( string descricao , float preco , int quantidade , DateTime fabricacao , DateTime validade ) : base ( descricao , preco , quantidade , fabricacao ) { this . valiade = validade ; } public override string ToString () { return base . ToString () + $\" validade : {validade}\" ; } } Coment\u00e1rio: Essa se\u00e7\u00e3o \u00e9 bem densa e importante. Pare e reflita sobre os c\u00f3digos que foram vistos aqui. Revise sempre que necess\u00e1rio. Classes Abstratas Em c# podemos definir m\u00e9todos sem declarar as suas implementa\u00e7\u00f5es, ou seja, reservamos os nomes mas n\u00e3o dizemos o que eles far\u00e3o. N\u00e3o \u00e9 de se estranhar que esses m\u00e9todos recebam a nomenclatura de m\u00e9todos abstratos . Se uma classe possui um ou mais desses m\u00e9todos ela \u00e9 chamada de classe abstrata porque n\u00e3o cont\u00e9m tudo que \u00e9 necess\u00e1rio para a constru\u00e7\u00e3o de uma classe normal. Como as classes abstratas s\u00e3o \"incompletas\", n\u00e3o podemos instanciar objetos com elas. Entretanto, podemos usar o que aprendemos de polimorfismo para \"preencher\" essas lacunas por meio das classes derivadas. Uma classe herdeira tamb\u00e9m herda os m\u00e9todos da classe abstrata, sejam eles abstratos ou n\u00e3o. Abaixo temos a cria\u00e7\u00e3o de uma classe abstrata com um m\u00e9todo abstrato. Percebam o uso do token abstract para esses casos. // c# // criacao da classe abstrata abstract class Pai { // criacao do metodo abstrato public abstract string fazNadaAinda (); } // classe filha class Filha : Pai { public override string fazNadaAinda () { Console . WriteLine ( $\"{Agora eu fa\u00e7o algo!}\" ); } } Perceba que o m\u00e9todo fazNadaAinda \u00e9 apenas declarado sem qualquer constru\u00e7\u00e3o da funcionalidade do mesmo. Se tentarmos instanciar essa classe, teremos um erro porque classes abstratas n\u00e3o podem ser instanciadas em objetos concretos. Mas podemos criar uma classe filha que dar\u00e1 o restante da l\u00f3gica necess\u00e1ria a sua instancia\u00e7\u00e3o. Abaixo temos um exemplo de um programa simples que conta at\u00e9 10 com o uso de uma classe abstrata pai. // c# namespace Program { // classe abstrata public abstract class Pai { // m\u00e9todo abstrato public abstract int fazNadaAinda (); } // classe filha public class Filha : Pai { private int contador ; public int Contador { get => this . contador ; set => this . contador = value ; } // m\u00e9todo abstrato herdado public override int fazNadaAinda () { return contador = ++ contador ; } } // programa class MainClass { public static void Main ( string [] args ) { // instancia\u00e7\u00e3o da classe filha Filha objFilha = new Filha (); // loop usando o m\u00e9todo abstrato que agora possui defini\u00e7\u00e3o while ( objFilha . Contador < 10 ) Console . WriteLine ( $\"{objFilha.fazNadaAinda()}\" ); } } } Comparando Virtual e Abstract Referente \u00e0s classes: Classes n\u00e3o podem ser virtual Clases com algum elemeto declarado como abstract devem ser abstract tamb\u00e9m Classes abstratas n\u00e3o podem ser instanciadas Referente aos membros das classes: Membros de classes criados com virtual podem ser criados na classe e sobrepostos pelas classes filhas Membros de classes criados com abstract devem ser implementados nas classes filhas por meio do token override Polimorfismo Volte nos 3 requisitos de exist\u00eancia do polimorfismo. Agora podemos ver que para a exist\u00eancia desse conceito, deve existir pelo menos duas classes de hierarquias diferentes em que exista algum grau de cria\u00e7\u00e3o gen\u00e9rica na classe original que ser\u00e1 definida na classe derivada. Para a melhor fixa\u00e7\u00e3o desse conte\u00fado, o professor nos d\u00e1 um exemplo de lista de figuras : Considere que queremos implementar uma lista de figuras gen\u00e9rica capaz de armazenar diversos tipos de objetos geom\u00e9tricos. Cada objeto ter\u00e1 informa\u00e7\u00f5es sobre coordenadas x e y; lado; cor e se possui ou n\u00e3o preenchimento. De posse dessas informa\u00e7\u00f5es, podemos definir um m\u00e9todo desenhar() que mostrar\u00e1 na tela uma representa\u00e7\u00e3o visual da figura cadastrada. Entretanto, cada figura ter\u00e1 o seu conjunto pr\u00f3prio de caracter\u00edsticas. Esse \u00e9 um caso \u00f3timo para o polimorfismo. // c# using System.Drawing ; public abstract class Figura { public int X { get ; set ;} public int Y { get ; set ;} public int Lado { get ; set ;} public Color Cor { get ; set ;} public bool Preenchido { get ; set ;} public figura ( int x , int y , int lado , Color cor , bool preenchido ) { this . X = x ; this . Y = y ; this . Lado = lado ; this . Cor = cor ; this . Preenchido = preenchido ; } // m\u00e9todo abstrato public abstract void Desenha (); } De posse dessa abstra\u00e7\u00e3o chamada Figura , podemos estender esse conceito atrav\u00e9s do polimorfismo atrav\u00e9s da cria\u00e7\u00e3o de classes filhas. // c# class Quadrado : figura { public Quadrado ( int x , int y , int lado , Color cor , bool preenchido ) : base ( x , y , lado , cor , preenchido ) { // como todos os par\u00e2metros foram // usados no construtor base // aqui fica vazio } public override void Desenha () { Console . WriteLine ( $\"Desenhando o Quadrdo\" ) } } class Circulo : Figura { public Circulo ( int x , int y , int lado , Color cor , bool preenchido ) : base ( x , y , lado , cor , preenchido ) { // como todos os parametros foram // usados no construtor base // aqui fica vazio } public override void Desenha () { Console . WriteLine ( $\"Desenhando o Circulo\" ) } } Nosso programa agora \u00e9 capaz (hipoteticamente) de construir figuras que sejam quadrados e c\u00edrculos. Vejam como usamos o polimorfismo para a constru\u00e7\u00e3o dessa solu\u00e7\u00e3o. Podemos criar 2 objetos do seguinte modo: // c# class MainClass { public static Figura [] figuras = new figura [ 10 ]; public static int numfig = 0 ; public static void Main ( string [] args ) { figuras [ numFig ++ ] = new Quadrado ( 10 , 20 , 50 , Color . Red , true ); figuras [ numFig ++ ] = new Circulo ( 100 , 225 , 80 , Color . Blue , false ); for ( int pos = 0 ; pos < numFig ; pos ++ ) { figuras [ pos ]. Desenha (); } } } Coment\u00e1rio: Se ficou na d\u00favida, lembre-se do que aprendemos sobre vetores na disciplina de abstra\u00e7\u00e3o de dados. Classes e Membros Selados (sealed) Da mesma maneira que aprendemos como permitir o polimorfismo, o c# tamb\u00e9m nos permite impedir que certas classes ou membros de classe sofram heran\u00e7a ou polimorfismo. Para impedir que uma classe sofra hierarquia, basta defini-la com o token sealed . Isso automaticamente torna esse classe um classe final da hierarquia. Quando o assunto \u00e9 um membro de classe (atributo, m\u00e9todo ou propriedade) a ideia \u00e9 bem parecida. Basta usarmos o token sealed para impedir que outros programadores fa\u00e7am uma modifica\u00e7\u00e3o em algum membro de classe que n\u00e3o temos a inten\u00e7\u00e3o que seja alterado por meio de um override . Como exemplo, o professor da mat\u00e9ria nos d\u00e1 um m\u00e9todo de valida\u00e7\u00e3o de usu\u00e1rio: // c# protected sealed bool validateUser () Se n\u00e3o atribuirmos o selamento do m\u00e9todo, \u00e9 poss\u00edvel que algum programador mal intencionado possa modificar nosso m\u00e9todo por algo como: // c# protected override bool validateUser () { return true ; } Desse modo, nosso m\u00e9todo de valida\u00e7\u00e3o se tornou completamente in\u00fatil. Entretanto, da maneira que constru\u00edmos, o programa do programador mal intencionado retornar\u00e1 um erro porque ele est\u00e1 tentando usar polimorfismo em um membro de classe selado. Outra vantagem al\u00e9m da seguran\u00e7a \u00e9 a performance. Como aquela classe n\u00e3o ser\u00e1 mais hierarquizada, o compilador trabalhar\u00e1 com ela de um modo a n\u00e3o se preocupar com associa\u00e7\u00f5es din\u00e2micas existentes em classes com polimorfismo. Comparando Private e Sealed Uma d\u00favida que pode surgir \u00e9 a respeito da diferen\u00e7a pr\u00e1tica entre usarmos o escopo private para controle de acesso e o sealed para controle de hierarquia. Vamos aos comparativos: Private N\u00e3o podem ser declarados no namespace (apenas dentro de uma classe) N\u00e3o permitem inst\u00e2ncias Acesso aos membros apenas no bloco de declara\u00e7\u00e3o Sealed Podem ser declaradas no namespace Permitem instanciamento (dependendo se for public, private ou protected) Membros de inst\u00e2ncias podem ser acessados por meio dos seus objetos e m\u00e9todos Em uma an\u00e1lise b\u00e1sica, o private tamb\u00e9m \u00e9 um tipo de controle. Mas o sealed permite que as classes ainda permitam que seus m\u00e9todos sejam acess\u00edveis \u00e0s classes filhas sem que possam alterar seus membros e, no caso de uma classe selada, temos a vantagem de instanciamento e cria\u00e7\u00e3o no namespace. Abaixo temos um exemplo da implementa\u00e7\u00e3o desses conceitos. // c# using System ; namespace ClassesSealed { class Extensivel { public virtual void Primeiro () { Console . WriteLine ( \"Extens\u00edvel: primeiro m\u00e9todo.\" ); } public virtual void Segundo () { Console . WriteLine ( \"Extens\u00edvel: segundo m\u00e9todo.\" ); } } // Aqui temos uma classe estend\u00edvel com dois procedimentos que apenas imprimem sa\u00eddas no // terminal. Agora vamos acompanhar como podemos interagir com ela usando o token `sealed`. // classe com membro selado class MembroSelado : Extensivel { public sealed override void Primeiro () { Console . WriteLine ( \"Membro Selado: primeiro m\u00e9todo.\" ); } public override void Segundo () { Console . WriteLine ( \"Membro Selado: segundo m\u00e9todo.\" ); } } // classe selada filha da classe de membros selados sealed class Selada : MembroSelado { // Tentativa de sobrepor um m\u00e9todo selado // error: 'Selada.Primeiro()': cannot override inherited member 'MembroSelado.Primeiro()' protected override void Primeiro () { Console . WriteLine ( \"Selada: primeiro m\u00e9todo.\" ); } // esse nao retorna erro public override void Segundo () { Console . WriteLine ( \"Selada: segundo m\u00e9todo.\" ); } } // Tentativa de extender uma classe selada. // error: 'Sobreposi\u00e7\u00e3o': cannot derive from sealed type 'Selada' class Sobreposicao : Selada { protected override void Primeiro () { Console . WriteLine ( \"Sobreposicao: primeiro m\u00e9todo.\" ); } public override void Segundo () { Console . WriteLine ( \"Sobreposicao: segundo m\u00e9todo.\" ); } } class MainClass { public static void Main ( string [] args ) { Console . WriteLine ( \"O c\u00f3digo n\u00e3o compila.\" ); } } } Polimorfismo Param\u00e9trico Tudo o que estudamos sobre polimorfismo que usa heran\u00e7a para reutiliza\u00e7\u00e3o de c\u00f3digos com a esten\u00e7\u00e3o dos m\u00e9todos \u00e9 chamado do polimorfismo de inclus\u00e3o . Agora, vamos aprender sobre outro tipo de polimorfismo. Imagine que temos que resolver um problema em uma classe e, no processo de pondera\u00e7\u00e3o da solu\u00e7\u00e3o, nos deparamos com uma outra classe que cont\u00e9m um m\u00e9todo que resolve o nosso problema. Podemos reutilizar m\u00e9todos entre classes que n\u00e3o compartilham a mesma hierarquia? A resposta \u00e9 sim. Isso \u00e9 o que chamamos de polimorfismo param\u00e9trico . Nesse tipo de polimorfismo, n\u00f3s n\u00e3o precisamos instanciar um novo objeto a partir da classe. Podemos fazer uso diretamente dos m\u00e9todos desse tipo especial de classe chamada de classe gen\u00e9rica . Tipos Gen\u00e9ricos Tal qual o polimorfismo de inclus\u00e3o, teremos um novo token usado na constru\u00e7\u00e3o das classes em que usaremos o polimorfismo param\u00e9trico. Chamamos de classes gen\u00e9ricas as classes que s\u00e3o criadas sem um tipo de dados especificado. O tipo de dado que essa classe trabalhar\u00e1 ser\u00e1 passado como um par\u00e2metro 9 . A declara\u00e7\u00e3o de uma classe gen\u00e9rica \u00e9 feita do mesmo modo da declara\u00e7\u00e3o de uma classe normal com a inclus\u00e3o do token <> ap\u00f3s o nome da classe que dar\u00e1 a declara\u00e7\u00e3o do tipo. A declara\u00e7\u00e3o de um objeto instanciado de uma classe gen\u00e9rica \u00e9 feita com a passagem do par\u00e2metro do tipo de dado a ser manipulado no objeto. Diferente das classes abstratas, n\u00e3o precisamos instanciar com a cria\u00e7\u00e3o de um novo objeto nomeado. Podemos apenas passar o tipo de dado e fazer uso dos m\u00e9todos da classe diretamente por meio de um ponto seguido do nome do m\u00e9todo ( classeGenerica.metodo(new T) ). Assim como os tipos abstratos, dentro de uma classe gen\u00e9rica podemos ter membros de classes (m\u00e9todos, atributos e propriedades) passados como sendo de tipo gen\u00e9ricos. A \u00fanica condi\u00e7\u00e3o \u00e9 que seja usada a vari\u00e1vel declarada na assinatura da classe (ela est\u00e1 dentro dos sinais <> . Abaixo temos um exemplo de constru\u00e7\u00e3o de um programa que julga se dois conjuntos s\u00e3o disjuntos 10 . Coment\u00e1rio: N\u00e3o se preocupe se n\u00e3o entender o algoritmo de primeira. Eu tentei ser bem generoso nos coment\u00e1rios mas esse programa \u00e9, na minha opini\u00e3o, desafiador de ser compreendido por quem n\u00e3o tem um background de matem\u00e1tica e programa\u00e7\u00e3o um pouco desenvolvido. Leia quantas vezes for necess\u00e1rio e, se a d\u00favida persistir, entra em contato comigo pela issue do github. // c# using System ; namespace Generics { // criacao da classe generica public class Conjuntos < T > { // criacao de uma funcao como membro estatico // que retorna um booleano para os vetores \"s\" e \"w\" // do tipo de dado definido por \"<T>\" public static bool disjuntos ( T [] s , T [] w ) { // loop em todos os elementos do vetor \"s\" for ( int i = 0 ; i < s . Length ; i ++ ) { // loop em todos so elementos do vetor \"w\" for ( int j = 0 ; j < w . Length ; j ++ ) { // Teste: O elemento s[i] \u00e9 igual ao w[j]? // se sim, eles possuem algum elemento em comum // logo, nao sao conjuntos disjuntos! if ( s [ i ]. Equals ( w [ j ])) return false ; } } // se nenhum dos elementos dos dois conjuntos // for igual ao do outro, entao sao conjuntos // disjuntos! return true ; } } // Programa Principal class MainClass { public static void Main ( string [] args ) { if ( Conjuntos < int > . disjuntos ( new int [] { 1 , 3 , 5 }, new int [] { 2 , 4 , 6 })) { Console . WriteLine ( \"Conjuntos Disjuntos!\" ); } else { Console . WriteLine ( \"conjuntos n\u00e3o Disjuntos!\" ); } } } } Perceba como usamos o m\u00e9todo disjuntos() sem que houvesse a necessidade de instanciamento de um novo objeto com o token new Conjuntos . S\u00f3 precisamos dizer qual o tipo de dado e construir diretamente no m\u00e9todo os conjuntos que seriam avaliados pelo m\u00e9todo. Cole\u00e7\u00f5es Uma cole\u00e7\u00e3o ou collection \u00e9 um objeto que agrupa m\u00faltiplos objetos. Elas padronizam o tratamento dos objetos dentro do programa por meio da uma interface gen\u00e9rica. Mas paremos pra pensar 1 minuto. N\u00f3s j\u00e1 n\u00e3o t\u00ednhamos definido um conjunto de objetos como um namespace ? Sim! Uma cole\u00e7\u00e3o \u00e9 um namespace nativo que nos fornecem m\u00e9todos otimizados para o tratamento de dados de maneira a tornar nossos programas o mais eficiente poss\u00edvel. Coment\u00e1rio: Eu gosto de pensar nas cole\u00e7\u00f5es como um \"kit de ferramentas\" que j\u00e1 nos fornecem maneiras de lidar com problemas comuns. Mais vale aprender bem quais ferramentas o .NET nos d\u00e1 nativamente do que perder horas e horas reinventando a roda. Aqui vamos aprender sobre algumas das cole\u00e7\u00f5es que certamente usaremos v\u00e1rias vezes ao longo da nossa trajet\u00f3ria de desenvolvedores c#. Mas antes de irmos direto para elas, vamos aprender algumas caracter\u00edsticas em comum que podemos avaliar para definir quando e onde implementar alguns de seus objetos. Podemos elencar as seguintes funcionalidades comuns \u00e0s cole\u00e7\u00f5es: Adicionar itens Remover itens Pesquisar itens Substituir itens Copiar conjuntos de itens ou clonar Retornar as propriedades de capacidade Cole\u00e7\u00f5es em C# Existem 3 namespaces com as collections em c# (basta clicar para acessar a documenta\u00e7\u00e3o oficial da microsoft): System.Collections.Generic - Cole\u00e7\u00f5es gen\u00e9ricas usando polimorfismo param\u00e9trico System.Collectons.Concurrent - Cole\u00e7\u00f5es gen\u00e9ricas para aplica\u00e7\u00f5es muilt-thread System.Collections - Cole\u00e7\u00f5es n\u00e3o gen\u00e9ricas que usam polimorfismo de inclus\u00e3o Aqui est\u00e3o alguns objetos da cole\u00e7\u00e3o System.Collections.Generic : Dictionary<TKey,TValue> List<T> Queue<T> SortedList<TKey,TValue Stack<T> Aqui est\u00e3o alguns objetos da cole\u00e7\u00e3o System.Collections.Concurrent : BlockingCollection<T> ConcurrentDictionary<TKey,TValue> ConcurrentQueue<T> ConcurrentStack<T> Aqui est\u00e3o alguns objetos da cole\u00e7\u00e3o System.Collections : ArrayList Hashtable Queue Stack Por agora, vamos apenas citar a exist\u00eancia dessas cole\u00e7\u00f5es mas \u00e9 mandat\u00f3rio que saibamos usar esses objetos para uma produ\u00e7\u00e3o de software mais profissional com c#. Classe Collection<T> Essa cole\u00e7\u00e3o fornece a base para implementa\u00e7\u00e3o de tipos gen\u00e9ricos de dados. As classes anteriores manipulam os m\u00e9todos fornecidos justamente por Collection<T> . A documenta\u00e7\u00e3o oficial dessa classe pode ser encontrada nesse link . Agora vamos aprender um pouco sobre essa classe. Construtores: Podemos iniciar uma cole\u00e7\u00e3o vazia com Collectoin<T>() ou podemos passar os valores de um objeto anteriormente criado como, por exemplo, Collection<T>(IList<T>) . Propriedades: Count - Retorna o n\u00famero de elementos Items - Retorna uma lista dos elementos do tipo Ilist 11 Item[Int32] - Retorna ou altera um elemento em uma posi\u00e7\u00e3o da lista. Index inicial \u00e9 0. M\u00e9todos de manipula\u00e7\u00e3o de elementos: Add(T) - Insere um elemento no final Remove(T) - Remove a primeira ocorr\u00eancia do elemento SetAt(Int32, T) - Insere um elementa na posi\u00e7\u00e3o Remove(Int32) - Remove um elemento na posi\u00e7\u00e3o IndexOf(T) - Retorna o index de um elemento Contains(T) - Bolleano para verificar se um elemento est\u00e1 na cole\u00e7\u00e3o M\u00e9todos de manipula\u00e7\u00e3o de conjuntos de elementos: Clear() - Remove todos os elementos CopyTo(T[], Int32) - Copia a Collection para um vetor Equals(Object) - Compara duas cole\u00e7\u00f5es A vantagem do uso do Collection<T> \u00e9 que o c# j\u00e1 sabe como otimizar o uso de mem\u00f3ria para esse tipo gen\u00e9rico de dados. Isso retira a necessidade de gest\u00e3o de armazenamento para solu\u00e7\u00f5es que envolvam manipula\u00e7\u00e3o de grandes volumes de dados. Delegates, Fun\u00e7\u00f5es Lambda e Eventos Para o fechamento da nossa unidade de polimorfismo param\u00e9trico temos tr\u00eas conceitos avan\u00e7ados de programa\u00e7\u00e3o. Delegates (Delega\u00e7\u00f5es) Essa estrutura nos permite passar uma refer\u00eancia de um m\u00e9todo para outras classes. A sintaxe do m\u00e9todo com delega\u00e7\u00e3o \u00e9 parecida com a de um m\u00e9todo qualquer com a adi\u00e7\u00e3o do token delegate : // c# public delegate void Exibir ( string mensagem ); N\u00f3s iniciamos o delegate passando o m\u00e9todo como par\u00e2metro. Por exemplo, se quisermos usar o m\u00e9todo Exibir() acima para executar m\u00e9todos que mostram mensagens. Podemos fazer do seguinte modo: \" // c# public class Program { // Metodo que printa mensagem no console public static void MensagemConsole ( string mensagem ) { Console . WriteLine ( mensagem ); } // Delegate com o tipo string de input e // tipo void de metodo public class Mensageiro { public delegate void Exibir ( string mensagem ); } // Como o nosso delegate foi criado para um void com string // e o nosso metodo MensagemConsole tambem possui essas // caracteristicas, podemos \"puxar\" esse metodo para // o nosso procedimento delegado Mensageiro public static void Main ( string [] args ) { Mensageiro . Exibir exibir = new Mensageiro . Exibir ( MensagemConsole ); exibir ( \"Mensagem no console!\" ); } } Alguns podem se perguntar qual a utilidade de se puxar um m\u00e9todo de outra classe. Agora observe essa modifica\u00e7\u00e3o do c\u00f3digo: // c# namespace Program { public class Class1 { // Metodo que printa mensagem no console public static void MensagemConsole ( string mensagem ) { Console . WriteLine ( mensagem ); } // Delegate com o tipo string de input e // tipo void de metodo public class Mensageiro { public delegate void Exibir ( string mensagem ); } } public class Class2 { // Como o nosso delegate foi criado para um void com string // e o nosso metodo MensagemConsole tambem possui essas // caracteristicas, podemos \"puxar\" esse metodo para // o nosso procedimento delegado Mensageiro public static void Main ( string [] args ) { Class1 . Mensageiro . Exibir exibir = new Class1 . Mensageiro . Exibir ( Class1 . MensagemConsole ); exibir ( \"Mensagem no console!\" ); } } } Perceba que agora, estamos fazendo refer\u00eancia ao m\u00e9todo MensagemConsole no delegate que est\u00e3o em outra classe sem qualquer rela\u00e7\u00e3o de hierarquia entre as classes 1 e 2! O poder do delegate est\u00e1 justamente na capacidade de passarmos m\u00e9todos sem o v\u00ednculo formal das hierarquias. A documenta\u00e7\u00e3o oficial dessa estrutura \u00e9 encontrada nesse link . Fun\u00e7\u00f5es An\u00f4nimas (Lambda) Essa \u00e9 uma das estruturas que possuem v\u00e1rias implanta\u00e7\u00f5es pr\u00e1ticas. At\u00e9 agora, todas as fun\u00e7\u00f5es que criamos tinham de ter um nome associado. Entretanto, c# e outras linguagens modernas permitem criar fun\u00e7\u00f5es espec\u00edficas que podem ser executadas sem a necessidade de cria\u00e7\u00e3o de um objeto para elas. Temos algumas maneiras de usar as fun\u00e7\u00f5es lambda em c#. A primeira delas \u00e9 com uso do delegate: // c# classe Program { // delegate com int e dois valores inteiros public delegate int Soma ( int x , int y ); static void Main ( string [] args ) { // aqui estamos declarando a forma // funcional da funcao Soma(x,y) // sintaxe 1 Soma soma1 = ( int x , int y ) => { int result = x + y ; return result ; } // sintaxe 2 Soma soma2 = ( x , y ) => ( x + y ); } } Agora vamos aprender como usar fun\u00e7\u00f5es lambdas com o uso da classe Func<T, TResult> // c# class Program { static void Main ( string [] args ) { // sintaxe 1 Func < int , int , int > soma1 = ( int x , int y ) => { int result = x + y ; return result ; } // sintaxe 2 Func < int , int , int > soma2 = ( x , y ) => ( x + y ); } } Events Por fim, vamos aprender como uma classe pode publicar notifica\u00e7\u00f5es para classes assinantes. Isso mesmo, estamos falando aqui de comunica\u00e7\u00e3o entre classes. Esse modelo de comunica\u00e7\u00e3o \u00e9 chamado de Publish-Subscribe (Pub-Sub) e funciona baseado em dois tipos de classes. As classes assinantes se registram na classe geradora dos eventos para que as mesmas sejam notificadas quando uma mudan\u00e7a de estado acontecer. Os exemplos mais cl\u00e1ssicos s\u00e3o relacionados \u00e0 intera\u00e7\u00e3o do usu\u00e1rio humano como: clique do mouse, novo email, teclas apertadas, c\u00f3pia de arquivo finalizada e etc. A classe assinante registra um m\u00e9todo de chamada de retorno , denominado de callback 12 que \u00e9 executado quando a condi\u00e7\u00e3o do evento \u00e9 satisfeita na classe geradora. Chamamos de hook o processo de adicionar um callback em um evento e, logicamente, chamamos o contr\u00e1rio disso de unhook . Abaixo temos um exemplo em que \"acordaremos\" as classes registradas no alarme: // c# // Classe geradora class Alarme { // delegate Acordar que sera usado como // callback do evento public delegate void Acordar ( string msg ); // evento que vai chamar o metodo Acordar // em cada assinante sendo que sao as classes // assinantes que vao inserir os callbacks public event Acordar TempoEsgotado ; // void para disparar o evento public void DisparaEvento () { AoEsgotarTempo (); } public void AoEsgotarTempo () { // verifica se existem assinantes do evento // se alguma classe tiver assinado por // meio do hook de callback o TempoEsgotado nao // vai ser null if ( TempoEsgotado != null ) { TempoEsgotado ( \"Tempo Esgotado!\" ); } } } // Classe assinante class Program { // callback da classe assinante public static void MensagemConsole ( string msg ) { Console . WriteLine ( mensagem ); } // programa static void Main ( string [] args ) { Alarme alarme = new Alarme (); // hook do callback no alarme com o // metodo MensagemConsole alarme . TempoEsgotado += MensagemConsole ; // disparando o evento para receber // a mensagem do callback alarme . DisparaEvento (); } } Coment\u00e1rio: De todas as se\u00e7\u00f5es desse microfundamento, essa \u00e9 provavelmente a que mais cont\u00e9m conceitos que diferenciam os programadores .NET iniciantes dos mais experientes. O uso dessas tr\u00eas categorias de polimorfismo param\u00e9trico fazem muita diferen\u00e7a na qualidade do seu c\u00f3digo e devem ser entendidas muito profundamente. Projeto Orientado para Objetos O objetivo de qualquer programador profissional \u00e9 produzir c\u00f3digos de qualidade. Nessa \u00faltima parte do microfundamento, vamos aprender sobre alguns normativos que regem os princ\u00edpios e pr\u00e1ticas para constru\u00e7\u00e3o de programas com essas qualidades. Os princ\u00edpios que vamos aprender aqui s\u00e3o uma maneira de se produzir c\u00f3digo f\u00e1cil de ler, f\u00e1cil de modificar e f\u00e1cil de testar. De modo a permitir que um time de desenvolvedores atue de forma colaborativa. Coment\u00e1rio: Uma boa maneira de saber se estamos indo bem \u00e9 sempre olhar os nossos c\u00f3digos se perguntando \"Outra pessoa poderia continuar o meu trabalho se eu sair desse projeto?\" ou \"Caso eu precise trabalhar com algu\u00e9m, essa pessoa conseguir\u00e1 entender o meu c\u00f3digo apenas olhando diretamente para ele?\". Princ\u00edpios SOLID Os princ\u00edpios que vamos estudar agora foram introduzidos por Robert C. Martin (tamb\u00e9m conhecido como Uncle Bob) no artigo Design Principles and Design Patterns . Posteriormente, os conceitos foram desenvolvidos por Michael Feathers e ganharam o acr\u00f4nimo SOLID. Nos \u00faltimos 20 anos, esses princ\u00edpios t\u00eam impacto fortemente o mundo das programa\u00e7\u00e3o orientada \u00e0 objetos e devem ser compreendidos e internalizados por quem se prop\u00f5e a entrar nessa jornada. Os princ\u00edpios SOLID s\u00e3o um conjunto de boas pr\u00e1ticas de projeto de software que nos permitem construir sistemas com extensibilidade, reusabilidade, adaptabilidade e manutenibilidade. O objetivo \u00e9 manter a complexidade de uma solu\u00e7\u00e3o constante mesmo com o crescimento do tamanho dos m\u00f3dulos. Os princ\u00edpios SOLID s\u00e3o: S ingle Responsability Principle (SRP) O pen/Closed Principle (OCP) L iskov Substitution Principle (LSP) I nterface Segregation Principle (ISP) D ependency Inversion Principle (DIP) Fonte: Martin, Robert Cecil (2002). Agile software development: principles, patterns, and practices. Upper Saddle River, NJ: Pearson Education. ISBN 9780135974445. Single Responsability Principle - SRP \"Uma classe deve ter apenas um motivo para mudar, o que significa que ele deve ter uma \u00fanica fun\u00e7\u00e3o\" Se, na constru\u00e7\u00e3o das classes, usarmos os outros princ\u00edpios de coes\u00e3o e encapsulamento que j\u00e1 aprendemos anteriormente, o SRP \u00e9 consequ\u00eancia direta. Como cada classe deve ter uma raz\u00e3o de existir o mais espec\u00edfica e clara poss\u00edvel, cada classe deve ser facilmente definida e deve ter apenas uma fun\u00e7\u00e3o. Para Roger Whitney, 2016, Advanced Object-Oriented Design \\& Programming, se voc\u00ea precisar de mais de 25 palavras (uma frase) com o uso dos conectivos \"e\" ou \"ou\" para definir o que \u00e9 uma determinada classe, significa que o SRP j\u00e1 n\u00e3o foi observado. As classes precisam ter uma raz\u00e3o objetiva e compacta para existir. Open/Closed Principle - OCP \"Objetos ou entidades devem ser abertos para extens\u00e3o, mas fechados para modifica\u00e7\u00e3o\" Aberto para extens\u00e3o significa que temos que pensar em classes abstratas e interfaces que permitam novas classes concretas que estendam suas fun\u00e7\u00f5es sem que haja modifica\u00e7\u00e3o nas classes anteriores. Isso evita termos que adaptar uma classe que seja refer\u00eancia para v\u00e1rias outras constantemente, evitando o risco de quebras em cascata por conflito de heran\u00e7a. Liskov Substitution Principle - LSP \"Se q(x) \u00e9 uma propriedade demonstr\u00e1vel dos objetos x de tipo T. ent\u00e3o q(y) deve ser verdadeiro para objetos y de tipo S, onde S \u00e9 subtipo de T\" Essa maneira de definir \u00e9 derivada da formaliza\u00e7\u00e3o matem\u00e1tica mas, em resumo, se S e \u00e9 uma subclasse de T. Se temos uma propriedade q() que funciona em T, essa propriedade deve ser herdada para S devido a sua heran\u00e7a. Isso implica que podemos sempre Substituir objetos por seus subtipos sem preju\u00edzo porque todos os m\u00e9todos do objeto anterior devem ser herdados pelos objetos filhos. Interface Segregation Principle - ISP \"Classes n\u00e3o devem ser for\u00e7adas a implementar uma interface que n\u00e3o usam, ou seja, n\u00e3o devem ser for\u00e7adas a depender de m\u00e9todos que n\u00e3o usam\" Como contraponto ao LSP, uma classe n\u00e3o deve ter comportamentos (ou m\u00e9todos) que n\u00e3o fa\u00e7am sentidos a ela. Esse controle \u00e9 obtido pela separa\u00e7\u00e3o em classes diferentes para que as classes sempre possuam apenas o necess\u00e1rio. Dependency Inversion Principle - DIP \"M\u00f3dulos de alto n\u00edvel n\u00e3o devem depender de m\u00f3dulos de baixo n\u00edvel. Ambos devem depender de abstra\u00e7\u00f5es\" Na constru\u00e7\u00e3o de solu\u00e7\u00f5es complexas, temos que evitar referenciamento para objetos concretos. As refer\u00eancias devem ser sempre para tipos abstratos que podem ser instanciados em situa\u00e7\u00f5es concretas de uso. Outra implica\u00e7\u00e3o do DIP \u00e9 que n\u00e3o devemos derivar classes de uma classe concreta. As classes base devem ser sempre abstratas porque assim permitem que as subclasses sejam expandidas a medida que novos problemas e melhorias s\u00e3o inseridas no processo. Nenhum m\u00e9todo deve sobrescrever os que foram herdados da sua classe base. Ao fazer isso, corremos o risco de violar o LSP porque aumentamos o risco da propriedade (ou m\u00e9todo) da classe base n\u00e3o se comportar como o previsto na classe derivada ap\u00f3s a sua modifica\u00e7\u00e3o. Padr\u00f5es de Projeto Para concluir nossa jornada (inicial) no mundo da programa\u00e7\u00e3o modular, vamos aprender mais sobre Padr\u00f5es de Projetos que s\u00e3o maneiras de organizar uma solu\u00e7\u00e3o para resolver problemas relativamente comuns ao processo de Engenharia de Software. Eles s\u00e3o modelos que precisam ser adaptados aos casos concretos e n\u00e3o metodologias dogm\u00e1ticas. Um padr\u00e3o foca apenas nos aspectos essenciais da constru\u00e7\u00e3o do projeto e os detalhes s\u00e3o omitidos porque cada projeto possui especificidades \u00fanicas. Fonte: Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. 1995. Design patterns: elements of reusable object-oriented software. Addison-Wesley Longman Publishing Co., Inc., USA. O come\u00e7o dos padr\u00f5es computacionais \u00e9 referido \u00e0 Beck e Cunningham que apresentaram suas ideias na confer\u00eancia OOPSLA (Object-Oriented Programming, Systems, Languages, and Applications) em 1987 para uma linguagem famosa na \u00e9poca chamada Smalltalk. Posteriormente, os trabalhos de Erich Gamma, Richard Helm, Ralph Johnson e John Vlissides que ficaram conhecidos como \"Gang of Four\" foram respons\u00e1veis pela populariza\u00e7\u00e3o dessa linha de conhecimento no processo de constru\u00e7\u00e3o de solu\u00e7\u00f5es. Os padr\u00f5es apresentados por eles em 1995 ficaram conhecidos como GoF Patterns. O foco dos padr\u00f5es \u00e9 a reutiliza\u00e7\u00e3o de c\u00f3digo . Esse objetivo \u00e9 alcan\u00e7ado porque os padr\u00f5es capturam anos de exper\u00eancia em Engenharia de Software e fornecem solu\u00e7\u00f5es para defini\u00e7\u00e3o da Arquitetura dos sistemas. Como o insumo desse conhecimento \u00e9 a pr\u00e1tica de v\u00e1rios profissionais, o resultado da utiliza\u00e7\u00e3o desses padr\u00f5es costuma ser satisfat\u00f3rio se seguido da maneira correta. Estrutura de um Padr\u00e3o de Projeto Existe uma lista de elementos comuns em um padr\u00e3o de projeto: Nome : Resume a proposta da solu\u00e7\u00e3o Problema : Resumo o objetivo a ser resolvido Contexto : Situa\u00e7\u00f5es de aplica\u00e7\u00e3o ideal Solu\u00e7\u00e3o : Relacionamento entre as entidades Exemplo : Diagramas ilustrativos da solu\u00e7\u00e3o A capacidade de reutiliza\u00e7\u00e3o dos padr\u00f5es de projeto \u00e9 devida a duas caracter\u00edsticas centras nas linguagens orientadas \u00e0 objeto: composi\u00e7\u00e3o e heran\u00e7a. A composi\u00e7\u00e3o \u00e9 entendida como o reuso por delega\u00e7\u00e3o . Se um objeto n\u00e3o pode executar determinada tarefa (porque poder\u00edamos ferir um princ\u00edpio SOLID, por exemplo) ele delega essa fun\u00e7\u00e3o a outro objeto atrav\u00e9s da troca de mensagens. Desse modo podemos ter o reuso de fun\u00e7\u00f5es entre objetos que n\u00e3o compartilham graus de hierarquia. Padr\u00f5es com foco em composi\u00e7\u00e3o s\u00e3o chamados de padr\u00f5es de escopo de objeto . A heran\u00e7a \u00e9 uma abordagem que usa so v\u00ednculos entre subclasses e superclasses. Esse tipo de reuso costuma ser mais simples de implementar porque a l\u00f3gica \u00e9 mais natural e intuitiva, contudo, temos que tomar bastante cuidado para n\u00e3o violarmos os princ\u00edpios da oculta\u00e7\u00e3o da informa\u00e7\u00e3o nessa din\u00e2mica entre classes derivadas e classes principais. Outro risco \u00e9 a viola\u00e7\u00e3o do LSP 13 . Padr\u00f5es com foco na heran\u00e7a s\u00e3o chamados de padr\u00f5es de escopo de classe . Existe uma regra de bolso no mercado que \u00e9 incorporada na frase \"favorecer composi\u00e7\u00e3o sobre heran\u00e7a\". Mesmo que o c# permita uma ampla flexibilidade nessas duas abordagens, as vezes \u00e9 melhor abrir m\u00e3o de funcionalidades dispon\u00edveis em favor de um maior controle de gest\u00e3o das solu\u00e7\u00f5es desenvolvidas. Tipos de Padr\u00f5es No livro da Gang of Four (1995) temos a classifica\u00e7\u00e3o dos pradr\u00f5es em 3 grandes grupos: Criacionais, Estruturais e Comportamentais. Padr\u00f5es Criacionais s\u00e3o padr\u00f5es que focam na abstra\u00e7\u00e3o do processo de cria\u00e7\u00e3o de objetos. Costumam ser mais relacionados \u00e0 inicializa\u00e7\u00e3o e configura\u00e7\u00e3o de objetos. Alguns exemplos de padr\u00f5es desse grupo s\u00e3o: Abstract Factory, Builder, Prototype, Singleton. Padr\u00f5es Estruturais tratam do desacoplamento entre interface e implmenta\u00e7\u00e3o dos objetos. Est\u00e3o mais relacionados \u00e0 composi\u00e7\u00e3o de objetos. Exemplos de padr\u00f5es desse tipos s\u00e3o: Object Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy. Padr\u00f5es Comportamentais s\u00e3o focados na defini\u00e7\u00e3o de mecanismos de colabora\u00e7\u00e3o entre objetos. Mais relacionados \u00e0 distribui\u00e7\u00e3o de responsabilidades e padroniza\u00e7\u00e3o de comunica\u00e7\u00f5es. Exemplos de padr\u00f5es desse tipos s\u00e3o: Chain of Responsability, Comand Iterator, Mediator, Memento, Observer, State, Strategy, Visitor. Coment\u00e1rio: Essa parte final \u00e9 s\u00f3 uma introdu\u00e7\u00e3o geral aos conceitos de padr\u00f5es de projeto. Existe um mundo a ser explorado nesse t\u00f3pico mas agora estamos cientes da exist\u00eancia dele e j\u00e1 temos algumas refer\u00eancias iniciais para aprofundarmos o conhecimento. Bibliografia MCGEE, Pat. C#: A Beginner's Guide . New York: McGraw-Hill Education, 2014 (O\u2019Reilly Media). MARTIN, Robert C.; MARTIN, Micah; TORTELLO, Jo\u00e3o E. N. Princ\u00edpios, padr\u00f5es e pr\u00e1ticas \u00e1geis em C# . Porto Alegre: Bookman, 2011. E-book ISBN 9788577808427. GAMMA, Erich et al. Padr\u00f5es de projeto: solu\u00e7\u00f5es reutiliz\u00e1veis de software orientado a objetos. Porto Alegre: Bookman, 2000. E-book. ISBN 9788577800469. LISKOV, Barbara: Data abstraction and hierarchy , 1987. MARTIN, Robert C. Agile software development: principles, patterns, and practices . Upper Saddle River, NJ: Pearson Education. 2002. ISBN 9780135974445. Esse conceito \u00e9 visto no estudo das fun\u00e7\u00f5es matem\u00e1ticas. \u21a9 Usaremos muitas vezes esse conceito ao longo dessa mat\u00e9ria. \u21a9 Uma das defini\u00e7\u00f5es da palavra inst\u00e2ncia no contexto da ci\u00eancia da computa\u00e7\u00e3o \u00e9 justamente \"um objeto cujo comportamento e estado s\u00e3o definidos por uma classe\". \u21a9 S\u00f3 prossiga quando essa frase tiver pleno sentido na sua mente. \u21a9 Que tamb\u00e9m podemos chamar de classe. \u21a9 Ou seja, atributo ou m\u00e9todo da classe. \u21a9 Os manuais de qualidade de c\u00f3digo ainda imp\u00f5e um limite m\u00e1ximo de 100 linhas para essas implementa\u00e7\u00f5es. Programador bom \u00e9 programador que resolve o problema com poucas linhas de c\u00f3digo. \u21a9 Ele vai funcionar parecido com o token de refer\u00eancia this, por exemplo, base.function(). \u21a9 Dai o nome param\u00e9trico. \u21a9 Ou seja, se n\u00e3o possuem nenhum elemento em comum. \u21a9 A documenta\u00e7\u00e3o desse tipo de lista pode ser lida aqui . \u21a9 Esse termo \u00e9 MUITO comum em v\u00e1rios contextos al\u00e9m desse. Agora voc\u00ea tem o conhecimento para entender muitas outras rela\u00e7\u00f5es complexas em v\u00e1rias linguagens de programa\u00e7\u00e3o. \u21a9 Liskov Substitution Principle pois a classe derivada pode tentar sobrescrever uma propriedade da classe pai. \u21a9","title":"Programa\u00e7\u00e3o Modular"},{"location":"nav/PUC/periodo2/programacao_modular/#assuntos","text":"Programa\u00e7\u00e3o Orientada \u00e0 Objetos Fatores de Qualidade de Software Classes e Objetos Encapsulamento Heran\u00e7a Polimorfismo e Princ\u00edpios do Projeto Modular Polimorfismo de Inclus\u00e3o (#sobreposicao-de-metodos-virtual-e-override) Polimorfismo Param\u00e9trico Projeto Orientado para Objetos Bibliografia","title":"Assuntos"},{"location":"nav/PUC/periodo2/programacao_modular/#programacao-orientada-a-objetos","text":"A essa altura j\u00e1 estamos cientes que podemos pensar em um algoritmo como uma sucess\u00e3o de passos que finda na execu\u00e7\u00e3o de um objetivo em tempo de processamento \u00fatil para um usu\u00e1rio. Antigamente, acreditava-se que todos os problemas poderiam ser expressos com o uso de apenas 3 estruturas de controle: comandos sequ\u00eancias, comandos de sele\u00e7\u00e3o (condicionais) e comandos de repeti\u00e7\u00e3o (iterativos). Nessa era, o foco estava apenas da completude do desafio proposto. A miss\u00e3o era resolver o problema por meio de um software. Mas n\u00e3o demorou muito para as organiza\u00e7\u00f5es perceberem que v\u00e1rias tarefas estavam presentes em diferentes problemas com apenas algumas altera\u00e7\u00f5es. Al\u00e9m disso, o custo e a complexidade dos problemas evolui e coisas como efici\u00eancia e padroniza\u00e7\u00e3o come\u00e7aram a ficar mais relevantes no meio empresarial que j\u00e1 passava a se cristalizar em grandes corpora\u00e7\u00f5es. Para sanar essas necessidades, as linguagens de programa\u00e7\u00e3o evolu\u00edram e passaram a suportar abstra\u00e7\u00f5es como fun\u00e7\u00f5es e procedimentos . Podemos entender uma fun\u00e7\u00e3o como uma abstra\u00e7\u00e3o de express\u00e3o que representam o mapeamento 1 de entradas em um conjunto de resultado. O professor usa o exemplo da fun\u00e7\u00e3o fatorial: \\(n! = n * (n-1)!\\) Que pode ser escrito como uma fun\u00e7\u00e3o em c# // c# using System ; class Calculo { public int fatorial ( int n ) { int res = 1 ; if ( n == 0 || n == 1 ) { return res ; } else if ( n > 0 ) { return n * fatorial ( n - 1 ); } else { return - 1 ; } } static void Main ( string [] args ) { int valor = 4 ; int resultado ; Calculo calc = new Calculo (); resultado = calc . fatorial ( valor ); Console . WriteLine ( \"{0}! = {1}\" , valor , resultado ); } } Coment\u00e1rio: Tudo que usamos nesse programa acima foi aprendido na parte 1 desse material com apenas 1 exce\u00e7\u00e3o. Pode ser que para algumas pessoas seja estranho que na defini\u00e7\u00e3o da fun\u00e7\u00e3o fatorial se fa\u00e7a uso da pr\u00f3pria fun\u00e7\u00e3o que est\u00e1 sendo criada. Chamamos esse recurso de recurs\u00e3o e \u00e9 usado bastante como ferramenta de solu\u00e7\u00e3o de problemas matem\u00e1ticos formais. Aqui tem um link sobre essa t\u00e9cnica em linguagem de programa\u00e7\u00e3o. Al\u00e9m do conceito de fun\u00e7\u00e3o, as linguagens tamb\u00e9m evolu\u00edram para o uso de procedimentos que podem ser entendidos como a abstra\u00e7\u00e3o de comandos. \u00c9 a representa\u00e7\u00e3o de um conjunto de passos que resolve um tarefa. Diferente das fun\u00e7\u00f5es que possuem um retorno, um procedimento pode ou n\u00e3o ter um resultado vis\u00edvel. // c# using System ; class MainClass { private static void Tarefa1 () { Console . Clear (); Console . WriteLine ( \"Executando tarefa 1\" ); Console . ReadLine (); } private static void Tarefa2 () { Console . Clear (); Console . WriteLine ( \"Executando tarefa 2\" ); Console . ReadLine (); } private static bool MenuPrincipal () { Console . Clear (); Console . WriteLine ( \"Escolha uma op\u00e7\u00e3o:\" ); Console . WriteLine ( \"1. Tarefa 1\\n2. Tarefa 2\\n3. Sair\" ); Console . Write ( \"Op\u00e7\u00e3o: \" ); switch ( Console . ReadLine ()) { case \"1\" : Tarefa1 (); case \"2\" : Tarefa2 (); case \"3\" : return false ; default : return true ; } } public static void Main ( string [] args ) { while ( MenuPrincipal ()) ; } } N\u00f3s aprendemos na parte 1 do material que um tipo abstrato de dado \u00e9 a constru\u00e7\u00e3o de uma classe que possui dentro de si a l\u00f3gica de estruturas e m\u00e9todos necess\u00e1rios para a constru\u00e7\u00e3o de uma solu\u00e7\u00e3o otimizada de software. Desse modo, podemos pensar em um M\u00f3dulo 2 como um tipo abstrato de dados que consegue internalizar a l\u00f3gica de implementa\u00e7\u00e3o dos seus elementos de modo a permitir que apenas alguns dos seus elementos sejam manipulados. A vantagem de se encapsular a l\u00f3gica \u00e9 permitir que os arquivos de c\u00f3digo se tornem mais leg\u00edveis porque toda a l\u00f3gica das fun\u00e7\u00f5es usadas est\u00e1 guardada nos arquivos de refer\u00eancia de cada m\u00f3dulo que foi carregado no come\u00e7o do script, al\u00e9m disso, podemos desejar que certas partes do nosso c\u00f3digo n\u00e3o estejam dispon\u00edveis para manipula\u00e7\u00e3o por parte do usu\u00e1rio. Coment\u00e1rio: J\u00e1 vimos um pouco sobre escopo quando trabalhos tipos abstratos de dados. // c# using System ; using System.Collections.Generic ; public class Conta { private DateTime _criacao ; private double _saldo = 0 ; public Conta ( double saldoInicial , DateTime criacao ) { _saldo = saldoInicial ; _criacao = criacao ; } public DateTime DataCriacao { get { return _criacao ; } } public double Sacar ( double quantia ) { if ( _saldo < quantia ) throw new ArgumentException ( \"Saque maior que saldo.\" , \"quantia\" ); _saldo -= quantia ; return quantia ; } public void Depositar ( double quantia ) { if ( quantia <= 0 ) throw new ArgumentException ( \"Dep\u00f3sito deve ser positivo.\" , \"quantia\" ); _saldo += quantia ; } public double GetSaldo () { return _saldo ; } } public class MainClass { public static void Main ( string [] args ) { Conta contaDoZe = new Conta ( 1200 , Datetime . Now ); Console . WriteLine ( \"Saldo da Conta: {0:C2}\" , contaDoZe . GetSaldo ()); double quantia = 212 ; Console . WriteLine ( \"Sacar {0:C2} da conta.\" , quantia ); contaDoZe . Sacar ( quantia ); Console . WriteLine ( \"Saldo na conta: {0:C2}\" , contaDoZe . GetSaldo ()); } } Coment\u00e1rio: Se alguns de voc\u00eas tiveram d\u00favidas na linha onde o objeto ContaDoZe \u00e9 criado pela passagem de dois par\u00e2metros Conta(1200,DateTime.Now) \u00e9 porque voc\u00eas se esqueceram do que aprendemos sobre construtores . Programa\u00e7\u00e3o Orientada \u00e0 Objetos Criado em 1967 por Alan Kay, o paradigma da programa\u00e7\u00e3o orientada \u00e0 objetos prop\u00f5e uma mudan\u00e7a no modo de entendermos como um software \u00e9 constru\u00eddo. A novidade foi a proposi\u00e7\u00e3o de m\u00f3dulos independentes que n\u00e3o compartilham dados mas s\u00e3o capazes de se comunicarem (como se fossem c\u00e9lulas). O que permite o reaproveitamento de solu\u00e7\u00f5es e o acoplamento de diferentes objetos para a cria\u00e7\u00e3o de ferramentas complexas e, ainda assim, cuja manuten\u00e7\u00e3o era mais f\u00e1cil. Claro que existem novos riscos associados \u00e0 mudan\u00e7a do paradigma. Por exemplo, chamamos de alto acoplamento a situa\u00e7\u00e3o onde os m\u00f3dulos de um sistema s\u00e3o muito interdependentes e podem, com a falha cr\u00edtica em algum deles, desencadear uma quebra generalizada na aplica\u00e7\u00e3o. Temos que focar sempre em solu\u00e7\u00f5es de baixo acoplamento. Podemos ver como os conceitos v\u00e3o evoluindo gradualmente. Primeiro aprendemos sobre estruturas de dados nativas. Depois aprendemos como criar nossas pr\u00f3prias estruras de dados. Em seguida, aprendemos sobre tipos abstratos de dados com classes e estruturas. Finalmente, agora vemos como esses conceitos foram usados para a constru\u00e7\u00e3o de um paradigma novo de desenvolvimento denominado programa\u00e7\u00e3o orientada \u00e0 objetos.","title":"Programa\u00e7\u00e3o Orientada \u00e0 Objetos"},{"location":"nav/PUC/periodo2/programacao_modular/#fatores-de-qualidade-de-software","text":"V\u00e1rias vezes ao longo do material n\u00f3s usamos termos como \"software de qualidade\" ou \"programas bem constru\u00eddos\" ou alguma ideia similar. Agora, vamos definir mais claramente quais caracter\u00edsticas uma solu\u00e7\u00e3o de software precisa ter para ser digna de tal chancela. A norma que rege esse consenso aplicado no mercado atualmente \u00e9 a ISO/IEC 25010 . Essa norma divide os fatores de qualidade de um produto em 8 fatores de qualidade: Funcionalidade Desempenho Compatibilidade Usabilidade Confiabilidade Seguran\u00e7a Manutenibilidade Portabilidade Como podemos ver, s\u00e3o v\u00e1rios crit\u00e9rios que s\u00e3o usados no trabalho de avalia\u00e7\u00e3o de uma solu\u00e7\u00e3o. Al\u00e9m dessa classifica\u00e7\u00e3o, podemos elencar os fatores em 2 grupos: fatores externos (relacionados com a din\u00e2mica de intera\u00e7\u00e3o dos usu\u00e1rios) e fatores internos (relacionados a din\u00e2mica dos programadores com a aplica\u00e7\u00e3o). Mesmo sabendo que todos os fatores s\u00e3o importantes, como estamos estudando esse conte\u00fado sob a perspectiva da programa\u00e7\u00e3o modular, vamos nos ater apenas aos fatores que s\u00e3o impactados pela decis\u00e3o de um projeto modular de aplica\u00e7\u00e3o.","title":"Fatores de Qualidade de Software"},{"location":"nav/PUC/periodo2/programacao_modular/#fatores-externos","text":"No que tange \u00e0 experi\u00eancia do usu\u00e1rio, podemos destacar algumas caracter\u00edsticas que toda solu\u00e7\u00e3o deve apresentar para ser considerada de qualidade. Corre\u00e7\u00e3o: O sistema deve executar a atividade que foi previamente definida como objetivo para sua constru\u00e7\u00e3o. Isso garante que ele funcionar\u00e1 como o previsto. Robustez: O sistema deve funcionar mesmo em condi\u00e7\u00f5es anormais. Essa caracter\u00edsticas est\u00e1 bastante relacionada \u00e0 capacidade de lidar com erros e situa\u00e7\u00f5es n\u00e3o previstas anteriormente pelo desenvolvimento. Quando um sistema \u00e9 bem constru\u00eddo, mesmo em situa\u00e7\u00f5es de impossibilidade de funcionamento (como a aus\u00eancia de internet em um sistema web) existem diferentes modos de lidar com essa limita\u00e7\u00e3o imposta ao funcionamento da aplica\u00e7\u00e3o. Um conceito que vale a pena aprendermos \u00e9 o graceful degradation . Adapta\u00e7\u00e3o a Novas Situa\u00e7\u00f5es O desenvolvimento \u00e1gil trouxe v\u00e1rias mudan\u00e7as de postura no planejamento e execu\u00e7\u00e3o de um projeto de tecnologia. Como agora n\u00e3o \u00e9 necess\u00e1rio saber todas as caracter\u00edsticas do produto final, existe a possibilidade de novas fun\u00e7\u00f5es e ferramentas surgirem ao longo do processo de cria\u00e7\u00e3o inicialmente planejado. Para se atender as demandas geradas por esse paradigma, os produtos gerados a cada etapa deve ter as seguintes propriedades: Extensabilidade: O sistema deve se adaptar a mudan\u00e7as na sua especifica\u00e7\u00e3o. Reusabiliadde: O sistema de ter m\u00f3dulos que podem ser aproveitadas em outras solu\u00e7\u00f5es. Permitindo uma maior produtividade e celeridade do processe de desenvolvimento. Compatibilidade: O sistema deve ter partes que s\u00e3o capazes de se comunicar entre si e com outros sistemas. Nesse contexto que os padr\u00f5es de desenvolvimento e protocolos s\u00e3o t\u00e3o relevantes. Desempenho Uma caracter\u00edsticas muit\u00edssimo relevante, principalmente em projetos escal\u00e1veis \u00e9 a efici\u00eancia. Fazer bom uso do hardware economiza custos para o cliente e \u00e9 uma das qualidades mais desejadas para empresas de grande monta. Sempre devemos ter em mente que haver\u00e1 um trade-off entre a capacidade de resolu\u00e7\u00e3o dos problemas propostos e o consumo de poder de processamento dispon\u00edvel no momento. Um sistema deve fazer o que \u00e9 desejado da melhor maneira poss\u00edvel. No escopo da programa\u00e7\u00e3o modular, como os m\u00f3dulos s\u00e3o autocontidos, no contexto de sistema muito complexos haver\u00e1, muito provavelmente, uma prefer\u00eancia pela corre\u00e7\u00e3o e robustez (que garantem o resultado esperado) em detrimento da efici\u00eancia (que garante a otimiza\u00e7\u00e3o do uso dos recursos).","title":"Fatores Externos"},{"location":"nav/PUC/periodo2/programacao_modular/#fatores-internos","text":"Os fatores internos de qualidade de um software s\u00e3o aqueles relacionados \u00e0s caracter\u00edsticas percebidas pelos desenvolvedores e profissionais que far\u00e3o a manuten\u00e7\u00e3o do programa. Os principais fatores internos de qualidade de software s\u00e3o: Legibilidade Manutenibilidade Modularidade A Legibilidade pode ser entendia em dois componentes: inteligibilidade que \u00e9 a facilidade de se entender a l\u00f3gica implementada naquele c\u00f3digo e a legibilidade que \u00e9 a constru\u00e7\u00e3o de c\u00f3digos de maneira a facilitar a identifica\u00e7\u00e3o dos tokens e operadores usados. Pensando na necessidade de se padronizar o uso de estilo das linguagens de programa\u00e7\u00e3o \u00e9 que surgem os Coding Standards que padronizam v\u00e1rias pr\u00e1ticas para tornar a legibilidade das linguagens mais eficiente no seu meio de uso. Um bom programador sempre est\u00e1 com os padr\u00f5es das linguagens que utiliza em dia. A Manutenibilidade \u00e9 a facilidade de se modificar e corrigir problemas encontrados na solu\u00e7\u00e3o. Em uma estrutura modular \u00e9 comum ter que identificar qual m\u00f3dulo est\u00e1 apresentando problemas e prosseguir com a corre\u00e7\u00e3o da l\u00f3gica que est\u00e1 gerando o problema. A Modularidade \u00e9 relacionada a divis\u00e3o do sistema. Um m\u00f3dulo encapsula a l\u00f3gica de uma determinada a\u00e7\u00e3o do sistema e torna o gerenciamento da solu\u00e7\u00e3o mais eficiente porque divide em v\u00e1rios arquivos menores o que antigamente ficaria em um \u00fanico arquivo texto de dif\u00edcil entendimento. Esse fator \u00e9 regido por dois pressupostos essenciais: princ\u00edpio da unidade funcional (uma fun\u00e7\u00e3o por m\u00f3dulo) e coes\u00e3o (cada m\u00f3dulo tem tudo que precisa para implementar a sua fun\u00e7\u00e3o).","title":"Fatores Internos"},{"location":"nav/PUC/periodo2/programacao_modular/#classes-e-objetos","text":"","title":"Classes e Objetos"},{"location":"nav/PUC/periodo2/programacao_modular/#atributos-e-metodos","text":"Finalmente temos todos os conceitos necess\u00e1rios para aprendermos como programar usando o paradigma orientado \u00e0 objetos. A principal postura que devemos ter \u00e9 a de procurar abstrair o mundo real em objetos que s\u00e3o entidades autocontidas que possuem 3 caracter\u00edsticas: Estado Comportamento Identidade Chamamos de Classe a cole\u00e7\u00e3o de objetos que compartilham as mesmas propriedades e comportamentos. Agora vamos relembrar o que j\u00e1 aprendemos l\u00e1 em Algoritmos e Abstra\u00e7\u00e3o de dados. Podemos definir uma classe em c# para um tipo de produto qualquer do seguinte modo: // c# class Produto { public string descricao ; public float preco ; public int quantidade ; public bool emEstoque () { return ( quantidade > 0 ); } } A diferen\u00e7a agora \u00e9 que sabemos o que \u00e9 uma classe do ponto de vista dos conceitos de programa\u00e7\u00e3o orientada \u00e0 objetos. Sem\u00e2ntica de Refer\u00eancia Um objeto \u00e9 uma inst\u00e2ncia 3 de uma classe que possui um nome e uma posi\u00e7\u00e3o na mem\u00f3ria. Uma classe pode ter v\u00e1rias inst\u00e2ncias de objetos 4 . Em c# primeiro fazemos uma refer\u00eancia ao objeto para, depois, criarmos ele efetivamente usando o token new . Isso ocorre na mesma linha de c\u00f3digo. // c# class MainClass { public static void Main ( string [] args ) { Produto produto = new Produto (); produto . descricao = \"Cafe\" ; produto . preco = 1.99 ; produto . quantidade = 100 ; Console . WriteLine ( \"Em estoque: {0}\" , produto . emEstoque () ? \"sim\" : \"n\u00e3o\" ) }; } Na parte Produto produto estamos fazendo apenas a refer\u00eancia \u00e0 classe mas o objeto ainda n\u00e3o foi alocado na mem\u00f3ria. Inicialmente o objeto produto \u00e9 null . Logo ap\u00f3s a refer\u00eancia usamos o token new para, ai sim, criar um endere\u00e7o na mem\u00f3ria que onde o objeto ser\u00e1 criado. Coment\u00e1rio: Se voc\u00ea ainda est\u00e1 com d\u00favidas sobre o que esse objeto criado far\u00e1, recomendamos fortemente os fundamentos da etapa 1.","title":"Atributos e M\u00e9todos"},{"location":"nav/PUC/periodo2/programacao_modular/#construtores","text":"Come\u00e7amos a ver esse assunto no per\u00edodo 1 do curso. Vale a pena relembrar antes de continuar essa se\u00e7\u00e3o. Como vimos antes, o comando Produto produto = new Produto(); faz a refer\u00eancia ao objeto e logo ap\u00f3s cria um endere\u00e7o na mem\u00f3ria para ele. Algumas linguagens possuem uma ferramenta autom\u00e1tica de gest\u00e3o de mem\u00f3ria chamada Coletor de lixo ou Garbage Collector que \u00e9 respons\u00e1vel pela exclus\u00e3o de itens n\u00e3o usados durante a execu\u00e7\u00e3o de um programa. Para nossa alegria, o c# possui essa ferramenta. Mais sobre esse conceito pode ser encontrado nesse link . Por causa dessa caracter\u00edstica da linguagem, no caso do objeto produto que criamos anteriormente, recebe alguns valores padr\u00f5es no momento da sua cria\u00e7\u00e3o. Se a vari\u00e1vel for num\u00e9rica, recebe o valor 0 e para as strings \u00e9 passado o valor null. Desse modo, nosso objeto foi salvo no momento da sua cria\u00e7\u00e3o com os seguintes valores: Descri\u00e7\u00e3o: null Pre\u00e7o: 0.0 Quantidade: 0 Para garantir a correta utiliza\u00e7\u00e3o de um objeto criado, devemos nos valer da capacidade de definir valores no mesmo momento em que estamos criando um novo objeto. J\u00e1 sabemos que esse conceito recebe o nome de construtor . Tamb\u00e9m sabemos que, em c#, um construtor \u00e9 criado do mesmo modo de um m\u00e9todo, a \u00fanica diferen\u00e7a \u00e9 que ele deve receber o mesmo nome do objeto e que n\u00e3o possuem valores de retorno. O n\u00famero de construtores que um objeto pode receber \u00e9 ilimitado. Como vimos antes, um objeto sempre ter\u00e1 um construtor. Se n\u00e3o o declararmos, ent\u00e3o o pr\u00f3prio c# se encarrega de definir quais ser\u00e3o os valores recebidos. De outro modo, se n\u00f3s definirmos explicitamente um construtor no objeto, o compilador do c# sempre respeitar\u00e1 os valores que definimos no construtor. Raz\u00f5es Para se Utilizar Construtores Especializados Alguns objetos possuem regras de estado v\u00e1lido que n\u00e3o comportam os dois tipos de valores do construtor default do c# (que s\u00f3 atribui 0 ou null); Alguns objetos usam a data corrente como carimbo de tempo (timestamp) que pode ser definida por meio do construtor que recebe a hora do sistema; Em objetos muito complexos, o volume de atributos pode ser muito elevado e, se n\u00e3o amarrados corretamente, pode haver algum equ\u00edvoco por parte do usu\u00e1rio na hora de definir todos os valores corretos. Um construtor garante que, pelo menos na sua cria\u00e7\u00e3o, o objeto ter\u00e1 um estado inicial v\u00e1lido para ser preenchido. Construtores na Classe de Produto Voltaremos \u00e0 nossa classe de objeto chamada de Produto para definirmos os seus construtores. // c# class Produto { public string descricao ; public float preco ; public int quantidade ; // construtor que recebe parametros public Produto ( string descricao , float preco , int quantidade ) { if ( descricao . Length >= 3 ) this . descricao = descricao ; if ( preco > 0 ) this . preco = preco ; if ( quantidade >= 0 ) this . quantidade = quantidade ; } // novo construtor default public Produto () { this . descricao = \"Novo Produto\" ; this . preco = 0.01F ; this . quantidade = 0 ; } public bool emEstoque () { return ( quantidade > 0 ); } } Coment\u00e1rio: O objeto this \u00e9 um token que faz refer\u00eancia ao escopo onde se encontra. No caso em tela, ele se refere ao objeto sendo criado e n\u00e3o ao m\u00e9todo onde est\u00e1 sendo usado. Essa parte de tokens de refer\u00eancia de escopo \u00e9 um pouco confusa a primeira vista mas com o tempo \u00e9 poss\u00edvel entender melhor. Dessa maneira, nossa nova classe melhorada de objeto chamado Produto recebe dois tipos de constru\u00e7\u00e3o. Podemos criar um objeto de produto com ou sem par\u00e2metros. // c# // Caso sem passagem de par\u00e2metros Produto produto1 = new Produto (); // Caso com passagem de par\u00e2metros Produto produto2 = new Produto ( \"caf\u00e9\" , 1.50F , 12 );","title":"Construtores"},{"location":"nav/PUC/periodo2/programacao_modular/#atributos-estaticos-e-propriedades","text":"Membros Est\u00e1ticos Antes de definirmos o que seria um membro est\u00e1tico, temos que formalizar o conceito de escopo. Podemos definir escopo como a regi\u00e3o do c\u00f3digo onde a vari\u00e1vel pode ser acessada. Outra maneira de pensarmos esse conceito \u00e9 a regi\u00e3o do c\u00f3digo onde a vari\u00e1vel \u00e9 vis\u00edvel pelo programa. Podemos criar m\u00e9todos e atributos que ser\u00e3o comuns a todos os objetos que tenham refer\u00eancia a eles na sua constru\u00e7\u00e3o. At\u00e9 agora, todos os m\u00e9todos e atributos que tivemos nos nossos objetos foram criados dentro dos pr\u00f3prios objetos e, portanto, s\u00e3o salvos em diferentes endere\u00e7os de mem\u00f3ria a medida que novos objetos s\u00e3o criados ao longo do programa. Pois bem, um membro est\u00e1tico \u00e9 exatamente esse m\u00e9todo ou atributo que s\u00e3o criados em escopo global e \"inseridos\" dentro dos nossos objetos por meio da refer\u00eancia a esse membro na classe que criar\u00e1 os objetos. Eles s\u00e3o muito \u00fateis para implementa\u00e7\u00e3o de contadores ou identificadores de auto-incremento . O termo \"est\u00e1tico\" \u00e9 uma alus\u00e3o ao fato que esses construtos s\u00e3o alocados no momento que a classe \u00e9 carregada na mem\u00f3ria e n\u00e3o variam o seu endere\u00e7o ao longo de todo o programa, ou seja, eles existem antes mesmo de declararmos o primeiro objeto da classe criada. Em c# usamos o token static para a declara\u00e7\u00e3o de um membro est\u00e1tico. Exemplo de Contador Auto-incremento Como agora temos um endere\u00e7o na mem\u00f3ria que todos os objetos podem fazer refer\u00eancia, podemos criar um contador que adiciona o valor 1 sempre que um novo objeto (ou inst\u00e2ncia) da classe for criada. // c# class Produto { public int id ; // novo atributo de identifica\u00e7\u00e3o public string descricao ; public float preco ; public int quantidade ; // referencia ao membro est\u00e1tico public static int contador ; // construtor que recebe par\u00e2metros public Produto ( string descricao , float preco , int quantidade ) { this . id = ++ Produto . contador ; if ( descricao . Length >= 3 ) this . descricao = descricao ; if ( preco > 0 ) this . preco = preco ; if ( quantidade >= 0 ) this . quantidade = quantidade ; } // novo construtor default public Produto () { this . id = ++ Produto . contador ; this . descricao = \"Novo Produto\" ; this . preco = 0.01F ; this . quantidade = 0 ; } public bool emEstoque () { return ( quantidade > 0 ); } } Podemos ver que, como o contador \u00e9 um membro est\u00e1tico da classe, para acessar o seu valor temos que fazer refer\u00eancia \u00e0 classe e n\u00e3o ao objeto. A essa altura, alguns de voc\u00eas j\u00e1 devem ter percebido que toda aplica\u00e7\u00e3o c# est\u00e1 dentro de uma classe chamada MainClass . Com o nosso novo conhecimento de membro est\u00e1tico, podemos ver que o termo public static void Main possui 4 elementos dos quais n\u00f3s j\u00e1 conhecemos o significado de 3: O termo public faz refer\u00eancia ao escopo de acesso; O termo static faz refer\u00eancia \u00e0o conceito que acabamos de aprender de membro est\u00e1tico; Main \u00e9 apenas um nome dado ao m\u00e9todo da classe Mainclass . Basta aprendermos o significado do termo void e entenderemos como e porqu\u00ea os programas em c# usam essa estrutura para funcionar corretamente. Outra coisa que podemos perceber \u00e9 que, pelo fato do m\u00e9todo Main estar dentro de uma classe, se ele n\u00e3o fosse um membro est\u00e1tico, ele s\u00f3 seria executado na instancia\u00e7\u00e3o de um objeto. O problema \u00e9 que esse objeto \u00e9 justamente a aplica\u00e7\u00e3o. Ou seja, para o objeto Main ser instanciado precisar\u00edamos de uma aplica\u00e7\u00e3o mas \u00e9 justamente o objeto Main que cont\u00e9m a nossa aplica\u00e7\u00e3o. Por isso temos que usar o conceito de membro est\u00e1tico e que \u00e9 disparado no momento em que a classe \u00e9 carregada no nosso c\u00f3digo.","title":"Atributos Est\u00e1ticos e Propriedades"},{"location":"nav/PUC/periodo2/programacao_modular/#destrutores","text":"J\u00e1 come\u00e7amos a entender o que s\u00e3o destrutores l\u00e1 no microfundamento de algoritmo de l\u00f3gica. Recapitulando o que j\u00e1 sabemos, um destrutor \u00e9 parecido com o construtor mas \u00e9 ativado no momento em que a inst\u00e2ncia da classe \u00e9 destru\u00edda pelo garbage collector no momento em que o objeto n\u00e3o \u00e9 mais acess\u00edvel a nenhuma parte do programa. O coletor de lixo \u00e9 executado em paralelo ao programa em uma thread separada do processador. Ele \u00e9 executado esporadicamente e tem como miss\u00e3o liberar os espa\u00e7os em mem\u00f3ria sempre que identificar informa\u00e7\u00f5es em mem\u00f3ria que n\u00e3o s\u00e3o usadas ao longo da execu\u00e7\u00e3o do programa por meio da busca de refer\u00eancia das mesmas. Mesmo n\u00e3o sendo o ideal, \u00e9 poss\u00edvel for\u00e7ar o .NET (que \u00e9 o framework mais famoso de c#) a executar o garbage collector por meio do comando GC.Collect(); . Por padr\u00e3o, todo objeto em c# tem um destrutor nativo que tem como \u00fanica atividade a libera\u00e7\u00e3o do espa\u00e7o alocado em mem\u00f3ria. Mas assim como acontece com os construtores, podemos definir alguma rotina a ser executada no momento da sua exclus\u00e3o por meio da defini\u00e7\u00e3o expl\u00edcita. A regra de defini\u00e7\u00e3o \u00e9 parecida com a do construtor com a \u00fanica diferen\u00e7a de colocarmos um til como primeiro caractere. No nosso exemplo, o destrutor ser\u00e1 ~Produto() . // c# class Produto { public int id ; // novo atributo de identificacao public string descricao ; public float preco ; public int quantidade ; // referencia aos membros estaticos public static int contador ; public static int instancias = 0 ; // construtor que recebe parametros public Produto ( string descricao , float preco , int quantidade ) { this . id = ++ Produto . contador ; this . instancias = ++ Produto . instancias ; if ( descricao . Length >= 3 ) this . descricao = descricao ; if ( preco > 0 ) this . preco = preco ; if ( quantidade >= 0 ) this . quantidade = quantidade ; } // novo construtor default public Produto () { this . id = ++ Produto . contador ; this . instancias = ++ Produto . instancias ; this . descricao = \"Novo Produto\" ; this . preco = 0.01F ; this . quantidade = 0 ; } public bool emEstoque () { return ( quantidade > 0 ); } // destrutor ~ Produto () { Console . WriteLine ( \"Adeus, mundo cruel!\" ); this . instancias = Produto . instancias -- ; } } Coment\u00e1rio: Reflita sobre esse c\u00f3digo acima. N\u00e3o devemos ter nenhuma d\u00favida sobre todos os elementos da constru\u00e7\u00e3o dessa classe chamada Produto . Sempre retorne e revise os t\u00f3picos anteriores at\u00e9 que tudo tenha sentido.","title":"Destrutores"},{"location":"nav/PUC/periodo2/programacao_modular/#encapsulamento","text":"Alguns assuntos podem parecer repetidos. Mas aprofundaremos mais a discuss\u00e3o em rela\u00e7\u00e3o ao que j\u00e1 aprendemos na primeira parte desse material.","title":"Encapsulamento"},{"location":"nav/PUC/periodo2/programacao_modular/#principio-da-ocultacao-da-informacao","text":"Podemos definir o princ\u00edpio da oculta\u00e7\u00e3o como sendo: \"Toda informa\u00e7\u00e3o a respeito de um m\u00f3dulo deve ser privativa do m\u00f3dulo, exceto se for explicitamente declarada como p\u00fablica.\" David Parnas introduziu esse conceito em meados de 1972. No seu paper temos a seguinte cita\u00e7\u00e3o em tradu\u00e7\u00e3o livre:\"[...] A documenta\u00e7\u00e3o dos sistema que torna todas as informa\u00e7\u00f5es acess\u00edveis a todos os trabalhadores do projeto \u00e9 discutida. A tese que essa informa\u00e7\u00f5es deve ser 'p\u00fablica' \u00e9 temer\u00e1ria porque, na maioria dos casos, \u00e9 \u00fatil que a informa\u00e7\u00e3o sobre o sistema esteja escondida da maioria dos programadores [...]\". Interface Podemos definir a interface de uma aplica\u00e7\u00e3o de software como: \"Tudo aquilo que o usu\u00e1rio do objeto v\u00ea e acessa.\" Podemos ver que esse conceito de \"usu\u00e1rio\" serve tanto para o usu\u00e1rio da aplica\u00e7\u00e3o quanto para outros programadores que usar\u00e3o algum objeto de uma classe que criamos anteriormente nos nossos m\u00f3dulos. No contexto do princ\u00edpio da oculta\u00e7\u00e3o da informa\u00e7\u00e3o, temos que pensar em interfaces que demonstrem apenas os aspectos est\u00e1veis da solu\u00e7\u00e3o. Tudo que for din\u00e2mico s\u00e3o do escopo da implementa\u00e7\u00e3o. Um m\u00f3dulo pode ocultar informa\u00e7\u00f5es como, por exemplo, Algoritmos e Representa\u00e7\u00e3o de Dados. A interface pode ser divida em duas partes: Assinatura - Nomes e Tipos de informa\u00e7\u00f5es sobre as fun\u00e7\u00f5es do m\u00f3dulo Especifica\u00e7\u00e3o - Descri\u00e7\u00e3o sobre o significado e funcionamento dessas fun\u00e7\u00f5es Coment\u00e1rio: Essa se\u00e7\u00e3o ser\u00e1 expandida em tempo oportuno porque esse assunto \u00e9 muito vasto para pararmos apenas nesses conceitos b\u00e1sicos. Encapsulamento Um m\u00f3dulo deve ter um conjunto de comandos e a especifica\u00e7\u00e3o desses comandos, j\u00e1 vimos que essa parte pode ser chamada de interface do m\u00f3dulo. O conceito de encapsulamento \u00e9 derivado do princ\u00edpio da oculta\u00e7\u00e3o da informa\u00e7\u00e3o no sentido que todo m\u00f3dulo pode receber (e normalmente recebe) atualiza\u00e7\u00f5es na sua parte de implementa\u00e7\u00e3o sem que haja mudan\u00e7as vis\u00edveis na camada de interface. Dizemos que os atributos dos m\u00f3dulos s\u00e3o protegidos pelo encapsulamento porque ficam restritos apenas \u00e0 camada interna n\u00e3o acess\u00edvel a todos. Quando queremos um input de dados do usu\u00e1rio damos sempre prefer\u00eancia aos m\u00e9todos do nosso objeto porque dessa maneira podemos validar os dados inseridos. Al\u00e9m dessa capacidade de manuten\u00e7\u00e3o na camada de implementa\u00e7\u00e3o, o encapsulamento permite a prote\u00e7\u00e3o da l\u00f3gica da regra de neg\u00f3cio para a constru\u00e7\u00e3o das classes. No exemplo do produto, podemos encapsular a vari\u00e1vel quantidade por meio do acesso mediante apenas a um m\u00e9todo pre-definido. Isso nos d\u00e1 a certeza que um usu\u00e1rio n\u00e3o poder\u00e1 inserir valores da maneira inadvertida que possam gerar resultados imprevistos no nosso sistema. Um conceito relevante que podemos destacar \u00e9 chamado de encapsulamento e princ\u00edpio da caixa preta . Que pode ser resumido como: \"Um m\u00f3dulo deve consistir de um conjunto de comandos com uma fun\u00e7\u00e3o bem definida e o mais independente poss\u00edvel em rela\u00e7\u00e3o ao resto do sistema.\" Existem outras caracter\u00edsticas relevantes na constru\u00e7\u00e3o dos m\u00f3dulos que devemos observar: Independ\u00eancia Funcional - Cada m\u00f3dulo \u00e9 respons\u00e1vel por uma fun\u00e7\u00e3o espec\u00edfica e bem definida; Coes\u00e3o - Todas as partes de um m\u00f3dulo devem estar logicamente ligadas \u00e0s outras. Assim como um sistema deve ter m\u00f3dulos logicamente relacionados; Acoplamento - Rela\u00e7\u00e3o de depend\u00eancia entre os m\u00f3dulos de um sistema. O ideal \u00e9 um baixo n\u00edvel de acoplamento Na imagem acima, cada caixa \u00e9 uma m\u00f3dulo que possui rela\u00e7\u00f5es internas (que devem ser coesas). Um alto acoplamento \u00e9 aquele que permite muitas conex\u00f5es entre os m\u00f3dulos de modo a, em caso de falha em um dos n\u00f3s da rede, existir um risco de efeito cascata em caso de falha.","title":"Princ\u00edpio da Oculta\u00e7\u00e3o da Informa\u00e7\u00e3o"},{"location":"nav/PUC/periodo2/programacao_modular/#modificadores-de-acesso","text":"O princ\u00edpio da oculta\u00e7\u00e3o da informa\u00e7\u00e3o \u00e9 aplicado por meio do encapsulamento . O c# e outras linguagens modernas permitem que controlemos o n\u00edvel de visibilidade dos membros de uma classe de forma a ocultarmos todos os dados e m\u00e9todos que precisarmos para garantir o cumprimento da tarefa com todos aqueles requisitos de qualidade de software alcan\u00e7ados. Em c# existem 3 n\u00edveis de acesso aos atributos e m\u00e9todos que podemos usar na cria\u00e7\u00e3o de um m\u00f3dulo 5 : private - Acesso apenas na pr\u00f3pria classe; protected - Acesso permitido na pr\u00f3pria classe e em suas subclasses (ou classes filhas); public - Acesso em qualquer parte do programa Coment\u00e1rio: Por default, o c# atribui o n\u00edvel privado quando nenhum modificador de acesso \u00e9 atribu\u00eddo explicitamente. Mas \u00e9 sempre uma boa pr\u00e1tica tornar os acessos sempre explicitamente vis\u00edveis no c\u00f3digo, mesmo quando eles s\u00e3o privados. Voltando \u00e0 nossa classe Produto. O ideal seria manter todos os atributos privados com apenas os construtores e o m\u00e9todo de checagem de estoque acess\u00edveis ao usu\u00e1rio. // c# class Produto { private int id ; // novo atributo de identificacao private string descricao ; private float preco ; private int quantidade ; // referencia aos membros estaticos private static int contador ; private static int instancias = 0 ; // construtor que recebe parametros public Produto ( string descricao , float preco , int quantidade ) { this . id = ++ Produto . contador ; this . instancias = ++ Produto . instancias ; if ( descricao . Length >= 3 ) this . descricao = descricao ; if ( preco > 0 ) this . preco = preco ; if ( quantidade >= 0 ) this . quantidade = quantidade ; } // novo construtor default public Produto () { this . id = ++ Produto . contador ; this . instancias = ++ Produto . instancias ; this . descricao = \"Novo Produto\" ; this . preco = 0.01F ; this . quantidade = 0 ; } public bool emEstoque () { return ( quantidade > 0 ); } // destrutor ~ Produto () { Console . WriteLine ( \"Adeus, mundo cruel!\" ); this . instancias = Produto . instancias -- ; } } Regras de Encapsulamento Para facilitar a internaliza\u00e7\u00e3o do princ\u00edpio da oculta\u00e7\u00e3o da informa\u00e7\u00e3o. Podemos elencar algumas regras de bolso para serem usadas sempre que uma d\u00favida a respeito desse tema aparecer: Sempre opte pelo n\u00edvel de acesso mais restrito que fa\u00e7a sentido para cada membro 6 da classe; Use private a menos que haja uma boa raz\u00e3o para o contr\u00e1rio; Use public apenas para constantes Coment\u00e1rio: Os pontos 1 e 2 s\u00e3o praticamente a mesma coisa na minha vis\u00e3o. A l\u00f3gica do ponto 3 \u00e9 que quanto mais membros de classe p\u00fablicos, maior \u00e9 a chance que outros m\u00f3dulos fa\u00e7am uso deles, desse modo, o risco de um alto acoplamento se torna cada vez maior.","title":"Modificadores de Acesso"},{"location":"nav/PUC/periodo2/programacao_modular/#metodos-de-acesso-e-propriedades","text":"O princ\u00edpio da oculta\u00e7\u00e3o da informa\u00e7\u00e3o n\u00e3o nos impede de ter acesso aos atributos. N\u00f3s apenas nos certificamos que eles ser\u00e3o seguramente acessados por meios dos m\u00e9todos que deixaremos dispon\u00edveis para intera\u00e7\u00e3o. Chamamos de m\u00e9todos de acesso os meios criados para permitir que os usu\u00e1rios tenham capacidade de acessar da maneira desejada as informa\u00e7\u00f5es contidas nos atributos dos nossos objetos. Desse modo, temos a confian\u00e7a que os valores atribu\u00eddos aos atributos dos nossos objetos sempre obedecer\u00e3o \u00e0s regras definidas nos seus m\u00e9todos p\u00fablicos. Coment\u00e1rio: J\u00e1 iniciamos esse assunto anteriormente no nosso material. M\u00e9todos get (leitura): \u00c9 capaz de acessar um valor de atributo privado. M\u00e9todos set (escrita): \u00c9 capaz de atribuir valor a um atributo privado. At\u00e9 o momento, a nossa classe (que tamb\u00e9m chamamos de m\u00f3dulo) est\u00e1 criada de maneira que ainda n\u00e3o podemos ter acesso a seus atributos propriamente. Uma maneira de criar um m\u00e9todo de acesso get para o nosso atributo de pre\u00e7o pode ser: // c# [...] private float preco ; [...] // m\u00e9todo de acesso get para atributo preco public float GetPreco () { return preco ; } [...] Podemos ir um pouco al\u00e9m de criar um m\u00e9todo de acesso set da seguinte maneira: // c# [...] private float preco ; [...] // m\u00e9todo de acesso set para o atributo preco public void SetPreco ( float preco ) { if ( preco > 0 ) { this . preco = preco ; } } [...] Desse modo, criamos a leitura e a escrita do atributo intermediados pelos m\u00e9todos que nos permitem controlar as caracter\u00edsticas do input realizado e, assim, nos dar seguran\u00e7a que nossa aplica\u00e7\u00e3o se comportar\u00e1 da maneira desejada. Propriedades Podemos melhorar ainda mais a legibilidade do nosso c\u00f3digo por meio do uso das propriedades nativas dos atributos de um m\u00f3dulo. Podemos definir uma propriedade como um tipo especial de atributo que possui m\u00e9todos associados a ele. Temos 3 m\u00e9todos que podem nos conferir mais clareza no c\u00f3digo e alcan\u00e7ar o mesmo resultado que nossos c\u00f3digos anteriores: init - Atribui o valor inicial ao atributo da classe; set - Atualiza o valor de um atributo; get - Retorna o valor atual de um atributo Reescrevendo nossos m\u00e9todos de acesso \u00e0 propriedade de pre\u00e7o, temos que: // c# [...] private float preco ; [...] // criando a propriedade Preco public float Preco { get { return preco ; } // outra maneira de sintaxe para o get: // get => this.preco set { if ( value > 0 ) preco = value ; } } // criando a propriedade Preco2 sem nenhum verificador public float Preco { get ; set ; } O par\u00e2metro value \u00e9 passado junto ao m\u00e9todo set para atualiza\u00e7\u00e3o dos valores dos atributos. Mais informa\u00e7\u00f5es sobre as propriedades podem ser encontradas nesse link .","title":"M\u00e9todos de Acesso e Propriedades"},{"location":"nav/PUC/periodo2/programacao_modular/#namespaces-e-partial-classes","text":"","title":"Namespaces e Partial Classes"},{"location":"nav/PUC/periodo2/programacao_modular/#namespaces","text":"J\u00e1 entendemos que um m\u00f3dulo deve ser autocontido e com um prop\u00f3sito bem definido. Entretanto, isso n\u00e3o quer dizer que teremos, na constru\u00e7\u00e3o de um sistema complexo, apenas 1 m\u00f3dulo que englobe toda a solu\u00e7\u00e3o. Para tanto, quebramos as rela\u00e7\u00f5es e tarefas em v\u00e1rios m\u00f3dulos diferentes sempre respeitando os princ\u00edpios que aprendemos anteriormente sobre c\u00f3digo de qualidade. Agora que temos v\u00e1rios m\u00f3dulos, precisaremos de uma maneira de agrupa-los de maneira que fa\u00e7a sentido. \u00c9 exatamente para isso que existe o conceito de namespaces . Com esse conceito, podemos criar uma l\u00f3gica mais geral que englobe v\u00e1rios m\u00f3dulos. Os namespaces s\u00e3o usados para a cria\u00e7\u00e3o de bibliotecas de c\u00f3digo e podem ser entendidos como um conjunto de classes. Por conven\u00e7\u00e3o e organiza\u00e7\u00e3o l\u00f3gica, sempre que tivermos a necessidade de criarmos um namespace, devemos salvar todas as classes contidas nele em arquivos separados e um arquivo de c\u00f3digo por classe. Por exemplo, se nossa solu\u00e7\u00e3o possui dois namespaces com uma classe em cada, criaremos duas pastas na raiz do nosso programa, sendo cada uma delas nomeada pelo seu respectivo namespace. Abaixo temos um exemplo de organiza\u00e7\u00e3o de arquivos. |- code/ |- bin/ |- namespace1/ |------------ class1.cs |------------ class2.cs |-namespace2/ |------------ class1.cs |------------ class2.cs |------------ class3.cs |- obj/ |- Program.cs Podemos ver que nosso programa tem como diret\u00f3rio raiz a pasta \"code\". Dentro dela temos o nosso arquivo de c\u00f3digo principal Program.cs . Tamb\u00e9m podemos ver diversas classes separadas em cada pasta namespace . Isso nos permite uma manuten\u00e7\u00e3o mais simples a medida que nosso programa se torne cada vez mais complexo e refinado. Do ponto de vista do c\u00f3digo. Em c# o namespace \u00e9 declarado dentro das classes que est\u00e3o dentro dele: // c# namespace Contabil { public class Juros { public float Valor { get ; set ; } } } Tamb\u00e9m podemos importar namespaces em outros m\u00f3dulos por meio do token using : // c# using Contabil ; class MainClass { public static void Main ( string [] args ) { Contabil . Juros jurosAReceber = new Contabil . Juros (); jurosAReceber . Valor = 12345.23F ; Console . WriteLine ( $\"Juros a Receber: {jurosAReceber.Valor:C2}\" ); } } Mesmo n\u00e3o sendo o ideal, outro problema que o namespace resolve \u00e9 o de conflito de nomes de m\u00e9todos ou classes. Nos exemplos acima, s\u00f3 usamos um namespace Contabil com uma classe chamada Juros. Entretanto, poder\u00edamos, sem nenhum problema, termos criado outro namespace, Financeiro por exemplo, com uma classe chamada juros. N\u00e3o ter\u00edamos problema de conflito de nomes porque na hora de instanciarmos as classes n\u00f3s sempre fazemos refer\u00eancia ao namespace em que a classe se encontra. Partial Classes O recomendado hoje em dia \u00e9 que uma classe deve ser implementada em um \u00fanico arquivo 7 . Mas, como tudo na vida, as vezes precisamos fazer concess\u00f5es. \u00c9 poss\u00edvel definirmos uma classe em mais de um arquivo. Chamamos esse tipo de classe de partial class . A ideia \u00e9 facilitar a organiza\u00e7\u00e3o de classes muito grandes de maneis mais f\u00e1cil para manuten\u00e7\u00e3o. Esse tipo de abordagem \u00e9 especialmente relevante para programa\u00e7\u00e3o frontend de interfaces gr\u00e1ficas porque a quantidade de c\u00f3digo gerado pelo compilador \u00e9 enorme. Podemos atualizar nossa estrutura de pastas com uma partial class agora. |- code/ |- bin/ |- namespace1/ |------------ class1.cs |------------ class2.cs |-namespace2/ |------------ class1.cs |------------ class2.cs |------------ class3.cs |- partialClass1.cs |- partialClass2.cs |- obj/ |- Program.cs Desse modo podemos criar um \"peda\u00e7o\" da classe em cada arquivo separado. O c\u00f3digo ficar\u00e1 assim: // c# // parte 1 public partial class ClasseParcial { public string tarefa { get ; set ; } } // parte 2 using System ; public partial class ClasseParcial { public void ExibeTarefa () { Console . WriteLine ( \"Esu estou \" + this . tarefa ); } } No arquivo Program.cs teremos: // c# using System ; class MainClass { public static void Main ( string [] args ) { ClasseParcial classeParcial = new ClasseParcial (); classeParcial . tarefa = \"escrevendo\" ; classeParcial . ExibeTarefa (); } } A documenta\u00e7\u00e3o oficial pode ser encontrada nesse link .","title":"Namespaces"},{"location":"nav/PUC/periodo2/programacao_modular/#heranca","text":"","title":"Heran\u00e7a"},{"location":"nav/PUC/periodo2/programacao_modular/#generalizacao-e-especificacao","text":"Em todo processo de desenvolvimento \u00e9 normal que a solu\u00e7\u00e3o evolua com o passar do tempo e estruturas criadas anteriormente (como m\u00f3dulos) acabam evoluindo junto. Nesse contexto \u00e9 que surgem dois conceitos importantes para o nosso aprendizado: Generaliza\u00e7\u00e3o e Especifica\u00e7\u00e3o . Podemos entender como processo de Generaliza\u00e7\u00e3o a constru\u00e7\u00e3o de uma classe gen\u00e9rica a partir da abstra\u00e7\u00e3o de v\u00e1rias classes mais definidas. Como, por exemplo, ao desenvolvermos uma solu\u00e7\u00e3o que tenha v\u00e1rios objetos relacionados \u00e0 cada tipo de produto que um supermercado venda. Podemos procurar os elementos comuns em todas as classes de diferentes produtos e construir uma classe maior denominada ``produto\". Chamamos esse caminho (de baixo pra cima) de bottom-up. No caminho oposto, temos o processo de Especifica\u00e7\u00e3o . Nessa l\u00f3gica, podemos partir de uma classe maior e, pela necessidade, criamos subclasses que compartilham elementos comuns com essa classe mais geral. Como exemplo, podemos citar um sistema de gerenciamento de condom\u00ednio que pode ter a classe \"bloco\" onde vai receber todas as informa\u00e7\u00f5es e m\u00e9todos de cada bloco e, por demanda de informa\u00e7\u00f5es mais detalhadas, passemos a criar classes menores chamadas \"andar\" ou \"apartamento\" que cont\u00e9m informa\u00e7\u00f5es adicionais ao nosso objeto anterior. Esse caminho (de cima pra baixo) \u00e9 chamado de top-down. Heran\u00e7a Na cria\u00e7\u00e3o de uma classe atrav\u00e9s da generaliza\u00e7\u00e3o ou da especifica\u00e7\u00e3o \u00e9 que o conceito de heran\u00e7a \u00e9 nascido. Como estamos criando classes em termos de outras pr\u00e9-existentes, devemos descrever a rela\u00e7\u00e3o entre essas diferentes classes. No momento da defini\u00e7\u00e3o da rela\u00e7\u00e3o de heran\u00e7a podemos usar os v\u00ednculos do tipo \"\u00e9 um tipo de\" ou \"\u00e9 um\". Quando criamos uma heran\u00e7a, o objeto mais geral \u00e9 chamado de supertipo. Todos os subtipos desse objeto compartilham as caracter\u00edsticas dele e recebem novas que n\u00e3o s\u00e3o atribu\u00eddas ao supertipo. Podemos chamar os subtipos de classes derivadas , classes filhas , subclasses e etc. Por outro lado, as classes mais gerais podem ser chamadas de classes base , superclasses classes pai e etc. Existem linguagens que permite que uma subclasse receba haran\u00e7a de diferentes superclasses. Chamamos isso de heran\u00e7a m\u00faltipla e, ao contr\u00e1rio do que pode parecer, n\u00e3o \u00e9 uma ideia muito boa porque aumenta o risco de auto acoplamento. Para tanto, o c# n\u00e3o permite heran\u00e7a m\u00faltipla. Exemplo de Heran\u00e7a em c# Agora que aprendemos os conceitos, podemos aprender como criar essas rela\u00e7\u00f5es usando a linguagem c#. Partindo de uma superclasse chamada Pessoa , podemos criar as subclasses do seguinte modo: // c# // superclasse class Pessoa { [...] } // subclasses class Professor : Pessoa { [...] } class Aluno : Pessoa { [...] } Retomando nosso exemplo para o m\u00f3dulo Produto , podemos criar uma subclasse chamada BemDeConsumo : // c# using System ; class BemDeConsumo : Produto { private DateTime validade ; public DateTime Validade { get => this . validade ; set => this . validade = ( value > DateTime . Now ) ? value : DateTime . Now ; } } class BemDuravel : Produto { private in garantia ; public int Validade { get => this . garantia ; set => this . garantia = ( value > 0 ) ? value : 6 ; } } Coment\u00e1rio: N\u00e3o se assustem pela mudan\u00e7a na maneira de escrever as propriedades get e set . Esse token => \u00e9 interpretado do mesmo jeito que o par de chaves vistos anteriormente. Ao usarmos essas subclasses no nosso programa, elas ter\u00e3o os mesmo atributos e m\u00e9todos que a superclasse Produto que elaboramos durante todo esse cap\u00edtulo. Coment\u00e1rio: Existe um princ\u00edpio da programa\u00e7\u00e3o orientada \u00e0 objetos que prioria composi\u00e7\u00e3o ao inv\u00e9s da heran\u00e7a. A ideia \u00e9 que \u00e9 melhor fazer as conex\u00f5es entre classes de mesma hierarquia do que criar uma vasta linha entre superclasses e subclasses. Em tempo oportuno retomaremos essa discuss\u00e3o. Por enquanto segue esse link com esse assunto.","title":"Generaliza\u00e7\u00e3o e Especifica\u00e7\u00e3o"},{"location":"nav/PUC/periodo2/programacao_modular/#construtores-em-classes-filhas","text":"Quando instaciamos um objeto a partir de uma classe filha, primeiro disparamos os construtores da classe pai para, depois, executarmos os construtores da subclasse. Se a classe filha n\u00e3o indicar um construtor diferente, o c# usa o construtor default da classe pai. Entretanto, \u00e9 poss\u00edvel definir quais ser\u00e3o os atributos usados tanto no processo de constru\u00e7\u00e3o herdados quanto nos nativos da subclasse. Para usarmos essa configura\u00e7\u00e3o de constru\u00e7\u00e3o, passamos os par\u00e2metros atrav\u00e9s do token : base(atributos) . Exemplo de Construtores em Classes Estendidas (Subclasses ou Classes Filhas) Para exemplo, usaremos as subclasses BemDeConsumo que j\u00e1 vimos nos exemplos passados. // c# using System ; class BemDeConsumo : Produto { private DateTime validade ; public DateTime Validade { get => this . validade ; set => this . validade = ( validade > DateTime . Now ) ? value : DateTime . Now ; } public BemDeConsumo ( string descricao , float preco , int quantidade , DateTime validade ) : base ( descricao , preco , quantidade ) { this . validade = validade ; } } No exemplo acima, o nosso construtor da classe filha receber\u00e1 4 par\u00e2metros dos quais 3 (descri\u00e7\u00e3o, pre\u00e7o e quantidade) ser\u00e3o usados no processo do construtor da classe pai. Construtores e encapsulamento s\u00e3o o primeiro passo para a garantia da corre\u00e7\u00e3o e robustez de um sistema. Sempre que usarmos a heran\u00e7a, temos que nos valer dessas t\u00e9cnicas para melhorar a qualidade dos nossos programas.","title":"Construtores em Classes Filhas"},{"location":"nav/PUC/periodo2/programacao_modular/#polimorfismo-e-principios-do-projeto-modular","text":"","title":"Polimorfismo e Princ\u00edpios do Projeto Modular"},{"location":"nav/PUC/periodo2/programacao_modular/#polimorfismo-de-inclusao","text":"Nessa se\u00e7\u00e3o vamos aprender como reutilizar solu\u00e7\u00f5es de c\u00f3digo por meio do uso de hierarquia entre classes. Esse tipo de \"transforma\u00e7\u00e3o\" entre classes filhas e superclasses \u00e9 chamado de polimorfismo de inclus\u00e3o .","title":"Polimorfismo de Inclus\u00e3o"},{"location":"nav/PUC/periodo2/programacao_modular/#sobreposicao-de-metodos-virtual-e-override","text":"Podemos conceder certas liberdades aos nossos objetos derivados de superclasses. Uma dessas liberdades \u00e9 a capacidade de sobreposi\u00e7\u00e3o ou override que \u00e9 dada, quando queremos permitir que um atributo ou m\u00e9todo tenha seu funcionamento modificado nas classes filhas mantendo-se o mesmo nome que o seu referente na classe pai. Usamos o token virtual na classe pai no momento da sua constru\u00e7\u00e3o para permitir as sobreposi\u00e7\u00f5es futuras. Da mesma maneira que temos um token na classe pai, temos que usar o token override na classe filha para indicar a sobreposi\u00e7\u00e3o de atributo ou m\u00e9todo. Al\u00e9m de sobrescrever, podemos fazer uso do m\u00e9todo original da superclasse por meio do token de refer\u00eancia base 8 . Outra requisi\u00e7\u00e3o obrigat\u00f3ria no processo de sobreposi\u00e7\u00e3o \u00e9 o uso do token new na hora da cria\u00e7\u00e3o de um m\u00e9todo ou atributo de mesmo nome na classe original. Abaixo temos um exemplo de como podemos expandir um m\u00e9todo criado na classe origina por meio da sobreposi\u00e7\u00e3o. Coment\u00e1rio: At\u00e9 agora usamos v\u00e1rias vezes o token void e ainda n\u00e3o tivemos a satisfa\u00e7\u00e3o de uma defini\u00e7\u00e3o do que ele faz. O token void \u00e9 usado na constru\u00e7\u00e3o de m\u00e9todos sem retorno , ou seja, fun\u00e7\u00f5es que n\u00e3o possuem uma linha com o comando return . // c# using System ; class superClasse { public string str = \"string original\" ; // permitindo a sobrescrita por meio do token 'virtual' public virtual void mostra () { Console . WriteLine ( \"Mostra original\" ); } } class subClasse : superClasse { // criando uma vari\u00e1vel 'str' na classe filha public new string str = \"String nova\" ; // override do m\u00e9todo original public override void mostra () { Console . WriteLine ( \"-------\" ); base . mostra (); // fun\u00e7\u00e3o original Console . WriteLine ( \"-------\" ); Console . WriteLine ( \"Mostra Estendida\" ); Console . WriteLine ( \"-------\" ) } } Polimorfismo Univers\u00e3o de Inclus\u00e3o Os tr\u00eas princ\u00edpios b\u00e1sicos da programa\u00e7\u00e3o orientada \u00e0 objetos s\u00e3o: Encapsulamento Heran\u00e7a Polimorfismo J\u00e1 sabemos o que s\u00e3o os dois primeiros. Sabemos que a heran\u00e7a nos permite reaproveitar c\u00f3digos anteriores em novos contextos. Entretanto, \u00e9 raro termos aplica\u00e7\u00f5es exatamente iguais \u00e0s do momento em que as classes originais foram criadas. \u00c9 precisamente nesse contexto que surge o nosso terceiro princ\u00edpio da OOP. O Polimorfismo nos permite \"adaptar\" ou sobrepor algumas caracter\u00edstica originais trazidas pela heran\u00e7a nos objetos derivados de classes anteriormente cridas. Ele nos permite criar sobreposi\u00e7\u00f5es de m\u00e9todos derivados para o melhor aproveitamento e adapta\u00e7\u00e3o aos problemas novos. Para a exist\u00eancia do polimorfismos s\u00e3o necess\u00e1rios tr\u00eas requisitos: Heran\u00e7a Sobreposi\u00e7\u00e3o de M\u00e9todos Refer\u00eancia de uma superclasse que aponte para um objeto de uma subclasse (refer\u00eancia polim\u00f3rfica) Vamos a um exemplo de polimorfismo mas com o devido contexto. \u00c9 natural pensar que um objeto contenha um m\u00e9todo cuja sa\u00edda seja uma string com as informa\u00e7\u00f5es a respeito dele. Em c# existem m\u00e9todos nativos, ou seja, que existe por padr\u00e3o em todos os objetos, cujo um deles \u00e9 chamado toString() que retorna uma string com informa\u00e7\u00f5es sobre o objeto. Coment\u00e1rio: Mais sobre esse assunto pode ser encontrado nessa documenta\u00e7\u00e3o oficial . Mas como esse m\u00e9todo \u00e9 nativo, normalmente ele s\u00f3 tr\u00e1s algumas poucas informa\u00e7\u00f5es sobre os objetos. Pensando nos atributos de qualidade de software que aprendemos at\u00e9 agora, n\u00e3o faz sentido (ou n\u00e3o \u00e9 indicado) criarmos um m\u00e9todo novo que retorne uma string com informa\u00e7\u00f5es das nossas classes instanciadas porque j\u00e1 temos um por default. Como podemos resolver o fato desse m\u00e9todo nativo n\u00e3o ser suficientemente detalhado? Polimorfismo \u00e9 a solu\u00e7\u00e3o! Agora vamos fazer uma mudan\u00e7a no comportamento do m\u00e9todo nativo das classes em c# toString(). // c# class Produto { private int id ; private string descricao ; private float preco ; private int quantidade ; private DateTime fabricacao ; private static int contador = 0 ; private static int instancia = 0 ; [...] public override string ToString () { return $\"Produto {id}: {descricao}\\n Pre\u00e7o : { preco : C2 } \\ n Quant : { quantidade } \\ n Fabric : { fabricacao } \"; } } Coment\u00e1rio: Mas espere um segundo. Temos um override em uma classe pai?! \u00c9 isso mesmo! A raz\u00e3o disso \u00e9 que todas as classes em c# s\u00e3o, de certa maneira, classes filhas de uma classe mestre que cont\u00e9m todos os m\u00e9todos padr\u00f5es. Mesmo as classes pai. \" // c# using System ; class BemDeConsumo : Produto { private DateTime validade ; public DateTime Validade { get => this . validade ; set => this . validade = ( value > DateTime . Now ) ? value : DateTime . Now ; } // construtor public BemDeConsumo ( string descricao , float preco , int quantidade , DateTime fabricacao , DateTime validade ) : base ( descricao , preco , quantidade , fabricacao ) { this . valiade = validade ; } public override string ToString () { return base . ToString () + $\" validade : {validade}\" ; } } Coment\u00e1rio: Essa se\u00e7\u00e3o \u00e9 bem densa e importante. Pare e reflita sobre os c\u00f3digos que foram vistos aqui. Revise sempre que necess\u00e1rio.","title":"Sobreposi\u00e7\u00e3o de M\u00e9todos (virtual e override)"},{"location":"nav/PUC/periodo2/programacao_modular/#classes-abstratas","text":"Em c# podemos definir m\u00e9todos sem declarar as suas implementa\u00e7\u00f5es, ou seja, reservamos os nomes mas n\u00e3o dizemos o que eles far\u00e3o. N\u00e3o \u00e9 de se estranhar que esses m\u00e9todos recebam a nomenclatura de m\u00e9todos abstratos . Se uma classe possui um ou mais desses m\u00e9todos ela \u00e9 chamada de classe abstrata porque n\u00e3o cont\u00e9m tudo que \u00e9 necess\u00e1rio para a constru\u00e7\u00e3o de uma classe normal. Como as classes abstratas s\u00e3o \"incompletas\", n\u00e3o podemos instanciar objetos com elas. Entretanto, podemos usar o que aprendemos de polimorfismo para \"preencher\" essas lacunas por meio das classes derivadas. Uma classe herdeira tamb\u00e9m herda os m\u00e9todos da classe abstrata, sejam eles abstratos ou n\u00e3o. Abaixo temos a cria\u00e7\u00e3o de uma classe abstrata com um m\u00e9todo abstrato. Percebam o uso do token abstract para esses casos. // c# // criacao da classe abstrata abstract class Pai { // criacao do metodo abstrato public abstract string fazNadaAinda (); } // classe filha class Filha : Pai { public override string fazNadaAinda () { Console . WriteLine ( $\"{Agora eu fa\u00e7o algo!}\" ); } } Perceba que o m\u00e9todo fazNadaAinda \u00e9 apenas declarado sem qualquer constru\u00e7\u00e3o da funcionalidade do mesmo. Se tentarmos instanciar essa classe, teremos um erro porque classes abstratas n\u00e3o podem ser instanciadas em objetos concretos. Mas podemos criar uma classe filha que dar\u00e1 o restante da l\u00f3gica necess\u00e1ria a sua instancia\u00e7\u00e3o. Abaixo temos um exemplo de um programa simples que conta at\u00e9 10 com o uso de uma classe abstrata pai. // c# namespace Program { // classe abstrata public abstract class Pai { // m\u00e9todo abstrato public abstract int fazNadaAinda (); } // classe filha public class Filha : Pai { private int contador ; public int Contador { get => this . contador ; set => this . contador = value ; } // m\u00e9todo abstrato herdado public override int fazNadaAinda () { return contador = ++ contador ; } } // programa class MainClass { public static void Main ( string [] args ) { // instancia\u00e7\u00e3o da classe filha Filha objFilha = new Filha (); // loop usando o m\u00e9todo abstrato que agora possui defini\u00e7\u00e3o while ( objFilha . Contador < 10 ) Console . WriteLine ( $\"{objFilha.fazNadaAinda()}\" ); } } }","title":"Classes Abstratas"},{"location":"nav/PUC/periodo2/programacao_modular/#comparando-virtual-e-abstract","text":"Referente \u00e0s classes: Classes n\u00e3o podem ser virtual Clases com algum elemeto declarado como abstract devem ser abstract tamb\u00e9m Classes abstratas n\u00e3o podem ser instanciadas Referente aos membros das classes: Membros de classes criados com virtual podem ser criados na classe e sobrepostos pelas classes filhas Membros de classes criados com abstract devem ser implementados nas classes filhas por meio do token override Polimorfismo Volte nos 3 requisitos de exist\u00eancia do polimorfismo. Agora podemos ver que para a exist\u00eancia desse conceito, deve existir pelo menos duas classes de hierarquias diferentes em que exista algum grau de cria\u00e7\u00e3o gen\u00e9rica na classe original que ser\u00e1 definida na classe derivada. Para a melhor fixa\u00e7\u00e3o desse conte\u00fado, o professor nos d\u00e1 um exemplo de lista de figuras : Considere que queremos implementar uma lista de figuras gen\u00e9rica capaz de armazenar diversos tipos de objetos geom\u00e9tricos. Cada objeto ter\u00e1 informa\u00e7\u00f5es sobre coordenadas x e y; lado; cor e se possui ou n\u00e3o preenchimento. De posse dessas informa\u00e7\u00f5es, podemos definir um m\u00e9todo desenhar() que mostrar\u00e1 na tela uma representa\u00e7\u00e3o visual da figura cadastrada. Entretanto, cada figura ter\u00e1 o seu conjunto pr\u00f3prio de caracter\u00edsticas. Esse \u00e9 um caso \u00f3timo para o polimorfismo. // c# using System.Drawing ; public abstract class Figura { public int X { get ; set ;} public int Y { get ; set ;} public int Lado { get ; set ;} public Color Cor { get ; set ;} public bool Preenchido { get ; set ;} public figura ( int x , int y , int lado , Color cor , bool preenchido ) { this . X = x ; this . Y = y ; this . Lado = lado ; this . Cor = cor ; this . Preenchido = preenchido ; } // m\u00e9todo abstrato public abstract void Desenha (); } De posse dessa abstra\u00e7\u00e3o chamada Figura , podemos estender esse conceito atrav\u00e9s do polimorfismo atrav\u00e9s da cria\u00e7\u00e3o de classes filhas. // c# class Quadrado : figura { public Quadrado ( int x , int y , int lado , Color cor , bool preenchido ) : base ( x , y , lado , cor , preenchido ) { // como todos os par\u00e2metros foram // usados no construtor base // aqui fica vazio } public override void Desenha () { Console . WriteLine ( $\"Desenhando o Quadrdo\" ) } } class Circulo : Figura { public Circulo ( int x , int y , int lado , Color cor , bool preenchido ) : base ( x , y , lado , cor , preenchido ) { // como todos os parametros foram // usados no construtor base // aqui fica vazio } public override void Desenha () { Console . WriteLine ( $\"Desenhando o Circulo\" ) } } Nosso programa agora \u00e9 capaz (hipoteticamente) de construir figuras que sejam quadrados e c\u00edrculos. Vejam como usamos o polimorfismo para a constru\u00e7\u00e3o dessa solu\u00e7\u00e3o. Podemos criar 2 objetos do seguinte modo: // c# class MainClass { public static Figura [] figuras = new figura [ 10 ]; public static int numfig = 0 ; public static void Main ( string [] args ) { figuras [ numFig ++ ] = new Quadrado ( 10 , 20 , 50 , Color . Red , true ); figuras [ numFig ++ ] = new Circulo ( 100 , 225 , 80 , Color . Blue , false ); for ( int pos = 0 ; pos < numFig ; pos ++ ) { figuras [ pos ]. Desenha (); } } } Coment\u00e1rio: Se ficou na d\u00favida, lembre-se do que aprendemos sobre vetores na disciplina de abstra\u00e7\u00e3o de dados.","title":"Comparando Virtual e Abstract"},{"location":"nav/PUC/periodo2/programacao_modular/#classes-e-membros-selados-sealed","text":"Da mesma maneira que aprendemos como permitir o polimorfismo, o c# tamb\u00e9m nos permite impedir que certas classes ou membros de classe sofram heran\u00e7a ou polimorfismo. Para impedir que uma classe sofra hierarquia, basta defini-la com o token sealed . Isso automaticamente torna esse classe um classe final da hierarquia. Quando o assunto \u00e9 um membro de classe (atributo, m\u00e9todo ou propriedade) a ideia \u00e9 bem parecida. Basta usarmos o token sealed para impedir que outros programadores fa\u00e7am uma modifica\u00e7\u00e3o em algum membro de classe que n\u00e3o temos a inten\u00e7\u00e3o que seja alterado por meio de um override . Como exemplo, o professor da mat\u00e9ria nos d\u00e1 um m\u00e9todo de valida\u00e7\u00e3o de usu\u00e1rio: // c# protected sealed bool validateUser () Se n\u00e3o atribuirmos o selamento do m\u00e9todo, \u00e9 poss\u00edvel que algum programador mal intencionado possa modificar nosso m\u00e9todo por algo como: // c# protected override bool validateUser () { return true ; } Desse modo, nosso m\u00e9todo de valida\u00e7\u00e3o se tornou completamente in\u00fatil. Entretanto, da maneira que constru\u00edmos, o programa do programador mal intencionado retornar\u00e1 um erro porque ele est\u00e1 tentando usar polimorfismo em um membro de classe selado. Outra vantagem al\u00e9m da seguran\u00e7a \u00e9 a performance. Como aquela classe n\u00e3o ser\u00e1 mais hierarquizada, o compilador trabalhar\u00e1 com ela de um modo a n\u00e3o se preocupar com associa\u00e7\u00f5es din\u00e2micas existentes em classes com polimorfismo. Comparando Private e Sealed Uma d\u00favida que pode surgir \u00e9 a respeito da diferen\u00e7a pr\u00e1tica entre usarmos o escopo private para controle de acesso e o sealed para controle de hierarquia. Vamos aos comparativos: Private N\u00e3o podem ser declarados no namespace (apenas dentro de uma classe) N\u00e3o permitem inst\u00e2ncias Acesso aos membros apenas no bloco de declara\u00e7\u00e3o Sealed Podem ser declaradas no namespace Permitem instanciamento (dependendo se for public, private ou protected) Membros de inst\u00e2ncias podem ser acessados por meio dos seus objetos e m\u00e9todos Em uma an\u00e1lise b\u00e1sica, o private tamb\u00e9m \u00e9 um tipo de controle. Mas o sealed permite que as classes ainda permitam que seus m\u00e9todos sejam acess\u00edveis \u00e0s classes filhas sem que possam alterar seus membros e, no caso de uma classe selada, temos a vantagem de instanciamento e cria\u00e7\u00e3o no namespace. Abaixo temos um exemplo da implementa\u00e7\u00e3o desses conceitos. // c# using System ; namespace ClassesSealed { class Extensivel { public virtual void Primeiro () { Console . WriteLine ( \"Extens\u00edvel: primeiro m\u00e9todo.\" ); } public virtual void Segundo () { Console . WriteLine ( \"Extens\u00edvel: segundo m\u00e9todo.\" ); } } // Aqui temos uma classe estend\u00edvel com dois procedimentos que apenas imprimem sa\u00eddas no // terminal. Agora vamos acompanhar como podemos interagir com ela usando o token `sealed`. // classe com membro selado class MembroSelado : Extensivel { public sealed override void Primeiro () { Console . WriteLine ( \"Membro Selado: primeiro m\u00e9todo.\" ); } public override void Segundo () { Console . WriteLine ( \"Membro Selado: segundo m\u00e9todo.\" ); } } // classe selada filha da classe de membros selados sealed class Selada : MembroSelado { // Tentativa de sobrepor um m\u00e9todo selado // error: 'Selada.Primeiro()': cannot override inherited member 'MembroSelado.Primeiro()' protected override void Primeiro () { Console . WriteLine ( \"Selada: primeiro m\u00e9todo.\" ); } // esse nao retorna erro public override void Segundo () { Console . WriteLine ( \"Selada: segundo m\u00e9todo.\" ); } } // Tentativa de extender uma classe selada. // error: 'Sobreposi\u00e7\u00e3o': cannot derive from sealed type 'Selada' class Sobreposicao : Selada { protected override void Primeiro () { Console . WriteLine ( \"Sobreposicao: primeiro m\u00e9todo.\" ); } public override void Segundo () { Console . WriteLine ( \"Sobreposicao: segundo m\u00e9todo.\" ); } } class MainClass { public static void Main ( string [] args ) { Console . WriteLine ( \"O c\u00f3digo n\u00e3o compila.\" ); } } }","title":"Classes e Membros Selados (sealed)"},{"location":"nav/PUC/periodo2/programacao_modular/#polimorfismo-parametrico","text":"Tudo o que estudamos sobre polimorfismo que usa heran\u00e7a para reutiliza\u00e7\u00e3o de c\u00f3digos com a esten\u00e7\u00e3o dos m\u00e9todos \u00e9 chamado do polimorfismo de inclus\u00e3o . Agora, vamos aprender sobre outro tipo de polimorfismo. Imagine que temos que resolver um problema em uma classe e, no processo de pondera\u00e7\u00e3o da solu\u00e7\u00e3o, nos deparamos com uma outra classe que cont\u00e9m um m\u00e9todo que resolve o nosso problema. Podemos reutilizar m\u00e9todos entre classes que n\u00e3o compartilham a mesma hierarquia? A resposta \u00e9 sim. Isso \u00e9 o que chamamos de polimorfismo param\u00e9trico . Nesse tipo de polimorfismo, n\u00f3s n\u00e3o precisamos instanciar um novo objeto a partir da classe. Podemos fazer uso diretamente dos m\u00e9todos desse tipo especial de classe chamada de classe gen\u00e9rica .","title":"Polimorfismo Param\u00e9trico"},{"location":"nav/PUC/periodo2/programacao_modular/#tipos-genericos","text":"Tal qual o polimorfismo de inclus\u00e3o, teremos um novo token usado na constru\u00e7\u00e3o das classes em que usaremos o polimorfismo param\u00e9trico. Chamamos de classes gen\u00e9ricas as classes que s\u00e3o criadas sem um tipo de dados especificado. O tipo de dado que essa classe trabalhar\u00e1 ser\u00e1 passado como um par\u00e2metro 9 . A declara\u00e7\u00e3o de uma classe gen\u00e9rica \u00e9 feita do mesmo modo da declara\u00e7\u00e3o de uma classe normal com a inclus\u00e3o do token <> ap\u00f3s o nome da classe que dar\u00e1 a declara\u00e7\u00e3o do tipo. A declara\u00e7\u00e3o de um objeto instanciado de uma classe gen\u00e9rica \u00e9 feita com a passagem do par\u00e2metro do tipo de dado a ser manipulado no objeto. Diferente das classes abstratas, n\u00e3o precisamos instanciar com a cria\u00e7\u00e3o de um novo objeto nomeado. Podemos apenas passar o tipo de dado e fazer uso dos m\u00e9todos da classe diretamente por meio de um ponto seguido do nome do m\u00e9todo ( classeGenerica.metodo(new T) ). Assim como os tipos abstratos, dentro de uma classe gen\u00e9rica podemos ter membros de classes (m\u00e9todos, atributos e propriedades) passados como sendo de tipo gen\u00e9ricos. A \u00fanica condi\u00e7\u00e3o \u00e9 que seja usada a vari\u00e1vel declarada na assinatura da classe (ela est\u00e1 dentro dos sinais <> . Abaixo temos um exemplo de constru\u00e7\u00e3o de um programa que julga se dois conjuntos s\u00e3o disjuntos 10 . Coment\u00e1rio: N\u00e3o se preocupe se n\u00e3o entender o algoritmo de primeira. Eu tentei ser bem generoso nos coment\u00e1rios mas esse programa \u00e9, na minha opini\u00e3o, desafiador de ser compreendido por quem n\u00e3o tem um background de matem\u00e1tica e programa\u00e7\u00e3o um pouco desenvolvido. Leia quantas vezes for necess\u00e1rio e, se a d\u00favida persistir, entra em contato comigo pela issue do github. // c# using System ; namespace Generics { // criacao da classe generica public class Conjuntos < T > { // criacao de uma funcao como membro estatico // que retorna um booleano para os vetores \"s\" e \"w\" // do tipo de dado definido por \"<T>\" public static bool disjuntos ( T [] s , T [] w ) { // loop em todos os elementos do vetor \"s\" for ( int i = 0 ; i < s . Length ; i ++ ) { // loop em todos so elementos do vetor \"w\" for ( int j = 0 ; j < w . Length ; j ++ ) { // Teste: O elemento s[i] \u00e9 igual ao w[j]? // se sim, eles possuem algum elemento em comum // logo, nao sao conjuntos disjuntos! if ( s [ i ]. Equals ( w [ j ])) return false ; } } // se nenhum dos elementos dos dois conjuntos // for igual ao do outro, entao sao conjuntos // disjuntos! return true ; } } // Programa Principal class MainClass { public static void Main ( string [] args ) { if ( Conjuntos < int > . disjuntos ( new int [] { 1 , 3 , 5 }, new int [] { 2 , 4 , 6 })) { Console . WriteLine ( \"Conjuntos Disjuntos!\" ); } else { Console . WriteLine ( \"conjuntos n\u00e3o Disjuntos!\" ); } } } } Perceba como usamos o m\u00e9todo disjuntos() sem que houvesse a necessidade de instanciamento de um novo objeto com o token new Conjuntos . S\u00f3 precisamos dizer qual o tipo de dado e construir diretamente no m\u00e9todo os conjuntos que seriam avaliados pelo m\u00e9todo.","title":"Tipos Gen\u00e9ricos"},{"location":"nav/PUC/periodo2/programacao_modular/#colecoes","text":"Uma cole\u00e7\u00e3o ou collection \u00e9 um objeto que agrupa m\u00faltiplos objetos. Elas padronizam o tratamento dos objetos dentro do programa por meio da uma interface gen\u00e9rica. Mas paremos pra pensar 1 minuto. N\u00f3s j\u00e1 n\u00e3o t\u00ednhamos definido um conjunto de objetos como um namespace ? Sim! Uma cole\u00e7\u00e3o \u00e9 um namespace nativo que nos fornecem m\u00e9todos otimizados para o tratamento de dados de maneira a tornar nossos programas o mais eficiente poss\u00edvel. Coment\u00e1rio: Eu gosto de pensar nas cole\u00e7\u00f5es como um \"kit de ferramentas\" que j\u00e1 nos fornecem maneiras de lidar com problemas comuns. Mais vale aprender bem quais ferramentas o .NET nos d\u00e1 nativamente do que perder horas e horas reinventando a roda. Aqui vamos aprender sobre algumas das cole\u00e7\u00f5es que certamente usaremos v\u00e1rias vezes ao longo da nossa trajet\u00f3ria de desenvolvedores c#. Mas antes de irmos direto para elas, vamos aprender algumas caracter\u00edsticas em comum que podemos avaliar para definir quando e onde implementar alguns de seus objetos. Podemos elencar as seguintes funcionalidades comuns \u00e0s cole\u00e7\u00f5es: Adicionar itens Remover itens Pesquisar itens Substituir itens Copiar conjuntos de itens ou clonar Retornar as propriedades de capacidade Cole\u00e7\u00f5es em C# Existem 3 namespaces com as collections em c# (basta clicar para acessar a documenta\u00e7\u00e3o oficial da microsoft): System.Collections.Generic - Cole\u00e7\u00f5es gen\u00e9ricas usando polimorfismo param\u00e9trico System.Collectons.Concurrent - Cole\u00e7\u00f5es gen\u00e9ricas para aplica\u00e7\u00f5es muilt-thread System.Collections - Cole\u00e7\u00f5es n\u00e3o gen\u00e9ricas que usam polimorfismo de inclus\u00e3o Aqui est\u00e3o alguns objetos da cole\u00e7\u00e3o System.Collections.Generic : Dictionary<TKey,TValue> List<T> Queue<T> SortedList<TKey,TValue Stack<T> Aqui est\u00e3o alguns objetos da cole\u00e7\u00e3o System.Collections.Concurrent : BlockingCollection<T> ConcurrentDictionary<TKey,TValue> ConcurrentQueue<T> ConcurrentStack<T> Aqui est\u00e3o alguns objetos da cole\u00e7\u00e3o System.Collections : ArrayList Hashtable Queue Stack Por agora, vamos apenas citar a exist\u00eancia dessas cole\u00e7\u00f5es mas \u00e9 mandat\u00f3rio que saibamos usar esses objetos para uma produ\u00e7\u00e3o de software mais profissional com c#. Classe Collection<T> Essa cole\u00e7\u00e3o fornece a base para implementa\u00e7\u00e3o de tipos gen\u00e9ricos de dados. As classes anteriores manipulam os m\u00e9todos fornecidos justamente por Collection<T> . A documenta\u00e7\u00e3o oficial dessa classe pode ser encontrada nesse link . Agora vamos aprender um pouco sobre essa classe. Construtores: Podemos iniciar uma cole\u00e7\u00e3o vazia com Collectoin<T>() ou podemos passar os valores de um objeto anteriormente criado como, por exemplo, Collection<T>(IList<T>) . Propriedades: Count - Retorna o n\u00famero de elementos Items - Retorna uma lista dos elementos do tipo Ilist 11 Item[Int32] - Retorna ou altera um elemento em uma posi\u00e7\u00e3o da lista. Index inicial \u00e9 0. M\u00e9todos de manipula\u00e7\u00e3o de elementos: Add(T) - Insere um elemento no final Remove(T) - Remove a primeira ocorr\u00eancia do elemento SetAt(Int32, T) - Insere um elementa na posi\u00e7\u00e3o Remove(Int32) - Remove um elemento na posi\u00e7\u00e3o IndexOf(T) - Retorna o index de um elemento Contains(T) - Bolleano para verificar se um elemento est\u00e1 na cole\u00e7\u00e3o M\u00e9todos de manipula\u00e7\u00e3o de conjuntos de elementos: Clear() - Remove todos os elementos CopyTo(T[], Int32) - Copia a Collection para um vetor Equals(Object) - Compara duas cole\u00e7\u00f5es A vantagem do uso do Collection<T> \u00e9 que o c# j\u00e1 sabe como otimizar o uso de mem\u00f3ria para esse tipo gen\u00e9rico de dados. Isso retira a necessidade de gest\u00e3o de armazenamento para solu\u00e7\u00f5es que envolvam manipula\u00e7\u00e3o de grandes volumes de dados.","title":"Cole\u00e7\u00f5es"},{"location":"nav/PUC/periodo2/programacao_modular/#delegates-funcoes-lambda-e-eventos","text":"Para o fechamento da nossa unidade de polimorfismo param\u00e9trico temos tr\u00eas conceitos avan\u00e7ados de programa\u00e7\u00e3o.","title":"Delegates, Fun\u00e7\u00f5es Lambda e Eventos"},{"location":"nav/PUC/periodo2/programacao_modular/#delegates-delegacoes","text":"Essa estrutura nos permite passar uma refer\u00eancia de um m\u00e9todo para outras classes. A sintaxe do m\u00e9todo com delega\u00e7\u00e3o \u00e9 parecida com a de um m\u00e9todo qualquer com a adi\u00e7\u00e3o do token delegate : // c# public delegate void Exibir ( string mensagem ); N\u00f3s iniciamos o delegate passando o m\u00e9todo como par\u00e2metro. Por exemplo, se quisermos usar o m\u00e9todo Exibir() acima para executar m\u00e9todos que mostram mensagens. Podemos fazer do seguinte modo: \" // c# public class Program { // Metodo que printa mensagem no console public static void MensagemConsole ( string mensagem ) { Console . WriteLine ( mensagem ); } // Delegate com o tipo string de input e // tipo void de metodo public class Mensageiro { public delegate void Exibir ( string mensagem ); } // Como o nosso delegate foi criado para um void com string // e o nosso metodo MensagemConsole tambem possui essas // caracteristicas, podemos \"puxar\" esse metodo para // o nosso procedimento delegado Mensageiro public static void Main ( string [] args ) { Mensageiro . Exibir exibir = new Mensageiro . Exibir ( MensagemConsole ); exibir ( \"Mensagem no console!\" ); } } Alguns podem se perguntar qual a utilidade de se puxar um m\u00e9todo de outra classe. Agora observe essa modifica\u00e7\u00e3o do c\u00f3digo: // c# namespace Program { public class Class1 { // Metodo que printa mensagem no console public static void MensagemConsole ( string mensagem ) { Console . WriteLine ( mensagem ); } // Delegate com o tipo string de input e // tipo void de metodo public class Mensageiro { public delegate void Exibir ( string mensagem ); } } public class Class2 { // Como o nosso delegate foi criado para um void com string // e o nosso metodo MensagemConsole tambem possui essas // caracteristicas, podemos \"puxar\" esse metodo para // o nosso procedimento delegado Mensageiro public static void Main ( string [] args ) { Class1 . Mensageiro . Exibir exibir = new Class1 . Mensageiro . Exibir ( Class1 . MensagemConsole ); exibir ( \"Mensagem no console!\" ); } } } Perceba que agora, estamos fazendo refer\u00eancia ao m\u00e9todo MensagemConsole no delegate que est\u00e3o em outra classe sem qualquer rela\u00e7\u00e3o de hierarquia entre as classes 1 e 2! O poder do delegate est\u00e1 justamente na capacidade de passarmos m\u00e9todos sem o v\u00ednculo formal das hierarquias. A documenta\u00e7\u00e3o oficial dessa estrutura \u00e9 encontrada nesse link .","title":"Delegates (Delega\u00e7\u00f5es)"},{"location":"nav/PUC/periodo2/programacao_modular/#funcoes-anonimas-lambda","text":"Essa \u00e9 uma das estruturas que possuem v\u00e1rias implanta\u00e7\u00f5es pr\u00e1ticas. At\u00e9 agora, todas as fun\u00e7\u00f5es que criamos tinham de ter um nome associado. Entretanto, c# e outras linguagens modernas permitem criar fun\u00e7\u00f5es espec\u00edficas que podem ser executadas sem a necessidade de cria\u00e7\u00e3o de um objeto para elas. Temos algumas maneiras de usar as fun\u00e7\u00f5es lambda em c#. A primeira delas \u00e9 com uso do delegate: // c# classe Program { // delegate com int e dois valores inteiros public delegate int Soma ( int x , int y ); static void Main ( string [] args ) { // aqui estamos declarando a forma // funcional da funcao Soma(x,y) // sintaxe 1 Soma soma1 = ( int x , int y ) => { int result = x + y ; return result ; } // sintaxe 2 Soma soma2 = ( x , y ) => ( x + y ); } } Agora vamos aprender como usar fun\u00e7\u00f5es lambdas com o uso da classe Func<T, TResult> // c# class Program { static void Main ( string [] args ) { // sintaxe 1 Func < int , int , int > soma1 = ( int x , int y ) => { int result = x + y ; return result ; } // sintaxe 2 Func < int , int , int > soma2 = ( x , y ) => ( x + y ); } }","title":"Fun\u00e7\u00f5es An\u00f4nimas (Lambda)"},{"location":"nav/PUC/periodo2/programacao_modular/#events","text":"Por fim, vamos aprender como uma classe pode publicar notifica\u00e7\u00f5es para classes assinantes. Isso mesmo, estamos falando aqui de comunica\u00e7\u00e3o entre classes. Esse modelo de comunica\u00e7\u00e3o \u00e9 chamado de Publish-Subscribe (Pub-Sub) e funciona baseado em dois tipos de classes. As classes assinantes se registram na classe geradora dos eventos para que as mesmas sejam notificadas quando uma mudan\u00e7a de estado acontecer. Os exemplos mais cl\u00e1ssicos s\u00e3o relacionados \u00e0 intera\u00e7\u00e3o do usu\u00e1rio humano como: clique do mouse, novo email, teclas apertadas, c\u00f3pia de arquivo finalizada e etc. A classe assinante registra um m\u00e9todo de chamada de retorno , denominado de callback 12 que \u00e9 executado quando a condi\u00e7\u00e3o do evento \u00e9 satisfeita na classe geradora. Chamamos de hook o processo de adicionar um callback em um evento e, logicamente, chamamos o contr\u00e1rio disso de unhook . Abaixo temos um exemplo em que \"acordaremos\" as classes registradas no alarme: // c# // Classe geradora class Alarme { // delegate Acordar que sera usado como // callback do evento public delegate void Acordar ( string msg ); // evento que vai chamar o metodo Acordar // em cada assinante sendo que sao as classes // assinantes que vao inserir os callbacks public event Acordar TempoEsgotado ; // void para disparar o evento public void DisparaEvento () { AoEsgotarTempo (); } public void AoEsgotarTempo () { // verifica se existem assinantes do evento // se alguma classe tiver assinado por // meio do hook de callback o TempoEsgotado nao // vai ser null if ( TempoEsgotado != null ) { TempoEsgotado ( \"Tempo Esgotado!\" ); } } } // Classe assinante class Program { // callback da classe assinante public static void MensagemConsole ( string msg ) { Console . WriteLine ( mensagem ); } // programa static void Main ( string [] args ) { Alarme alarme = new Alarme (); // hook do callback no alarme com o // metodo MensagemConsole alarme . TempoEsgotado += MensagemConsole ; // disparando o evento para receber // a mensagem do callback alarme . DisparaEvento (); } } Coment\u00e1rio: De todas as se\u00e7\u00f5es desse microfundamento, essa \u00e9 provavelmente a que mais cont\u00e9m conceitos que diferenciam os programadores .NET iniciantes dos mais experientes. O uso dessas tr\u00eas categorias de polimorfismo param\u00e9trico fazem muita diferen\u00e7a na qualidade do seu c\u00f3digo e devem ser entendidas muito profundamente.","title":"Events"},{"location":"nav/PUC/periodo2/programacao_modular/#projeto-orientado-para-objetos","text":"O objetivo de qualquer programador profissional \u00e9 produzir c\u00f3digos de qualidade. Nessa \u00faltima parte do microfundamento, vamos aprender sobre alguns normativos que regem os princ\u00edpios e pr\u00e1ticas para constru\u00e7\u00e3o de programas com essas qualidades. Os princ\u00edpios que vamos aprender aqui s\u00e3o uma maneira de se produzir c\u00f3digo f\u00e1cil de ler, f\u00e1cil de modificar e f\u00e1cil de testar. De modo a permitir que um time de desenvolvedores atue de forma colaborativa. Coment\u00e1rio: Uma boa maneira de saber se estamos indo bem \u00e9 sempre olhar os nossos c\u00f3digos se perguntando \"Outra pessoa poderia continuar o meu trabalho se eu sair desse projeto?\" ou \"Caso eu precise trabalhar com algu\u00e9m, essa pessoa conseguir\u00e1 entender o meu c\u00f3digo apenas olhando diretamente para ele?\".","title":"Projeto Orientado para Objetos"},{"location":"nav/PUC/periodo2/programacao_modular/#principios-solid","text":"Os princ\u00edpios que vamos estudar agora foram introduzidos por Robert C. Martin (tamb\u00e9m conhecido como Uncle Bob) no artigo Design Principles and Design Patterns . Posteriormente, os conceitos foram desenvolvidos por Michael Feathers e ganharam o acr\u00f4nimo SOLID. Nos \u00faltimos 20 anos, esses princ\u00edpios t\u00eam impacto fortemente o mundo das programa\u00e7\u00e3o orientada \u00e0 objetos e devem ser compreendidos e internalizados por quem se prop\u00f5e a entrar nessa jornada. Os princ\u00edpios SOLID s\u00e3o um conjunto de boas pr\u00e1ticas de projeto de software que nos permitem construir sistemas com extensibilidade, reusabilidade, adaptabilidade e manutenibilidade. O objetivo \u00e9 manter a complexidade de uma solu\u00e7\u00e3o constante mesmo com o crescimento do tamanho dos m\u00f3dulos. Os princ\u00edpios SOLID s\u00e3o: S ingle Responsability Principle (SRP) O pen/Closed Principle (OCP) L iskov Substitution Principle (LSP) I nterface Segregation Principle (ISP) D ependency Inversion Principle (DIP) Fonte: Martin, Robert Cecil (2002). Agile software development: principles, patterns, and practices. Upper Saddle River, NJ: Pearson Education. ISBN 9780135974445. Single Responsability Principle - SRP \"Uma classe deve ter apenas um motivo para mudar, o que significa que ele deve ter uma \u00fanica fun\u00e7\u00e3o\" Se, na constru\u00e7\u00e3o das classes, usarmos os outros princ\u00edpios de coes\u00e3o e encapsulamento que j\u00e1 aprendemos anteriormente, o SRP \u00e9 consequ\u00eancia direta. Como cada classe deve ter uma raz\u00e3o de existir o mais espec\u00edfica e clara poss\u00edvel, cada classe deve ser facilmente definida e deve ter apenas uma fun\u00e7\u00e3o. Para Roger Whitney, 2016, Advanced Object-Oriented Design \\& Programming, se voc\u00ea precisar de mais de 25 palavras (uma frase) com o uso dos conectivos \"e\" ou \"ou\" para definir o que \u00e9 uma determinada classe, significa que o SRP j\u00e1 n\u00e3o foi observado. As classes precisam ter uma raz\u00e3o objetiva e compacta para existir. Open/Closed Principle - OCP \"Objetos ou entidades devem ser abertos para extens\u00e3o, mas fechados para modifica\u00e7\u00e3o\" Aberto para extens\u00e3o significa que temos que pensar em classes abstratas e interfaces que permitam novas classes concretas que estendam suas fun\u00e7\u00f5es sem que haja modifica\u00e7\u00e3o nas classes anteriores. Isso evita termos que adaptar uma classe que seja refer\u00eancia para v\u00e1rias outras constantemente, evitando o risco de quebras em cascata por conflito de heran\u00e7a. Liskov Substitution Principle - LSP \"Se q(x) \u00e9 uma propriedade demonstr\u00e1vel dos objetos x de tipo T. ent\u00e3o q(y) deve ser verdadeiro para objetos y de tipo S, onde S \u00e9 subtipo de T\" Essa maneira de definir \u00e9 derivada da formaliza\u00e7\u00e3o matem\u00e1tica mas, em resumo, se S e \u00e9 uma subclasse de T. Se temos uma propriedade q() que funciona em T, essa propriedade deve ser herdada para S devido a sua heran\u00e7a. Isso implica que podemos sempre Substituir objetos por seus subtipos sem preju\u00edzo porque todos os m\u00e9todos do objeto anterior devem ser herdados pelos objetos filhos. Interface Segregation Principle - ISP \"Classes n\u00e3o devem ser for\u00e7adas a implementar uma interface que n\u00e3o usam, ou seja, n\u00e3o devem ser for\u00e7adas a depender de m\u00e9todos que n\u00e3o usam\" Como contraponto ao LSP, uma classe n\u00e3o deve ter comportamentos (ou m\u00e9todos) que n\u00e3o fa\u00e7am sentidos a ela. Esse controle \u00e9 obtido pela separa\u00e7\u00e3o em classes diferentes para que as classes sempre possuam apenas o necess\u00e1rio. Dependency Inversion Principle - DIP \"M\u00f3dulos de alto n\u00edvel n\u00e3o devem depender de m\u00f3dulos de baixo n\u00edvel. Ambos devem depender de abstra\u00e7\u00f5es\" Na constru\u00e7\u00e3o de solu\u00e7\u00f5es complexas, temos que evitar referenciamento para objetos concretos. As refer\u00eancias devem ser sempre para tipos abstratos que podem ser instanciados em situa\u00e7\u00f5es concretas de uso. Outra implica\u00e7\u00e3o do DIP \u00e9 que n\u00e3o devemos derivar classes de uma classe concreta. As classes base devem ser sempre abstratas porque assim permitem que as subclasses sejam expandidas a medida que novos problemas e melhorias s\u00e3o inseridas no processo. Nenhum m\u00e9todo deve sobrescrever os que foram herdados da sua classe base. Ao fazer isso, corremos o risco de violar o LSP porque aumentamos o risco da propriedade (ou m\u00e9todo) da classe base n\u00e3o se comportar como o previsto na classe derivada ap\u00f3s a sua modifica\u00e7\u00e3o.","title":"Princ\u00edpios SOLID"},{"location":"nav/PUC/periodo2/programacao_modular/#padroes-de-projeto","text":"Para concluir nossa jornada (inicial) no mundo da programa\u00e7\u00e3o modular, vamos aprender mais sobre Padr\u00f5es de Projetos que s\u00e3o maneiras de organizar uma solu\u00e7\u00e3o para resolver problemas relativamente comuns ao processo de Engenharia de Software. Eles s\u00e3o modelos que precisam ser adaptados aos casos concretos e n\u00e3o metodologias dogm\u00e1ticas. Um padr\u00e3o foca apenas nos aspectos essenciais da constru\u00e7\u00e3o do projeto e os detalhes s\u00e3o omitidos porque cada projeto possui especificidades \u00fanicas. Fonte: Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. 1995. Design patterns: elements of reusable object-oriented software. Addison-Wesley Longman Publishing Co., Inc., USA. O come\u00e7o dos padr\u00f5es computacionais \u00e9 referido \u00e0 Beck e Cunningham que apresentaram suas ideias na confer\u00eancia OOPSLA (Object-Oriented Programming, Systems, Languages, and Applications) em 1987 para uma linguagem famosa na \u00e9poca chamada Smalltalk. Posteriormente, os trabalhos de Erich Gamma, Richard Helm, Ralph Johnson e John Vlissides que ficaram conhecidos como \"Gang of Four\" foram respons\u00e1veis pela populariza\u00e7\u00e3o dessa linha de conhecimento no processo de constru\u00e7\u00e3o de solu\u00e7\u00f5es. Os padr\u00f5es apresentados por eles em 1995 ficaram conhecidos como GoF Patterns. O foco dos padr\u00f5es \u00e9 a reutiliza\u00e7\u00e3o de c\u00f3digo . Esse objetivo \u00e9 alcan\u00e7ado porque os padr\u00f5es capturam anos de exper\u00eancia em Engenharia de Software e fornecem solu\u00e7\u00f5es para defini\u00e7\u00e3o da Arquitetura dos sistemas. Como o insumo desse conhecimento \u00e9 a pr\u00e1tica de v\u00e1rios profissionais, o resultado da utiliza\u00e7\u00e3o desses padr\u00f5es costuma ser satisfat\u00f3rio se seguido da maneira correta. Estrutura de um Padr\u00e3o de Projeto Existe uma lista de elementos comuns em um padr\u00e3o de projeto: Nome : Resume a proposta da solu\u00e7\u00e3o Problema : Resumo o objetivo a ser resolvido Contexto : Situa\u00e7\u00f5es de aplica\u00e7\u00e3o ideal Solu\u00e7\u00e3o : Relacionamento entre as entidades Exemplo : Diagramas ilustrativos da solu\u00e7\u00e3o A capacidade de reutiliza\u00e7\u00e3o dos padr\u00f5es de projeto \u00e9 devida a duas caracter\u00edsticas centras nas linguagens orientadas \u00e0 objeto: composi\u00e7\u00e3o e heran\u00e7a. A composi\u00e7\u00e3o \u00e9 entendida como o reuso por delega\u00e7\u00e3o . Se um objeto n\u00e3o pode executar determinada tarefa (porque poder\u00edamos ferir um princ\u00edpio SOLID, por exemplo) ele delega essa fun\u00e7\u00e3o a outro objeto atrav\u00e9s da troca de mensagens. Desse modo podemos ter o reuso de fun\u00e7\u00f5es entre objetos que n\u00e3o compartilham graus de hierarquia. Padr\u00f5es com foco em composi\u00e7\u00e3o s\u00e3o chamados de padr\u00f5es de escopo de objeto . A heran\u00e7a \u00e9 uma abordagem que usa so v\u00ednculos entre subclasses e superclasses. Esse tipo de reuso costuma ser mais simples de implementar porque a l\u00f3gica \u00e9 mais natural e intuitiva, contudo, temos que tomar bastante cuidado para n\u00e3o violarmos os princ\u00edpios da oculta\u00e7\u00e3o da informa\u00e7\u00e3o nessa din\u00e2mica entre classes derivadas e classes principais. Outro risco \u00e9 a viola\u00e7\u00e3o do LSP 13 . Padr\u00f5es com foco na heran\u00e7a s\u00e3o chamados de padr\u00f5es de escopo de classe . Existe uma regra de bolso no mercado que \u00e9 incorporada na frase \"favorecer composi\u00e7\u00e3o sobre heran\u00e7a\". Mesmo que o c# permita uma ampla flexibilidade nessas duas abordagens, as vezes \u00e9 melhor abrir m\u00e3o de funcionalidades dispon\u00edveis em favor de um maior controle de gest\u00e3o das solu\u00e7\u00f5es desenvolvidas. Tipos de Padr\u00f5es No livro da Gang of Four (1995) temos a classifica\u00e7\u00e3o dos pradr\u00f5es em 3 grandes grupos: Criacionais, Estruturais e Comportamentais. Padr\u00f5es Criacionais s\u00e3o padr\u00f5es que focam na abstra\u00e7\u00e3o do processo de cria\u00e7\u00e3o de objetos. Costumam ser mais relacionados \u00e0 inicializa\u00e7\u00e3o e configura\u00e7\u00e3o de objetos. Alguns exemplos de padr\u00f5es desse grupo s\u00e3o: Abstract Factory, Builder, Prototype, Singleton. Padr\u00f5es Estruturais tratam do desacoplamento entre interface e implmenta\u00e7\u00e3o dos objetos. Est\u00e3o mais relacionados \u00e0 composi\u00e7\u00e3o de objetos. Exemplos de padr\u00f5es desse tipos s\u00e3o: Object Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy. Padr\u00f5es Comportamentais s\u00e3o focados na defini\u00e7\u00e3o de mecanismos de colabora\u00e7\u00e3o entre objetos. Mais relacionados \u00e0 distribui\u00e7\u00e3o de responsabilidades e padroniza\u00e7\u00e3o de comunica\u00e7\u00f5es. Exemplos de padr\u00f5es desse tipos s\u00e3o: Chain of Responsability, Comand Iterator, Mediator, Memento, Observer, State, Strategy, Visitor. Coment\u00e1rio: Essa parte final \u00e9 s\u00f3 uma introdu\u00e7\u00e3o geral aos conceitos de padr\u00f5es de projeto. Existe um mundo a ser explorado nesse t\u00f3pico mas agora estamos cientes da exist\u00eancia dele e j\u00e1 temos algumas refer\u00eancias iniciais para aprofundarmos o conhecimento.","title":"Padr\u00f5es de Projeto"},{"location":"nav/PUC/periodo2/programacao_modular/#bibliografia","text":"MCGEE, Pat. C#: A Beginner's Guide . New York: McGraw-Hill Education, 2014 (O\u2019Reilly Media). MARTIN, Robert C.; MARTIN, Micah; TORTELLO, Jo\u00e3o E. N. Princ\u00edpios, padr\u00f5es e pr\u00e1ticas \u00e1geis em C# . Porto Alegre: Bookman, 2011. E-book ISBN 9788577808427. GAMMA, Erich et al. Padr\u00f5es de projeto: solu\u00e7\u00f5es reutiliz\u00e1veis de software orientado a objetos. Porto Alegre: Bookman, 2000. E-book. ISBN 9788577800469. LISKOV, Barbara: Data abstraction and hierarchy , 1987. MARTIN, Robert C. Agile software development: principles, patterns, and practices . Upper Saddle River, NJ: Pearson Education. 2002. ISBN 9780135974445. Esse conceito \u00e9 visto no estudo das fun\u00e7\u00f5es matem\u00e1ticas. \u21a9 Usaremos muitas vezes esse conceito ao longo dessa mat\u00e9ria. \u21a9 Uma das defini\u00e7\u00f5es da palavra inst\u00e2ncia no contexto da ci\u00eancia da computa\u00e7\u00e3o \u00e9 justamente \"um objeto cujo comportamento e estado s\u00e3o definidos por uma classe\". \u21a9 S\u00f3 prossiga quando essa frase tiver pleno sentido na sua mente. \u21a9 Que tamb\u00e9m podemos chamar de classe. \u21a9 Ou seja, atributo ou m\u00e9todo da classe. \u21a9 Os manuais de qualidade de c\u00f3digo ainda imp\u00f5e um limite m\u00e1ximo de 100 linhas para essas implementa\u00e7\u00f5es. Programador bom \u00e9 programador que resolve o problema com poucas linhas de c\u00f3digo. \u21a9 Ele vai funcionar parecido com o token de refer\u00eancia this, por exemplo, base.function(). \u21a9 Dai o nome param\u00e9trico. \u21a9 Ou seja, se n\u00e3o possuem nenhum elemento em comum. \u21a9 A documenta\u00e7\u00e3o desse tipo de lista pode ser lida aqui . \u21a9 Esse termo \u00e9 MUITO comum em v\u00e1rios contextos al\u00e9m desse. Agora voc\u00ea tem o conhecimento para entender muitas outras rela\u00e7\u00f5es complexas em v\u00e1rias linguagens de programa\u00e7\u00e3o. \u21a9 Liskov Substitution Principle pois a classe derivada pode tentar sobrescrever uma propriedade da classe pai. \u21a9","title":"Bibliografia"},{"location":"nav/PUC/periodo3/gerencia_projetos/","text":"hljs.initHighlightingOnLoad(); Assuntos Fundamentos da Ger\u00eancia de Projetos e Vis\u00e3o PMI/PMBok Fundamentos da Ger\u00eancia de Projetos Vis\u00e3o do Project Management Institute - PMI Gerenciamento Prescritivo e \u00c1gil de Projetos e Uso de Ferramentas Gerenciamento Tradicional Gerenciamento \u00c1gil Ferramentas e T\u00e9cnicas Bibliografia Aviso Eu, particularmente, n\u00e3o sou muito f\u00e3 dessas mat\u00e9rias mais de \"humanas\" 1 . Ent\u00e3o aqui eu vou deixar apenas um resumo/sum\u00e1rio dos conceitos trabalhados. O conte\u00fado de verdade vai estar nas leituras indicadas na bibliografia. O foco aqui \u00e9 mais ser um material de consulta para lembrarmos os conceitos aprendidos. Uma dica de ouro pra ler esses materiais \u00e9 se colocar no papel do gerente. Nesse caso, leia Fundamentos da Ger\u00eancia de Projetos e Vis\u00e3o PMI/PMBok Fundamentos da Ger\u00eancia de Projetos Conceitos B\u00e1sicos A primeira coisa que temos que deixar claro \u00e9 a diferen\u00e7a entre atividades de Opera\u00e7\u00e3o e de Projeto . A opera\u00e7\u00e3o tem como principal carater\u00edstica a repeti\u00e7\u00e3o das suas rotinas. Um projeto, por outro lado, tem car\u00e1ter linear que se encaminha para a sua conclus\u00e3o. Um Programa \u00e9 definido como um conjunto de projetos semelhantes agrupados para um melhor gerenciamento. Uma Carteira ou Portf\u00f3lio de projetos \u00e9 o conjunto de projetos agrupados por organiza\u00e7\u00e3o que ir\u00e1 desempenh\u00e1-los. Independentes da semelhan\u00e7a entre eles. Um Project Management Office - PMO \u00e9 o grupo de pessoas que gerencia a carteira de projetos da empresa ou organiza\u00e7\u00e3o. Um Subprojeto \u00e9 um peda\u00e7o de um projeto maior que \u00e9 desmembrado para melhorar a organiza\u00e7\u00e3o das atividades. Conceito de Projeto Agora vamos definir o conceito de Projeto que vamos trabalhar nesse microfundamento. \"Um esfor\u00e7o tempor\u00e1rio empreendido para criar um produto, servi\u00e7o ou resultado exclusivo\". PMBoK, 2017. Ger\u00eancia de Projetos Segundo o PMBoK, a Ger\u00eancia de Projetos \u00e9 aplica\u00e7\u00e3o de conhecimentos, habilidades e t\u00e9cnicas para se atingir os requisitos de um projeto. Esse conjunto de ferramentas v\u00e3o desde as hard skills quanto as soft skills na gest\u00e3o e montagem da equipe que far\u00e1 as atividades. Para uma boa ger\u00eancia, \u00e9 necess\u00e1rio que as atividade sejam acompanhadas de modo a utiliza\u00e7\u00e3o otimizada dos recursos dentro do planejamento inicial. Para isso, o monitoramento cont\u00ednuo \u00e9 necess\u00e1rio, bem como, que sejam disponibilizados os insumos e recursos necess\u00e1rios. Ciclo de Vida de Projeto Basicamente, temos os modelos Prescritivos que s\u00e3o mais burocr\u00e1ticos e r\u00edgidos e os modelos \u00c1geis que s\u00e3o mais velozes e mais aptos \u00e0 mudan\u00e7as ao longo do desenvolvimento. N\u00e3o existe certo e errado, existe o contexto em que o projeto ser\u00e1 executado. Cada caso \u00e9 \u00fanico e deve ser estudado com toda a aten\u00e7\u00e3o. Como Nasce um Projeto As demandas que geram os projetos podem surgir de todos os lugares. Uma terminologia comum a ser usada \u00e9 a de Clientes Internos e Clientes Externos para separar os casos onde as necessidades a serem satisfeitas est\u00e3o dentro ou fora da empresa que ser\u00e1 respons\u00e1vel pela execu\u00e7\u00e3o do projeto. Vis\u00e3o do Project Management Institute - PMI Project Management Institute - PMI Fundado em 1969, \u00e9 um instituto refer\u00eancia mundial em gerenciamento de projetos. Cada associa\u00e7\u00e3o atrelada ao PMI USA \u00e9 chamado de \"cap\u00edtulo\" e, no Brasil, est\u00e1 presente em v\u00e1rios estados. \u00c9 ele quem produz o guia mais famoso da \u00e1rea, o Guia PMBoK. Al\u00e9m dele, temos outras publica\u00e7\u00f5es como: PM Network PM Today Project Management Journal Information Source Guide E faz v\u00e1rios congressos e encontros ao longo do mundo. Al\u00e9m dessa parte de produ\u00e7\u00e3o de conte\u00fados e encontros, existem v\u00e1rias certifica\u00e7\u00f5es dispon\u00edveis pelo PMI: CAPM PMP PgMP PfMP PMI-ACP PMI-RMP PMI-BPA PMI-SP Guia PMBoK \u00c9 a principal refer\u00eancia no que tange \u00e0 ger\u00eancia de projetos. Ele define que um projeto nada mais \u00e9 que um grupo de processos relacionados para o atingimento de uma meta. Na vers\u00e3o 6, temos 49 tipos de processos organizados em 5 grupos: Inicia\u00e7\u00e3o Planejamento Execu\u00e7\u00e3o Monitoramento e Controle Encerramento Projetos no Contexto Organizacional Dependendo do contexto da organiza\u00e7\u00e3o em que o projeto for implementado, a probabilidade de sucesso por ser maior ou menor a depender das caracter\u00edsticas culturais da organiza\u00e7\u00e3o. Damos o nome desses fatores de Fatores Ambientais da Empresa (FAR) Podemos elencar alguns fatores importantes nessa rela\u00e7\u00e3o: Fatores Internos: Cultura, Estrutura e Governan\u00e7a Geografia das instala\u00e7\u00f5es e recursos Infraestrutura Software e tecnologias dispon\u00edveis Disponibilidade dos recursos Capacidade do capital humano Fatores Externos: Condi\u00e7\u00f5es de mercado Stakeholders Legisla\u00e7\u00e3o Governo Outra coisa que pode ser muito importante para a realiza\u00e7\u00e3o de um projeto \u00e9 a base de conhecimentos dispon\u00edveis internamente na empresa. Segundo o PMBoK, damos o nome de Ativos de Processos Organizacionais (APO) a esse reposit\u00f3rio de processos e planos dispon\u00edveis ao uso interno. Podemos separar os APO em duas categorias: Processos, pol\u00edticas e procedimentos Bases de conhecimento organizacionais O conhecimento do contexto da organiza\u00e7\u00e3o \u00e9 importante para que o gerente de projeto seja capaz de cumprir os planejamentos dos projetos de sua responsabilidade. Estrutura Organizacional Dentre os t\u00f3picos relacionados, a estrutura organizacional \u00e9 muito relevante porque, a depender dela, algumas etapas do projeto podem ser grandemente afetadas. Podemos destacar as principais estruturas atualmente como sendo: Estrutura Funcional Foco na especializa\u00e7\u00e3o e na rotina. Muito usado em grandes empresas e no setor p\u00fablico. Estrutura por Projeto Foco na autonomia no cumprimento das metas. Atores tempor\u00e1rios atrelados \u00e0 projetos. Maior celeridade na comunica\u00e7\u00e3o. Estrutura Matricial \u00c9 um misto das duas. Possui alguma flexibilidade na comunica\u00e7\u00e3o entre projetos mas pode causar problemas de falta de clareza na cadeia de comando. Coment\u00e1rio: Na vida real, nenhuma organiza\u00e7\u00e3o \u00e9 100% classific\u00e1vel de acordo com essas estruturas. Mas conhec\u00ea-las ajudar\u00e1 muito caso, quem sabe algum dia, nos encontremos no papel de gerente de projeto. \u00c1reas da Ger\u00eancia de Projetos Segundo o PMBoK podemos dividir a ger\u00eancia de projetos em 10 \u00e1reas: Integra\u00e7\u00e3o - Foco na rela\u00e7\u00e3o entre as demais \u00e1reas Escopo - Foco no atendimento dos requisitos Cronograma - Cumprimento dos prazos estipulados Custos - Foco no montante de recursos necess\u00e1rios para o atingimento das metas Qualidade - Seguimento de padr\u00f5es e normas estabelecidas Recursos - Foco na utiliza\u00e7\u00e3o otimizada dos recursos demandados Comunica\u00e7\u00f5es - Informa\u00e7\u00f5es sobre o projeto de qualidade e tempestivamente Riscos - Mapeamento das dificuldades externas que podem refletir no projeto Aquisi\u00e7\u00f5es - Respons\u00e1vel pela compra dos insumos necess\u00e1rios Stakeholders - Relacionamentos com os atores relevantes e interessados no projeto Tempo em Projetos Uma das \u00e1reas que acabamos de ver \u00e9 a de Cronograma . Podemos destacar essa \u00e1rea porque ela \u00e9 muito relevante para o alcance das metas. O tempo \u00e9 o ativo que \u00e9 mais estudado e, para muitos pesquisadores, \u00e9 a \u00e1rea mais importante da ger\u00eancia de projetos. O PMBoK elenca 6 processos pertencentes \u00e0 essa \u00e1rea: Planejar o gerenciamento do cronograma Definir as atividades Sequenciar as atividades Estimar as dura\u00e7\u00f5es Desenvolver o cronograma Controlar o cronograma Na constru\u00e7\u00e3o do cronograma podemos usar v\u00e1rias representa\u00e7\u00f5es gr\u00e1ficas. Como por exemplo: Diagrama de Setas Diagrama de Rede PERT Gr\u00e1fico de Gantt Coment\u00e1rio: Existem v\u00e1rias ferramentas para gerenciamento. O MS-Project , ClickUp , Trello , Primavera , OpenProj e outros Recursos em Projetos Os recursos do projeto incluem todas as condi\u00e7\u00f5es materiais necess\u00e1rias para o projeto. Isso vai al\u00e9m de apenas insumos materiais. Contempla tamb\u00e9m capital humano, treinamento, infraestrutura de TI e etc. Para se usar os recursos da melhor maneira poss\u00edvel, \u00e9 necess\u00e1rio que o time de recursos esteja bem alinhado com o planejamento afim de otimizarem as aquisi\u00e7\u00f5es e contrata\u00e7\u00f5es no tempo certo para evitar ociosidade de uso ou custo de armazenagem desnecess\u00e1rio. De longe, a parte mais dif\u00edcil e necess\u00e1rio do setor de gerenciamento de recursos \u00e9 a se\u00e7\u00e3o de Recursos Humanos . Existem milhares de t\u00e9cnicas, ferramentas e pesquisas sobre como otimizar os recursos humanos em uma organiza\u00e7\u00e3o e, por esse material ter escopo de overview, n\u00e3o vamos nos aprofundar nesse tema. Gest\u00e3o Financeira de Projetos Normalmente, um cliente faz 2 perguntas em qualquer proposta de projeto: \"Quanto vai custar?\" e \"Quanto tempo vai levar?\". Essas perguntas s\u00e3o cl\u00e1ssicas e, \u00e9 \u00f3bvio, s\u00e3o umas das mais dif\u00edceis de se responder inicialmente porque s\u00f3 se sabe o custo real de um projeto no final do mesmo. Isso nos obriga a ter que estimar custos e necessidades que surgir\u00e3o ao longo das etapas de projeto. As etapas de trabalho da \u00e1rea de or\u00e7amento \u00e9 parecida com as etapas das outras \u00e1reas. Come\u00e7amos com a estimativa dos esfor\u00e7os. Passamos para a estima dos custos relacionados. Por fim, devemos controlar para sabermos se as estimativas est\u00e3o de acordo com a realidade. Para finalizarmos essa parte. Vale destacar os dois artefatos mais importantes produzidos por essa \u00e1rea: Cronograma Financeiro Or\u00e7amento do Projeto Riscos em Projetos Se tiv\u00e9ssemos certeza que um risco aconteceria, ele deixaria de ser um risco. Essa natureza especulativa dos riscos \u00e9 o cerne da \u00e1rea de gest\u00e3o de risco do projeto. Para tanto, esse setor sempre deve levar em considera\u00e7\u00e3o 2 aspectos na an\u00e1lise dos riscos: probabilidade e complexidade . Os processos de trabalho dessa \u00e1rea pelo PMBoK s\u00e3o: Planejar os riscos Identificar os riscos An\u00e1lise qualitativa An\u00e1lise quantitativa Planejamento das respostas Escalar Prevenir Transferir Mitigar Aceitar Implementa\u00e7\u00e3o das respostas Monitoramento dos riscos Gerenciamento Prescritivo e \u00c1gil de Projetos e Uso de Ferramentas Gerenciamento Tradicional Cronograma de Projeto - PERT/CPM Aprendemos anteriormente sobre a import\u00e2ncia da gest\u00e3o do tempo em um projeto. Para tanto, a necessidade de se construir um bom cronograma \u00e9 fundamental. V\u00e1rias s\u00e3o as t\u00e9cnicas que podem ser usadas para essa constru\u00e7\u00e3o. Dentre elas, vamos aprender aqui a chamada Program Evaluation Review Technique (PERT) . A maneira de construir um cronograma PERT \u00e9 analisando cada tarefa envolvida na conclus\u00e3o dos projetos para, no final, termos um gr\u00e1fico de redes (grafos). Normalmente, o PERT \u00e9 aplicado em grandes projetos porque permite: A defini\u00e7\u00e3o de prazos Vis\u00e3o detalhada da sequ\u00eancia de tarefas a serem executadas Facilita a gest\u00e3o do tempo alocado em cada tarefa Tamb\u00e9m \u00e9 muito comum vermos o PERT associado a outra sigla chamada Critical Path Method (CPM) que possui uma abordagem muito parecida e foi desenvolvido praticamente ao mesmo tempo 2 . A principal caracter\u00edstica do CPM \u00e9 que ele mostra as tarefas que possuem um prazo projetado maior de cumprimento. Essas tarefas ser\u00e3o o foco da gest\u00e3o porque, caso seja poss\u00edvel reduzir os tempos previstos para a conclus\u00e3o das mesmas, o projeto ter\u00e1 grandes avan\u00e7os nas entregas. A cria\u00e7\u00e3o do m\u00e9todo PERT/CPM teve sua motiva\u00e7\u00e3o no projeto Polaris de constru\u00e7\u00e3o de um submarino nuclear em 1957. Constru\u00e7\u00e3o dos Diagramas - PERT/CPM Agora vamos aprender como construir um diagrama PERT/CPM. Para tal, precisamos nos certificar que temos os seguintes dados a respeito do nosso projeto: Lista das tarefas a serem executadas at\u00e9 a conclus\u00e3o do projeto Defini\u00e7\u00e3o das rela\u00e7\u00f5es de preced\u00eancia e subsequ\u00eancia entre essas tarefas As estimativas dos tempos para cada tarefa O PERT usa 3 estimativas de tempo: Mais Prov\u00e1vel Otimista Pessimista Em cima dessas estimativas, calcula-se a m\u00e9dia ponderada para ter o valor usado Podemos usar o diagrama de grafos do PERT para descrever as tarefas do seguinte modo: Existem tamb\u00e9m alguns conceitos que podemos nos deparar na constru\u00e7\u00e3o de um cronograma que v\u00e3o ajudar muito na nossa comunica\u00e7\u00e3o com outros profissionais da \u00e1rea: Primeira Data de In\u00edcio (PDI) Primeira Data de T\u00e9rmino (PDT) Folga Livre (FL) \u00daltima Data de In\u00edcio (UDI) \u00daltima Data de T\u00e9rmino (UDT) Folga Total (FT) As primeiras datas s\u00e3o os cen\u00e1rios otimistas onde, caso a atividade seja feita no tempo previsto, o projeto ser\u00e1 beneficiado pelo adiantamento de uma atividade. Ao contr\u00e1rio, as \u00faltimas datas s\u00e3o os casos em que as atividades iniciarem na \u00faltima data poss\u00edvel para que o projeto n\u00e3o tenha um atraso. A FT \u00e9 a soma de todas as FL. Todos esses conceitos podem ser vistos naquele gr\u00e1fico do CPM logo acima. De posse desses conceitos podemos ver que o caminho cr\u00edtico \u00e9 precisamente o caminho que n\u00e3o apresenta nenhuma FL, ou seja, que levar\u00e1 o maior n\u00famero de tempo necess\u00e1rio para o somat\u00f3rio das suas tarefas. Project Libre A partir daqui, o microfundamento \u00e9 baseado na parte pr\u00e1tica do gerenciamento. Portanto, ele pressup\u00f5e que n\u00f3s estamos usando algum software de gest\u00e3o. Como eu disse l\u00e1 em cima, existe uma tonelada de programas hoje em dia. O programa usado no curso foi do Project Libre. Vou colocar a primeira aula de um curso inteiro que est\u00e1 dispon\u00edvel no youtube aqui sobre como usar esse programa para aqueles interessados nele. Monitoramento e Controle A atividade de monitoramento \u00e9 filha do planejamento. Pode ser focada em processos ou em resultados. O foco no processo \u00e9 o processo tradicional que tende a ser mais burocr\u00e1tico e lento enquanto o foco em entregas \u00e9 o principal objetivo das metodologias \u00e1geis de desenvolvimento. N\u00e3o tem certo e errado, cada projeto deve ser avaliado e, a depender de onde se quer chegar, opta-se pela metodologia mais adequada. A atividade e monitoramento tem como objetivo: Minimizar os danos que a complexidade do projeto pode trazer para as entregas Reduzir incertezas e riscos Administrar conflitos Acompanhar o andamento do planejamento Abaixo temos uma lista de t\u00e9cnicas usadas nessa \u00e1rea: Reuni\u00f5es Cronogramas Gr\u00e1fico de Gantt Rede PERT\\CPM Planos 5W2H An\u00e1lise SWOT Monitoramento de Partes Interessadas (Poder x Interesse) KanBan Burndown Chart Encerramento de Projeto Uma vez monitorado, a \u00faltima fase que nos resta \u00e9 o t\u00e9rmino. Nessa fase temos que levantar as entregas finais e compilar os aprendizados gerados ao longo de todas as etapas de monitoramento. Perfil do Gerente de Projetos Um bom gerente de projetos deve ter algumas caracter\u00edsticas desej\u00e1veis: Conhecimento das normas Entendimento do ambiente Conhecimento de gerenciamento geral Habilidades interpessoais E deve estar preparado para alguns conflitos cl\u00e1ssicos dessa \u00e1rea: Conflito autoridade x responsabilidade Estimativas erradas Disputas de poder nas equipes Procura por salvador\\culpado Press\u00f5es de grupos de interesse Falta da maturidade da equipe Falta de engajamento Gerenciamento \u00c1gil J\u00e1 aprendemos um pouco sobre esse tema l\u00e1 no primeiro per\u00edodo . Ent\u00e3o vou ser bem sucinto aqui. Breve hist\u00f3rico Para a gente que est\u00e1 come\u00e7ando a vida de desenvolvedor agora, isso tudo parece muito simples, mas o passado era completamente diferente no mercado de tecnologia. Entre as d\u00e9cadas de 60 e 90, n\u00e3o existiam m\u00e9todos amplamente divulgados e padronizados de desenvolvimento. Era tudo mato mesmo. A primeira vit\u00f3ria significativa na tentativa de padroniza\u00e7\u00e3o ocorreu em 1990 com a cria\u00e7\u00e3o do Rational Unified Process (RUP) que tamb\u00e9m vimos na mat\u00e9ria de introdu\u00e7\u00e3o a engenharia de software . O Manifesto \u00c1gil Com o passar do tempo, o foco na entrega se tornou cada vez mais evidente at\u00e9 que o Manifesto \u00c1gil criou o marco para a mudan\u00e7a do m\u00e9todo de gest\u00e3o de projetos no come\u00e7o do s\u00e9culo XXI. Dele podemos derivar os seguintes princ\u00edpios: Foco na entrega de software o mais r\u00e1pido e com m\u00e1xima frequ\u00eancia poss\u00edvel Aceita\u00e7\u00e3o \u00e0s mudan\u00e7as de requisitos a qualquer tempo Maior aproxima\u00e7\u00e3o com o cliente Fomentar um clima de sinergia e colabora\u00e7\u00e3o S\u00f3 pra gente ter uma ideia, eu pedi pro ChatGPT dar um resumo de quem foram os caras que assinaram esse manifesto. Kent Beck: um desenvolvedor de software americano, conhecido por ter criado o Extreme Programming (XP) e por ter trabalhado em projetos como o Smalltalk e o C++. Mike Beedle : um consultor de gerenciamento de projetos e desenvolvedor de software americano, que tamb\u00e9m ajudou a desenvolver o Enterprise Scrum. Arie van Bennekum : um consultor holand\u00eas de gerenciamento de projetos, que trabalhou em v\u00e1rios projetos de desenvolvimento de software usando metodologias \u00e1geis. Alistair Cockburn : um consultor de gerenciamento de projetos e desenvolvedor de software brit\u00e2nico, conhecido por ter criado o m\u00e9todo Crystal para desenvolvimento de software. Ward Cunningham : um desenvolvedor de software americano, conhecido por ter criado a primeira wiki e por ter trabalhado em projetos como o Framework para Desenvolvimento de Aplica\u00e7\u00f5es (FDP) em Smalltalk. Martin Fowler : um consultor de desenvolvimento de software brit\u00e2nico, que escreveu v\u00e1rios livros sobre design de software e desenvolvimento \u00e1gil, e que ajudou a popularizar o Refactoring. James Grenning : um desenvolvedor de software americano, que trabalha com XP e ajuda a promover pr\u00e1ticas \u00e1geis em todo o mundo. Jim Highsmith : um consultor americano de gerenciamento de projetos, que ajudou a popularizar o Agile Project Management e o Adaptive Software Development. Andrew Hunt : um desenvolvedor de software americano, conhecido por ter escrito o livro \"The Pragmatic Programmer\" e por ter trabalhado em v\u00e1rios projetos de software usando metodologias \u00e1geis. Ron Jeffries : um desenvolvedor de software americano, conhecido por ter criado o XP com Kent Beck e por ter trabalhado em v\u00e1rios projetos de desenvolvimento de software usando metodologias \u00e1geis. Jon Kern : um consultor americano de gerenciamento de projetos, que trabalhou em v\u00e1rios projetos de desenvolvimento de software usando metodologias \u00e1geis. Brian Marick : um consultor americano de gerenciamento de projetos, que trabalha com XP e ajuda a promover pr\u00e1ticas \u00e1geis em todo o mundo. Robert C. Martin : um consultor americano de desenvolvimento de software, que escreveu v\u00e1rios livros sobre design de software e metodologias \u00e1geis, e que ajudou a popularizar o TDD (Desenvolvimento Guiado por Testes). Steve Mellor : um engenheiro de software brit\u00e2nico, conhecido por ter criado a linguagem de modelagem de sistemas OO (OOM) e por ter trabalhado em projetos de software usando metodologias \u00e1geis. Ken Schwaber : um consultor americano de gerenciamento de projetos, que ajudou a desenvolver o Scrum e a promover pr\u00e1ticas \u00e1geis em todo o mundo. Jeff Sutherland : um consultor americano de gerenciamento de projetos, que ajudou a desenvolver o Scrum e a promover pr\u00e1ticas \u00e1geis em todo o mundo. Tem uma ampla experi\u00eancia em lideran\u00e7a, gerenciamento e desenvolvimento de software. Dave Thomas : um desenvolvedor de software canadense, conhecido por ter criado a linguagem de programa\u00e7\u00e3o Elixir, por ter trabalhado em projetos como o desenvolvimento da linguagem Ruby e por ter escrito v\u00e1rios livros sobre programa\u00e7\u00e3o e desenvolvimento de software, incluindo \"Programming Elixir\" e \"The Pragmatic Programmer\". Dave \u00e9 um forte defensor de metodologias \u00e1geis e da programa\u00e7\u00e3o funcional. Junto com o manifesto surgiram os 14 princ\u00edpios \u00e1geis . Quando as coisas v\u00e3o ficando muito grandes pra decorar eu acho que n\u00e3o vale a pena. Pra quem achar importante, pode pesquisar pra ler a respeito. Para encerrar esse apanhado podemos destacar os principais m\u00e9todos \u00e1geis hoje no mercado: XP Scrum Lean TDD Ger\u00eancia \u00c1gil de Projetos O M\u00e9todo \u00c1gil Scrum Atividades e Pap\u00e9is no Scrum Introdu\u00e7\u00e3o ao XP Frameworks e Pr\u00e1ticas \u00c1geis Ferramentas e T\u00e9cnicas Ferramentas e T\u00e9cnicas para Planejamento Ferramentas e T\u00e9cnicas para Gest\u00e3o Bibliografia GUIA do conhecimento em gerenciamento de projetos: (Guia PMBOK\u00ae). 6. ed. S\u00e3o Paulo: Project Management Institute, 2017. xxix, 755 p. ISBN 9781628251920., N\u00ba de Exemplares: 7. VALERIANO, Dalton L. Gerenciamento Estrat\u00e9gico e Administra\u00e7\u00e3o por Projetos . Pearson 324 ISBN 9788534612081. VITOR L. MASSARI. Gerenciamento \u00c1gil de Projetos - 2\u00aa Edi\u00e7\u00e3o. Editora Brasport 0 ISBN 9788574528939. BROD, Cesar. Scrum: guia pr\u00e1tico para projetos \u00e1geis . 2. ed. S\u00e3o Paulo, SP: Novatec, 2015. 198 p. ISBN 9788575224410. E olha que eu sou formado em Economia. \u21a9 PERT \u00e9 de 1957 e o CPM \u00e9 de 1958. \u21a9","title":"Ger\u00eancia de Projetos de TI"},{"location":"nav/PUC/periodo3/gerencia_projetos/#assuntos","text":"Fundamentos da Ger\u00eancia de Projetos e Vis\u00e3o PMI/PMBok Fundamentos da Ger\u00eancia de Projetos Vis\u00e3o do Project Management Institute - PMI Gerenciamento Prescritivo e \u00c1gil de Projetos e Uso de Ferramentas Gerenciamento Tradicional Gerenciamento \u00c1gil Ferramentas e T\u00e9cnicas Bibliografia","title":"Assuntos"},{"location":"nav/PUC/periodo3/gerencia_projetos/#aviso","text":"Eu, particularmente, n\u00e3o sou muito f\u00e3 dessas mat\u00e9rias mais de \"humanas\" 1 . Ent\u00e3o aqui eu vou deixar apenas um resumo/sum\u00e1rio dos conceitos trabalhados. O conte\u00fado de verdade vai estar nas leituras indicadas na bibliografia. O foco aqui \u00e9 mais ser um material de consulta para lembrarmos os conceitos aprendidos. Uma dica de ouro pra ler esses materiais \u00e9 se colocar no papel do gerente. Nesse caso, leia","title":"Aviso"},{"location":"nav/PUC/periodo3/gerencia_projetos/#fundamentos-da-gerencia-de-projetos-e-visao-pmipmbok","text":"","title":"Fundamentos da Ger\u00eancia de Projetos e Vis\u00e3o PMI/PMBok"},{"location":"nav/PUC/periodo3/gerencia_projetos/#fundamentos-da-gerencia-de-projetos","text":"","title":"Fundamentos da Ger\u00eancia de Projetos"},{"location":"nav/PUC/periodo3/gerencia_projetos/#conceitos-basicos","text":"A primeira coisa que temos que deixar claro \u00e9 a diferen\u00e7a entre atividades de Opera\u00e7\u00e3o e de Projeto . A opera\u00e7\u00e3o tem como principal carater\u00edstica a repeti\u00e7\u00e3o das suas rotinas. Um projeto, por outro lado, tem car\u00e1ter linear que se encaminha para a sua conclus\u00e3o. Um Programa \u00e9 definido como um conjunto de projetos semelhantes agrupados para um melhor gerenciamento. Uma Carteira ou Portf\u00f3lio de projetos \u00e9 o conjunto de projetos agrupados por organiza\u00e7\u00e3o que ir\u00e1 desempenh\u00e1-los. Independentes da semelhan\u00e7a entre eles. Um Project Management Office - PMO \u00e9 o grupo de pessoas que gerencia a carteira de projetos da empresa ou organiza\u00e7\u00e3o. Um Subprojeto \u00e9 um peda\u00e7o de um projeto maior que \u00e9 desmembrado para melhorar a organiza\u00e7\u00e3o das atividades.","title":"Conceitos B\u00e1sicos"},{"location":"nav/PUC/periodo3/gerencia_projetos/#conceito-de-projeto","text":"Agora vamos definir o conceito de Projeto que vamos trabalhar nesse microfundamento. \"Um esfor\u00e7o tempor\u00e1rio empreendido para criar um produto, servi\u00e7o ou resultado exclusivo\". PMBoK, 2017.","title":"Conceito de Projeto"},{"location":"nav/PUC/periodo3/gerencia_projetos/#gerencia-de-projetos","text":"Segundo o PMBoK, a Ger\u00eancia de Projetos \u00e9 aplica\u00e7\u00e3o de conhecimentos, habilidades e t\u00e9cnicas para se atingir os requisitos de um projeto. Esse conjunto de ferramentas v\u00e3o desde as hard skills quanto as soft skills na gest\u00e3o e montagem da equipe que far\u00e1 as atividades. Para uma boa ger\u00eancia, \u00e9 necess\u00e1rio que as atividade sejam acompanhadas de modo a utiliza\u00e7\u00e3o otimizada dos recursos dentro do planejamento inicial. Para isso, o monitoramento cont\u00ednuo \u00e9 necess\u00e1rio, bem como, que sejam disponibilizados os insumos e recursos necess\u00e1rios.","title":"Ger\u00eancia de Projetos"},{"location":"nav/PUC/periodo3/gerencia_projetos/#ciclo-de-vida-de-projeto","text":"Basicamente, temos os modelos Prescritivos que s\u00e3o mais burocr\u00e1ticos e r\u00edgidos e os modelos \u00c1geis que s\u00e3o mais velozes e mais aptos \u00e0 mudan\u00e7as ao longo do desenvolvimento. N\u00e3o existe certo e errado, existe o contexto em que o projeto ser\u00e1 executado. Cada caso \u00e9 \u00fanico e deve ser estudado com toda a aten\u00e7\u00e3o.","title":"Ciclo de Vida de Projeto"},{"location":"nav/PUC/periodo3/gerencia_projetos/#como-nasce-um-projeto","text":"As demandas que geram os projetos podem surgir de todos os lugares. Uma terminologia comum a ser usada \u00e9 a de Clientes Internos e Clientes Externos para separar os casos onde as necessidades a serem satisfeitas est\u00e3o dentro ou fora da empresa que ser\u00e1 respons\u00e1vel pela execu\u00e7\u00e3o do projeto.","title":"Como Nasce um Projeto"},{"location":"nav/PUC/periodo3/gerencia_projetos/#visao-do-project-management-institute-pmi","text":"","title":"Vis\u00e3o do Project Management Institute - PMI"},{"location":"nav/PUC/periodo3/gerencia_projetos/#project-management-institute-pmi","text":"Fundado em 1969, \u00e9 um instituto refer\u00eancia mundial em gerenciamento de projetos. Cada associa\u00e7\u00e3o atrelada ao PMI USA \u00e9 chamado de \"cap\u00edtulo\" e, no Brasil, est\u00e1 presente em v\u00e1rios estados. \u00c9 ele quem produz o guia mais famoso da \u00e1rea, o Guia PMBoK. Al\u00e9m dele, temos outras publica\u00e7\u00f5es como: PM Network PM Today Project Management Journal Information Source Guide E faz v\u00e1rios congressos e encontros ao longo do mundo. Al\u00e9m dessa parte de produ\u00e7\u00e3o de conte\u00fados e encontros, existem v\u00e1rias certifica\u00e7\u00f5es dispon\u00edveis pelo PMI: CAPM PMP PgMP PfMP PMI-ACP PMI-RMP PMI-BPA PMI-SP","title":"Project Management Institute - PMI"},{"location":"nav/PUC/periodo3/gerencia_projetos/#guia-pmbok","text":"\u00c9 a principal refer\u00eancia no que tange \u00e0 ger\u00eancia de projetos. Ele define que um projeto nada mais \u00e9 que um grupo de processos relacionados para o atingimento de uma meta. Na vers\u00e3o 6, temos 49 tipos de processos organizados em 5 grupos: Inicia\u00e7\u00e3o Planejamento Execu\u00e7\u00e3o Monitoramento e Controle Encerramento","title":"Guia PMBoK"},{"location":"nav/PUC/periodo3/gerencia_projetos/#projetos-no-contexto-organizacional","text":"Dependendo do contexto da organiza\u00e7\u00e3o em que o projeto for implementado, a probabilidade de sucesso por ser maior ou menor a depender das caracter\u00edsticas culturais da organiza\u00e7\u00e3o. Damos o nome desses fatores de Fatores Ambientais da Empresa (FAR) Podemos elencar alguns fatores importantes nessa rela\u00e7\u00e3o: Fatores Internos: Cultura, Estrutura e Governan\u00e7a Geografia das instala\u00e7\u00f5es e recursos Infraestrutura Software e tecnologias dispon\u00edveis Disponibilidade dos recursos Capacidade do capital humano Fatores Externos: Condi\u00e7\u00f5es de mercado Stakeholders Legisla\u00e7\u00e3o Governo Outra coisa que pode ser muito importante para a realiza\u00e7\u00e3o de um projeto \u00e9 a base de conhecimentos dispon\u00edveis internamente na empresa. Segundo o PMBoK, damos o nome de Ativos de Processos Organizacionais (APO) a esse reposit\u00f3rio de processos e planos dispon\u00edveis ao uso interno. Podemos separar os APO em duas categorias: Processos, pol\u00edticas e procedimentos Bases de conhecimento organizacionais O conhecimento do contexto da organiza\u00e7\u00e3o \u00e9 importante para que o gerente de projeto seja capaz de cumprir os planejamentos dos projetos de sua responsabilidade.","title":"Projetos no Contexto Organizacional"},{"location":"nav/PUC/periodo3/gerencia_projetos/#estrutura-organizacional","text":"Dentre os t\u00f3picos relacionados, a estrutura organizacional \u00e9 muito relevante porque, a depender dela, algumas etapas do projeto podem ser grandemente afetadas. Podemos destacar as principais estruturas atualmente como sendo: Estrutura Funcional Foco na especializa\u00e7\u00e3o e na rotina. Muito usado em grandes empresas e no setor p\u00fablico. Estrutura por Projeto Foco na autonomia no cumprimento das metas. Atores tempor\u00e1rios atrelados \u00e0 projetos. Maior celeridade na comunica\u00e7\u00e3o. Estrutura Matricial \u00c9 um misto das duas. Possui alguma flexibilidade na comunica\u00e7\u00e3o entre projetos mas pode causar problemas de falta de clareza na cadeia de comando. Coment\u00e1rio: Na vida real, nenhuma organiza\u00e7\u00e3o \u00e9 100% classific\u00e1vel de acordo com essas estruturas. Mas conhec\u00ea-las ajudar\u00e1 muito caso, quem sabe algum dia, nos encontremos no papel de gerente de projeto.","title":"Estrutura Organizacional"},{"location":"nav/PUC/periodo3/gerencia_projetos/#areas-da-gerencia-de-projetos","text":"Segundo o PMBoK podemos dividir a ger\u00eancia de projetos em 10 \u00e1reas: Integra\u00e7\u00e3o - Foco na rela\u00e7\u00e3o entre as demais \u00e1reas Escopo - Foco no atendimento dos requisitos Cronograma - Cumprimento dos prazos estipulados Custos - Foco no montante de recursos necess\u00e1rios para o atingimento das metas Qualidade - Seguimento de padr\u00f5es e normas estabelecidas Recursos - Foco na utiliza\u00e7\u00e3o otimizada dos recursos demandados Comunica\u00e7\u00f5es - Informa\u00e7\u00f5es sobre o projeto de qualidade e tempestivamente Riscos - Mapeamento das dificuldades externas que podem refletir no projeto Aquisi\u00e7\u00f5es - Respons\u00e1vel pela compra dos insumos necess\u00e1rios Stakeholders - Relacionamentos com os atores relevantes e interessados no projeto","title":"\u00c1reas da Ger\u00eancia de Projetos"},{"location":"nav/PUC/periodo3/gerencia_projetos/#tempo-em-projetos","text":"Uma das \u00e1reas que acabamos de ver \u00e9 a de Cronograma . Podemos destacar essa \u00e1rea porque ela \u00e9 muito relevante para o alcance das metas. O tempo \u00e9 o ativo que \u00e9 mais estudado e, para muitos pesquisadores, \u00e9 a \u00e1rea mais importante da ger\u00eancia de projetos. O PMBoK elenca 6 processos pertencentes \u00e0 essa \u00e1rea: Planejar o gerenciamento do cronograma Definir as atividades Sequenciar as atividades Estimar as dura\u00e7\u00f5es Desenvolver o cronograma Controlar o cronograma Na constru\u00e7\u00e3o do cronograma podemos usar v\u00e1rias representa\u00e7\u00f5es gr\u00e1ficas. Como por exemplo: Diagrama de Setas Diagrama de Rede PERT Gr\u00e1fico de Gantt Coment\u00e1rio: Existem v\u00e1rias ferramentas para gerenciamento. O MS-Project , ClickUp , Trello , Primavera , OpenProj e outros","title":"Tempo em Projetos"},{"location":"nav/PUC/periodo3/gerencia_projetos/#recursos-em-projetos","text":"Os recursos do projeto incluem todas as condi\u00e7\u00f5es materiais necess\u00e1rias para o projeto. Isso vai al\u00e9m de apenas insumos materiais. Contempla tamb\u00e9m capital humano, treinamento, infraestrutura de TI e etc. Para se usar os recursos da melhor maneira poss\u00edvel, \u00e9 necess\u00e1rio que o time de recursos esteja bem alinhado com o planejamento afim de otimizarem as aquisi\u00e7\u00f5es e contrata\u00e7\u00f5es no tempo certo para evitar ociosidade de uso ou custo de armazenagem desnecess\u00e1rio. De longe, a parte mais dif\u00edcil e necess\u00e1rio do setor de gerenciamento de recursos \u00e9 a se\u00e7\u00e3o de Recursos Humanos . Existem milhares de t\u00e9cnicas, ferramentas e pesquisas sobre como otimizar os recursos humanos em uma organiza\u00e7\u00e3o e, por esse material ter escopo de overview, n\u00e3o vamos nos aprofundar nesse tema.","title":"Recursos em Projetos"},{"location":"nav/PUC/periodo3/gerencia_projetos/#gestao-financeira-de-projetos","text":"Normalmente, um cliente faz 2 perguntas em qualquer proposta de projeto: \"Quanto vai custar?\" e \"Quanto tempo vai levar?\". Essas perguntas s\u00e3o cl\u00e1ssicas e, \u00e9 \u00f3bvio, s\u00e3o umas das mais dif\u00edceis de se responder inicialmente porque s\u00f3 se sabe o custo real de um projeto no final do mesmo. Isso nos obriga a ter que estimar custos e necessidades que surgir\u00e3o ao longo das etapas de projeto. As etapas de trabalho da \u00e1rea de or\u00e7amento \u00e9 parecida com as etapas das outras \u00e1reas. Come\u00e7amos com a estimativa dos esfor\u00e7os. Passamos para a estima dos custos relacionados. Por fim, devemos controlar para sabermos se as estimativas est\u00e3o de acordo com a realidade. Para finalizarmos essa parte. Vale destacar os dois artefatos mais importantes produzidos por essa \u00e1rea: Cronograma Financeiro Or\u00e7amento do Projeto","title":"Gest\u00e3o Financeira de Projetos"},{"location":"nav/PUC/periodo3/gerencia_projetos/#riscos-em-projetos","text":"Se tiv\u00e9ssemos certeza que um risco aconteceria, ele deixaria de ser um risco. Essa natureza especulativa dos riscos \u00e9 o cerne da \u00e1rea de gest\u00e3o de risco do projeto. Para tanto, esse setor sempre deve levar em considera\u00e7\u00e3o 2 aspectos na an\u00e1lise dos riscos: probabilidade e complexidade . Os processos de trabalho dessa \u00e1rea pelo PMBoK s\u00e3o: Planejar os riscos Identificar os riscos An\u00e1lise qualitativa An\u00e1lise quantitativa Planejamento das respostas Escalar Prevenir Transferir Mitigar Aceitar Implementa\u00e7\u00e3o das respostas Monitoramento dos riscos","title":"Riscos em Projetos"},{"location":"nav/PUC/periodo3/gerencia_projetos/#gerenciamento-prescritivo-e-agil-de-projetos-e-uso-de-ferramentas","text":"","title":"Gerenciamento Prescritivo e \u00c1gil de Projetos e Uso de Ferramentas"},{"location":"nav/PUC/periodo3/gerencia_projetos/#gerenciamento-tradicional","text":"","title":"Gerenciamento Tradicional"},{"location":"nav/PUC/periodo3/gerencia_projetos/#cronograma-de-projeto-pertcpm","text":"Aprendemos anteriormente sobre a import\u00e2ncia da gest\u00e3o do tempo em um projeto. Para tanto, a necessidade de se construir um bom cronograma \u00e9 fundamental. V\u00e1rias s\u00e3o as t\u00e9cnicas que podem ser usadas para essa constru\u00e7\u00e3o. Dentre elas, vamos aprender aqui a chamada Program Evaluation Review Technique (PERT) . A maneira de construir um cronograma PERT \u00e9 analisando cada tarefa envolvida na conclus\u00e3o dos projetos para, no final, termos um gr\u00e1fico de redes (grafos). Normalmente, o PERT \u00e9 aplicado em grandes projetos porque permite: A defini\u00e7\u00e3o de prazos Vis\u00e3o detalhada da sequ\u00eancia de tarefas a serem executadas Facilita a gest\u00e3o do tempo alocado em cada tarefa Tamb\u00e9m \u00e9 muito comum vermos o PERT associado a outra sigla chamada Critical Path Method (CPM) que possui uma abordagem muito parecida e foi desenvolvido praticamente ao mesmo tempo 2 . A principal caracter\u00edstica do CPM \u00e9 que ele mostra as tarefas que possuem um prazo projetado maior de cumprimento. Essas tarefas ser\u00e3o o foco da gest\u00e3o porque, caso seja poss\u00edvel reduzir os tempos previstos para a conclus\u00e3o das mesmas, o projeto ter\u00e1 grandes avan\u00e7os nas entregas. A cria\u00e7\u00e3o do m\u00e9todo PERT/CPM teve sua motiva\u00e7\u00e3o no projeto Polaris de constru\u00e7\u00e3o de um submarino nuclear em 1957.","title":"Cronograma de Projeto - PERT/CPM"},{"location":"nav/PUC/periodo3/gerencia_projetos/#construcao-dos-diagramas-pertcpm","text":"Agora vamos aprender como construir um diagrama PERT/CPM. Para tal, precisamos nos certificar que temos os seguintes dados a respeito do nosso projeto: Lista das tarefas a serem executadas at\u00e9 a conclus\u00e3o do projeto Defini\u00e7\u00e3o das rela\u00e7\u00f5es de preced\u00eancia e subsequ\u00eancia entre essas tarefas As estimativas dos tempos para cada tarefa O PERT usa 3 estimativas de tempo: Mais Prov\u00e1vel Otimista Pessimista Em cima dessas estimativas, calcula-se a m\u00e9dia ponderada para ter o valor usado Podemos usar o diagrama de grafos do PERT para descrever as tarefas do seguinte modo: Existem tamb\u00e9m alguns conceitos que podemos nos deparar na constru\u00e7\u00e3o de um cronograma que v\u00e3o ajudar muito na nossa comunica\u00e7\u00e3o com outros profissionais da \u00e1rea: Primeira Data de In\u00edcio (PDI) Primeira Data de T\u00e9rmino (PDT) Folga Livre (FL) \u00daltima Data de In\u00edcio (UDI) \u00daltima Data de T\u00e9rmino (UDT) Folga Total (FT) As primeiras datas s\u00e3o os cen\u00e1rios otimistas onde, caso a atividade seja feita no tempo previsto, o projeto ser\u00e1 beneficiado pelo adiantamento de uma atividade. Ao contr\u00e1rio, as \u00faltimas datas s\u00e3o os casos em que as atividades iniciarem na \u00faltima data poss\u00edvel para que o projeto n\u00e3o tenha um atraso. A FT \u00e9 a soma de todas as FL. Todos esses conceitos podem ser vistos naquele gr\u00e1fico do CPM logo acima. De posse desses conceitos podemos ver que o caminho cr\u00edtico \u00e9 precisamente o caminho que n\u00e3o apresenta nenhuma FL, ou seja, que levar\u00e1 o maior n\u00famero de tempo necess\u00e1rio para o somat\u00f3rio das suas tarefas.","title":"Constru\u00e7\u00e3o dos Diagramas - PERT/CPM"},{"location":"nav/PUC/periodo3/gerencia_projetos/#project-libre","text":"A partir daqui, o microfundamento \u00e9 baseado na parte pr\u00e1tica do gerenciamento. Portanto, ele pressup\u00f5e que n\u00f3s estamos usando algum software de gest\u00e3o. Como eu disse l\u00e1 em cima, existe uma tonelada de programas hoje em dia. O programa usado no curso foi do Project Libre. Vou colocar a primeira aula de um curso inteiro que est\u00e1 dispon\u00edvel no youtube aqui sobre como usar esse programa para aqueles interessados nele.","title":"Project Libre"},{"location":"nav/PUC/periodo3/gerencia_projetos/#monitoramento-e-controle","text":"A atividade de monitoramento \u00e9 filha do planejamento. Pode ser focada em processos ou em resultados. O foco no processo \u00e9 o processo tradicional que tende a ser mais burocr\u00e1tico e lento enquanto o foco em entregas \u00e9 o principal objetivo das metodologias \u00e1geis de desenvolvimento. N\u00e3o tem certo e errado, cada projeto deve ser avaliado e, a depender de onde se quer chegar, opta-se pela metodologia mais adequada. A atividade e monitoramento tem como objetivo: Minimizar os danos que a complexidade do projeto pode trazer para as entregas Reduzir incertezas e riscos Administrar conflitos Acompanhar o andamento do planejamento Abaixo temos uma lista de t\u00e9cnicas usadas nessa \u00e1rea: Reuni\u00f5es Cronogramas Gr\u00e1fico de Gantt Rede PERT\\CPM Planos 5W2H An\u00e1lise SWOT Monitoramento de Partes Interessadas (Poder x Interesse) KanBan Burndown Chart","title":"Monitoramento e Controle"},{"location":"nav/PUC/periodo3/gerencia_projetos/#encerramento-de-projeto","text":"Uma vez monitorado, a \u00faltima fase que nos resta \u00e9 o t\u00e9rmino. Nessa fase temos que levantar as entregas finais e compilar os aprendizados gerados ao longo de todas as etapas de monitoramento.","title":"Encerramento de Projeto"},{"location":"nav/PUC/periodo3/gerencia_projetos/#perfil-do-gerente-de-projetos","text":"Um bom gerente de projetos deve ter algumas caracter\u00edsticas desej\u00e1veis: Conhecimento das normas Entendimento do ambiente Conhecimento de gerenciamento geral Habilidades interpessoais E deve estar preparado para alguns conflitos cl\u00e1ssicos dessa \u00e1rea: Conflito autoridade x responsabilidade Estimativas erradas Disputas de poder nas equipes Procura por salvador\\culpado Press\u00f5es de grupos de interesse Falta da maturidade da equipe Falta de engajamento","title":"Perfil do Gerente de Projetos"},{"location":"nav/PUC/periodo3/gerencia_projetos/#gerenciamento-agil","text":"J\u00e1 aprendemos um pouco sobre esse tema l\u00e1 no primeiro per\u00edodo . Ent\u00e3o vou ser bem sucinto aqui.","title":"Gerenciamento \u00c1gil"},{"location":"nav/PUC/periodo3/gerencia_projetos/#breve-historico","text":"Para a gente que est\u00e1 come\u00e7ando a vida de desenvolvedor agora, isso tudo parece muito simples, mas o passado era completamente diferente no mercado de tecnologia. Entre as d\u00e9cadas de 60 e 90, n\u00e3o existiam m\u00e9todos amplamente divulgados e padronizados de desenvolvimento. Era tudo mato mesmo. A primeira vit\u00f3ria significativa na tentativa de padroniza\u00e7\u00e3o ocorreu em 1990 com a cria\u00e7\u00e3o do Rational Unified Process (RUP) que tamb\u00e9m vimos na mat\u00e9ria de introdu\u00e7\u00e3o a engenharia de software .","title":"Breve hist\u00f3rico"},{"location":"nav/PUC/periodo3/gerencia_projetos/#o-manifesto-agil","text":"Com o passar do tempo, o foco na entrega se tornou cada vez mais evidente at\u00e9 que o Manifesto \u00c1gil criou o marco para a mudan\u00e7a do m\u00e9todo de gest\u00e3o de projetos no come\u00e7o do s\u00e9culo XXI. Dele podemos derivar os seguintes princ\u00edpios: Foco na entrega de software o mais r\u00e1pido e com m\u00e1xima frequ\u00eancia poss\u00edvel Aceita\u00e7\u00e3o \u00e0s mudan\u00e7as de requisitos a qualquer tempo Maior aproxima\u00e7\u00e3o com o cliente Fomentar um clima de sinergia e colabora\u00e7\u00e3o S\u00f3 pra gente ter uma ideia, eu pedi pro ChatGPT dar um resumo de quem foram os caras que assinaram esse manifesto. Kent Beck: um desenvolvedor de software americano, conhecido por ter criado o Extreme Programming (XP) e por ter trabalhado em projetos como o Smalltalk e o C++. Mike Beedle : um consultor de gerenciamento de projetos e desenvolvedor de software americano, que tamb\u00e9m ajudou a desenvolver o Enterprise Scrum. Arie van Bennekum : um consultor holand\u00eas de gerenciamento de projetos, que trabalhou em v\u00e1rios projetos de desenvolvimento de software usando metodologias \u00e1geis. Alistair Cockburn : um consultor de gerenciamento de projetos e desenvolvedor de software brit\u00e2nico, conhecido por ter criado o m\u00e9todo Crystal para desenvolvimento de software. Ward Cunningham : um desenvolvedor de software americano, conhecido por ter criado a primeira wiki e por ter trabalhado em projetos como o Framework para Desenvolvimento de Aplica\u00e7\u00f5es (FDP) em Smalltalk. Martin Fowler : um consultor de desenvolvimento de software brit\u00e2nico, que escreveu v\u00e1rios livros sobre design de software e desenvolvimento \u00e1gil, e que ajudou a popularizar o Refactoring. James Grenning : um desenvolvedor de software americano, que trabalha com XP e ajuda a promover pr\u00e1ticas \u00e1geis em todo o mundo. Jim Highsmith : um consultor americano de gerenciamento de projetos, que ajudou a popularizar o Agile Project Management e o Adaptive Software Development. Andrew Hunt : um desenvolvedor de software americano, conhecido por ter escrito o livro \"The Pragmatic Programmer\" e por ter trabalhado em v\u00e1rios projetos de software usando metodologias \u00e1geis. Ron Jeffries : um desenvolvedor de software americano, conhecido por ter criado o XP com Kent Beck e por ter trabalhado em v\u00e1rios projetos de desenvolvimento de software usando metodologias \u00e1geis. Jon Kern : um consultor americano de gerenciamento de projetos, que trabalhou em v\u00e1rios projetos de desenvolvimento de software usando metodologias \u00e1geis. Brian Marick : um consultor americano de gerenciamento de projetos, que trabalha com XP e ajuda a promover pr\u00e1ticas \u00e1geis em todo o mundo. Robert C. Martin : um consultor americano de desenvolvimento de software, que escreveu v\u00e1rios livros sobre design de software e metodologias \u00e1geis, e que ajudou a popularizar o TDD (Desenvolvimento Guiado por Testes). Steve Mellor : um engenheiro de software brit\u00e2nico, conhecido por ter criado a linguagem de modelagem de sistemas OO (OOM) e por ter trabalhado em projetos de software usando metodologias \u00e1geis. Ken Schwaber : um consultor americano de gerenciamento de projetos, que ajudou a desenvolver o Scrum e a promover pr\u00e1ticas \u00e1geis em todo o mundo. Jeff Sutherland : um consultor americano de gerenciamento de projetos, que ajudou a desenvolver o Scrum e a promover pr\u00e1ticas \u00e1geis em todo o mundo. Tem uma ampla experi\u00eancia em lideran\u00e7a, gerenciamento e desenvolvimento de software. Dave Thomas : um desenvolvedor de software canadense, conhecido por ter criado a linguagem de programa\u00e7\u00e3o Elixir, por ter trabalhado em projetos como o desenvolvimento da linguagem Ruby e por ter escrito v\u00e1rios livros sobre programa\u00e7\u00e3o e desenvolvimento de software, incluindo \"Programming Elixir\" e \"The Pragmatic Programmer\". Dave \u00e9 um forte defensor de metodologias \u00e1geis e da programa\u00e7\u00e3o funcional. Junto com o manifesto surgiram os 14 princ\u00edpios \u00e1geis . Quando as coisas v\u00e3o ficando muito grandes pra decorar eu acho que n\u00e3o vale a pena. Pra quem achar importante, pode pesquisar pra ler a respeito. Para encerrar esse apanhado podemos destacar os principais m\u00e9todos \u00e1geis hoje no mercado: XP Scrum Lean TDD","title":"O Manifesto \u00c1gil"},{"location":"nav/PUC/periodo3/gerencia_projetos/#gerencia-agil-de-projetos","text":"","title":"Ger\u00eancia \u00c1gil de Projetos"},{"location":"nav/PUC/periodo3/gerencia_projetos/#o-metodo-agil-scrum","text":"","title":"O M\u00e9todo \u00c1gil Scrum"},{"location":"nav/PUC/periodo3/gerencia_projetos/#atividades-e-papeis-no-scrum","text":"","title":"Atividades e Pap\u00e9is no Scrum"},{"location":"nav/PUC/periodo3/gerencia_projetos/#introducao-ao-xp","text":"","title":"Introdu\u00e7\u00e3o ao XP"},{"location":"nav/PUC/periodo3/gerencia_projetos/#frameworks-e-praticas-ageis","text":"","title":"Frameworks e Pr\u00e1ticas \u00c1geis"},{"location":"nav/PUC/periodo3/gerencia_projetos/#ferramentas-e-tecnicas","text":"","title":"Ferramentas e T\u00e9cnicas"},{"location":"nav/PUC/periodo3/gerencia_projetos/#ferramentas-e-tecnicas-para-planejamento","text":"","title":"Ferramentas e T\u00e9cnicas para Planejamento"},{"location":"nav/PUC/periodo3/gerencia_projetos/#ferramentas-e-tecnicas-para-gestao","text":"","title":"Ferramentas e T\u00e9cnicas para Gest\u00e3o"},{"location":"nav/PUC/periodo3/gerencia_projetos/#bibliografia","text":"GUIA do conhecimento em gerenciamento de projetos: (Guia PMBOK\u00ae). 6. ed. S\u00e3o Paulo: Project Management Institute, 2017. xxix, 755 p. ISBN 9781628251920., N\u00ba de Exemplares: 7. VALERIANO, Dalton L. Gerenciamento Estrat\u00e9gico e Administra\u00e7\u00e3o por Projetos . Pearson 324 ISBN 9788534612081. VITOR L. MASSARI. Gerenciamento \u00c1gil de Projetos - 2\u00aa Edi\u00e7\u00e3o. Editora Brasport 0 ISBN 9788574528939. BROD, Cesar. Scrum: guia pr\u00e1tico para projetos \u00e1geis . 2. ed. S\u00e3o Paulo, SP: Novatec, 2015. 198 p. ISBN 9788575224410. E olha que eu sou formado em Economia. \u21a9 PERT \u00e9 de 1957 e o CPM \u00e9 de 1958. \u21a9","title":"Bibliografia"},{"location":"nav/setup/colors/","text":"January 17, 2023 Changing the colors Color scheme Default: light theme: theme_style: light light dark Primary color Default: black theme: colors: primary: black black blue green yellow orange purple red white Text color Default: black theme: colors: text: black black blue green yellow orange purple red white Title color Default: black theme: colors: title: black black blue green yellow orange purple red white Background color Default: white theme: colors: background: white black blue green yellow orange purple red white","title":"Colors"},{"location":"nav/setup/colors/#changing-the-colors","text":"","title":"Changing the colors"},{"location":"nav/setup/colors/#color-scheme","text":"Default: light theme: theme_style: light light dark","title":"Color scheme"},{"location":"nav/setup/colors/#primary-color","text":"Default: black theme: colors: primary: black black blue green yellow orange purple red white","title":"Primary color"},{"location":"nav/setup/colors/#text-color","text":"Default: black theme: colors: text: black black blue green yellow orange purple red white","title":"Text color"},{"location":"nav/setup/colors/#title-color","text":"Default: black theme: colors: title: black black blue green yellow orange purple red white","title":"Title color"},{"location":"nav/setup/colors/#background-color","text":"Default: white theme: colors: background: white black blue green yellow orange purple red white","title":"Background color"},{"location":"nav/setup/components/","text":"January 21, 2023 Enable and Disable Components Site Name Default: true theme: components: site_name: true true false Title Default: true theme: components: title: true true false Menu Default: true theme: components: menu: true true false Preview Default: true theme: components: preview: true true false Footer Default: true theme: components: footer: true true false","title":"Components"},{"location":"nav/setup/components/#enable-and-disable-components","text":"","title":"Enable and Disable Components"},{"location":"nav/setup/components/#site-name","text":"Default: true theme: components: site_name: true true false","title":"Site Name"},{"location":"nav/setup/components/#title","text":"Default: true theme: components: title: true true false","title":"Title"},{"location":"nav/setup/components/#menu","text":"Default: true theme: components: menu: true true false","title":"Menu"},{"location":"nav/setup/components/#preview","text":"Default: true theme: components: preview: true true false","title":"Preview"},{"location":"nav/setup/components/#footer","text":"Default: true theme: components: footer: true true false","title":"Footer"},{"location":"nav/setup/favicon/","text":"January 17, 2023 Changing the favicon theme: favicon: assets/favicon.ico","title":"Favicon"},{"location":"nav/setup/favicon/#changing-the-favicon","text":"theme: favicon: assets/favicon.ico","title":"Changing the favicon"},{"location":"nav/setup/fonts/","text":"January 17, 2023 Changing the fonts Site name style Default: normal theme: site_name_style: normal normal bold italic scratched underline overline Title style Default: bold theme: title_style: bold normal bold italic scratched underline overline","title":"Fonts"},{"location":"nav/setup/fonts/#changing-the-fonts","text":"","title":"Changing the fonts"},{"location":"nav/setup/fonts/#site-name-style","text":"Default: normal theme: site_name_style: normal normal bold italic scratched underline overline","title":"Site name style"},{"location":"nav/setup/fonts/#title-style","text":"Default: bold theme: title_style: bold normal bold italic scratched underline overline","title":"Title style"},{"location":"nav/setup/logo/","text":"January 17, 2023 Changing the logo theme: logo: assets/logo.png","title":"Logo"},{"location":"nav/setup/logo/#changing-the-logo","text":"theme: logo: assets/logo.png","title":"Changing the logo"}]}