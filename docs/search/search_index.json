{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"hljs.initHighlightingOnLoad(); Eu me chamo Bruno de Melo Ruas. Sou Economista pela Universidade do Estado do Amazonas (UEA). Especialista em Gest\u00e3o Financeira pela Funda\u00e7\u00e3o Get\u00falio Vargas (FGV). Atualmente curso o tecn\u00f3logo de An\u00e1lise e Desenvolvimento de Sistemas da Pontif\u00edcia Universidade Cat\u00f3lica de Minas Gerais (PUC-MG). Minhas Redes: Linkedin Twitter Github Eu tenho um m\u00e9todo de estudar: fingindo que estou dando aula . Ao longo dos anos, percebi que eu havia escrito tanto material, que poderia ajudar outras pessoas com meus textos. Esse site \u00e9 justamente o reposit\u00f3rio p\u00fablico dos conte\u00fados que venho estudando sobre Ci\u00eancia da Computa\u00e7\u00e3o seguindo duas fontes: O conte\u00fado da forma\u00e7\u00e3o em Tecn\u00f3logo em An\u00e1lise e Desenvolvimento de Sistemas pela PUC Minas Gerais . Os cursos da Open Source Society University - OSSU . Originalmente, eu escrevia minhas notas de estudos em LaTeX mas o eu percebi que Markdown aliado ao mkdocs e github pages era uma maneira mais simples de manter o projeto a medida que a quantidade de p\u00e1ginas foram se aproximando das centenas. Dessa feita, os reposit\u00f3rios antigos em pdf v\u00e3o ser todos migrados para esse projeto. Cada palavra que voc\u00ea ler nesse projeto foi escrita por mim. Espero que esse material sirva a voc\u00eas tanto quanto serviu para mim. O conjunto de tecnologias usadas para constru\u00e7\u00e3o desse site est\u00e1 na aba Tech no menu superior. O link para o reposit\u00f3rio desse projeto tamb\u00e9m. Pontif\u00edcia Universidade Cat\u00f3lica (PUC-MG) O Tecn\u00f3logo foi iniciado em 2022/01 e deve terminar em 2024/2. Ao todo, o curso \u00e9 divido em 3 ciclos e 5 semestres (chamados de Eixos Tem\u00e1ticos). As mat\u00e9rias t\u00e9cnicas que ser\u00e3o estudas (e ter\u00e3o as minhas anota\u00e7\u00f5es salvas aqui) s\u00e3o essas. Ciclo 1: Concep\u00e7\u00e3o e Implementa\u00e7\u00e3o de Sistemas de Software Implementa\u00e7\u00e3o de Sistemas de Software Algoritmos e Abstra\u00e7\u00e3o de Dados Algoritmos e L\u00f3gica de Programa\u00e7\u00e3o Desenvolvimento Web Front-End Matem\u00e1tica B\u00e1sica Organiza\u00e7\u00e3o de Computadores Fundamentos de Engenharia de Software Pensamento Computacional L\u00f3gica Computacional Projeto: Desenvolvimento de Uma Aplica\u00e7\u00e3o Web Front-End An\u00e1lise e Projeto de Sistemas de Software Algoritmos e Estruturas de Dados Modelagem de Dados Engenharia de Requisitos de Software Design de Intera\u00e7\u00e3o Programa\u00e7\u00e3o Modular Desenvolvimento Wb Back-End Fundamentos de Redes de Computadores Manipula\u00e7\u00e3o de Dados com SQL Projeto: Desenvolvimento de Uma Aplica\u00e7\u00e3o Interativa Ciclo 2: Desenvolvimento de Sistemas de Software Orientados a Processos de Neg\u00f3cios Processos de Neg\u00f3cio e de Desenvolvimento de Software Modelagem e Gest\u00e3o de Processos de Neg\u00f3cios Estat\u00edstica Descritiva Desenvolvimento de Aplica\u00e7\u00f5es M\u00f3veis Ger\u00eancia de Projetos de TI Ger\u00eancia de Configura\u00e7\u00e3o Qualidade de Processos de Software Ger\u00eancia de Requisitos de Software Projeto: Desenvolvimento de Uma Aplica\u00e7\u00e3o M\u00f3vel Infraestrutura para Sistemas de Software Cloud Computing Projeto de Software Arquitetura de Software Distribu\u00eddo APIs e Web Services Teste de Software Banco de Dados NoSQL Projeto: Desenvolvimento de Uma Aplica\u00e7\u00e3o Distribu\u00edda Ciclo 3: Empreendedorismo e Inova\u00e7\u00e3o Empreendedorismo e Inova\u00e7\u00e3o com Sistemas de Software Seguran\u00e7a Aplicada ao Desenvolvimento Compliance em TI Implanta\u00e7\u00e3o de Solu\u00e7\u00e3o de TI Projeto: Desenvolvimento de um Sistema Sociot\u00e9cnico Inovador","title":"Bem Vindos"},{"location":"#pontificia-universidade-catolica-puc-mg","text":"O Tecn\u00f3logo foi iniciado em 2022/01 e deve terminar em 2024/2. Ao todo, o curso \u00e9 divido em 3 ciclos e 5 semestres (chamados de Eixos Tem\u00e1ticos). As mat\u00e9rias t\u00e9cnicas que ser\u00e3o estudas (e ter\u00e3o as minhas anota\u00e7\u00f5es salvas aqui) s\u00e3o essas. Ciclo 1: Concep\u00e7\u00e3o e Implementa\u00e7\u00e3o de Sistemas de Software Implementa\u00e7\u00e3o de Sistemas de Software Algoritmos e Abstra\u00e7\u00e3o de Dados Algoritmos e L\u00f3gica de Programa\u00e7\u00e3o Desenvolvimento Web Front-End Matem\u00e1tica B\u00e1sica Organiza\u00e7\u00e3o de Computadores Fundamentos de Engenharia de Software Pensamento Computacional L\u00f3gica Computacional Projeto: Desenvolvimento de Uma Aplica\u00e7\u00e3o Web Front-End An\u00e1lise e Projeto de Sistemas de Software Algoritmos e Estruturas de Dados Modelagem de Dados Engenharia de Requisitos de Software Design de Intera\u00e7\u00e3o Programa\u00e7\u00e3o Modular Desenvolvimento Wb Back-End Fundamentos de Redes de Computadores Manipula\u00e7\u00e3o de Dados com SQL Projeto: Desenvolvimento de Uma Aplica\u00e7\u00e3o Interativa Ciclo 2: Desenvolvimento de Sistemas de Software Orientados a Processos de Neg\u00f3cios Processos de Neg\u00f3cio e de Desenvolvimento de Software Modelagem e Gest\u00e3o de Processos de Neg\u00f3cios Estat\u00edstica Descritiva Desenvolvimento de Aplica\u00e7\u00f5es M\u00f3veis Ger\u00eancia de Projetos de TI Ger\u00eancia de Configura\u00e7\u00e3o Qualidade de Processos de Software Ger\u00eancia de Requisitos de Software Projeto: Desenvolvimento de Uma Aplica\u00e7\u00e3o M\u00f3vel Infraestrutura para Sistemas de Software Cloud Computing Projeto de Software Arquitetura de Software Distribu\u00eddo APIs e Web Services Teste de Software Banco de Dados NoSQL Projeto: Desenvolvimento de Uma Aplica\u00e7\u00e3o Distribu\u00edda Ciclo 3: Empreendedorismo e Inova\u00e7\u00e3o Empreendedorismo e Inova\u00e7\u00e3o com Sistemas de Software Seguran\u00e7a Aplicada ao Desenvolvimento Compliance em TI Implanta\u00e7\u00e3o de Solu\u00e7\u00e3o de TI Projeto: Desenvolvimento de um Sistema Sociot\u00e9cnico Inovador","title":"Pontif\u00edcia Universidade Cat\u00f3lica (PUC-MG)"},{"location":"nav/tech/","text":"Aqui eu coloco o conjunto de ferramentas que usei para construir esse portal. Links mkdocs para construir um repo local que pode ser facilmente convertido em um site. simple-blog theme para esse tema simplesmente maravilho. mkdocs-material para expandir algumas funcionalidades importantes do mkdocs. Tecnicamente, \u00e9 um outro tema, mas o material de refer\u00eancia deles \u00e9 \u00f3timo. markdown Extensions para expandir a capacidade do markdown no projeto. S\u00e9rio, existem muitas . github pages para hospedagem gratuita do site.","title":"Tech"},{"location":"nav/tech/#links","text":"mkdocs para construir um repo local que pode ser facilmente convertido em um site. simple-blog theme para esse tema simplesmente maravilho. mkdocs-material para expandir algumas funcionalidades importantes do mkdocs. Tecnicamente, \u00e9 um outro tema, mas o material de refer\u00eancia deles \u00e9 \u00f3timo. markdown Extensions para expandir a capacidade do markdown no projeto. S\u00e9rio, existem muitas . github pages para hospedagem gratuita do site.","title":"Links"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/","text":"hljs.initHighlightingOnLoad(); Assuntos Estrutura de Dados Homog\u00eaneas e Heterog\u00eaneas Estrutura de Dados Homog\u00eaneas Estrutura de Dados Heterog\u00eaneas Tipos Abstratos de Dados, Classes e Implementa\u00e7\u00e3o Defini\u00e7\u00e3o de um TAD - Classes e Objetos Atributos, Propriedades e M\u00e9todos de Classe Mecanismos de Visibilidade/Acessibilidade Construtores e Destrutores de Classe Bibliografia Introdu\u00e7\u00e3o Durante o processo de constru\u00e7\u00e3o de software, a manipula\u00e7\u00e3o de informa\u00e7\u00e3o em mem\u00f3ria \u00e9 tarefa fundamental para que a solu\u00e7\u00e3o de software seja \u00fatil e satisfat\u00f3ria. As linguagens de programa\u00e7\u00e3o possuem especifica\u00e7\u00f5es sobre as caracter\u00edsticas que cada grupo de vari\u00e1veis pode ter, esse controle de propriedade das vari\u00e1veis e das limita\u00e7\u00f5es relacionadas a cada tipo \u00e9 chamado de Tipo de Dado . Dizemos que um Tipo Abstrato de Dado (TAD) \u00e9 a defini\u00e7\u00e3o por parte do programador de uma nova classe de dado otimizada para a resolu\u00e7\u00e3o do problema a ser trabalhado com o software em desenvolvimento. Cont\u00e9m tanto a estrutura da informa\u00e7\u00e3o a ser trabalhada quanto as opera\u00e7\u00f5es, procedimentos e fun\u00e7\u00f5es que podem ser aplicadas a esse tipo de dado novo. A constru\u00e7\u00e3o de TADs passa pela identifica\u00e7\u00e3o das entidades de um problema computacional e a defini\u00e7\u00e3o e desenvolvimento do modelo de dados adequado para a solu\u00e7\u00e3o proposta. Primeiramente, vamos aprender sobre os tipos de dados normalmente existente nas linguagens de programa\u00e7\u00e3o mais comuns do mercado. Podemos dividir os tipos de dados em dois grandes grupos: Homog\u00eaneos e Heterog\u00eaneos. Coment\u00e1rio: Esse microfundamento deve ser estudado somente ap\u00f3s o microfundamento de Algoritmo e L\u00f3gica de Programa\u00e7\u00e3o . Como esse material \u00e9 de refer\u00eancia, ele n\u00e3o deve ser lido, necessariamente, como se fosse um livro. Estrutura de Dados Homog\u00eaneas e Heterog\u00eaneas Estrutura de Dados Homog\u00eaneas Os dois tipos de TAs Homog\u00eaneos mais comuns s\u00e3o os vetores (tamb\u00e9m chamados de arrays), que s\u00e3o formados por uma lista de \\(n\\) elementos de mesmo tipo e as matrizes, que podem ser entendidas como um empilhamento de vetores ou um tipo de vetor de duas dimens\u00f5es. Vetores \u00c9 uma vari\u00e1vel composta, homog\u00eanea e unidimensional. Podemos pensar em um vetor como uma lista com \\(n\\) elementos do mesmo tipo. Como todos os valores de um vetor possuem o mesmo nome (o nome da vari\u00e1vel), para acessarmos algum valor espec\u00edfico de um elemento, precisaremos de um \u00edndice que fa\u00e7a refer\u00eancia ao local na lista onde o valor desejado se encontra. Para criarmos um vetor em c#, usamos a declara\u00e7\u00e3o da vari\u00e1vel com um par de colchetes vazio e a defini\u00e7\u00e3o da quantidade de posi\u00e7\u00f5es (ou lugares) que o nosso vetor ter\u00e1. Abaixo podemos ver um exemplo disso. // c# int [] Idades = new int [ 100 ]; // Vetor de int com 100 places double [] Alt = new double [ 20 ]; // Vetor de double com 20 string [] Nomes = new string [ 10 ]; // Vetor de string com 10 No exemplo acima, podemos ver que criamos um vetor denominado Idades que receber\u00e1 apenas valores do tipo inteiro. Um vetor de doubles (que \u00e9 um float com mais casas de precis\u00e3o) chamado salario. E, por fim, um vetor de strings chamado Nomes. Coment\u00e1rio: Existe uma classe que permite a cria\u00e7\u00e3o de um tipo de vetor gen\u00e9rico sem tamanho definido em c# chamado Lista. O curso n\u00e3o entrou nesse assunto mas eu vou deixar esse exemplo de lista aqui. // c# using System.Collections.Generic ; List < int > lista = new List < int > (); List . add ( 1 ); List . add ( 2 ); List . remove ( 2 ); Agora que sabemos como criar um vetor. O pr\u00f3ximo passo \u00e9 aprendermos como inserir informa\u00e7\u00e3o nele. Para a nossa sorte, \u00e9 bem simples. Basta colocarmos o nome do vetor seguido da posi\u00e7\u00e3o a ser preenchida entre colchetes. // c# Idades [ 20 ] = 10 ; // Valor 10 na posi\u00e7\u00e3o 19 Alt [ 0 ] = 1.2 ; // Valor 1.2 na posi\u00e7\u00e3o 1 S\u00f3 temos que ter cuidado com uma coisa. Existem linguagens (como C#, Java, Python e outras) que colocam o index da primeira posi\u00e7\u00e3o de um vetor como sendo o valor 0. Outras linguagens (como R) usam o numero 1 para essa primeira posi\u00e7\u00e3o. Com base no que aprendemos em Algoritmos e L\u00f3gica da Programa\u00e7\u00e3o , somos capazes de entender o c\u00f3digo abaixo a respeito do uso de um la\u00e7o de repeti\u00e7\u00e3o para preenchimento de um vetor de 5 posi\u00e7\u00f5es. // c# int i ; int [] Valores = new int [ 5 ]; // Input dos dados for ( i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( $\"Digite o valor {i + 1}: \" ); Valores [ i ] = int . Parse ( Console . ReadLine ()); }; Desafio O professor prop\u00f5e o seguinte desafio para fixa\u00e7\u00e3o do conceito de vetor: \"Criaremos um vetor de n\u00fameros inteiros com 5 posi\u00e7\u00f5es e ler cada um de seus valores. Criaremos duas fun\u00e7\u00f5es que, tomando esse vetor como par\u00e2metro, ir\u00e3o retornar a soma dos n\u00fameros pares contidos no vetor e a quantidade de n\u00fameros \u00edmpares que ele possui.\" Minha resolu\u00e7\u00e3o desse problema segue abaixo. // c# int [] vetor = new int [ 5 ]; int somaPar = 0 ; int contaImpar = 0 ; int input ; // Soma de dois valores int soma ( int valor1 , int valor2 ) { return valor1 + valor2 ; }; // Itera\u00e7\u00e3o para lan\u00e7amento dos valores e somas for ( int i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( $\" Valor da Posi\u00e7\u00e3o n\u00ba: {i + 1}\" ); input = int . Parse ( Console . ReadLine ()); vetor [ i ] = input ; if ( input % 2 == 0 ) { somaPar = soma ( somaPar , input ); } else { contaImpar += 1 ; } }; Console . WriteLine ( $\" SomaPar = {somaPar}, ContaImpar = {contaImpar}\" ); Console . WriteLine ( $\"({vetor[0]},{vetor[1]},{vetor[2]},{ vetor[3]},{vetor[4]})\" ); Que produz o seguinte resultado para o input (1,2,1,2,1) . Matrizes Como dito no in\u00edcio dessa se\u00e7\u00e3o. Podemos pensar que matrizes s\u00e3o vetores de duas dimens\u00f5es. Por causa disso, a declara\u00e7\u00e3o da vari\u00e1vel \u00e9 um pouco diferente. // c# double [,] Notas = new double [ 4 , 5 ]; // 4 linhas e 5 colunas Por ser uma vari\u00e1vel de duas dimens\u00f5es, a maneira como atribu\u00edmos valores \u00e0 cada posi\u00e7\u00e3o \u00e9 um pouco diferente do caso com vetor. Para cada atribui\u00e7\u00e3o de valor, temos que indicar a linha e coluna que nosso dado ser\u00e1 salvo. // c# Notas [ 0 , 0 ] = 1 ; // Linha 1 coluna 1 Notas [ 0 , 1 ] = 1 ; // Linha 1 coluna 2 Notas [ 2 , 3 ] = 1 ; // Linha 3 coluna 4 Notas [ 3 , 4 ] = 1 ; // Linha 4 coluna 5 Devemos sempre lembrar que c# usa a posi\u00e7\u00e3o de numeral 0 para o index inicial de vetores e matrizes. Agora vamos ver um programa simples que exemplifica o que acabamos de aprender. A leitura dele n\u00e3o deve ser dif\u00edcil. Se est\u00e1 tendo dificuldade, volte no microfundamento de l\u00f3gica da programa\u00e7\u00e3o. // c# int i , j ; int [,] Valor = new int [ 10 , 3 ]; // Loop para entrada de valores na matriz for ( i = 0 ; i < 10 ; i ++ ) // Loop para linhas { for ( j = 0 ; j < 3 ; j ++ ) // Loop para colunas { Console . WriteLine ( $\"Valor Linha:{i+1} Coluna{j+1}\" ); Valor [ i , j ] = int . Parse ( Console . ReadLine ()); } } Desafio Para a fixa\u00e7\u00e3o do conceito de matrizes, o professor faz o seguinte desafio: \"Vamos fazer um programa que ir\u00e1 ler os dados de uma matriz de inteiros de ordem 5, ou seja, de dimens\u00f5es 5x5. Matematicamente ela \u00e9 chama de matriz quadrada, porque o n\u00famero de \u201clinhas\u201d \u00e9 igual ao n\u00famero de \u201ccolunas\u201d. Depois de darmos entrada nos valores da matriz chamaremos uma fun\u00e7\u00e3o que, tomando essa matriz como par\u00e2metro, retornar\u00e1 um vetor composto pelos elementos da diagonal principal dessa matriz quando, ent\u00e3o, os listaremos.\" // c# // Aqui vai ficar o cogido da solu\u00e7\u00e3o do desafio // quando eu tiver vontade de fazer Vetores e Matrizes s\u00e3o os principais tipos homog\u00eaneos de dados. A partir de agora, estudaremos estruturas que nos permitem alocar valores de tipos diferentes em uma mesma vari\u00e1vel. A compreens\u00e3o correta dos tipos de dados \u00e9 a pedra fundamental do paradigma de desenvolvimento chamado de Programa\u00e7\u00e3o Orientada \u00e0 Objetos . Estrutura de Dados Heterog\u00eaneas Registros Na defini\u00e7\u00e3o de um tipo de dado, n\u00f3s definimos precisamente a faixa de valores que podem ser atribu\u00eddos e os m\u00e9todos nativos do tipo de dado. Chamamos de tipo simples de dados os grupos de valores do mesmo tipo (inteiros, reais, string ou booleanos). Por outro lado, chamamos de tipo estruturado de dados os modelos que comportam valores de tipagem diferentes na mesma vari\u00e1vel. Um registro \u00e9 um tipo de dado estruturado. N\u00f3s j\u00e1 estamos familiarizados com as defini\u00e7\u00f5es de vari\u00e1veis em c# para os tipos nativos de dados. // c# int x ; double Result ; string Name ; A essa altura do aprendizado, as linhas acima s\u00e3o simples de serem compreendidas. S\u00e3o apenas declara\u00e7\u00f5es do tipos de 3 vari\u00e1veis simples. Mas vejam s\u00f3 o que podemos fazer abaixo. // c# Aluno xAlu ; Estranho, n\u00e9?! Estamos declarando a vari\u00e1vel xAlu como sendo do tipo...\"Aluno\"? Sim, \u00e9 isso mesmo! N\u00f3s podemos usar um token dedicado na linguagem para a cria\u00e7\u00e3o de tipos novos de dados que sirvam melhor para solu\u00e7\u00e3o dos problemas que queremos resolver como nosso c\u00f3digo. O token dedicado para constru\u00e7\u00e3o de tipos de dados em c# \u00e9 o struct . Mas para usa-lo bem, temos que aprender os conceitos de tipos de dados heterog\u00eaneos e, no futuro, avan\u00e7aremos para o conceito de classes. O comando struct \u00e9 pensado para o encapsulamento de pequenos conjuntos de vari\u00e1veis relacionadas. No exemplo do tipo Aluno, podemos pensar que todos os alunos devem ter um nome, um cpf e uma data de nascimento, por exemplo. Como essas caracter\u00edsticas se repetem para todos, podemos definir um tipo de dado espec\u00edfico para lidarmos com as informa\u00e7\u00f5es dos alunos. Implementa\u00e7\u00e3o de um Registro A cria\u00e7\u00e3o de um tipo de dado \u00e9 simples. Basta definirmos o nome do tipo de dado e declararmos o conjunto de vari\u00e1veis que far\u00e3o parte dele. No exemplo abaixo, n\u00f3s criamos o tipo \"Funcion\u00e1rio\" com as informa\u00e7\u00f5es que ser\u00e3o usadas. // c# struct Funcionario { public string CPF ; public string Name ; public double Salary ; public string dataNasc ; } Podemos ver que a declara\u00e7\u00e3o das vari\u00e1veis dentro do bloco de c\u00f3digo est\u00e3o com o token public antes da declara\u00e7\u00e3o do tipo de dado. Isso ocorre porque precisamos dizer ao compilador da linguagem que essas vari\u00e1veis ser\u00e3o acess\u00edveis fora do bloco de c\u00f3digo em que elas s\u00e3o criadas. Isso tem rela\u00e7\u00e3o direta com o conceito de m\u00e9todo e procedimento que aprendemos no curso de Algoritmo e L\u00f3gica Computacional. Agora que temos o nosso novo tipo de dado criado, podemos usar esse recurso para a defini\u00e7\u00e3o de novas vari\u00e1veis. // c# static void Main ( string []) args ) { Funcionario xFunc ; xFunc . CPF = \"1234\" ; xFunc . Name = \"Bruce Wanne\" ; xFunc . Salary = 1234 , 33 ; xFunc . dataNasc = \"31/08/1993\" ; } N\u00e3o precisamos nos preocupar com a primeira linha agora. Basta saber que todo programa em c# \u00e9 um procedimento em algum n\u00edvel. Podemos focar apenas no que est\u00e1 dentro dos colchetes. Com o tipo de dado criado. Podemos criar a vari\u00e1vel xFunc e acessar seus par\u00e2metros usando um ponto ap\u00f3s o seu nome. A atribui\u00e7\u00e3o \u00e9 feita como antes mas agora n\u00e3o precisamos declarar os tipos porque eles est\u00e3o definidos dentro do tipo de dado. J\u00e1 aprendemos no come\u00e7o desse microfundamento que a cria\u00e7\u00e3o de vetores (que s\u00e3o listas de elementos do mesmo tipo) s\u00e3o feitas em c# pela adi\u00e7\u00e3o de colchetes vazios na declara\u00e7\u00e3o das vari\u00e1veis. Por exemplo, um vetor de inteiros \u00e9 definido por int[] . Pois bem, podemos usar a mesma l\u00f3gica e criar um vetor do tipo que acabamos de criar 1 . Analogamente, como nosso tipo de dado \u00e9 Funcionario , seu vetor que conter\u00e1 v\u00e1rios funcion\u00e1rios diferentes ser\u00e1 criado por Funcionario[] . // c# Funcionario [] xFunc = new Funcionario [ 5 ]; for ( int i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( \"CPF do funcion\u00e1rio: \" ); xFunc [ i ]. CPF = Console . readLine (); Console . WriteLine ( \"Nome do funcion\u00e1rio: \" ); xFunc [ i ]. Name = Console . readLine (); Console . WriteLine ( \"Sal\u00e1rio: \" ); xFunc [ i ]. Salary = Console . readLine (); Console . WriteLine ( \"Data de Nascimento: \" ); xFunc [ i ]. dataNasc = Console . readLine (); } Acima, temos a cria\u00e7\u00e3o de um vetor de 5 posi\u00e7\u00f5es onde cada elemento \u00e9 do tipo Funcionario. Logo abaixo, temos um loop para facilitar o preenchimento das informa\u00e7\u00f5es de cada elemento do vetor. Estamos come\u00e7ando a nos aproximar do conceito de banco de dados. Mas n\u00e3o veremos isso agora. Tipos de Dados Aninhados N\u00e3o precisamos parar por aqui, \u00e9 plenamente poss\u00edvel criarmos um tipo de dados que use outro tipo de dados criado fora dele. Por exemplo, ao inv\u00e9s de salvarmos a data de nascimento como uma string, podemos criar um tipo de dados chamado Data que recebe 3 informa\u00e7\u00f5es: dia, m\u00eas e ano. // c# struct Funcionario { public string CPF ; public string Name ; public double Salary ; public Data dataNasc ; } struct Data { public string day ; public string month ; public string year ; } Dentro do tipo funcion\u00e1rio, temos a declara\u00e7\u00e3o de um vari\u00e1vel do tipo data. Para aproveitarmos o c\u00f3digo de cria\u00e7\u00e3o de um vetor Funcionario. Podemos fazer apenas uma pequena altera\u00e7\u00e3o. // c# Funcionario [] xFunc = new Funcionario [ 5 ]; for ( int i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( \"CPF do funcion\u00e1rio: \" ); xFunc [ i ]. CPF = Console . readLine (); Console . WriteLine ( \"Nome do funcion\u00e1rio: \" ); xFunc [ i ]. Name = Console . readLine (); // Parte que foi substitu\u00edda // Console.WriteLine(\"Sal\u00e1rio: \"); // xFunc[i].Salary = Console.readLine(); Console . WriteLine ( \"Data de Nascimento - Dia: \" ); xFunc [ i ]. dataNasc . day = Console . readLine (); Console . WriteLine ( \"Data de Nascimento - M\u00eas: \" ); xFunc [ i ]. dataNasc . month = Console . readLine (); Console . WriteLine ( \"Data de Nascimento - Ano: \" ); xFunc [ i ]. dataNasc . year = Console . readLine (); } A cria\u00e7\u00e3o de tipos eficientes de dados \u00e9 uma ferramenta muito eficiente para padroniza\u00e7\u00e3o e manuten\u00e7\u00e3o de solu\u00e7\u00f5es de software. \u00c9 sempre bom entendermos bem o problema proposto e quais tipos de dados podem ser criados para a cria\u00e7\u00e3o de uma resposta adequada a ele. TAD, Classes e Implementa\u00e7\u00e3o Defini\u00e7\u00e3o de um TAD - Classes e Objetos Um tipo abstrato de dado ou TAD \u00e9 um \"padr\u00e3o\" ou \"modelo\" que rege as caracter\u00edsticas que determinada estrutura de dado criada bem como suas fun\u00e7\u00f5es (que chamamos de m\u00e9todos) internas. Ou seja, um TAD \u00e9 a defini\u00e7\u00e3o das informa\u00e7\u00f5es contidas e as opera\u00e7\u00f5es execut\u00e1veis por uma vari\u00e1vel de um determinado modelo. N\u00f3s estamos usando isso o tempo todo sem perceber. Por exemplo, quando usamos a fun\u00e7\u00e3o Math.Pow(a,b) n\u00f3s estamos, na verdade, executando um m\u00e9todo chamamo Pow dentro do objeto Math . Exatamente o mesmo pensamento \u00e9 aplicado ao Console.Write() ou Console.ReadLine() . Agora que estamos avan\u00e7ando mais no nosso conhecimento sobre desenvolvimento de software, come\u00e7amos a entender mais sobre as estruturas que nos permitem realizar os nossos trabalhos, ou no jarg\u00e3o, estamos come\u00e7ando a ver \"de baixo do cap\u00f4\". At\u00e9 agora, n\u00f3s temos definido os nossos TADs atrav\u00e9s da defini\u00e7\u00e3o de sua estrutura (pelo token struct ), mas as linguagens que utilizam o paradigma orientado \u00e0 objeto atuais usam o conceito de classes para defini\u00e7\u00e3o dos seus TADs. Implementando TADs usando Classes J\u00e1 aprendemos a implementar um TAD por estrutura. // c# // Definindo o TAD struct Produto { public string Nome ; public double PrecoUnd ; } // Criando uma vari\u00e1vel com TAD Produto xProd ; // Usando o TAD xProd . Nome = \"PS5\" ; xProd . PrecoUnd = 8000.99 ; Podemos construir uma solu\u00e7\u00e3o an\u00e1loga a essa pelo token de cria\u00e7\u00e3o de classes. // c# // Definindo o TAD class Produto { public string Nome ; public double PrecoUnd ; } // Criando a classe Produto xProd = new Produto (); // Usando o TAD xProd . Nome = \"Xbox One\" ; xProd . PrecoUnd = 9999.99 ; Em uma primeira vista, parecem ser abordagens equivalentes. Mas existem algumas diferen\u00e7as importantes que merecem a nossa aten\u00e7\u00e3o. Para entender bem a diferen\u00e7a entre essas constru\u00e7\u00f5es, vamos ter que aprender um pouco mais sobre como o computador guarda informa\u00e7\u00f5es. O layout de mem\u00f3ria de programas em C s\u00e3o separados em 5 n\u00edveis : Text segment (instructions) Initializes data segment Uninitialized data segment (bss) Heap Stack (Inline) N\u00f3s n\u00e3o vamos nos atentar muito aos detalhes agora. Mas agora que sabemos um pouco das diferentes aloca\u00e7\u00f5es poss\u00edveis na mem\u00f3ria durante a execu\u00e7\u00e3o de um programa. Podemos focar no que for necess\u00e1rio para diferenciarmos o struct do class . Os valores do tipo struct s\u00e3o alocados na mem\u00f3ria stack. Essa parte de mem\u00f3ria grava temporariamente as vari\u00e1veis criadas por uma fun\u00e7\u00e3o. No stack, as vari\u00e1veis s\u00e3o declaras, guardadas e inicializadas durante a execu\u00e7\u00e3o do programa e apagadas na sua conclus\u00e3o. A mem\u00f3ria \u00e9 alocada em um bloco cont\u00edguos. \u00c9 mais limitada e de r\u00e1pido acesso. Os valores do tipo class s\u00e3o alocados no heap. Essa \u00e9 a parte da mem\u00f3ria usada pelas linguagens de programa\u00e7\u00e3o para suas vari\u00e1veis de escopo global. A mem\u00f3ria \u00e9 alocada de maneira aleat\u00f3ria e \u00e9 mais abundante se comparada com a stack. Sempre que criamos uma nova inst\u00e2ncia como fizemos em Produto xProd = new Produto() n\u00f3s estamos apontando um novo endere\u00e7o de mem\u00f3ria para ser usado. Desafio Cadastrar objetos em um vetor usando uma classe. // c# using System ; namespace WorkSpace { // Criando o TAD do tipo class class carro { public string name ; public string marca ; public string anoFab ; public string placa ; public double precoFip ; }; class Program { static void Main ( string [] args ) { // Criando um vetor do tipo carro carro [] cadCarro = new carro [ 3 ]; // Loop para inserir o input no vetor for ( int i = 0 ; i < 2 ; i ++ ) { carro x = new carro (); Console . Write ( $\"\\n Qual o nome? \" ); x . name = Console . ReadLine (); Console . Write ( $\" Qual a marca? \" ); x . marca = Console . ReadLine (); Console . Write ( $\" Qual o ano de fabrica\u00e7\u00e3o? \" ); x . anoFab = Console . ReadLine (); Console . Write ( $\" Qual a placa? \" ); x . placa = Console . ReadLine (); Console . Write ( $\" Qual o pre\u00e7o da tabela FIP? \" ); x . precoFip = double . Parse ( Console . ReadLine ()); // Salvando o x no vetor cadCarro cadCarro [ i ] = x ; }; Console . Clear (); // Mostrando o resultado foreach ( carro C in cadCarro ) { Console . WriteLine ( $\"\\n Carro: {C.name},Marca:{C.marca}\" ); Console . WriteLine ( $\" Placa: {C.placa}, Ano:{C.anoFab}\" ); Console . WriteLine ( $\" Pre\u00e7o da Tabela Fip: {C.precoFip}\" ); }; Console . ReadKey (); } } } \u00c9 muito mais comum se achar situa\u00e7\u00f5es de constru\u00e7\u00e3o de TADs por uso de classes ao inv\u00e9s de estruturas. Vale a pena estudar mais para sabermos exatamente quando cada uma dessas op\u00e7\u00f5es \u00e9 a adequada. Mas no come\u00e7o, as classes nos servir\u00e3o muito bem. Aqui \u00e9 importante frisarmos uma coisa. Quando instanciamos um objeto (ou seja, quando usamos o token new ) o nome que passamos a esse objeto \u00e9 apenas uma refer\u00eancia . Isso quer dizer que, no exemplo acima, cadCarro n\u00e3o \u00e9 o nosso objeto em si e sim uma refer\u00eancia a ele. Alguns de voc\u00eas podem estar questionando o motivo desse aviso. Sabendo que cadCarro n\u00e3o \u00e9 o objeto em si e sim apenas uma refer\u00eancia que aponta para o endere\u00e7o na mem\u00f3ria em que o objeto est\u00e1 salvo, ao criarmos uma nova linha no nosso c\u00f3digo do tipo cadCarro2 = cadCarro estamos criando uma nova refer\u00eancia para o mesmo objeto alocado na mem\u00f3ria. Ou seja, qualquer manipula\u00e7\u00e3o feita usando a refer\u00eancia cadCarro tamb\u00e9m ser\u00e1 refletida em cadCarro2 . Abaixo temos um programa simples que usa essa rela\u00e7\u00e3o de refer\u00eancia. // c# using System ; class Program { class carro { public string name ; public string marca ; public string anoFab ; public string placa ; public double precoFip ; }; public static void Main ( string [] args ) { // Criando um vetor do tipo carro carro cadCarro = new carro (); carro cadCarro2 = null ; cadCarro . name = \"carro Nome\" ; cadCarro . marca = \"marca\" ; cadCarro . anoFab = \"2022\" ; cadCarro . placa = \"placa\" ; cadCarro . precoFip = 22.22 ; Console . WriteLine ( $\"{cadCarro.name}\" ); cadCarro2 = cadCarro ; Console . WriteLine ( $\"{cadCarro2.name}\" ); cadCarro2 . name = \"carro nome 2\" ; Console . WriteLine ( $\"{cadCarro.name}\" ); } } Atributos, Propriedades e M\u00e9todos de Classe Vamos analisar com calma essas duas cita\u00e7\u00f5es do texto: \"Uma classe especifica uma estrutura de dados e os seus m\u00e9todos operacionais permiss\u00edveis que se aplicam a cada um dos seus objetos\" (MARTIN e ODELL, 1995). \"Um objeto \u00e9 qualquer coisa, real ou abstrata, a respeito da qual armazenamos os dados e os m\u00e9todos que os manipulam\" (MARTIN e ODELL, 1995). Em ambas as cita\u00e7\u00f5es temos as figuras dos dados e dos m\u00e9todos. A estrutura dos dados n\u00f3s j\u00e1 vimos na se\u00e7\u00e3o passada quando lidamos com defini\u00e7\u00e3o de TADs declarando os tipos das vari\u00e1veis tanto na declara\u00e7\u00e3o via estrutura quanto por classe. Agora, vamos expandir um pouco mais o poder dos TADs nos permitindo definir, al\u00e9m das regras de quais dados ser\u00e3o armazenados, quais opera\u00e7\u00f5es e fun\u00e7\u00f5es ser\u00e3o executadas internamente por nossos objetos. Ao construir um tipo abstrato de dados, nos perguntamos quais informa\u00e7\u00f5es ser\u00e3o necess\u00e1rias e, al\u00e9m disso, quais opera\u00e7\u00f5es ser\u00e3o usadas para resolu\u00e7\u00e3o do nosso problema. Indo um pouco mais fundo Vejamos o seguinte TAD criado apenas com a defini\u00e7\u00e3o da estrutura de dados: // c# class pessoa { public string name ; public double salary ; } Dizemos que as informa\u00e7\u00f5es sobre nome e sal\u00e1rio s\u00e3o atributos do nosso objeto pessoa . Eles definem a estrutura do tipo abstrato de dados que definimos. Tamb\u00e9m podemos chama-los de vari\u00e1veis da classe pessoa . Mesmo que o exemplo acima funcione. Uma maneira mais apropriada de reconstruir essa solu\u00e7\u00e3o pode ser vista abaixo. // c# class pessoa { private string _name ; public string name { get { return _name ;} set { _name = value ;} } private double _salary ; public double salary { get { return _salary ;} set { _salary = value ;} } } Os campos _name e _salary s\u00e3o definidos com o escopo privado e podem ser acessados somente internamente ao objeto. Para podermos acessar fora do escopo do objeto, usamos as fun\u00e7\u00f5es nativas get e set . Os nomes das fun\u00e7\u00f5es deixam claro o que cada uma faz. set \u00e9 usado para atribui\u00e7\u00e3o de um valor passado (que chamamos de value) e get \u00e9 usado para retorno de valor salvo no objeto. Vamos ver um programa simples que utiliza esses conceitos. // c# namespace WorkSpace { class pessoa { private string _name ; public string name { get { return _name ;} set { _name = value ;} } private double _salary ; public double salary { get { return _salary ;} set { _salary = value ;} } }; class Program { static void Main ( string [] args ) { pessoa xpes = new pessoa (); xpes . name = \"Clark Kent\" ; xpes . salary = 1234.56 ; Console . WriteLine ( $\"Nome: {xpes.name}\" ); Console . WriteLine ( $\"Sal\u00e1rio: R$ {xpes.salary}\" ); } } } Na linha xpes.name = \"Clark Kent\" vemos como a fun\u00e7\u00e3o interna set funciona. Ela recebe o valor e atribui \u00e0 vari\u00e1vel provada _name . Quando definimos um atributo privado e fun\u00e7\u00f5es ( get e set ) que manipulam esse atributo dentro da classe, podemos dizer que criamos uma propriedade do objeto. J\u00e1 temos os conceitos de objeto, atributo e propriedade bem definidos. Agora vamos aprender sobre as fun\u00e7\u00f5es dentro de um objeto. A essas fun\u00e7\u00f5es, damos o nome de m\u00e9todos ou servi\u00e7os do objeto . // c# class circulo { private double _raio ; public double raio { get { return _raio ; } set { _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } Aqui temos um atributo chamado _raio . Uma propriedade chamada raio . E, por fim, temos tamb\u00e9m um m\u00e9todo chamado calcArea . Abaixo temos um exemplo de como usar esses conceitos na pr\u00e1tica. // c# namespace WorkSpace { class circulo { private double _raio ; public double raio { get { return _raio ; } set { _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } class Program { static void Main ( string [] args ) { double area ; circulo xcirculo = new circulo (); xcirculo . raio = 2.5 ; area = xcirculo . calcArea (); Console . WriteLine ( $\"A \u00e1rea \u00e9 igual a {area:F2}\" ); Console . ReadKey (); } } } Coment\u00e1rio: Eu n\u00e3o sei voc\u00ea, mas eu fiquei com d\u00favidas sobre essa parte do area:F2 . Isso \u00e9 muito simples. Como o valor area \u00e9 do tipo double, ele possui v\u00e1rias casas ap\u00f3s a v\u00edrgula. Esse par\u00e2metro \u00e9 a defini\u00e7\u00e3o da quantidade de casas ap\u00f3s a v\u00edrgula. Nesse caso, o resultado ter\u00e1 2 casas ap\u00f3s a v\u00edrgula. Quando encapsulamos as propriedades e os m\u00e9todos dentro de um objeto, estamos omitindo os detalhes de como objeto faz as transforma\u00e7\u00f5es e armazena os dados. A essa t\u00e9cnica damos o nome de oculta\u00e7\u00e3o da informa\u00e7\u00e3o . Isso \u00e9 \u00fatil para garantir a integridade da manipula\u00e7\u00e3o dos dados por parte dos usu\u00e1rios e aumenta a seguran\u00e7a quanto a l\u00f3gica implementada no c\u00f3digo. Podemos definir a l\u00f3gica tamb\u00e9m dentro das fun\u00e7\u00f5es de set e get . // c# namespace WorkSpace { class circulo { private double _raio ; public double raio { get { return _raio ; } set { if ( value < 0 ) _raio = 0 ; else _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } class Program { static void Main ( string [] args ) { double area ; circulo xcir = new circulo (); xcir . raio = - 2.5 ; area = xcir . calcArea (); Console . WriteLine ( $\"Area: {area:F2}\" ); } } } Desse modo, podemos ver que caso o valor inputado no raio for negativo, o resultado da \u00e1rea ser\u00e1 0. Caso for positivo, o valor da \u00e1rea ser\u00e1 calculado normalmente. Se import\u00e1ssemos esse objeto sem saber o que acontece por dentro dele, n\u00e3o entender\u00edamos o que acontece exatamente dentro do objeto circulo . Mecanismos de Visibilidade/Acessibilidade Os modificadores de acesso ou mecanismos de visibilidade s\u00e3o os m\u00e9todos de acesso \u00e0s classes e seus, atributos, propriedades e m\u00e9todos. Existem v\u00e1rios tipos de modificadores de acesso ( protected , internal , protected internal e etc), mas por agora, vamos estudar somente o public e o private . Observemos novamente o c\u00f3digo da \u00faltima se\u00e7\u00e3o com algumas anota\u00e7\u00f5es adicionais. // c# // Bloco contendo todo o programa namespace WorkSpace { // Defini\u00e7\u00e3o do TAD circulo class circulo { private double _raio ; public double raio { get { return _raio ; } set { if ( value < 0 ) _raio = 0 ; else _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } // Bloco contendo o programa class Program { // Procedimento do programa static void Main ( string [] args ) { double area ; circulo xcir = new circulo (); xcir . raio = - 2.5 ; area = xcir . calcArea (); Console . WriteLine ( $\"Area: {area:F2}\" ); } } } Podemos ver que a classe circulo \u00e9 criada antes do bloco que cont\u00e9m o programa propriamente dito. Ou seja, est\u00e3o em escopos diferentes. Desse modo, um comando contido no procedimento Main n\u00e3o tem acesso a nenhuma propriedade ou atributos com o par\u00e2metro private nele somente os de par\u00e2metro public ou atrav\u00e9s das fun\u00e7\u00f5es set e get . Aten\u00e7\u00e3o: Na cria\u00e7\u00e3o da classe circulo n\u00e3o foi dito se ela seria acess\u00edvel fora do seu escopo original, ou seja, n\u00e3o usamos o comando public class circulo e sim o comando class circulo . Em c#, quando se cria uma classe sem a defini\u00e7\u00e3o expl\u00edcita da sua visibilidade, o padr\u00e3o da linguagem \u00e9 deixar a classe como public . Qualidade e Robustez de Software Esses conceitos de controle de acesso s\u00e3o importantes porque nosso c\u00f3digo precisa fazer o que foi planejado, da maneira planejada. Quando n\u00e3o limitamos a capacidade do usu\u00e1rio inserir dados, podemos cair em situa\u00e7\u00f5es n\u00e3o previstas que podem comprometer a execu\u00e7\u00e3o do nosso programa. Um conceito que nos ajuda a entender melhor essa situa\u00e7\u00e3o \u00e9 o robustez do software . Esse conceito \u00e9 usado pelos profissionais de qualidade de software e que \u00e9 referente a capacidade do programa em funcionar da maneira correta em diferentes cen\u00e1rios e condi\u00e7\u00f5es adversas. Outro conceito \u00fatil dessa \u00e1rea \u00e9 o corre\u00e7\u00e3o de software que \u00e9 a qualidade referente a capacidade do nosso programa funcionar da maneira prevista e especificada. A t\u00e9cnica da omiss\u00e3o da informa\u00e7\u00e3o nos ajuda a garantir o cumprimento desses requisitos. Construtores e Destrutores de Classe Um construtor de classe \u00e9 usado para cria\u00e7\u00e3o de um objeto e pela inicializa\u00e7\u00e3o dos seus atributos. Sempre que instanciamos um objeto, o seu construtor entra em a\u00e7\u00e3o. Coment\u00e1rio: N\u00e3o entraremos a fundo no conceito de Common Language Runtime (CLR) agora. Talvez mais pra frente a gente veja isso. Se um construtor n\u00e3o for declarado explicitamente, o c# cria a classe usando algumas conven\u00e7\u00f5es de modo a colocar o objeto dispon\u00edvel para uso. Esses padr\u00f5es de construtores s\u00e3o definidos de acordo com o tipo primitivo das vari\u00e1veis contidas no nosso objeto (que sabemos que se chamam atributos). Por padr\u00e3o, o CLR atribui os seguintes valores para os atributos dos objetos: 0 para vari\u00e1veis do tipo int, double e float false para vari\u00e1veis booleanas '\\0' para vari\u00e1veis do tipo string Definindo Construtores Para n\u00e3o usarmos as conven\u00e7\u00f5es padr\u00e3o do CLR. Podemos, n\u00f3s mesmo, atribuir os construtores dos atributos dos nossos objetos. Para isso, usamos um m\u00e9todo (ou seja, uma fun\u00e7\u00e3o interna do objeto) com o mesmo nome do objeto . Esse m\u00e9todo n\u00e3o possui retorno e s\u00e3o declarados como public . // c# [...] // C\u00f3digo com o namespasce class circulo { private double _raio ; public double raio { get { return _raio ;} set { _raio = value ;} } public circulo () // construtor { _raio = 0 ; } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } A partir de agora, sempre que executarmos um instanciamento atrav\u00e9s do comando // c# circulo xcir = new circulo (); O construtor ser\u00e1 chamado e executar\u00e1 as instru\u00e7\u00f5es contidas no construtor. No caso de exemplo, o valor default para o atributo _raio ser\u00e1 0. N\u00e3o \u00e9 dif\u00edcil pensar em situa\u00e7\u00f5es onde precisar\u00edamos usar diferentes m\u00e9todos de constru\u00e7\u00e3o em um objeto. Para isso, podemos ter mais de um construtor no mesmo objeto, chamamos isso de sobrecarregamento . A condi\u00e7\u00e3o \u00e9 que esses construtores sejam diferentes em termos de par\u00e2metros ou ordem dos par\u00e2metros. // c# [...] // C\u00f3digo com o namespasce class circulo { private double _raio ; public double raio { get { return _raio ;} set { _raio = value ;} } public circulo () // construtor { _raio = 0 ; } public circulo ( int R ) { _raio = R ; } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } Para executar o segundo construtor, basta passarmos um par\u00e2metro no momento do instanciamento do nosso novo objeto. // c# circulo xcirc = new circulo ( 2.3 ); Como fizemos um instanciamento com valor, o c# saber\u00e1 que queremos usar o segundo construtor ao inv\u00e9s do primeiro. Destrutores Ao contr\u00e1rio do que podemos pensar pelo nome, os destrutores n\u00e3o s\u00e3o usados para \"destruir\" os objetos. Eles s\u00e3o usados definir um comportamento espec\u00edfico no momento da destrui\u00e7\u00e3o de um objeto. Ou seja, eles s\u00e3o acionados na destrui\u00e7\u00e3o e n\u00e3o s\u00e3o os destruidores. N\u00e3o precisam ser chamados ou referenciados pois s\u00e3o invocados automaticamente. O normal \u00e9 n\u00e3o se usar destrutores no dia a dia visto que o CLR j\u00e1 faz o trabalho de padroniza\u00e7\u00e3o para elimina\u00e7\u00e3o de um objeto. Diferente dos construtores, uma classe pode ter apenas um destrutor . E a sua cria\u00e7\u00e3o \u00e9 parecida com a do construtor, uma vez que s\u00e3o m\u00e9todos sem retorno. A \u00fanica diferen\u00e7a \u00e9 que sua nota\u00e7\u00e3o come\u00e7a com o til. // c# [...] // C\u00f3digo com o namespasce class circulo { private double _raio ; public double raio { get { return _raio ;} set { _raio = value ;} } public circulo () // construtor 1 { _raio = 0 ; } public circulo ( int R ) // construtor 2 { _raio = R ; } ~ circulo { Console . WriteLine ( \"Adeus, mundo cruel!\" ); } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } Os detalhes de como um computador funciona s\u00e3o estudados em Estrutura de Computadores mas, para adiantar, algumas linguagens tem um programa chamado garbage colector que \u00e9 respons\u00e1vel pela reutiliza\u00e7\u00e3o de slots de mem\u00f3ria que est\u00e3o sendo usados por objetos que n\u00e3o tem mais utiliza\u00e7\u00e3o no c\u00f3digo. Em c# n\u00f3s n\u00e3o precisamos explicitamente eliminar um objeto porque o pr\u00f3prio garbage colector faz esse trabalho. Bibliografia ASCENCIO, Ana Fernanda Gomes; CAMPOS, Edilene Aparecida Veneruchi de. Fundamentos da programa\u00e7\u00e3o de computadores . S\u00e3o Paulo: Pearson, 2012. ISBN 9788564574168 SOUZA, Marco A. Furlan de; GOMES, Marcelo Marques; SOARES, Marcio Vieira; CONC\u00cdLIO, Ricardo. Algoritmos e l\u00f3gica de programa\u00e7\u00e3o: um texto introdut\u00f3rio para a engenharia . S\u00e3o Paulo: Cengage Learning, 2019. ISBN: 9788522128150 AGUILAR, Luis Joyanes. Fundamentos de programa\u00e7\u00e3o algoritmos, estruturas de dados e objetos . 3. ed. Porto Alegre: AMGH, 2008. ISBN: 9788580550146 DEITEL, Harvey M; DEITEL, Paul J. Java - como programar . 8. ed. S\u00e3o Paulo: Pearson, 2010. ISBN 9788576055631 GRIFFITHS, Ian. Programming C# 8.0 . O'Reilly Media, Inc. 2019. ISBN 9781492056812 MANZANO, Jos\u00e9 Augusto N. G; OLIVEIRA, Jayr Figueiredo de. Algoritmos: l\u00f3gica para desenvolvimento de programa\u00e7\u00e3o de computadores . 28. ed. rev. e atual. S\u00e3o Paulo, SP: \u00c9rica, 2016. E-book. ISBN 9788536518657 PRICE, Mark J. C# 8.0 and T Core 3.0 - Modern Cross - Platform Development . O'Reilly Media; 2019. ISBN 9781788478120 PUGA, Sandra; RISSETTI, Gerson. L\u00f3gica de programa\u00e7\u00e3o e estruturas de dados com aplica\u00e7\u00f5es em Java . 2. ed. S\u00e3o Paulo: Prentice Hall, 2009. ISBN 9788576052074 Isso \u00e9 muito legal! \u21a9","title":"Algoritmo e Abstra\u00e7\u00e3o"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#assuntos","text":"Estrutura de Dados Homog\u00eaneas e Heterog\u00eaneas Estrutura de Dados Homog\u00eaneas Estrutura de Dados Heterog\u00eaneas Tipos Abstratos de Dados, Classes e Implementa\u00e7\u00e3o Defini\u00e7\u00e3o de um TAD - Classes e Objetos Atributos, Propriedades e M\u00e9todos de Classe Mecanismos de Visibilidade/Acessibilidade Construtores e Destrutores de Classe Bibliografia","title":"Assuntos"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#introducao","text":"Durante o processo de constru\u00e7\u00e3o de software, a manipula\u00e7\u00e3o de informa\u00e7\u00e3o em mem\u00f3ria \u00e9 tarefa fundamental para que a solu\u00e7\u00e3o de software seja \u00fatil e satisfat\u00f3ria. As linguagens de programa\u00e7\u00e3o possuem especifica\u00e7\u00f5es sobre as caracter\u00edsticas que cada grupo de vari\u00e1veis pode ter, esse controle de propriedade das vari\u00e1veis e das limita\u00e7\u00f5es relacionadas a cada tipo \u00e9 chamado de Tipo de Dado . Dizemos que um Tipo Abstrato de Dado (TAD) \u00e9 a defini\u00e7\u00e3o por parte do programador de uma nova classe de dado otimizada para a resolu\u00e7\u00e3o do problema a ser trabalhado com o software em desenvolvimento. Cont\u00e9m tanto a estrutura da informa\u00e7\u00e3o a ser trabalhada quanto as opera\u00e7\u00f5es, procedimentos e fun\u00e7\u00f5es que podem ser aplicadas a esse tipo de dado novo. A constru\u00e7\u00e3o de TADs passa pela identifica\u00e7\u00e3o das entidades de um problema computacional e a defini\u00e7\u00e3o e desenvolvimento do modelo de dados adequado para a solu\u00e7\u00e3o proposta. Primeiramente, vamos aprender sobre os tipos de dados normalmente existente nas linguagens de programa\u00e7\u00e3o mais comuns do mercado. Podemos dividir os tipos de dados em dois grandes grupos: Homog\u00eaneos e Heterog\u00eaneos. Coment\u00e1rio: Esse microfundamento deve ser estudado somente ap\u00f3s o microfundamento de Algoritmo e L\u00f3gica de Programa\u00e7\u00e3o . Como esse material \u00e9 de refer\u00eancia, ele n\u00e3o deve ser lido, necessariamente, como se fosse um livro.","title":"Introdu\u00e7\u00e3o"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#estrutura-de-dados-homogeneas-e-heterogeneas","text":"","title":"Estrutura de Dados Homog\u00eaneas e Heterog\u00eaneas"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#estrutura-de-dados-homogeneas","text":"Os dois tipos de TAs Homog\u00eaneos mais comuns s\u00e3o os vetores (tamb\u00e9m chamados de arrays), que s\u00e3o formados por uma lista de \\(n\\) elementos de mesmo tipo e as matrizes, que podem ser entendidas como um empilhamento de vetores ou um tipo de vetor de duas dimens\u00f5es.","title":"Estrutura de Dados Homog\u00eaneas"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#vetores","text":"\u00c9 uma vari\u00e1vel composta, homog\u00eanea e unidimensional. Podemos pensar em um vetor como uma lista com \\(n\\) elementos do mesmo tipo. Como todos os valores de um vetor possuem o mesmo nome (o nome da vari\u00e1vel), para acessarmos algum valor espec\u00edfico de um elemento, precisaremos de um \u00edndice que fa\u00e7a refer\u00eancia ao local na lista onde o valor desejado se encontra. Para criarmos um vetor em c#, usamos a declara\u00e7\u00e3o da vari\u00e1vel com um par de colchetes vazio e a defini\u00e7\u00e3o da quantidade de posi\u00e7\u00f5es (ou lugares) que o nosso vetor ter\u00e1. Abaixo podemos ver um exemplo disso. // c# int [] Idades = new int [ 100 ]; // Vetor de int com 100 places double [] Alt = new double [ 20 ]; // Vetor de double com 20 string [] Nomes = new string [ 10 ]; // Vetor de string com 10 No exemplo acima, podemos ver que criamos um vetor denominado Idades que receber\u00e1 apenas valores do tipo inteiro. Um vetor de doubles (que \u00e9 um float com mais casas de precis\u00e3o) chamado salario. E, por fim, um vetor de strings chamado Nomes. Coment\u00e1rio: Existe uma classe que permite a cria\u00e7\u00e3o de um tipo de vetor gen\u00e9rico sem tamanho definido em c# chamado Lista. O curso n\u00e3o entrou nesse assunto mas eu vou deixar esse exemplo de lista aqui. // c# using System.Collections.Generic ; List < int > lista = new List < int > (); List . add ( 1 ); List . add ( 2 ); List . remove ( 2 ); Agora que sabemos como criar um vetor. O pr\u00f3ximo passo \u00e9 aprendermos como inserir informa\u00e7\u00e3o nele. Para a nossa sorte, \u00e9 bem simples. Basta colocarmos o nome do vetor seguido da posi\u00e7\u00e3o a ser preenchida entre colchetes. // c# Idades [ 20 ] = 10 ; // Valor 10 na posi\u00e7\u00e3o 19 Alt [ 0 ] = 1.2 ; // Valor 1.2 na posi\u00e7\u00e3o 1 S\u00f3 temos que ter cuidado com uma coisa. Existem linguagens (como C#, Java, Python e outras) que colocam o index da primeira posi\u00e7\u00e3o de um vetor como sendo o valor 0. Outras linguagens (como R) usam o numero 1 para essa primeira posi\u00e7\u00e3o. Com base no que aprendemos em Algoritmos e L\u00f3gica da Programa\u00e7\u00e3o , somos capazes de entender o c\u00f3digo abaixo a respeito do uso de um la\u00e7o de repeti\u00e7\u00e3o para preenchimento de um vetor de 5 posi\u00e7\u00f5es. // c# int i ; int [] Valores = new int [ 5 ]; // Input dos dados for ( i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( $\"Digite o valor {i + 1}: \" ); Valores [ i ] = int . Parse ( Console . ReadLine ()); };","title":"Vetores"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#desafio","text":"O professor prop\u00f5e o seguinte desafio para fixa\u00e7\u00e3o do conceito de vetor: \"Criaremos um vetor de n\u00fameros inteiros com 5 posi\u00e7\u00f5es e ler cada um de seus valores. Criaremos duas fun\u00e7\u00f5es que, tomando esse vetor como par\u00e2metro, ir\u00e3o retornar a soma dos n\u00fameros pares contidos no vetor e a quantidade de n\u00fameros \u00edmpares que ele possui.\" Minha resolu\u00e7\u00e3o desse problema segue abaixo. // c# int [] vetor = new int [ 5 ]; int somaPar = 0 ; int contaImpar = 0 ; int input ; // Soma de dois valores int soma ( int valor1 , int valor2 ) { return valor1 + valor2 ; }; // Itera\u00e7\u00e3o para lan\u00e7amento dos valores e somas for ( int i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( $\" Valor da Posi\u00e7\u00e3o n\u00ba: {i + 1}\" ); input = int . Parse ( Console . ReadLine ()); vetor [ i ] = input ; if ( input % 2 == 0 ) { somaPar = soma ( somaPar , input ); } else { contaImpar += 1 ; } }; Console . WriteLine ( $\" SomaPar = {somaPar}, ContaImpar = {contaImpar}\" ); Console . WriteLine ( $\"({vetor[0]},{vetor[1]},{vetor[2]},{ vetor[3]},{vetor[4]})\" ); Que produz o seguinte resultado para o input (1,2,1,2,1) .","title":"Desafio"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#matrizes","text":"Como dito no in\u00edcio dessa se\u00e7\u00e3o. Podemos pensar que matrizes s\u00e3o vetores de duas dimens\u00f5es. Por causa disso, a declara\u00e7\u00e3o da vari\u00e1vel \u00e9 um pouco diferente. // c# double [,] Notas = new double [ 4 , 5 ]; // 4 linhas e 5 colunas Por ser uma vari\u00e1vel de duas dimens\u00f5es, a maneira como atribu\u00edmos valores \u00e0 cada posi\u00e7\u00e3o \u00e9 um pouco diferente do caso com vetor. Para cada atribui\u00e7\u00e3o de valor, temos que indicar a linha e coluna que nosso dado ser\u00e1 salvo. // c# Notas [ 0 , 0 ] = 1 ; // Linha 1 coluna 1 Notas [ 0 , 1 ] = 1 ; // Linha 1 coluna 2 Notas [ 2 , 3 ] = 1 ; // Linha 3 coluna 4 Notas [ 3 , 4 ] = 1 ; // Linha 4 coluna 5 Devemos sempre lembrar que c# usa a posi\u00e7\u00e3o de numeral 0 para o index inicial de vetores e matrizes. Agora vamos ver um programa simples que exemplifica o que acabamos de aprender. A leitura dele n\u00e3o deve ser dif\u00edcil. Se est\u00e1 tendo dificuldade, volte no microfundamento de l\u00f3gica da programa\u00e7\u00e3o. // c# int i , j ; int [,] Valor = new int [ 10 , 3 ]; // Loop para entrada de valores na matriz for ( i = 0 ; i < 10 ; i ++ ) // Loop para linhas { for ( j = 0 ; j < 3 ; j ++ ) // Loop para colunas { Console . WriteLine ( $\"Valor Linha:{i+1} Coluna{j+1}\" ); Valor [ i , j ] = int . Parse ( Console . ReadLine ()); } }","title":"Matrizes"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#desafio_1","text":"Para a fixa\u00e7\u00e3o do conceito de matrizes, o professor faz o seguinte desafio: \"Vamos fazer um programa que ir\u00e1 ler os dados de uma matriz de inteiros de ordem 5, ou seja, de dimens\u00f5es 5x5. Matematicamente ela \u00e9 chama de matriz quadrada, porque o n\u00famero de \u201clinhas\u201d \u00e9 igual ao n\u00famero de \u201ccolunas\u201d. Depois de darmos entrada nos valores da matriz chamaremos uma fun\u00e7\u00e3o que, tomando essa matriz como par\u00e2metro, retornar\u00e1 um vetor composto pelos elementos da diagonal principal dessa matriz quando, ent\u00e3o, os listaremos.\" // c# // Aqui vai ficar o cogido da solu\u00e7\u00e3o do desafio // quando eu tiver vontade de fazer Vetores e Matrizes s\u00e3o os principais tipos homog\u00eaneos de dados. A partir de agora, estudaremos estruturas que nos permitem alocar valores de tipos diferentes em uma mesma vari\u00e1vel. A compreens\u00e3o correta dos tipos de dados \u00e9 a pedra fundamental do paradigma de desenvolvimento chamado de Programa\u00e7\u00e3o Orientada \u00e0 Objetos .","title":"Desafio"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#estrutura-de-dados-heterogeneas","text":"","title":"Estrutura de Dados Heterog\u00eaneas"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#registros","text":"Na defini\u00e7\u00e3o de um tipo de dado, n\u00f3s definimos precisamente a faixa de valores que podem ser atribu\u00eddos e os m\u00e9todos nativos do tipo de dado. Chamamos de tipo simples de dados os grupos de valores do mesmo tipo (inteiros, reais, string ou booleanos). Por outro lado, chamamos de tipo estruturado de dados os modelos que comportam valores de tipagem diferentes na mesma vari\u00e1vel. Um registro \u00e9 um tipo de dado estruturado. N\u00f3s j\u00e1 estamos familiarizados com as defini\u00e7\u00f5es de vari\u00e1veis em c# para os tipos nativos de dados. // c# int x ; double Result ; string Name ; A essa altura do aprendizado, as linhas acima s\u00e3o simples de serem compreendidas. S\u00e3o apenas declara\u00e7\u00f5es do tipos de 3 vari\u00e1veis simples. Mas vejam s\u00f3 o que podemos fazer abaixo. // c# Aluno xAlu ; Estranho, n\u00e9?! Estamos declarando a vari\u00e1vel xAlu como sendo do tipo...\"Aluno\"? Sim, \u00e9 isso mesmo! N\u00f3s podemos usar um token dedicado na linguagem para a cria\u00e7\u00e3o de tipos novos de dados que sirvam melhor para solu\u00e7\u00e3o dos problemas que queremos resolver como nosso c\u00f3digo. O token dedicado para constru\u00e7\u00e3o de tipos de dados em c# \u00e9 o struct . Mas para usa-lo bem, temos que aprender os conceitos de tipos de dados heterog\u00eaneos e, no futuro, avan\u00e7aremos para o conceito de classes. O comando struct \u00e9 pensado para o encapsulamento de pequenos conjuntos de vari\u00e1veis relacionadas. No exemplo do tipo Aluno, podemos pensar que todos os alunos devem ter um nome, um cpf e uma data de nascimento, por exemplo. Como essas caracter\u00edsticas se repetem para todos, podemos definir um tipo de dado espec\u00edfico para lidarmos com as informa\u00e7\u00f5es dos alunos.","title":"Registros"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#implementacao-de-um-registro","text":"A cria\u00e7\u00e3o de um tipo de dado \u00e9 simples. Basta definirmos o nome do tipo de dado e declararmos o conjunto de vari\u00e1veis que far\u00e3o parte dele. No exemplo abaixo, n\u00f3s criamos o tipo \"Funcion\u00e1rio\" com as informa\u00e7\u00f5es que ser\u00e3o usadas. // c# struct Funcionario { public string CPF ; public string Name ; public double Salary ; public string dataNasc ; } Podemos ver que a declara\u00e7\u00e3o das vari\u00e1veis dentro do bloco de c\u00f3digo est\u00e3o com o token public antes da declara\u00e7\u00e3o do tipo de dado. Isso ocorre porque precisamos dizer ao compilador da linguagem que essas vari\u00e1veis ser\u00e3o acess\u00edveis fora do bloco de c\u00f3digo em que elas s\u00e3o criadas. Isso tem rela\u00e7\u00e3o direta com o conceito de m\u00e9todo e procedimento que aprendemos no curso de Algoritmo e L\u00f3gica Computacional. Agora que temos o nosso novo tipo de dado criado, podemos usar esse recurso para a defini\u00e7\u00e3o de novas vari\u00e1veis. // c# static void Main ( string []) args ) { Funcionario xFunc ; xFunc . CPF = \"1234\" ; xFunc . Name = \"Bruce Wanne\" ; xFunc . Salary = 1234 , 33 ; xFunc . dataNasc = \"31/08/1993\" ; } N\u00e3o precisamos nos preocupar com a primeira linha agora. Basta saber que todo programa em c# \u00e9 um procedimento em algum n\u00edvel. Podemos focar apenas no que est\u00e1 dentro dos colchetes. Com o tipo de dado criado. Podemos criar a vari\u00e1vel xFunc e acessar seus par\u00e2metros usando um ponto ap\u00f3s o seu nome. A atribui\u00e7\u00e3o \u00e9 feita como antes mas agora n\u00e3o precisamos declarar os tipos porque eles est\u00e3o definidos dentro do tipo de dado. J\u00e1 aprendemos no come\u00e7o desse microfundamento que a cria\u00e7\u00e3o de vetores (que s\u00e3o listas de elementos do mesmo tipo) s\u00e3o feitas em c# pela adi\u00e7\u00e3o de colchetes vazios na declara\u00e7\u00e3o das vari\u00e1veis. Por exemplo, um vetor de inteiros \u00e9 definido por int[] . Pois bem, podemos usar a mesma l\u00f3gica e criar um vetor do tipo que acabamos de criar 1 . Analogamente, como nosso tipo de dado \u00e9 Funcionario , seu vetor que conter\u00e1 v\u00e1rios funcion\u00e1rios diferentes ser\u00e1 criado por Funcionario[] . // c# Funcionario [] xFunc = new Funcionario [ 5 ]; for ( int i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( \"CPF do funcion\u00e1rio: \" ); xFunc [ i ]. CPF = Console . readLine (); Console . WriteLine ( \"Nome do funcion\u00e1rio: \" ); xFunc [ i ]. Name = Console . readLine (); Console . WriteLine ( \"Sal\u00e1rio: \" ); xFunc [ i ]. Salary = Console . readLine (); Console . WriteLine ( \"Data de Nascimento: \" ); xFunc [ i ]. dataNasc = Console . readLine (); } Acima, temos a cria\u00e7\u00e3o de um vetor de 5 posi\u00e7\u00f5es onde cada elemento \u00e9 do tipo Funcionario. Logo abaixo, temos um loop para facilitar o preenchimento das informa\u00e7\u00f5es de cada elemento do vetor. Estamos come\u00e7ando a nos aproximar do conceito de banco de dados. Mas n\u00e3o veremos isso agora.","title":"Implementa\u00e7\u00e3o de um Registro"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#tipos-de-dados-aninhados","text":"N\u00e3o precisamos parar por aqui, \u00e9 plenamente poss\u00edvel criarmos um tipo de dados que use outro tipo de dados criado fora dele. Por exemplo, ao inv\u00e9s de salvarmos a data de nascimento como uma string, podemos criar um tipo de dados chamado Data que recebe 3 informa\u00e7\u00f5es: dia, m\u00eas e ano. // c# struct Funcionario { public string CPF ; public string Name ; public double Salary ; public Data dataNasc ; } struct Data { public string day ; public string month ; public string year ; } Dentro do tipo funcion\u00e1rio, temos a declara\u00e7\u00e3o de um vari\u00e1vel do tipo data. Para aproveitarmos o c\u00f3digo de cria\u00e7\u00e3o de um vetor Funcionario. Podemos fazer apenas uma pequena altera\u00e7\u00e3o. // c# Funcionario [] xFunc = new Funcionario [ 5 ]; for ( int i = 0 ; i < 5 ; i ++ ) { Console . WriteLine ( \"CPF do funcion\u00e1rio: \" ); xFunc [ i ]. CPF = Console . readLine (); Console . WriteLine ( \"Nome do funcion\u00e1rio: \" ); xFunc [ i ]. Name = Console . readLine (); // Parte que foi substitu\u00edda // Console.WriteLine(\"Sal\u00e1rio: \"); // xFunc[i].Salary = Console.readLine(); Console . WriteLine ( \"Data de Nascimento - Dia: \" ); xFunc [ i ]. dataNasc . day = Console . readLine (); Console . WriteLine ( \"Data de Nascimento - M\u00eas: \" ); xFunc [ i ]. dataNasc . month = Console . readLine (); Console . WriteLine ( \"Data de Nascimento - Ano: \" ); xFunc [ i ]. dataNasc . year = Console . readLine (); } A cria\u00e7\u00e3o de tipos eficientes de dados \u00e9 uma ferramenta muito eficiente para padroniza\u00e7\u00e3o e manuten\u00e7\u00e3o de solu\u00e7\u00f5es de software. \u00c9 sempre bom entendermos bem o problema proposto e quais tipos de dados podem ser criados para a cria\u00e7\u00e3o de uma resposta adequada a ele.","title":"Tipos de Dados Aninhados"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#tad-classes-e-implementacao","text":"","title":"TAD, Classes e Implementa\u00e7\u00e3o"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#definicao-de-um-tad-classes-e-objetos","text":"Um tipo abstrato de dado ou TAD \u00e9 um \"padr\u00e3o\" ou \"modelo\" que rege as caracter\u00edsticas que determinada estrutura de dado criada bem como suas fun\u00e7\u00f5es (que chamamos de m\u00e9todos) internas. Ou seja, um TAD \u00e9 a defini\u00e7\u00e3o das informa\u00e7\u00f5es contidas e as opera\u00e7\u00f5es execut\u00e1veis por uma vari\u00e1vel de um determinado modelo. N\u00f3s estamos usando isso o tempo todo sem perceber. Por exemplo, quando usamos a fun\u00e7\u00e3o Math.Pow(a,b) n\u00f3s estamos, na verdade, executando um m\u00e9todo chamamo Pow dentro do objeto Math . Exatamente o mesmo pensamento \u00e9 aplicado ao Console.Write() ou Console.ReadLine() . Agora que estamos avan\u00e7ando mais no nosso conhecimento sobre desenvolvimento de software, come\u00e7amos a entender mais sobre as estruturas que nos permitem realizar os nossos trabalhos, ou no jarg\u00e3o, estamos come\u00e7ando a ver \"de baixo do cap\u00f4\". At\u00e9 agora, n\u00f3s temos definido os nossos TADs atrav\u00e9s da defini\u00e7\u00e3o de sua estrutura (pelo token struct ), mas as linguagens que utilizam o paradigma orientado \u00e0 objeto atuais usam o conceito de classes para defini\u00e7\u00e3o dos seus TADs.","title":"Defini\u00e7\u00e3o de um TAD - Classes e Objetos"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#implementando-tads-usando-classes","text":"J\u00e1 aprendemos a implementar um TAD por estrutura. // c# // Definindo o TAD struct Produto { public string Nome ; public double PrecoUnd ; } // Criando uma vari\u00e1vel com TAD Produto xProd ; // Usando o TAD xProd . Nome = \"PS5\" ; xProd . PrecoUnd = 8000.99 ; Podemos construir uma solu\u00e7\u00e3o an\u00e1loga a essa pelo token de cria\u00e7\u00e3o de classes. // c# // Definindo o TAD class Produto { public string Nome ; public double PrecoUnd ; } // Criando a classe Produto xProd = new Produto (); // Usando o TAD xProd . Nome = \"Xbox One\" ; xProd . PrecoUnd = 9999.99 ; Em uma primeira vista, parecem ser abordagens equivalentes. Mas existem algumas diferen\u00e7as importantes que merecem a nossa aten\u00e7\u00e3o. Para entender bem a diferen\u00e7a entre essas constru\u00e7\u00f5es, vamos ter que aprender um pouco mais sobre como o computador guarda informa\u00e7\u00f5es. O layout de mem\u00f3ria de programas em C s\u00e3o separados em 5 n\u00edveis : Text segment (instructions) Initializes data segment Uninitialized data segment (bss) Heap Stack (Inline) N\u00f3s n\u00e3o vamos nos atentar muito aos detalhes agora. Mas agora que sabemos um pouco das diferentes aloca\u00e7\u00f5es poss\u00edveis na mem\u00f3ria durante a execu\u00e7\u00e3o de um programa. Podemos focar no que for necess\u00e1rio para diferenciarmos o struct do class . Os valores do tipo struct s\u00e3o alocados na mem\u00f3ria stack. Essa parte de mem\u00f3ria grava temporariamente as vari\u00e1veis criadas por uma fun\u00e7\u00e3o. No stack, as vari\u00e1veis s\u00e3o declaras, guardadas e inicializadas durante a execu\u00e7\u00e3o do programa e apagadas na sua conclus\u00e3o. A mem\u00f3ria \u00e9 alocada em um bloco cont\u00edguos. \u00c9 mais limitada e de r\u00e1pido acesso. Os valores do tipo class s\u00e3o alocados no heap. Essa \u00e9 a parte da mem\u00f3ria usada pelas linguagens de programa\u00e7\u00e3o para suas vari\u00e1veis de escopo global. A mem\u00f3ria \u00e9 alocada de maneira aleat\u00f3ria e \u00e9 mais abundante se comparada com a stack. Sempre que criamos uma nova inst\u00e2ncia como fizemos em Produto xProd = new Produto() n\u00f3s estamos apontando um novo endere\u00e7o de mem\u00f3ria para ser usado.","title":"Implementando TADs usando Classes"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#desafio_2","text":"Cadastrar objetos em um vetor usando uma classe. // c# using System ; namespace WorkSpace { // Criando o TAD do tipo class class carro { public string name ; public string marca ; public string anoFab ; public string placa ; public double precoFip ; }; class Program { static void Main ( string [] args ) { // Criando um vetor do tipo carro carro [] cadCarro = new carro [ 3 ]; // Loop para inserir o input no vetor for ( int i = 0 ; i < 2 ; i ++ ) { carro x = new carro (); Console . Write ( $\"\\n Qual o nome? \" ); x . name = Console . ReadLine (); Console . Write ( $\" Qual a marca? \" ); x . marca = Console . ReadLine (); Console . Write ( $\" Qual o ano de fabrica\u00e7\u00e3o? \" ); x . anoFab = Console . ReadLine (); Console . Write ( $\" Qual a placa? \" ); x . placa = Console . ReadLine (); Console . Write ( $\" Qual o pre\u00e7o da tabela FIP? \" ); x . precoFip = double . Parse ( Console . ReadLine ()); // Salvando o x no vetor cadCarro cadCarro [ i ] = x ; }; Console . Clear (); // Mostrando o resultado foreach ( carro C in cadCarro ) { Console . WriteLine ( $\"\\n Carro: {C.name},Marca:{C.marca}\" ); Console . WriteLine ( $\" Placa: {C.placa}, Ano:{C.anoFab}\" ); Console . WriteLine ( $\" Pre\u00e7o da Tabela Fip: {C.precoFip}\" ); }; Console . ReadKey (); } } } \u00c9 muito mais comum se achar situa\u00e7\u00f5es de constru\u00e7\u00e3o de TADs por uso de classes ao inv\u00e9s de estruturas. Vale a pena estudar mais para sabermos exatamente quando cada uma dessas op\u00e7\u00f5es \u00e9 a adequada. Mas no come\u00e7o, as classes nos servir\u00e3o muito bem. Aqui \u00e9 importante frisarmos uma coisa. Quando instanciamos um objeto (ou seja, quando usamos o token new ) o nome que passamos a esse objeto \u00e9 apenas uma refer\u00eancia . Isso quer dizer que, no exemplo acima, cadCarro n\u00e3o \u00e9 o nosso objeto em si e sim uma refer\u00eancia a ele. Alguns de voc\u00eas podem estar questionando o motivo desse aviso. Sabendo que cadCarro n\u00e3o \u00e9 o objeto em si e sim apenas uma refer\u00eancia que aponta para o endere\u00e7o na mem\u00f3ria em que o objeto est\u00e1 salvo, ao criarmos uma nova linha no nosso c\u00f3digo do tipo cadCarro2 = cadCarro estamos criando uma nova refer\u00eancia para o mesmo objeto alocado na mem\u00f3ria. Ou seja, qualquer manipula\u00e7\u00e3o feita usando a refer\u00eancia cadCarro tamb\u00e9m ser\u00e1 refletida em cadCarro2 . Abaixo temos um programa simples que usa essa rela\u00e7\u00e3o de refer\u00eancia. // c# using System ; class Program { class carro { public string name ; public string marca ; public string anoFab ; public string placa ; public double precoFip ; }; public static void Main ( string [] args ) { // Criando um vetor do tipo carro carro cadCarro = new carro (); carro cadCarro2 = null ; cadCarro . name = \"carro Nome\" ; cadCarro . marca = \"marca\" ; cadCarro . anoFab = \"2022\" ; cadCarro . placa = \"placa\" ; cadCarro . precoFip = 22.22 ; Console . WriteLine ( $\"{cadCarro.name}\" ); cadCarro2 = cadCarro ; Console . WriteLine ( $\"{cadCarro2.name}\" ); cadCarro2 . name = \"carro nome 2\" ; Console . WriteLine ( $\"{cadCarro.name}\" ); } }","title":"Desafio"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#atributos-propriedades-e-metodos-de-classe","text":"Vamos analisar com calma essas duas cita\u00e7\u00f5es do texto: \"Uma classe especifica uma estrutura de dados e os seus m\u00e9todos operacionais permiss\u00edveis que se aplicam a cada um dos seus objetos\" (MARTIN e ODELL, 1995). \"Um objeto \u00e9 qualquer coisa, real ou abstrata, a respeito da qual armazenamos os dados e os m\u00e9todos que os manipulam\" (MARTIN e ODELL, 1995). Em ambas as cita\u00e7\u00f5es temos as figuras dos dados e dos m\u00e9todos. A estrutura dos dados n\u00f3s j\u00e1 vimos na se\u00e7\u00e3o passada quando lidamos com defini\u00e7\u00e3o de TADs declarando os tipos das vari\u00e1veis tanto na declara\u00e7\u00e3o via estrutura quanto por classe. Agora, vamos expandir um pouco mais o poder dos TADs nos permitindo definir, al\u00e9m das regras de quais dados ser\u00e3o armazenados, quais opera\u00e7\u00f5es e fun\u00e7\u00f5es ser\u00e3o executadas internamente por nossos objetos. Ao construir um tipo abstrato de dados, nos perguntamos quais informa\u00e7\u00f5es ser\u00e3o necess\u00e1rias e, al\u00e9m disso, quais opera\u00e7\u00f5es ser\u00e3o usadas para resolu\u00e7\u00e3o do nosso problema.","title":"Atributos, Propriedades e M\u00e9todos de Classe"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#indo-um-pouco-mais-fundo","text":"Vejamos o seguinte TAD criado apenas com a defini\u00e7\u00e3o da estrutura de dados: // c# class pessoa { public string name ; public double salary ; } Dizemos que as informa\u00e7\u00f5es sobre nome e sal\u00e1rio s\u00e3o atributos do nosso objeto pessoa . Eles definem a estrutura do tipo abstrato de dados que definimos. Tamb\u00e9m podemos chama-los de vari\u00e1veis da classe pessoa . Mesmo que o exemplo acima funcione. Uma maneira mais apropriada de reconstruir essa solu\u00e7\u00e3o pode ser vista abaixo. // c# class pessoa { private string _name ; public string name { get { return _name ;} set { _name = value ;} } private double _salary ; public double salary { get { return _salary ;} set { _salary = value ;} } } Os campos _name e _salary s\u00e3o definidos com o escopo privado e podem ser acessados somente internamente ao objeto. Para podermos acessar fora do escopo do objeto, usamos as fun\u00e7\u00f5es nativas get e set . Os nomes das fun\u00e7\u00f5es deixam claro o que cada uma faz. set \u00e9 usado para atribui\u00e7\u00e3o de um valor passado (que chamamos de value) e get \u00e9 usado para retorno de valor salvo no objeto. Vamos ver um programa simples que utiliza esses conceitos. // c# namespace WorkSpace { class pessoa { private string _name ; public string name { get { return _name ;} set { _name = value ;} } private double _salary ; public double salary { get { return _salary ;} set { _salary = value ;} } }; class Program { static void Main ( string [] args ) { pessoa xpes = new pessoa (); xpes . name = \"Clark Kent\" ; xpes . salary = 1234.56 ; Console . WriteLine ( $\"Nome: {xpes.name}\" ); Console . WriteLine ( $\"Sal\u00e1rio: R$ {xpes.salary}\" ); } } } Na linha xpes.name = \"Clark Kent\" vemos como a fun\u00e7\u00e3o interna set funciona. Ela recebe o valor e atribui \u00e0 vari\u00e1vel provada _name . Quando definimos um atributo privado e fun\u00e7\u00f5es ( get e set ) que manipulam esse atributo dentro da classe, podemos dizer que criamos uma propriedade do objeto. J\u00e1 temos os conceitos de objeto, atributo e propriedade bem definidos. Agora vamos aprender sobre as fun\u00e7\u00f5es dentro de um objeto. A essas fun\u00e7\u00f5es, damos o nome de m\u00e9todos ou servi\u00e7os do objeto . // c# class circulo { private double _raio ; public double raio { get { return _raio ; } set { _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } Aqui temos um atributo chamado _raio . Uma propriedade chamada raio . E, por fim, temos tamb\u00e9m um m\u00e9todo chamado calcArea . Abaixo temos um exemplo de como usar esses conceitos na pr\u00e1tica. // c# namespace WorkSpace { class circulo { private double _raio ; public double raio { get { return _raio ; } set { _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } class Program { static void Main ( string [] args ) { double area ; circulo xcirculo = new circulo (); xcirculo . raio = 2.5 ; area = xcirculo . calcArea (); Console . WriteLine ( $\"A \u00e1rea \u00e9 igual a {area:F2}\" ); Console . ReadKey (); } } } Coment\u00e1rio: Eu n\u00e3o sei voc\u00ea, mas eu fiquei com d\u00favidas sobre essa parte do area:F2 . Isso \u00e9 muito simples. Como o valor area \u00e9 do tipo double, ele possui v\u00e1rias casas ap\u00f3s a v\u00edrgula. Esse par\u00e2metro \u00e9 a defini\u00e7\u00e3o da quantidade de casas ap\u00f3s a v\u00edrgula. Nesse caso, o resultado ter\u00e1 2 casas ap\u00f3s a v\u00edrgula. Quando encapsulamos as propriedades e os m\u00e9todos dentro de um objeto, estamos omitindo os detalhes de como objeto faz as transforma\u00e7\u00f5es e armazena os dados. A essa t\u00e9cnica damos o nome de oculta\u00e7\u00e3o da informa\u00e7\u00e3o . Isso \u00e9 \u00fatil para garantir a integridade da manipula\u00e7\u00e3o dos dados por parte dos usu\u00e1rios e aumenta a seguran\u00e7a quanto a l\u00f3gica implementada no c\u00f3digo. Podemos definir a l\u00f3gica tamb\u00e9m dentro das fun\u00e7\u00f5es de set e get . // c# namespace WorkSpace { class circulo { private double _raio ; public double raio { get { return _raio ; } set { if ( value < 0 ) _raio = 0 ; else _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } class Program { static void Main ( string [] args ) { double area ; circulo xcir = new circulo (); xcir . raio = - 2.5 ; area = xcir . calcArea (); Console . WriteLine ( $\"Area: {area:F2}\" ); } } } Desse modo, podemos ver que caso o valor inputado no raio for negativo, o resultado da \u00e1rea ser\u00e1 0. Caso for positivo, o valor da \u00e1rea ser\u00e1 calculado normalmente. Se import\u00e1ssemos esse objeto sem saber o que acontece por dentro dele, n\u00e3o entender\u00edamos o que acontece exatamente dentro do objeto circulo .","title":"Indo um pouco mais fundo"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#mecanismos-de-visibilidadeacessibilidade","text":"Os modificadores de acesso ou mecanismos de visibilidade s\u00e3o os m\u00e9todos de acesso \u00e0s classes e seus, atributos, propriedades e m\u00e9todos. Existem v\u00e1rios tipos de modificadores de acesso ( protected , internal , protected internal e etc), mas por agora, vamos estudar somente o public e o private . Observemos novamente o c\u00f3digo da \u00faltima se\u00e7\u00e3o com algumas anota\u00e7\u00f5es adicionais. // c# // Bloco contendo todo o programa namespace WorkSpace { // Defini\u00e7\u00e3o do TAD circulo class circulo { private double _raio ; public double raio { get { return _raio ; } set { if ( value < 0 ) _raio = 0 ; else _raio = value ; } } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } // Bloco contendo o programa class Program { // Procedimento do programa static void Main ( string [] args ) { double area ; circulo xcir = new circulo (); xcir . raio = - 2.5 ; area = xcir . calcArea (); Console . WriteLine ( $\"Area: {area:F2}\" ); } } } Podemos ver que a classe circulo \u00e9 criada antes do bloco que cont\u00e9m o programa propriamente dito. Ou seja, est\u00e3o em escopos diferentes. Desse modo, um comando contido no procedimento Main n\u00e3o tem acesso a nenhuma propriedade ou atributos com o par\u00e2metro private nele somente os de par\u00e2metro public ou atrav\u00e9s das fun\u00e7\u00f5es set e get . Aten\u00e7\u00e3o: Na cria\u00e7\u00e3o da classe circulo n\u00e3o foi dito se ela seria acess\u00edvel fora do seu escopo original, ou seja, n\u00e3o usamos o comando public class circulo e sim o comando class circulo . Em c#, quando se cria uma classe sem a defini\u00e7\u00e3o expl\u00edcita da sua visibilidade, o padr\u00e3o da linguagem \u00e9 deixar a classe como public .","title":"Mecanismos de Visibilidade/Acessibilidade"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#qualidade-e-robustez-de-software","text":"Esses conceitos de controle de acesso s\u00e3o importantes porque nosso c\u00f3digo precisa fazer o que foi planejado, da maneira planejada. Quando n\u00e3o limitamos a capacidade do usu\u00e1rio inserir dados, podemos cair em situa\u00e7\u00f5es n\u00e3o previstas que podem comprometer a execu\u00e7\u00e3o do nosso programa. Um conceito que nos ajuda a entender melhor essa situa\u00e7\u00e3o \u00e9 o robustez do software . Esse conceito \u00e9 usado pelos profissionais de qualidade de software e que \u00e9 referente a capacidade do programa em funcionar da maneira correta em diferentes cen\u00e1rios e condi\u00e7\u00f5es adversas. Outro conceito \u00fatil dessa \u00e1rea \u00e9 o corre\u00e7\u00e3o de software que \u00e9 a qualidade referente a capacidade do nosso programa funcionar da maneira prevista e especificada. A t\u00e9cnica da omiss\u00e3o da informa\u00e7\u00e3o nos ajuda a garantir o cumprimento desses requisitos.","title":"Qualidade e Robustez de Software"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#construtores-e-destrutores-de-classe","text":"Um construtor de classe \u00e9 usado para cria\u00e7\u00e3o de um objeto e pela inicializa\u00e7\u00e3o dos seus atributos. Sempre que instanciamos um objeto, o seu construtor entra em a\u00e7\u00e3o. Coment\u00e1rio: N\u00e3o entraremos a fundo no conceito de Common Language Runtime (CLR) agora. Talvez mais pra frente a gente veja isso. Se um construtor n\u00e3o for declarado explicitamente, o c# cria a classe usando algumas conven\u00e7\u00f5es de modo a colocar o objeto dispon\u00edvel para uso. Esses padr\u00f5es de construtores s\u00e3o definidos de acordo com o tipo primitivo das vari\u00e1veis contidas no nosso objeto (que sabemos que se chamam atributos). Por padr\u00e3o, o CLR atribui os seguintes valores para os atributos dos objetos: 0 para vari\u00e1veis do tipo int, double e float false para vari\u00e1veis booleanas '\\0' para vari\u00e1veis do tipo string","title":"Construtores e Destrutores de Classe"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#definindo-construtores","text":"Para n\u00e3o usarmos as conven\u00e7\u00f5es padr\u00e3o do CLR. Podemos, n\u00f3s mesmo, atribuir os construtores dos atributos dos nossos objetos. Para isso, usamos um m\u00e9todo (ou seja, uma fun\u00e7\u00e3o interna do objeto) com o mesmo nome do objeto . Esse m\u00e9todo n\u00e3o possui retorno e s\u00e3o declarados como public . // c# [...] // C\u00f3digo com o namespasce class circulo { private double _raio ; public double raio { get { return _raio ;} set { _raio = value ;} } public circulo () // construtor { _raio = 0 ; } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } A partir de agora, sempre que executarmos um instanciamento atrav\u00e9s do comando // c# circulo xcir = new circulo (); O construtor ser\u00e1 chamado e executar\u00e1 as instru\u00e7\u00f5es contidas no construtor. No caso de exemplo, o valor default para o atributo _raio ser\u00e1 0. N\u00e3o \u00e9 dif\u00edcil pensar em situa\u00e7\u00f5es onde precisar\u00edamos usar diferentes m\u00e9todos de constru\u00e7\u00e3o em um objeto. Para isso, podemos ter mais de um construtor no mesmo objeto, chamamos isso de sobrecarregamento . A condi\u00e7\u00e3o \u00e9 que esses construtores sejam diferentes em termos de par\u00e2metros ou ordem dos par\u00e2metros. // c# [...] // C\u00f3digo com o namespasce class circulo { private double _raio ; public double raio { get { return _raio ;} set { _raio = value ;} } public circulo () // construtor { _raio = 0 ; } public circulo ( int R ) { _raio = R ; } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } Para executar o segundo construtor, basta passarmos um par\u00e2metro no momento do instanciamento do nosso novo objeto. // c# circulo xcirc = new circulo ( 2.3 ); Como fizemos um instanciamento com valor, o c# saber\u00e1 que queremos usar o segundo construtor ao inv\u00e9s do primeiro.","title":"Definindo Construtores"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#destrutores","text":"Ao contr\u00e1rio do que podemos pensar pelo nome, os destrutores n\u00e3o s\u00e3o usados para \"destruir\" os objetos. Eles s\u00e3o usados definir um comportamento espec\u00edfico no momento da destrui\u00e7\u00e3o de um objeto. Ou seja, eles s\u00e3o acionados na destrui\u00e7\u00e3o e n\u00e3o s\u00e3o os destruidores. N\u00e3o precisam ser chamados ou referenciados pois s\u00e3o invocados automaticamente. O normal \u00e9 n\u00e3o se usar destrutores no dia a dia visto que o CLR j\u00e1 faz o trabalho de padroniza\u00e7\u00e3o para elimina\u00e7\u00e3o de um objeto. Diferente dos construtores, uma classe pode ter apenas um destrutor . E a sua cria\u00e7\u00e3o \u00e9 parecida com a do construtor, uma vez que s\u00e3o m\u00e9todos sem retorno. A \u00fanica diferen\u00e7a \u00e9 que sua nota\u00e7\u00e3o come\u00e7a com o til. // c# [...] // C\u00f3digo com o namespasce class circulo { private double _raio ; public double raio { get { return _raio ;} set { _raio = value ;} } public circulo () // construtor 1 { _raio = 0 ; } public circulo ( int R ) // construtor 2 { _raio = R ; } ~ circulo { Console . WriteLine ( \"Adeus, mundo cruel!\" ); } public double calcArea () { return Math . PI * Math . Pow ( _raio , 2 ); } } Os detalhes de como um computador funciona s\u00e3o estudados em Estrutura de Computadores mas, para adiantar, algumas linguagens tem um programa chamado garbage colector que \u00e9 respons\u00e1vel pela reutiliza\u00e7\u00e3o de slots de mem\u00f3ria que est\u00e3o sendo usados por objetos que n\u00e3o tem mais utiliza\u00e7\u00e3o no c\u00f3digo. Em c# n\u00f3s n\u00e3o precisamos explicitamente eliminar um objeto porque o pr\u00f3prio garbage colector faz esse trabalho.","title":"Destrutores"},{"location":"nav/PUC/eixo1/algoritmos_e_abstracao/#bibliografia","text":"ASCENCIO, Ana Fernanda Gomes; CAMPOS, Edilene Aparecida Veneruchi de. Fundamentos da programa\u00e7\u00e3o de computadores . S\u00e3o Paulo: Pearson, 2012. ISBN 9788564574168 SOUZA, Marco A. Furlan de; GOMES, Marcelo Marques; SOARES, Marcio Vieira; CONC\u00cdLIO, Ricardo. Algoritmos e l\u00f3gica de programa\u00e7\u00e3o: um texto introdut\u00f3rio para a engenharia . S\u00e3o Paulo: Cengage Learning, 2019. ISBN: 9788522128150 AGUILAR, Luis Joyanes. Fundamentos de programa\u00e7\u00e3o algoritmos, estruturas de dados e objetos . 3. ed. Porto Alegre: AMGH, 2008. ISBN: 9788580550146 DEITEL, Harvey M; DEITEL, Paul J. Java - como programar . 8. ed. S\u00e3o Paulo: Pearson, 2010. ISBN 9788576055631 GRIFFITHS, Ian. Programming C# 8.0 . O'Reilly Media, Inc. 2019. ISBN 9781492056812 MANZANO, Jos\u00e9 Augusto N. G; OLIVEIRA, Jayr Figueiredo de. Algoritmos: l\u00f3gica para desenvolvimento de programa\u00e7\u00e3o de computadores . 28. ed. rev. e atual. S\u00e3o Paulo, SP: \u00c9rica, 2016. E-book. ISBN 9788536518657 PRICE, Mark J. C# 8.0 and T Core 3.0 - Modern Cross - Platform Development . O'Reilly Media; 2019. ISBN 9781788478120 PUGA, Sandra; RISSETTI, Gerson. L\u00f3gica de programa\u00e7\u00e3o e estruturas de dados com aplica\u00e7\u00f5es em Java . 2. ed. S\u00e3o Paulo: Prentice Hall, 2009. ISBN 9788576052074 Isso \u00e9 muito legal! \u21a9","title":"Bibliografia"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/","text":"hljs.initHighlightingOnLoad(); Assuntos L\u00f3gica de Programa\u00e7\u00e3o e Estrutura de Controle, Fun\u00e7\u00f5es e Procedimentos Conceito de Algoritmo Vari\u00e1veis Etapas de um Algoritmo e Operador de Atribui\u00e7\u00e3o Estrutura Sequencial Estrutura Condicional Estrutura de Repeti\u00e7\u00e3o Manipula\u00e7\u00e3o de Dados em Mem\u00f3ria Prim\u00e1ria e Secund\u00e1ria Criando e Usando Fun\u00e7\u00f5es e Procedimentos Passagem de Par\u00e2metros Manipula\u00e7\u00e3o de Arquivos em C# Bibliografia L\u00f3gica de Programa\u00e7\u00e3o e Estrutura de Controle, Fun\u00e7\u00f5es e Procedimentos Conceito de Algoritmo Em resumo, um algoritmo \u00e9 uma sequ\u00eancia de ordens que, se seguidas, deve gerar um resultado previsto e desejado. N\u00e3o vale muito a pena aprofundar al\u00e9m disso agora. Vari\u00e1veis Uma vari\u00e1vel \u00e9 uma posi\u00e7\u00e3o na mem\u00f3ria do computador. Isso mesmo, \u00e9 algo com endere\u00e7o definido, nada solto no universo ou obscuro dentro da m\u00e1quina. Esse dado \u00e9 gravado para posterior leitura por parte do programa que est\u00e1 sendo executado. Podemos ter como origem do dado o pr\u00f3prio programa que est\u00e1 sendo executado ou o usu\u00e1rio por meio da entrada de dados ou, ainda, a leitura de dados previamente armazenados na mem\u00f3ria do computador. Cada vari\u00e1vel possui v\u00e1rios tipos de atributos que podemos elencar na lista abaixo: Tem um endere\u00e7o na mem\u00f3ria Possui um nome de identifica\u00e7\u00e3o Armazena um valor Possui um tipo de dados: Num\u00e9rico - Inteiros e Reais (Double ou Ponto Flutuante) 1 N\u00e3o num\u00e9rico - L\u00f3gico e Caractere Arranjos - Vetores e Matrizes Arquivos etc O endere\u00e7o da mem\u00f3ria \u00e9 feita pelos endere\u00e7os que possuem apenas 2 est\u00e1gios de registro: 0 ou 1. Um bit \u00e9 exatamente essa medida de registo. 1 byte \u00e9 composto de 8bits. 1 kilobyte cont\u00e9m 1024bytes ( \\(2^{10}\\) ). 1 megabyte cont\u00e9m 1024KB ( \\(2^{20}\\) ). 1 gigabyte cont\u00e9m 1024MB ( \\(2^{30}\\) ). 1 terabyte possui 1024GB ( \\(2^{40}\\) ). Ou seja, se um computador possui 3 gigas de mem\u00f3ria RAM, ele tem 3 bilh\u00f5es de bytes como endere\u00e7os dispon\u00edveis para um registro na mem\u00f3ria 2 . Cada byte possui um endere\u00e7o \u00fanico. Na mem\u00f3ria RAM costuma-se usar a base Hexadecimal para definir os endere\u00e7os. Vamos ver isso melhor na mat\u00e9ria de Arquitetura de Computadores. Tamb\u00e9m vimos que as vari\u00e1veis possuem identificadores. Em c# existem regras para a cria\u00e7\u00e3o dos identificadores: Devem come\u00e7ar com uma letra N\u00e3o podem ter espa\u00e7os N\u00e3o podem usar uma das palavras reservadas pela linguagem \u00c9 case sensitive, ou seja, o nome \"Var\" \u00e9 diferente do nome \"var\" O identificador deve sempre ter algum sentido que permita a r\u00e1pida interpreta\u00e7\u00e3o por parte de algum leitor do c\u00f3digo fonte da aplica\u00e7\u00e3o. Isso \u00e9 fundamental para manuten\u00e7\u00e3o de c\u00f3digos produzidos por v\u00e1rias pessoas diferentes. Entretanto, devemos evitar nomes de vari\u00e1veis muito grandes. Na verdade, quanto menor o nome, mantido o sentido na leitura, melhor. Outra boa pr\u00e1tica \u00e9 usar o camelCase para vari\u00e1veis com mais de uma palavra. Esse padr\u00e3o \u00e9 bem simples: primeira palavra em min\u00fasculo e a segunda com a primeira letra em mai\u00fascula. Declara\u00e7\u00e3o de Vari\u00e1veis em c# Vamos aprender agora como declarar os 4 tipos mais simples de vari\u00e1veis: int para definir inteiros double ou float para definir n\u00fameros reais string para cadeia de caracteres bool para as vari\u00e1veis booleanas ( true ou false ) Coment\u00e1rio: c# \u00e9 uma linguagem fortemente tipada, entretanto, existe um tipo de tipagem impl\u00edcita que \u00e9 muito usado na pr\u00e1tica onde o pr\u00f3prio compilador \"interpreta\" o tipo de vari\u00e1vel. Ao longo desse microfundamento n\u00f3s vamos usar apenas os tokens de tipagem expl\u00edcita. Mas vale muito a pena a leitura da documenta\u00e7\u00e3o oficial nesse link . // c# static void Main ( string [] args ) { int idade , numero ; double peso , salario ; string nomePai , rua , dtNasc ; bool temCasa ; } Nesse c\u00f3digo acima temos a declara\u00e7\u00e3o de v\u00e1rias vari\u00e1veis de cada tipo. Basta colocar o tipo da vari\u00e1vel seguido do nome de cada uma delas separadas por v\u00edrgula. Coment\u00e1rio: Em c# todas as linhas precisam conter um car\u00e1cter de encerramento que \u00e9 o ponto e v\u00edrgula ; . Sem esse token, o computador vai interpretar a pr\u00f3xima linha como sendo a continua\u00e7\u00e3o da anterior. Etapas de um Algoritmo e Operador de Atribui\u00e7\u00e3o Podemos resumir um algoritmo simples como contendo apenas 3 etapas: 1) A entrada de dados; 2) O processamento e 3) A sa\u00edda de dados. Na etapa de processamento, podemos precisar de grande criatividade e esfor\u00e7o para produzir a sa\u00edda de dados desejada. Como ferramenta para alcance desse objetivo, temos as estruturas b\u00e1sicas que s\u00e3o: Estrutura Sequencial - Usada para garantir a ordem correta dos passos Estrutura Condicional - Usada para permitir contexto ou cen\u00e1rios Estrutura de Repeti\u00e7\u00e3o - Usada para evitar repetir c\u00f3digo sequencial Operador de Atribui\u00e7\u00e3o Uma vez que j\u00e1 sabemos como atribuir uma vari\u00e1vel ao seu tipo, precisamos aprender a como atribuir um valor a essas vari\u00e1veis. Em c# a atribui\u00e7\u00e3o de valor \u00e9 feita do seguinte modo: // c# idade = 28 ; numero = 9992233 ; \u00c9 poss\u00edvel fazer 3 tipos de atribui\u00e7\u00e3o de valor para uma vari\u00e1vel: Valor fixo; Conte\u00fado de outra vari\u00e1vel e Express\u00e3o aritm\u00e9tica ou booliana. Abaixo temos 3 exemplo disso. // c# idade = 28 ; // Valor fixo numero = idade ; // Valor de outra vari\u00e1vel idadeNum = idade + numero ; // Valor por express\u00e3o idadeEqNum = idade == numero ; // Valor por express\u00e3o booliana Nesse ponto vale uma reflex\u00e3o. Ser\u00e1 que sempre precisamos separar as etapas de atribui\u00e7\u00e3o do tipo de dados e do valor? Ou podemos, no mesmo momento, definir o tipo de dados e o valor da vari\u00e1vel? A resposta, para nossa sorte, \u00e9 que \u00e9 poss\u00edvel em c# atribui\u00e7\u00e3o de tipo e valor ao mesmo tempo. A sintaxe fica desse modo: // c# int idade = 28 ; int numero = idade ; double = 2.3 ; string nome = \"bruno\" ; int idadeNum = idade + numero ; bool idadeEqNum = idade == numero ; Sa\u00eddas de Dados Agora que fizemos esse pequeno desvio no assunto, vamos retornar para as estruturas. Por incr\u00edvel que pare\u00e7a, \u00e9 melhor a gente come\u00e7ar pelo final. A etapa de sa\u00edda de dados. Em c# temos duas maneiras de sa\u00edda de dados: // c# // Imprime a informa\u00e7\u00e3o e cursor fica na mesma linha Console . Write ( ' string ' ); // Imprime a info mas o curso vai pra proxima linha Console . WriteLine ( ' string ' + var1 + ' string ' ); Nesses exemplos a gente pode perceber que podemos concatenar textos e vari\u00e1veis textuais por meio do operador de soma. Al\u00e9m dessa forma, podemos fazer uso de PlaceHolders ou Interpola\u00e7\u00e3o de string como nos exemplos abaixo. // c# string nome = \"Bruno\" ; // Concatena\u00e7\u00e3o Console . WriteLine ( \"Meu nome \u00e9 \" + nome + \", obrigado!\" ); // PlaceHolder Console . WriteLine ( \"Meu nome \u00e9 {0}, obrigado!\" , nome ); // Interpola\u00e7\u00e3o Console . WriteLine ( $\"Meu nome \u00e9 {nome}, obrigado!\" ); Os tr\u00eas exemplos geram o mesmo resultado mas s\u00e3o consideravelmente diferentes no m\u00e9todo. Podemos usar o que for mais agrad\u00e1vel para uma leitura do c\u00f3digo e posterior manuten\u00e7\u00e3o do mesmo. Entrada de Dados Agora que sabemos como fazer nosso programa imprimir resultados, vamos aprender como inputar dados nele. Em c# podemos inserir dados com o seguinte comando: // c# variavel = Console . ReadLine (); O input captado por esse comando sempre retorna uma string . Mas as vezes precisamos nos certificar que o input foi feito da maneira correta. Para isso podemos manipular os dados inseridos do seguinte modo: // c# // Valores Inteiros variavel = int . Parse ( Console . ReaLine ()); variavel = Convert . ToInt32 ( Console . ReadLine ()); // Valores Reais variavel = double . Parse ( Console . ReadLine ()); variavel = float . Parse ( Console . ReadLine ()); variavel = Convert . ToDouble ( Console . ReadLine ()); // Valores Booleanos variavel = bool . Parse ( Console . ReadLine ()); // Valores String variavel = Console . ReadLine (); Depois que executamos um dessas maneiras de coletar os dados, \u00e9 de boa pr\u00e1tica fornecermos um output logo ap\u00f3s a entrada do dado. Isso evita aquela sensa\u00e7\u00e3o de d\u00favida se o programa est\u00e1 sendo executado ou n\u00e3o. Ou seja, \u00e9 bom sempre manter a dupla ReadLine() com o WriteLine() . O nome que damos para essa dupla \u00e9 \"Prompt\". Outra dica boa \u00e9 usar o comando Console.ReadKey() no final do programa. Isso faz com que o console aguarde alguma tecla para finalizar. Evita que a aplica\u00e7\u00e3o abra e feche sem que o user consiga enxergar o resultado do processo. Estrutura Sequencial Agora que sabemos como receber valores do usu\u00e1rio e como devolver nova informa\u00e7\u00e3o a partir do processamento, vamos come\u00e7ar a estudar a etapa de processamento atrav\u00e9s do estudo das estruturas sequenciais. Operadores e Fun\u00e7\u00f5es Aritm\u00e9ticas Em c# n\u00f3s temos os seguintes tokens para realizar as opera\u00e7\u00f5es aritm\u00e9ticas: + Soma - Subtra\u00e7\u00e3o * Multiplica\u00e7\u00e3o / Divis\u00e3o % Resto da Divis\u00e3o inteira Al\u00e9m disso, temos a presen\u00e7a do que podemos chamar de operadores de atribui\u00e7\u00e3o combinada . Que faz a atribui\u00e7\u00e3o de valor com alguma opera\u00e7\u00e3o aritm\u00e9tica: soma += 100 \u00e9 igual a soma = soma + 100 subtracao -= 10 \u00e9 igual a subtracao = subtracao - 10 multiplica *= 2 \u00e9 igual a multiplica = multiplica * 2 divide /= 3 \u00e9 igual a divide = divide / 3 resto \\%= 2 \u00e9 igual a resto = resto / 2 N\u00e3o bastando essa grande variedade, temos os operadores de incremento e decremento : Pr\u00e9-incremento ( ++x ) - Usa x + 1 antes do processamento P\u00f3s-incremento ( x++ ) - Usa x + 1 ap\u00f3s o processamento Pr\u00e9-decr\u00e9scimo ( --x ) - Usa x - 1 antes do processamento P\u00f3s-decr\u00e9scimo ( x-- ) - Usa x -1 ap\u00f3s o processamento Essa diferen\u00e7a de pre e p\u00f3s \u00e9 importante para as estruturas de repeti\u00e7\u00e3o, porque podemos lidar com \u00edndices de tabelas que come\u00e7am com valores diferentes. Mas, no geral, devemos olhar cada caso para escolher o que usar. Existem outras opera\u00e7\u00f5es que est\u00e3o contidas em um objeto nativo chamado Math . Para fazermos potencia\u00e7\u00e3o usamos o m\u00e9todo Math.Pow() . Para fazermos raiz quadrada podemos usar Math.Sqrt() 3 . Express\u00f5es Aritm\u00e9ticas Agora podemos juntar tudo que vimos em um programa simples de c\u00e1lculo da m\u00e9dia de 5 valores. O c\u00f3digo e o seu resultado podem ser vistos abaixo. // c# // Declara\u00e7\u00e3o dos tipos das vari\u00e1veis int n1 , n2 , n3 , n4 , n5 , soma ; float media ; // Input dos dados Console . WriteLine ( \"Programa para c\u00e1lculo da m\u00e9dia de 5 valores.\" ); Console . WriteLine ( \"Por favor, forne\u00e7a o primeiro n\u00famero\" ); n1 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o segundo n\u00famero\" ); n2 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o terceiro n\u00famero\" ); n3 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o quarto n\u00famero\" ); n4 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o quinto n\u00famero\" ); n5 = Convert . ToInt32 ( Console . ReadLine ()); // Processamento soma = n1 + n2 + n3 + n4 + n5 ; media = soma / 5 ; // Output dos dados Console . WriteLine ( \"Os n\u00fameros fornecidos foram:\" ); Console . WriteLine ( \"N1={0},N2={1},N3={2},N4={3},N5={4}\" , n1 , n2 , n3 , n4 , n5 ); Console . WriteLine ( \"Cuja m\u00e9dia \u00e9 igual a {0}\" , media ); Outro exemplo que podemos usar \u00e9 o do c\u00e1lculo das ra\u00edzes de uma fun\u00e7\u00e3o de segundo grau 4 . O programa abaixo recebe 3 valores e calcula as ra\u00edzes, a imagem logo ap\u00f3s nos mostra o resultado no prompt de comando. // c# // Programa para calcular o valor de x em uma equa\u00e7\u00e3o de segundo grau // Declara\u00e7\u00e3o das vari\u00e1veis double a , b , c , x1 , x2 ; Console . WriteLine ( \"Vamos resolver uma equa\u00e7\u00e3o do tipo ax^2 + bx + c = 0\" ); // Input das variaveis Console . WriteLine ( \"Qual o valor de a? \" ); a = Convert . ToDouble ( Console . ReadLine ()); Console . WriteLine ( \"Qual o valor de b? \" ); b = Convert . ToDouble ( Console . ReadLine ()); Console . WriteLine ( \"Qual o valor de c? \" ); c = Convert . ToDouble ( Console . ReadLine ()); x1 = ( - b + Math . Sqrt ( Math . Pow ( b , 2 ) - 4 * a * c )) / 2 * a ; x2 = ( - b - Math . Sqrt ( Math . Pow ( b , 2 ) - 4 * a * c )) / 2 * a ; // Output dos resultados Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( \"Resultado: x1 = {0} e x2 = {1}\" , x1 , x2 ); A essa altura j\u00e1 aprendemos como criar programas inteiros com as etapas de software que vimos anteriormente: input, processamento e output. Tudo isso em c#. Entretanto, no estado atual do c\u00f3digo, nossos programas n\u00e3o est\u00e3o muito competentes em se adaptar a diferentes tipos de inputs ou resultados. Um exemplo pr\u00e1tico \u00e9 que, nesse segundo programa, podemos ter inputs que retornem um resultado indesejado como podemos ver na imagem abaixo. Estrutura Condicional A necessidade de lidarmos com diferentes situa\u00e7\u00f5es ou contextos \u00e9 o que nos leva a estudarmos as estruturas condicionais . Por meio dessas estruturas, podemos construir diferentes outputs de acordo com qualquer l\u00f3gica que implementarmos e, com isso, evitar v\u00e1rios bugs nos nossos programas. Operadores Relacionais Ao lidarmos com estrutura condicionais n\u00f3s temos alguns operadores que nada mais s\u00e3o do que express\u00f5es l\u00f3gicas que retornam apenas 2 resultados poss\u00edveis: true ou false. Esses operadores s\u00e3o como \"gatilhos\"\\ que s\u00e3o usados para controle do fluxo de processamento do c\u00f3digo. Operador Opera\u00e7\u00e3o Exemplo == Igualdade n1 == n2 < Menor a < 10 > Maio b > 1 <= Menor igual c <= 2 >= Maior igual d >= 22 != Desigualdade e != 100 Na tabela acima, temos os operadores relacionais que s\u00e3o usados ao longo das estruturas condicionais simples e compostas. Tome cuidado com o operador de igualdade == e o de atribui\u00e7\u00e3o = , afinal, eles usam o sinal de igualdade mas significam coisas diferentes. Condi\u00e7\u00e3o Simples e Composta Em c# o comando usado para criar uma condi\u00e7\u00e3o simples \u00e9 o if . Se a condi\u00e7\u00e3o que colocarmos atrelada ao comando if retornar um true, o bloco de c\u00f3digo atribu\u00eddo a ele ser\u00e1 executar, caso contr\u00e1rio, o c\u00f3digo do bloco ser\u00e1 ignorado. // c# // Parte condicional no calculo da equa\u00e7\u00e3o de segundo grau delta = ( Math . Pow ( b , 2 ) - 4 * a * c ); // Output dos resultados com condi\u00e7\u00e3o if ( delta >= 0 ) { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: x1 = {0} e x2 = {1}\" , x1 , x2 ); }; if ( delta < 0 ) { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: X n\u00e3o possui raiz real! \" ); }; Com essa adapta\u00e7\u00e3o, nosso c\u00f3digo estar\u00e1 preparado para o caso onde o interior da raiz (que chamamos de delta) seja negativo. Mas podemos ver que o nosso c\u00f3digo ficou um pouco esquisito. Criamos dois blocos de c\u00f3digo que s\u00e3o, claramente, relacionados entre si: Se um bloco for executado, o outro n\u00e3o ser\u00e1. Para facilitar o trabalho com essas situa\u00e7\u00f5es, as linguagens de programa\u00e7\u00e3o possuem as estruturas de condi\u00e7\u00e3o compostas. Esses s\u00e3o os casos onde, se o teste l\u00f3gico retorna true, executamos um bloco, ou o outro bloco ser\u00e1 executado caso o resultado l\u00f3gico seja false. Com isso evitamos ter que criar dois testes com if . O token usado em c# para uma condi\u00e7\u00e3o com dois blocos de c\u00f3digos (ou seja, uma condicional composta) \u00e9 o if-else . Abaixo n\u00f3s reescrevemos a solu\u00e7\u00e3o anterior mas agora fazendo uso do condional composto. // c# // Parte condicional no calculo da equa\u00e7\u00e3o de segundo grau delta = ( Math . Pow ( b , 2 ) - 4 * a * c ); // Output dos resultados com condi\u00e7\u00e3o if ( delta >= 0 ) { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: x1 = {0} e x2 = {1}\" , x1 , x2 ); } else { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: X n\u00e3o possui raiz real! \" ); }; Agora sim nosso c\u00f3digo est\u00e1 elegante e adaptado para as duas sa\u00eddas poss\u00edveis de resultado para os inputs do usu\u00e1rio. Operadores Booleanos e Comandos IF Aninhados N\u00f3s aprendemos que o bloco de c\u00f3digo ser\u00e1 executado sempre que a express\u00e3o l\u00f3gica retornar um resultado true. Tamb\u00e9m vimos que existem os operadores relacionais que nos ajudam a construir essas express\u00f5es. Agora, vamos aprender os operadores booleanos que nada mais s\u00e3o do que os operadores l\u00f3gicos cl\u00e1ssicos ( \\(\\land, \\lor, \\neg\\) ). Operador Opera\u00e7\u00e3o Exemplo && (AND) true se tudo for true if (a > 2 && b == 1) | | (OR) true se um for true if (a < 2 | | b != 0) ! (NOT) false se true if (!(x==y)) Existem problemas que requerem mais de dois resultados no output. Nesse caso, n\u00e3o \u00e9 suficiente usarmos apenas os tokens de condicional composto if-else da maneira como aprendemos at\u00e9 agora. Para resolver esse problema temos a t\u00e9cnica de IF aninhados (nested) e a de IF escada (ladder). As duas formas produzem o mesmo resultado mas mudam significativamente legibilidade do nosso c\u00f3digo. Abaixo temos um exemplo de cada. // c# // Leadder IF if ( condicao1 ) comando1 ; else if ( condicao2 ) comando2 ; else if ( condicao3 ) comando3 ; ... else if ( condicao_n - 1 ) comando_n - 1 ; else comando_n ; // c# // Nested IF if ( condicao1 ) comando1 ; else if ( condicao2 ) comando2 ; else if ( condicao3 ) comando3 ; else if ( condicao4 ) comando4 ; ... else if ( condicao_n - 1 ) comando_n - 1 ; else comando_n ; O Comando Switch e o Operador Tern\u00e1rio Agora que aprendemos a lidar com v\u00e1rios casos condicionais encadeados, podemos construir solu\u00e7\u00f5es relativamente complexas com v\u00e1rias sa\u00eddas diferentes. Entretanto, quando tempos muitas situa\u00e7\u00f5es poss\u00edveis, o nosso c\u00f3digo pode ficar um pouco ruim de ser lido por outras pessoas. Pensando nessa necessidade, os criadores do c# criaram um operador que simplifica ainda mais nosso trabalho. Sim, \u00e9 isso mesmo, n\u00f3s acabamos de aprender IFs aninhados e em escada e j\u00e1 vamos aprender uma maneira melhor de fazer exatamente o que eles fazem. Se acostume com isso. Em tecnologia existem quase sempre v\u00e1rias maneiras de se chegar no mesmo resultado. O operador que \u00e9 mais indicado para lidar com v\u00e1rias situa\u00e7\u00f5es de sa\u00edda \u00e9 o switch-case . Cuja constru\u00e7\u00e3o \u00e9 bem mais leg\u00edvel que os IFs anteriores. Abaixo temos um exemplo. // c# // Lidando com varias condi\u00e7\u00f5es com switch/case switch ( opcao ) { case op1 : comandos1 ; break ; case op2 : comandos2 ; break ; case op3 : comandos3 ; break ; ... case op_n : comandos_n ; break ; default : // bloco que sera executado se nenhuma // das anteriores for escolhida; } Coment\u00e1rio: Existem v\u00e1rias maneiras de se usar o switch. Eu n\u00e3o vou me aprofundar agora em todas elas. Mas vale muito a pena fazer uso dessa ferramenta para cen\u00e1rios de v\u00e1rias intera\u00e7\u00f5es poss\u00edveis ou m\u00faltiplas sa\u00eddas contextuais. Para finalizar o nosso estudo das estruturas condicionais, vamos aprender como trabalhar com o Operador tern\u00e1rio . Esse nome \u00e9 relativo ao n\u00famero de operandos que esse comando usa (no caso, 3). // c# condicao ? expressao_true : expressao_false A condi\u00e7\u00e3o \u00e9 uma express\u00e3o l\u00f3gica (que usa operadores relacionais e booleanos) que s\u00f3 pode retornar true ou false. A express\u00e3o logo ap\u00f3s o ponto de interroga\u00e7\u00e3o ser\u00e1 o retorno do operador em caso de true. A express\u00e3o ap\u00f3s os dois pontos \u00e9 o retorno em caso de false. Sim, \u00e9 exatamente um caso de if-else s\u00f3 que em apenas uma linha. Como as solu\u00e7\u00f5es podem ficar muito grandes, \u00e9 sempre bom termos em mente que quanto menos linhas, mais f\u00e1cil ser\u00e1 fazer manuten\u00e7\u00e3o nos nossos programas. O operador tern\u00e1rio \u00e9 muito usado por programadores mais experientes. Abaixo temos um exemplo comparando as duas maneiras. // c# // Compara\u00e7\u00e3o entre if-else e operador tern\u00e1rio bool passou ; double nota ; // if-else if ( nota >= 60 ) passou = true ; else passou = false ; // operador ternario passou = nota >= 60 ? true : false // maneira 1 passou = ( nota >= 60 ) ? true : false // maneira 2 Agora podemos ver claramente a vantagem do uso do operador tern\u00e1rio. Estrutura de Repeti\u00e7\u00e3o Como sabemos, ainda temos mais um tipo de estrutura para estudarmos. At\u00e9 agora, aprendemos como estruturar um c\u00f3digo sequencialmente e como criar blocos de c\u00f3digo que s\u00f3 ser\u00e3o executados se determinadas condi\u00e7\u00f5es previamente definidas forem satisfeitas. Agora, vamos aprender como evitar ter que repetir blocos de c\u00f3digos. O c# possui 3 operadores de repeti\u00e7\u00e3o: // c# // tipo 01 while ( condicao ) comando ; // tipo 02 do comando ; while ( condicao ); // tipo 03 for ( inicial ; expressao logica ; atualizacao ) comando ; Vamos ver um exemplo de como nosso c\u00f3digo pode ser reduzir com o uso da estrutura de repeti\u00e7\u00e3o. Primeiro, vamos ver um exemplo onde o programa recebe uma lista de 3 palavras (nome, nome do meio e sobrenome) e depois faz o print. // c# // Programa que recebe nome completo e // depois devolve uma mensagem de boas vindas string nome , mid , last ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Qual seu primeiro nome?\" ); nome = Console . ReadLine (); Console . WriteLine ( \" Qual seu nome do meio?\" ); mid = Console . ReadLine (); Console . WriteLine ( \" Qual seu sobrenome?\" ); last = Console . ReadLine (); Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" ); Agora vamos refazer esse programa usando os 3 tokens de estrutura de repeti\u00e7\u00e3o que o c# nos d\u00e1. Vamos usar a mesma ordem em que elas foram apresentadas. Os Comandos WHILE, DO WHILE e FOR Repeti\u00e7\u00e3o usando WHILE A repeti\u00e7\u00e3o usando o token while \u00e9 condicionada ao resultado de uma express\u00e3o l\u00f3gica. Caso a express\u00e3o l\u00f3gica retorne true, o bloco de c\u00f3digo ser\u00e1 executado at\u00e9 o seu final. Ap\u00f3s a execu\u00e7\u00e3o, \u00e9 feita uma nova verifica\u00e7\u00e3o da express\u00e3o l\u00f3gica. O processo de loop s\u00f3 ser\u00e1 finalizado caso a express\u00e3o l\u00f3gica retorne o valor false. Abaixo temos a refatora\u00e7\u00e3o 5 evitando a repeti\u00e7\u00e3o de partes de partes do c\u00f3digo anterior. // c# // Programa de nomes refatorado com while string nome , mid , last ; int contador ; // nome default nome = \"\" ; mid = \"\" ; last = \"\" ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Por favor, insira o seu nome completo.\" ); Console . WriteLine ( \" Obs. No m\u00e1ximo 3 palavras\" ); contador = 1 ; while ( contador <= 3 ) { Console . WriteLine ( $\" Palavra n\u00ba {contador} do seu nome?\" ); if ( contador == 1 ) nome = Console . ReadLine (); else if ( contador == 2 ) mid = Console . ReadLine (); else if ( contador == 3 ) last = Console . ReadLine (); contador += 1 ; }; Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" ); Agora n\u00f3s temos um loop usando a express\u00e3o \"a vari\u00e1vel contador \u00e9 menor igual a 3?\" sempre que a resposta for sim, o programa perguntar\u00e1 qual a n-\u00e9sima palavra do nome da pessoa. Pode parecer que nesse exemplo o uso do loop mais complicou do que facilitou. Mas o objetivo aqui \u00e9 exercitar o uso desse operador, ent\u00e3o devemos focar em compreender como usar o while. Repeti\u00e7\u00e3o usando DO-WHILE Para a nossa sorte, o operador DO WHILE \u00e9 muito similar ao WHILE. A \u00fanica diferen\u00e7a \u00e9 que primeiro declaramos o bloco de c\u00f3digo e, no final, colocamos a condi\u00e7\u00e3o para sua execu\u00e7\u00e3o. No exemplo abaixo temos o mesmo resultado que o de cima mas usando essa outra estrutura de operador. // c# // Programa de nomes refatorado com do-while string nome , mid , last ; int contador ; // nome default nome = \"\" ; mid = \"\" ; last = \"\" ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Por favor, insira o seu nome completo.\" ); Console . WriteLine ( \" Obs. No m\u00e1ximo 3 palavras\" ); contador = 1 ; do { Console . WriteLine ( $\" Palavra n\u00ba {contador} do seu nome?\" ); if ( contador == 1 ) nome = Console . ReadLine (); else if ( contador == 2 ) mid = Console . ReadLine (); else if ( contador == 3 ) last = Console . ReadLine (); contador += 1 ; } while ( contador <= 3 ); Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" ); Repeti\u00e7\u00e3o usando FOR Quando usamos nosso operador while, foi criada uma vari\u00e1vel contador que era incrementada a cada itera\u00e7\u00e3o at\u00e9 que o teste l\u00f3gico \"menor igual a 3\"\\ retorne false. A vantagem do operador de loop for \u00e9 que podemos fazer isso diretamente no par\u00e2metro da fun\u00e7\u00e3o. O operador de loop for recebe 3 par\u00e2metros, na ordem: condi\u00e7\u00e3o inicial da vari\u00e1vel de controle; express\u00e3o l\u00f3gica (que retorna true ou false) e, por fim, um incremento ou decremento. // c# // Programa de nomes refatorado com for string nome , mid , last ; int contador ; // nome default nome = \"\" ; mid = \"\" ; last = \"\" ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Por favor, insira o seu nome completo.\" ); Console . WriteLine ( \" Obs. No m\u00e1ximo 3 palavras\" ); contador = 1 ; for ( contador = 1 ; contador <= 3 ; contador ++ ) { Console . WriteLine ( $\" Qual a palavra n\u00ba {contador} do seu nome?\" ); if ( contador == 1 ) nome = Console . ReadLine (); else if ( contador == 2 ) mid = Console . ReadLine (); else if ( contador == 3 ) last = Console . ReadLine (); }; Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" ); Contadores e Acumuladores Agora sabemos reduzir nossos c\u00f3digos usando 3 tipos de tokens fornecidos pelo c#. Vamos ver um pouquinho mais a respeito do atributo de contador do loop for . Um contador nada mais \u00e9 do que uma vari\u00e1vel do tipo constante que receber\u00e1 a atualiza\u00e7\u00e3o do seu valor a cada loop. Se a situa\u00e7\u00e3o inicial do nosso contador for igual a 1, a cada itera\u00e7\u00e3o ele receber\u00e1 a express\u00e3o contador = contador + 1 . Podemos criar um contador diretamente no c\u00f3digo atrav\u00e9s da atribui\u00e7\u00e3o do valor pela soma. Ou, podemos usar os operadores de incremento e decremento que aprendemos anteriormente. A cada itera\u00e7\u00e3o em uma estrutura de loop, a vari\u00e1vel receber\u00e1 +1 como incremento ou -1 no caso do decremento. Podemos usar o operador de incremento tanto no bloco de c\u00f3digo de um loop quanto como par\u00e2metro. Em um for , quando colocamos o terceiro par\u00e2metro igual a contador++ , a cada itera\u00e7\u00e3o teremos +1 atribu\u00eddo ao contador. Um acumulador \u00e9 muito parecido com um contador, a diferen\u00e7a \u00e9 que a cada itera\u00e7\u00e3o n\u00f3s podemos adicionar qualquer valor ao acumulador. Por exemplo, se queremos calcular a m\u00e9dia de uma turma, teremos que somar todas as notas e dividir pelo quantitativo dos alunos da turma. Para isso, podemos criar um acumulador chamado soma_notas que recebe, para cada aluno, a nota atrav\u00e9s de um comando parecido com o exemplo a baixo. // c# double soma_notas = 0 ; for ( n_aluno = 0 ; n_alunos <= qtd ; n_aluno ++ ) { soma_notas = soma_notas + nota }; A cada itera\u00e7\u00e3o, somamos o valor da vari\u00e1vel nota \u00e0 vari\u00e1vel soma_notas . Manipula\u00e7\u00e3o de Dados em Mem\u00f3ria Prim\u00e1ria e Secund\u00e1ria Ao longo do material n\u00f3s usamos v\u00e1rias vezes frases como \"a medida que nosso c\u00f3digo cresce\" ou \"para manter a simplicidade no processo de atualiza\u00e7\u00e3o\" e outras frases de mesmo teor. Isso n\u00e3o \u00e9 em v\u00e3o. Quando olhamos os c\u00f3digos dos sistemas operacionais, por exemplo, podemos ver que a quantidade de linhas de c\u00f3digo passam da casa do milh\u00e3o. Manter tudo isso funcionando de modo coeso e atualiz\u00e1vel \u00e9 uma tarefa que demanda muita habilidade e planejamento. Para nos ajudar nesse trabalho, vamos aprender sobre m\u00e9todos de organiza\u00e7\u00e3o de c\u00f3digo atrav\u00e9s do uso de fun\u00e7\u00f5es e procedimentos. Criando e Usando Fun\u00e7\u00f5es e Procedimentos Normalmente, quando estamos desenvolvendo uma solu\u00e7\u00e3o de software, primeiro n\u00f3s criamos um algoritmo que descreve os pormenores o que ser\u00e1 feito e como ser\u00e1 feito. Essa primeira etapa \u00e9 focada na solu\u00e7\u00e3o do problema. A partir dela, devemos pensar em encontrar procedimentos que se repetem ao longo do c\u00f3digo ou que podem ser usados para outros trabalhos similares. Sempre que identificarmos padr\u00f5es que podem ser reutilizados, estamos diante de uma melhoria por modulariza\u00e7\u00e3o. A modulariza\u00e7\u00e3o (tamb\u00e9m chamada de sub-rotinas ou sub-programas) \u00e9 a pr\u00e1tica de reduzir o nosso c\u00f3digo em partes menores que recebem nomes diferentes dependendo da linguagem. Em linguagens orientadas \u00e0 objeto como o c# n\u00f3s chamamos de modulariza\u00e7\u00e3o. A ideia \u00e9 simples: menos linhas, mais f\u00e1cil ser\u00e1 a manuten\u00e7\u00e3o. Esse \u00e9 um valor muito caro no meio do desenvolvimento profissional de software e devemos ter sempre essa postura em mente. Existem dois tipos de m\u00e9todos para modulariza\u00e7\u00e3o: fun\u00e7\u00f5es , que sempre retornam algum valor, e procedimentos que n\u00e3o retornam nenhum valor. Abaixo vemos como criar esses dois tipos. // c# // criando uma fun\u00e7\u00e3o que retorna um inteiro int nome_metodo ( string par1 , float par2 ,..., int parn ) { int valor_resultado ; comando1 ; ... return valor_retorno ; }; // criando um procedimento static void nome_procedimento ( string par1 , double par2 ,..., int parn ) { comando1 ; ... }; Podemos ver que um procedimento em c# recebe esse token void antes de ser criado (ainda n\u00e3o aprenderemos o que significa esse termo static ). Para usarmos um par\u00e2metro n\u00e3o precisamos fazer nenhuma atribui\u00e7\u00e3o, basta chamar-lo com os seus par\u00e2metros preenchidos e atribu\u00eddos ao tipo de vari\u00e1vel correto. No caso de uma fun\u00e7\u00e3o, como ela retorna um resultado, precisamos atribuir o resultado a alguma vari\u00e1vel. Abaixo temos um exemplo de como usar cada um desses m\u00e9todos. // c# // chamando um procedimento nome_procedimento ( par1 , par2 ); // chamando um m\u00e9todo resultado = nome_metodo ( par1 , par2 ); Coment\u00e1rio: Se n\u00e3o queremos usar nenhum par\u00e2metro, basta definir o procedimento ou o m\u00e9todo com os par\u00eanteses vazios, por exemplo, nome_procedimento() . A essa altura voc\u00ea j\u00e1 deve ter percebido que um procedimento nada mais \u00e9 que um tipo de m\u00e9todo. S\u00f3 que ele possui uma regra diferente na hora da cria\u00e7\u00e3o e n\u00e3o pode ter seu resultado atribu\u00eddo a nenhuma vari\u00e1vel. Desse modo, a modulariza\u00e7\u00e3o faz uso de dois m\u00e9todos poss\u00edveis. Passagem de Par\u00e2metros Os par\u00e2metros s\u00e3o vari\u00e1veis que podem ser transferidos (tamb\u00e9m dizemos que eles s\u00e3o \"passados\") para que o nosso m\u00e9todo seja executado. Esses ser\u00e3o os valores que o nosso m\u00e9todo vai receber e processar. Podemos classificar os par\u00e2metros em dois tipos: Formais , que s\u00e3o definidos na declara\u00e7\u00e3o (ou cria\u00e7\u00e3o) do m\u00e9todo e s\u00e3o trabalhados dentro do bloco de c\u00f3digo interno a ele como se fossem vari\u00e1veis novas; e os Reais , que s\u00e3o passados para o m\u00e9todo no momento da invoca\u00e7\u00e3o e ser\u00e3o atribu\u00eddos aos par\u00e2metros formal como representantes das vari\u00e1veis reais. Quanto a passagem desses par\u00e2metros, tamb\u00e9m temos duas nomenclaturas: Passagem por valor que \u00e9 quando o par\u00e2metro real \u00e9 compilado para o par\u00e2metro formal sem altera\u00e7\u00e3o do seu valor original e a Passagem por refer\u00eancia em que a manipula\u00e7\u00e3o feita dentro do bloco de c\u00f3digo \u00e9 espelhada nas vari\u00e1veis de refer\u00eancia fora do nosso m\u00e9todo. Quando usamos a passagem por valor, estamos usando os par\u00e2metros do tipo formais. Quando usamos a passagem por refer\u00eancia estamos usando os par\u00e2metros reais. // c# int a = 5 , b = 7 ; // exemplo de passagem por valor static void passagemValor ( int x , int y ) { int temp = x ; x = y ; x = temp } passagemValor ( a , b ); Console . Write ( $\"a = {a} e b = {b}\" ); > a = 5 e b = 7 // exemplo de passagem por refer\u00eancia static void passagemRef ( ref int x , ref int y ) { int temp = x ; x = y ; y = temp ; } passagemRef ( ref a , ref b ); Console . Write ( $\"a = {a} e b = {b}\" ); > a = 7 e b = 5 Dicas e Boas Pr\u00e1ticas o m\u00e9todo Main() \u00e9 uma fun\u00e7\u00e3o especial de um programa escrito em c#. Ele \u00e9 automaticamente executado quando o programa \u00e9 iniciado e todos os outros m\u00e9todos est\u00e3o contidos dentro dele. Um m\u00e9todo deve ser o menor poss\u00edvel . Se o objetivo \u00e9 simplificar, devemos evitar ao m\u00e1ximo ter grandes blocos de c\u00f3digo dentro de um m\u00e9todo. Se est\u00e1 grande demais, n\u00e3o seria melhor quebrar em m\u00e9todos menores? Sempre devemos colocar nomes relevantes e esclarecedores. Devemos evitar ter m\u00e9todos com um n\u00famero muito elevado de par\u00e2metros. Cabe a mesma l\u00f3gica sobre o tamanho: n\u00e3o seria melhor quebrar em mais m\u00e9todos? Agora que aprendemos mais sobre o m\u00e9todos e boas pr\u00e1ticas, podemos entender bem melhor a estrutura padr\u00e3o de uma aplica\u00e7\u00e3o em c#. // c# using System ; public class Program { public static void Main () { Console . WriteLine ( \"Hello World\" ); } } Ainda n\u00e3o sabemos tudo que est\u00e1 nesse template padr\u00e3o de programa em c# mas, definitivamente, j\u00e1 podemos dizer que entendemos algumas coisas desse c\u00f3digo. Manipula\u00e7\u00e3o de Arquivos em C# Aprendemos que um programa pode ser separado em 3 etapas e, at\u00e9 agora, todo o input da informa\u00e7\u00e3o bem como o output est\u00e1 sendo feito via janela do terminal ou prompt de comando. Mas na vida real, \u00e9 super raro (se \u00e9 que acontece) de um usu\u00e1rio leigo ter que ficar usando o terminal para interagir com aplica\u00e7\u00f5es. Uma outra maneira de coletarmos informa\u00e7\u00e3o como input para o nosso processamento \u00e9 por meio da leitura de arquivos e, consequentemente, tamb\u00e9m podemos ter como output do nosso c\u00f3digo a escrita de um arquivo na mem\u00f3ria do computador. Para facilitar nossa vida, o c# j\u00e1 possui algumas classes (que podemos pensar como se fossem sin\u00f4nimos de objetos) que foram criadas especialmente para lidar com esse trabalho. Essas classes de manipula\u00e7\u00e3o de arquivos est\u00e3o guardadas em um namespace chamado System.IO 6 As classes que aprenderemos aqui s\u00e3o: StreamReader - Para cria\u00e7\u00e3o de um fluxo de leitura do arquivo para o programa StreamWriter - Para cria\u00e7\u00e3o de um fluxo de sa\u00edda ou grava\u00e7\u00e3o do programa para o arquivo A manipula\u00e7\u00e3o feita por um programa em um arquivo \u00e9, basicamente uma dessas opera\u00e7\u00f5es abaixo: Abrir para escrita Abrir para leitura Escrever dados no arquivo Ler dados Fechar o arquivo Agora o termo \"fluxo\" come\u00e7a a ficar mais claro. Para um programa trabalhar um arquivo, ele precisa sinalizar para o sistema operacional que aquele arquivo est\u00e1 sendo trabalhado por ele. Por isso existe esse fluxo de abrir o fluxo, ler ou gravar dados e, por fim, fechar o fluxo. Isso libera o arquivo para ser usado por outros programas. Abrir um arquivo para leitura Um arquivo n\u00e3o pode ser lido usando um instanciamento (que \u00e9 a cria\u00e7\u00e3o de uma vari\u00e1vel do tipo de um objeto definido previamente) atrav\u00e9s do objeto StreamReader . Esse objeto \u00e9 nativo e pode ser invocado sem precisar ser criado anteriormente. E, como todo objeto, possui m\u00e9todos dentro dele (10 pra ser mais preciso) mas n\u00f3s s\u00f3 vamos usar o mais b\u00e1sico. // c# // abrindo um arquivo para a leitura StreamReader NOME = new StreamReader ( \"path.txt\" ); StreamReader NOME = new StreamReader ( \"c:\\temp\\path.txt\" ); StreamReader NOME = new StreamReader ( @\"c: emp\\path.txt\" ); Agora que temos nosso objeto criado, para lermos o conte\u00fado s\u00f3 precisamos usar um dos m\u00e9todos contidos nesse objeto criado. // c# // obtendo o texto string linha = NOME . ReadLine (); // ler todas as linhas de um arquivo linha = NOME . ReadLine (); while ( linha != null ) { ... linha = NOME . ReadLine (); }; Abrir um arquivo para escrita // c# // criando o objeto de leitura em diferentes modos StreamWriter NOME = new StreamWriter ( \"path.txt\" ); StreamWriter NOME = new StreamWriter ( \"c:\\temp\\path.txt\" ); StreamWriter NOME = new StreamWriter ( @\"c: emp\\path.txt\" ); Qualquer arquivo que possa ser lida em um editor de texto (como o notepad) pode ser lida por esse m\u00e9todo. Independente da extens\u00e3o. // c# // usando o par\u00e2metro append (true ou false) // conte\u00fado existente sera apagado StreamWriter NOME = new StreamWriter ( \"path.txt\" , false ); // conte\u00fado existente sera mantido StreamWriter NOME = new StreamWriter ( \"path.txt\" , true ); Agora s\u00f3 precisamos saber como gravar os nossos dados no arquivo de texto. Isso \u00e9 feito de maneira parecida com o comando que mostrava mensagens na tela do terminal de comando. // c# // gravando uma string no arquivo texto aberto arquivo . Write ( string ); // ou arquivo . WriteLine ( string ); Fechando um Arquivo Para fechar o stream, seja na leitura ou na grava\u00e7\u00e3o, usamos o m\u00e9todo Close() para garantir que o arquivo n\u00e3o vai ficar bloqueado por um esquecimento. Sempre devemos fechar os fluxos! Bibliografia Ana Fernanda Gomes ASCENCIO; Edilene Aparecida Veneruchi de CAMPOS. Fundamentos da Programa\u00e7\u00e3o de Computadores: algoritmos, Pascal, C/C++ e Java - 2\u00aa edi\u00e7\u00e3o . S\u00e3o Paulo, SP : Pearson Education do Brasil, 2012 H. DEITEL et. Al. C#: Como Programar . S\u00e3o Paulo: Makron Books, 2003 John SHARP. Microsoft Visual C# 2013 . Grupo A, 2014 Andr\u00e9 Luiz Villar FORBELLONE, Henri Frederico EBERSP\u00c4CHER. L\u00f3gica de programa\u00e7\u00e3o: a constru\u00e7\u00e3o de algoritmos e estruturas de dados . S\u00e3o Paulo: Prentice Hall, 2005. MANZANO, Jos\u00e9 Augusto N. G; OLIVEIRA, Jayr Figueiredo de. Al goritmos: l\u00f3gica para desenvolvimento de programa\u00e7\u00e3o de computadores 28. ed. rev. e atual. S\u00e3o Paulo, SP: \u00c9rica, 2016 Sandra PUGA, Gerson RISSETTI. L\u00f3gica de Programa\u00e7\u00e3o e Estrutura de Dados: com aplica\u00e7\u00f5es em Java - 2\u00aa edi\u00e7\u00e3o . S\u00e3o Paulo : Pearson, 2017 Float possui precis\u00e3o simples e Double possui dupla precis\u00e3o. \u21a9 Isso \u00e9 muito impressionante! \u21a9 Embora a gente saiba que a radicia\u00e7\u00e3o \u00e9 uma pot\u00eancia de fra\u00e7\u00e3o. \u21a9 Se voc\u00ea n\u00e3o se lembra como resolver um problema desse, seu professor da sexta s\u00e9rie est\u00e1 rindo de voc\u00ea nesse exato minuto. \u21a9 Refatorar \u00e9 o processo de mudar o c\u00f3digo e obter o mesmo resultado no final. \u00c9 uma \u00f3tima pr\u00e1tica a ser feita. \u21a9 IO significa Input/Output. \u21a9","title":"Algoritmo e L\u00f3gica"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#assuntos","text":"L\u00f3gica de Programa\u00e7\u00e3o e Estrutura de Controle, Fun\u00e7\u00f5es e Procedimentos Conceito de Algoritmo Vari\u00e1veis Etapas de um Algoritmo e Operador de Atribui\u00e7\u00e3o Estrutura Sequencial Estrutura Condicional Estrutura de Repeti\u00e7\u00e3o Manipula\u00e7\u00e3o de Dados em Mem\u00f3ria Prim\u00e1ria e Secund\u00e1ria Criando e Usando Fun\u00e7\u00f5es e Procedimentos Passagem de Par\u00e2metros Manipula\u00e7\u00e3o de Arquivos em C# Bibliografia","title":"Assuntos"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#logica-de-programacao-e-estrutura-de-controle-funcoes-e-procedimentos","text":"","title":"L\u00f3gica de Programa\u00e7\u00e3o e Estrutura de Controle, Fun\u00e7\u00f5es e Procedimentos"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#conceito-de-algoritmo","text":"Em resumo, um algoritmo \u00e9 uma sequ\u00eancia de ordens que, se seguidas, deve gerar um resultado previsto e desejado. N\u00e3o vale muito a pena aprofundar al\u00e9m disso agora.","title":"Conceito de Algoritmo"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#variaveis","text":"Uma vari\u00e1vel \u00e9 uma posi\u00e7\u00e3o na mem\u00f3ria do computador. Isso mesmo, \u00e9 algo com endere\u00e7o definido, nada solto no universo ou obscuro dentro da m\u00e1quina. Esse dado \u00e9 gravado para posterior leitura por parte do programa que est\u00e1 sendo executado. Podemos ter como origem do dado o pr\u00f3prio programa que est\u00e1 sendo executado ou o usu\u00e1rio por meio da entrada de dados ou, ainda, a leitura de dados previamente armazenados na mem\u00f3ria do computador. Cada vari\u00e1vel possui v\u00e1rios tipos de atributos que podemos elencar na lista abaixo: Tem um endere\u00e7o na mem\u00f3ria Possui um nome de identifica\u00e7\u00e3o Armazena um valor Possui um tipo de dados: Num\u00e9rico - Inteiros e Reais (Double ou Ponto Flutuante) 1 N\u00e3o num\u00e9rico - L\u00f3gico e Caractere Arranjos - Vetores e Matrizes Arquivos etc O endere\u00e7o da mem\u00f3ria \u00e9 feita pelos endere\u00e7os que possuem apenas 2 est\u00e1gios de registro: 0 ou 1. Um bit \u00e9 exatamente essa medida de registo. 1 byte \u00e9 composto de 8bits. 1 kilobyte cont\u00e9m 1024bytes ( \\(2^{10}\\) ). 1 megabyte cont\u00e9m 1024KB ( \\(2^{20}\\) ). 1 gigabyte cont\u00e9m 1024MB ( \\(2^{30}\\) ). 1 terabyte possui 1024GB ( \\(2^{40}\\) ). Ou seja, se um computador possui 3 gigas de mem\u00f3ria RAM, ele tem 3 bilh\u00f5es de bytes como endere\u00e7os dispon\u00edveis para um registro na mem\u00f3ria 2 . Cada byte possui um endere\u00e7o \u00fanico. Na mem\u00f3ria RAM costuma-se usar a base Hexadecimal para definir os endere\u00e7os. Vamos ver isso melhor na mat\u00e9ria de Arquitetura de Computadores. Tamb\u00e9m vimos que as vari\u00e1veis possuem identificadores. Em c# existem regras para a cria\u00e7\u00e3o dos identificadores: Devem come\u00e7ar com uma letra N\u00e3o podem ter espa\u00e7os N\u00e3o podem usar uma das palavras reservadas pela linguagem \u00c9 case sensitive, ou seja, o nome \"Var\" \u00e9 diferente do nome \"var\" O identificador deve sempre ter algum sentido que permita a r\u00e1pida interpreta\u00e7\u00e3o por parte de algum leitor do c\u00f3digo fonte da aplica\u00e7\u00e3o. Isso \u00e9 fundamental para manuten\u00e7\u00e3o de c\u00f3digos produzidos por v\u00e1rias pessoas diferentes. Entretanto, devemos evitar nomes de vari\u00e1veis muito grandes. Na verdade, quanto menor o nome, mantido o sentido na leitura, melhor. Outra boa pr\u00e1tica \u00e9 usar o camelCase para vari\u00e1veis com mais de uma palavra. Esse padr\u00e3o \u00e9 bem simples: primeira palavra em min\u00fasculo e a segunda com a primeira letra em mai\u00fascula.","title":"Vari\u00e1veis"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#declaracao-de-variaveis-em-c","text":"Vamos aprender agora como declarar os 4 tipos mais simples de vari\u00e1veis: int para definir inteiros double ou float para definir n\u00fameros reais string para cadeia de caracteres bool para as vari\u00e1veis booleanas ( true ou false ) Coment\u00e1rio: c# \u00e9 uma linguagem fortemente tipada, entretanto, existe um tipo de tipagem impl\u00edcita que \u00e9 muito usado na pr\u00e1tica onde o pr\u00f3prio compilador \"interpreta\" o tipo de vari\u00e1vel. Ao longo desse microfundamento n\u00f3s vamos usar apenas os tokens de tipagem expl\u00edcita. Mas vale muito a pena a leitura da documenta\u00e7\u00e3o oficial nesse link . // c# static void Main ( string [] args ) { int idade , numero ; double peso , salario ; string nomePai , rua , dtNasc ; bool temCasa ; } Nesse c\u00f3digo acima temos a declara\u00e7\u00e3o de v\u00e1rias vari\u00e1veis de cada tipo. Basta colocar o tipo da vari\u00e1vel seguido do nome de cada uma delas separadas por v\u00edrgula. Coment\u00e1rio: Em c# todas as linhas precisam conter um car\u00e1cter de encerramento que \u00e9 o ponto e v\u00edrgula ; . Sem esse token, o computador vai interpretar a pr\u00f3xima linha como sendo a continua\u00e7\u00e3o da anterior.","title":"Declara\u00e7\u00e3o de Vari\u00e1veis em c#"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#etapas-de-um-algoritmo-e-operador-de-atribuicao","text":"Podemos resumir um algoritmo simples como contendo apenas 3 etapas: 1) A entrada de dados; 2) O processamento e 3) A sa\u00edda de dados. Na etapa de processamento, podemos precisar de grande criatividade e esfor\u00e7o para produzir a sa\u00edda de dados desejada. Como ferramenta para alcance desse objetivo, temos as estruturas b\u00e1sicas que s\u00e3o: Estrutura Sequencial - Usada para garantir a ordem correta dos passos Estrutura Condicional - Usada para permitir contexto ou cen\u00e1rios Estrutura de Repeti\u00e7\u00e3o - Usada para evitar repetir c\u00f3digo sequencial","title":"Etapas de um Algoritmo e Operador de Atribui\u00e7\u00e3o"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#operador-de-atribuicao","text":"Uma vez que j\u00e1 sabemos como atribuir uma vari\u00e1vel ao seu tipo, precisamos aprender a como atribuir um valor a essas vari\u00e1veis. Em c# a atribui\u00e7\u00e3o de valor \u00e9 feita do seguinte modo: // c# idade = 28 ; numero = 9992233 ; \u00c9 poss\u00edvel fazer 3 tipos de atribui\u00e7\u00e3o de valor para uma vari\u00e1vel: Valor fixo; Conte\u00fado de outra vari\u00e1vel e Express\u00e3o aritm\u00e9tica ou booliana. Abaixo temos 3 exemplo disso. // c# idade = 28 ; // Valor fixo numero = idade ; // Valor de outra vari\u00e1vel idadeNum = idade + numero ; // Valor por express\u00e3o idadeEqNum = idade == numero ; // Valor por express\u00e3o booliana Nesse ponto vale uma reflex\u00e3o. Ser\u00e1 que sempre precisamos separar as etapas de atribui\u00e7\u00e3o do tipo de dados e do valor? Ou podemos, no mesmo momento, definir o tipo de dados e o valor da vari\u00e1vel? A resposta, para nossa sorte, \u00e9 que \u00e9 poss\u00edvel em c# atribui\u00e7\u00e3o de tipo e valor ao mesmo tempo. A sintaxe fica desse modo: // c# int idade = 28 ; int numero = idade ; double = 2.3 ; string nome = \"bruno\" ; int idadeNum = idade + numero ; bool idadeEqNum = idade == numero ;","title":"Operador de Atribui\u00e7\u00e3o"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#saidas-de-dados","text":"Agora que fizemos esse pequeno desvio no assunto, vamos retornar para as estruturas. Por incr\u00edvel que pare\u00e7a, \u00e9 melhor a gente come\u00e7ar pelo final. A etapa de sa\u00edda de dados. Em c# temos duas maneiras de sa\u00edda de dados: // c# // Imprime a informa\u00e7\u00e3o e cursor fica na mesma linha Console . Write ( ' string ' ); // Imprime a info mas o curso vai pra proxima linha Console . WriteLine ( ' string ' + var1 + ' string ' ); Nesses exemplos a gente pode perceber que podemos concatenar textos e vari\u00e1veis textuais por meio do operador de soma. Al\u00e9m dessa forma, podemos fazer uso de PlaceHolders ou Interpola\u00e7\u00e3o de string como nos exemplos abaixo. // c# string nome = \"Bruno\" ; // Concatena\u00e7\u00e3o Console . WriteLine ( \"Meu nome \u00e9 \" + nome + \", obrigado!\" ); // PlaceHolder Console . WriteLine ( \"Meu nome \u00e9 {0}, obrigado!\" , nome ); // Interpola\u00e7\u00e3o Console . WriteLine ( $\"Meu nome \u00e9 {nome}, obrigado!\" ); Os tr\u00eas exemplos geram o mesmo resultado mas s\u00e3o consideravelmente diferentes no m\u00e9todo. Podemos usar o que for mais agrad\u00e1vel para uma leitura do c\u00f3digo e posterior manuten\u00e7\u00e3o do mesmo.","title":"Sa\u00eddas de Dados"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#entrada-de-dados","text":"Agora que sabemos como fazer nosso programa imprimir resultados, vamos aprender como inputar dados nele. Em c# podemos inserir dados com o seguinte comando: // c# variavel = Console . ReadLine (); O input captado por esse comando sempre retorna uma string . Mas as vezes precisamos nos certificar que o input foi feito da maneira correta. Para isso podemos manipular os dados inseridos do seguinte modo: // c# // Valores Inteiros variavel = int . Parse ( Console . ReaLine ()); variavel = Convert . ToInt32 ( Console . ReadLine ()); // Valores Reais variavel = double . Parse ( Console . ReadLine ()); variavel = float . Parse ( Console . ReadLine ()); variavel = Convert . ToDouble ( Console . ReadLine ()); // Valores Booleanos variavel = bool . Parse ( Console . ReadLine ()); // Valores String variavel = Console . ReadLine (); Depois que executamos um dessas maneiras de coletar os dados, \u00e9 de boa pr\u00e1tica fornecermos um output logo ap\u00f3s a entrada do dado. Isso evita aquela sensa\u00e7\u00e3o de d\u00favida se o programa est\u00e1 sendo executado ou n\u00e3o. Ou seja, \u00e9 bom sempre manter a dupla ReadLine() com o WriteLine() . O nome que damos para essa dupla \u00e9 \"Prompt\". Outra dica boa \u00e9 usar o comando Console.ReadKey() no final do programa. Isso faz com que o console aguarde alguma tecla para finalizar. Evita que a aplica\u00e7\u00e3o abra e feche sem que o user consiga enxergar o resultado do processo.","title":"Entrada de Dados"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#estrutura-sequencial","text":"Agora que sabemos como receber valores do usu\u00e1rio e como devolver nova informa\u00e7\u00e3o a partir do processamento, vamos come\u00e7ar a estudar a etapa de processamento atrav\u00e9s do estudo das estruturas sequenciais.","title":"Estrutura Sequencial"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#operadores-e-funcoes-aritmeticas","text":"Em c# n\u00f3s temos os seguintes tokens para realizar as opera\u00e7\u00f5es aritm\u00e9ticas: + Soma - Subtra\u00e7\u00e3o * Multiplica\u00e7\u00e3o / Divis\u00e3o % Resto da Divis\u00e3o inteira Al\u00e9m disso, temos a presen\u00e7a do que podemos chamar de operadores de atribui\u00e7\u00e3o combinada . Que faz a atribui\u00e7\u00e3o de valor com alguma opera\u00e7\u00e3o aritm\u00e9tica: soma += 100 \u00e9 igual a soma = soma + 100 subtracao -= 10 \u00e9 igual a subtracao = subtracao - 10 multiplica *= 2 \u00e9 igual a multiplica = multiplica * 2 divide /= 3 \u00e9 igual a divide = divide / 3 resto \\%= 2 \u00e9 igual a resto = resto / 2 N\u00e3o bastando essa grande variedade, temos os operadores de incremento e decremento : Pr\u00e9-incremento ( ++x ) - Usa x + 1 antes do processamento P\u00f3s-incremento ( x++ ) - Usa x + 1 ap\u00f3s o processamento Pr\u00e9-decr\u00e9scimo ( --x ) - Usa x - 1 antes do processamento P\u00f3s-decr\u00e9scimo ( x-- ) - Usa x -1 ap\u00f3s o processamento Essa diferen\u00e7a de pre e p\u00f3s \u00e9 importante para as estruturas de repeti\u00e7\u00e3o, porque podemos lidar com \u00edndices de tabelas que come\u00e7am com valores diferentes. Mas, no geral, devemos olhar cada caso para escolher o que usar. Existem outras opera\u00e7\u00f5es que est\u00e3o contidas em um objeto nativo chamado Math . Para fazermos potencia\u00e7\u00e3o usamos o m\u00e9todo Math.Pow() . Para fazermos raiz quadrada podemos usar Math.Sqrt() 3 .","title":"Operadores e Fun\u00e7\u00f5es Aritm\u00e9ticas"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#expressoes-aritmeticas","text":"Agora podemos juntar tudo que vimos em um programa simples de c\u00e1lculo da m\u00e9dia de 5 valores. O c\u00f3digo e o seu resultado podem ser vistos abaixo. // c# // Declara\u00e7\u00e3o dos tipos das vari\u00e1veis int n1 , n2 , n3 , n4 , n5 , soma ; float media ; // Input dos dados Console . WriteLine ( \"Programa para c\u00e1lculo da m\u00e9dia de 5 valores.\" ); Console . WriteLine ( \"Por favor, forne\u00e7a o primeiro n\u00famero\" ); n1 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o segundo n\u00famero\" ); n2 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o terceiro n\u00famero\" ); n3 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o quarto n\u00famero\" ); n4 = Convert . ToInt32 ( Console . ReadLine ()); Console . WriteLine ( \"Por favor, forne\u00e7a o quinto n\u00famero\" ); n5 = Convert . ToInt32 ( Console . ReadLine ()); // Processamento soma = n1 + n2 + n3 + n4 + n5 ; media = soma / 5 ; // Output dos dados Console . WriteLine ( \"Os n\u00fameros fornecidos foram:\" ); Console . WriteLine ( \"N1={0},N2={1},N3={2},N4={3},N5={4}\" , n1 , n2 , n3 , n4 , n5 ); Console . WriteLine ( \"Cuja m\u00e9dia \u00e9 igual a {0}\" , media ); Outro exemplo que podemos usar \u00e9 o do c\u00e1lculo das ra\u00edzes de uma fun\u00e7\u00e3o de segundo grau 4 . O programa abaixo recebe 3 valores e calcula as ra\u00edzes, a imagem logo ap\u00f3s nos mostra o resultado no prompt de comando. // c# // Programa para calcular o valor de x em uma equa\u00e7\u00e3o de segundo grau // Declara\u00e7\u00e3o das vari\u00e1veis double a , b , c , x1 , x2 ; Console . WriteLine ( \"Vamos resolver uma equa\u00e7\u00e3o do tipo ax^2 + bx + c = 0\" ); // Input das variaveis Console . WriteLine ( \"Qual o valor de a? \" ); a = Convert . ToDouble ( Console . ReadLine ()); Console . WriteLine ( \"Qual o valor de b? \" ); b = Convert . ToDouble ( Console . ReadLine ()); Console . WriteLine ( \"Qual o valor de c? \" ); c = Convert . ToDouble ( Console . ReadLine ()); x1 = ( - b + Math . Sqrt ( Math . Pow ( b , 2 ) - 4 * a * c )) / 2 * a ; x2 = ( - b - Math . Sqrt ( Math . Pow ( b , 2 ) - 4 * a * c )) / 2 * a ; // Output dos resultados Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( \"Resultado: x1 = {0} e x2 = {1}\" , x1 , x2 ); A essa altura j\u00e1 aprendemos como criar programas inteiros com as etapas de software que vimos anteriormente: input, processamento e output. Tudo isso em c#. Entretanto, no estado atual do c\u00f3digo, nossos programas n\u00e3o est\u00e3o muito competentes em se adaptar a diferentes tipos de inputs ou resultados. Um exemplo pr\u00e1tico \u00e9 que, nesse segundo programa, podemos ter inputs que retornem um resultado indesejado como podemos ver na imagem abaixo.","title":"Express\u00f5es Aritm\u00e9ticas"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#estrutura-condicional","text":"A necessidade de lidarmos com diferentes situa\u00e7\u00f5es ou contextos \u00e9 o que nos leva a estudarmos as estruturas condicionais . Por meio dessas estruturas, podemos construir diferentes outputs de acordo com qualquer l\u00f3gica que implementarmos e, com isso, evitar v\u00e1rios bugs nos nossos programas.","title":"Estrutura Condicional"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#operadores-relacionais","text":"Ao lidarmos com estrutura condicionais n\u00f3s temos alguns operadores que nada mais s\u00e3o do que express\u00f5es l\u00f3gicas que retornam apenas 2 resultados poss\u00edveis: true ou false. Esses operadores s\u00e3o como \"gatilhos\"\\ que s\u00e3o usados para controle do fluxo de processamento do c\u00f3digo. Operador Opera\u00e7\u00e3o Exemplo == Igualdade n1 == n2 < Menor a < 10 > Maio b > 1 <= Menor igual c <= 2 >= Maior igual d >= 22 != Desigualdade e != 100 Na tabela acima, temos os operadores relacionais que s\u00e3o usados ao longo das estruturas condicionais simples e compostas. Tome cuidado com o operador de igualdade == e o de atribui\u00e7\u00e3o = , afinal, eles usam o sinal de igualdade mas significam coisas diferentes.","title":"Operadores Relacionais"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#condicao-simples-e-composta","text":"Em c# o comando usado para criar uma condi\u00e7\u00e3o simples \u00e9 o if . Se a condi\u00e7\u00e3o que colocarmos atrelada ao comando if retornar um true, o bloco de c\u00f3digo atribu\u00eddo a ele ser\u00e1 executar, caso contr\u00e1rio, o c\u00f3digo do bloco ser\u00e1 ignorado. // c# // Parte condicional no calculo da equa\u00e7\u00e3o de segundo grau delta = ( Math . Pow ( b , 2 ) - 4 * a * c ); // Output dos resultados com condi\u00e7\u00e3o if ( delta >= 0 ) { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: x1 = {0} e x2 = {1}\" , x1 , x2 ); }; if ( delta < 0 ) { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: X n\u00e3o possui raiz real! \" ); }; Com essa adapta\u00e7\u00e3o, nosso c\u00f3digo estar\u00e1 preparado para o caso onde o interior da raiz (que chamamos de delta) seja negativo. Mas podemos ver que o nosso c\u00f3digo ficou um pouco esquisito. Criamos dois blocos de c\u00f3digo que s\u00e3o, claramente, relacionados entre si: Se um bloco for executado, o outro n\u00e3o ser\u00e1. Para facilitar o trabalho com essas situa\u00e7\u00f5es, as linguagens de programa\u00e7\u00e3o possuem as estruturas de condi\u00e7\u00e3o compostas. Esses s\u00e3o os casos onde, se o teste l\u00f3gico retorna true, executamos um bloco, ou o outro bloco ser\u00e1 executado caso o resultado l\u00f3gico seja false. Com isso evitamos ter que criar dois testes com if . O token usado em c# para uma condi\u00e7\u00e3o com dois blocos de c\u00f3digos (ou seja, uma condicional composta) \u00e9 o if-else . Abaixo n\u00f3s reescrevemos a solu\u00e7\u00e3o anterior mas agora fazendo uso do condional composto. // c# // Parte condicional no calculo da equa\u00e7\u00e3o de segundo grau delta = ( Math . Pow ( b , 2 ) - 4 * a * c ); // Output dos resultados com condi\u00e7\u00e3o if ( delta >= 0 ) { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: x1 = {0} e x2 = {1}\" , x1 , x2 ); } else { Console . WriteLine ( \"Dados: a = {0}, b = {1} e c = {2}\" , a , b , c ); Console . WriteLine ( $\"Equa\u00e7\u00e3o: (-({b}) +- Raiz(({b})^2 - 4*{a}*{c}))/2*{a} = 0\" ); Console . WriteLine ( $\"Delta: {delta}\" ); Console . WriteLine ( \"Resultado: X n\u00e3o possui raiz real! \" ); }; Agora sim nosso c\u00f3digo est\u00e1 elegante e adaptado para as duas sa\u00eddas poss\u00edveis de resultado para os inputs do usu\u00e1rio.","title":"Condi\u00e7\u00e3o Simples e Composta"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#operadores-booleanos-e-comandos-if-aninhados","text":"N\u00f3s aprendemos que o bloco de c\u00f3digo ser\u00e1 executado sempre que a express\u00e3o l\u00f3gica retornar um resultado true. Tamb\u00e9m vimos que existem os operadores relacionais que nos ajudam a construir essas express\u00f5es. Agora, vamos aprender os operadores booleanos que nada mais s\u00e3o do que os operadores l\u00f3gicos cl\u00e1ssicos ( \\(\\land, \\lor, \\neg\\) ). Operador Opera\u00e7\u00e3o Exemplo && (AND) true se tudo for true if (a > 2 && b == 1) | | (OR) true se um for true if (a < 2 | | b != 0) ! (NOT) false se true if (!(x==y)) Existem problemas que requerem mais de dois resultados no output. Nesse caso, n\u00e3o \u00e9 suficiente usarmos apenas os tokens de condicional composto if-else da maneira como aprendemos at\u00e9 agora. Para resolver esse problema temos a t\u00e9cnica de IF aninhados (nested) e a de IF escada (ladder). As duas formas produzem o mesmo resultado mas mudam significativamente legibilidade do nosso c\u00f3digo. Abaixo temos um exemplo de cada. // c# // Leadder IF if ( condicao1 ) comando1 ; else if ( condicao2 ) comando2 ; else if ( condicao3 ) comando3 ; ... else if ( condicao_n - 1 ) comando_n - 1 ; else comando_n ; // c# // Nested IF if ( condicao1 ) comando1 ; else if ( condicao2 ) comando2 ; else if ( condicao3 ) comando3 ; else if ( condicao4 ) comando4 ; ... else if ( condicao_n - 1 ) comando_n - 1 ; else comando_n ;","title":"Operadores Booleanos e Comandos IF Aninhados"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#o-comando-switch-e-o-operador-ternario","text":"Agora que aprendemos a lidar com v\u00e1rios casos condicionais encadeados, podemos construir solu\u00e7\u00f5es relativamente complexas com v\u00e1rias sa\u00eddas diferentes. Entretanto, quando tempos muitas situa\u00e7\u00f5es poss\u00edveis, o nosso c\u00f3digo pode ficar um pouco ruim de ser lido por outras pessoas. Pensando nessa necessidade, os criadores do c# criaram um operador que simplifica ainda mais nosso trabalho. Sim, \u00e9 isso mesmo, n\u00f3s acabamos de aprender IFs aninhados e em escada e j\u00e1 vamos aprender uma maneira melhor de fazer exatamente o que eles fazem. Se acostume com isso. Em tecnologia existem quase sempre v\u00e1rias maneiras de se chegar no mesmo resultado. O operador que \u00e9 mais indicado para lidar com v\u00e1rias situa\u00e7\u00f5es de sa\u00edda \u00e9 o switch-case . Cuja constru\u00e7\u00e3o \u00e9 bem mais leg\u00edvel que os IFs anteriores. Abaixo temos um exemplo. // c# // Lidando com varias condi\u00e7\u00f5es com switch/case switch ( opcao ) { case op1 : comandos1 ; break ; case op2 : comandos2 ; break ; case op3 : comandos3 ; break ; ... case op_n : comandos_n ; break ; default : // bloco que sera executado se nenhuma // das anteriores for escolhida; } Coment\u00e1rio: Existem v\u00e1rias maneiras de se usar o switch. Eu n\u00e3o vou me aprofundar agora em todas elas. Mas vale muito a pena fazer uso dessa ferramenta para cen\u00e1rios de v\u00e1rias intera\u00e7\u00f5es poss\u00edveis ou m\u00faltiplas sa\u00eddas contextuais. Para finalizar o nosso estudo das estruturas condicionais, vamos aprender como trabalhar com o Operador tern\u00e1rio . Esse nome \u00e9 relativo ao n\u00famero de operandos que esse comando usa (no caso, 3). // c# condicao ? expressao_true : expressao_false A condi\u00e7\u00e3o \u00e9 uma express\u00e3o l\u00f3gica (que usa operadores relacionais e booleanos) que s\u00f3 pode retornar true ou false. A express\u00e3o logo ap\u00f3s o ponto de interroga\u00e7\u00e3o ser\u00e1 o retorno do operador em caso de true. A express\u00e3o ap\u00f3s os dois pontos \u00e9 o retorno em caso de false. Sim, \u00e9 exatamente um caso de if-else s\u00f3 que em apenas uma linha. Como as solu\u00e7\u00f5es podem ficar muito grandes, \u00e9 sempre bom termos em mente que quanto menos linhas, mais f\u00e1cil ser\u00e1 fazer manuten\u00e7\u00e3o nos nossos programas. O operador tern\u00e1rio \u00e9 muito usado por programadores mais experientes. Abaixo temos um exemplo comparando as duas maneiras. // c# // Compara\u00e7\u00e3o entre if-else e operador tern\u00e1rio bool passou ; double nota ; // if-else if ( nota >= 60 ) passou = true ; else passou = false ; // operador ternario passou = nota >= 60 ? true : false // maneira 1 passou = ( nota >= 60 ) ? true : false // maneira 2 Agora podemos ver claramente a vantagem do uso do operador tern\u00e1rio.","title":"O Comando Switch e o Operador Tern\u00e1rio"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#estrutura-de-repeticao","text":"Como sabemos, ainda temos mais um tipo de estrutura para estudarmos. At\u00e9 agora, aprendemos como estruturar um c\u00f3digo sequencialmente e como criar blocos de c\u00f3digo que s\u00f3 ser\u00e3o executados se determinadas condi\u00e7\u00f5es previamente definidas forem satisfeitas. Agora, vamos aprender como evitar ter que repetir blocos de c\u00f3digos. O c# possui 3 operadores de repeti\u00e7\u00e3o: // c# // tipo 01 while ( condicao ) comando ; // tipo 02 do comando ; while ( condicao ); // tipo 03 for ( inicial ; expressao logica ; atualizacao ) comando ; Vamos ver um exemplo de como nosso c\u00f3digo pode ser reduzir com o uso da estrutura de repeti\u00e7\u00e3o. Primeiro, vamos ver um exemplo onde o programa recebe uma lista de 3 palavras (nome, nome do meio e sobrenome) e depois faz o print. // c# // Programa que recebe nome completo e // depois devolve uma mensagem de boas vindas string nome , mid , last ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Qual seu primeiro nome?\" ); nome = Console . ReadLine (); Console . WriteLine ( \" Qual seu nome do meio?\" ); mid = Console . ReadLine (); Console . WriteLine ( \" Qual seu sobrenome?\" ); last = Console . ReadLine (); Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" ); Agora vamos refazer esse programa usando os 3 tokens de estrutura de repeti\u00e7\u00e3o que o c# nos d\u00e1. Vamos usar a mesma ordem em que elas foram apresentadas.","title":"Estrutura de Repeti\u00e7\u00e3o"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#os-comandos-while-do-while-e-for","text":"","title":"Os Comandos WHILE, DO WHILE e FOR"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#repeticao-usando-while","text":"A repeti\u00e7\u00e3o usando o token while \u00e9 condicionada ao resultado de uma express\u00e3o l\u00f3gica. Caso a express\u00e3o l\u00f3gica retorne true, o bloco de c\u00f3digo ser\u00e1 executado at\u00e9 o seu final. Ap\u00f3s a execu\u00e7\u00e3o, \u00e9 feita uma nova verifica\u00e7\u00e3o da express\u00e3o l\u00f3gica. O processo de loop s\u00f3 ser\u00e1 finalizado caso a express\u00e3o l\u00f3gica retorne o valor false. Abaixo temos a refatora\u00e7\u00e3o 5 evitando a repeti\u00e7\u00e3o de partes de partes do c\u00f3digo anterior. // c# // Programa de nomes refatorado com while string nome , mid , last ; int contador ; // nome default nome = \"\" ; mid = \"\" ; last = \"\" ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Por favor, insira o seu nome completo.\" ); Console . WriteLine ( \" Obs. No m\u00e1ximo 3 palavras\" ); contador = 1 ; while ( contador <= 3 ) { Console . WriteLine ( $\" Palavra n\u00ba {contador} do seu nome?\" ); if ( contador == 1 ) nome = Console . ReadLine (); else if ( contador == 2 ) mid = Console . ReadLine (); else if ( contador == 3 ) last = Console . ReadLine (); contador += 1 ; }; Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" ); Agora n\u00f3s temos um loop usando a express\u00e3o \"a vari\u00e1vel contador \u00e9 menor igual a 3?\" sempre que a resposta for sim, o programa perguntar\u00e1 qual a n-\u00e9sima palavra do nome da pessoa. Pode parecer que nesse exemplo o uso do loop mais complicou do que facilitou. Mas o objetivo aqui \u00e9 exercitar o uso desse operador, ent\u00e3o devemos focar em compreender como usar o while.","title":"Repeti\u00e7\u00e3o usando WHILE"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#repeticao-usando-do-while","text":"Para a nossa sorte, o operador DO WHILE \u00e9 muito similar ao WHILE. A \u00fanica diferen\u00e7a \u00e9 que primeiro declaramos o bloco de c\u00f3digo e, no final, colocamos a condi\u00e7\u00e3o para sua execu\u00e7\u00e3o. No exemplo abaixo temos o mesmo resultado que o de cima mas usando essa outra estrutura de operador. // c# // Programa de nomes refatorado com do-while string nome , mid , last ; int contador ; // nome default nome = \"\" ; mid = \"\" ; last = \"\" ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Por favor, insira o seu nome completo.\" ); Console . WriteLine ( \" Obs. No m\u00e1ximo 3 palavras\" ); contador = 1 ; do { Console . WriteLine ( $\" Palavra n\u00ba {contador} do seu nome?\" ); if ( contador == 1 ) nome = Console . ReadLine (); else if ( contador == 2 ) mid = Console . ReadLine (); else if ( contador == 3 ) last = Console . ReadLine (); contador += 1 ; } while ( contador <= 3 ); Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" );","title":"Repeti\u00e7\u00e3o usando DO-WHILE"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#repeticao-usando-for","text":"Quando usamos nosso operador while, foi criada uma vari\u00e1vel contador que era incrementada a cada itera\u00e7\u00e3o at\u00e9 que o teste l\u00f3gico \"menor igual a 3\"\\ retorne false. A vantagem do operador de loop for \u00e9 que podemos fazer isso diretamente no par\u00e2metro da fun\u00e7\u00e3o. O operador de loop for recebe 3 par\u00e2metros, na ordem: condi\u00e7\u00e3o inicial da vari\u00e1vel de controle; express\u00e3o l\u00f3gica (que retorna true ou false) e, por fim, um incremento ou decremento. // c# // Programa de nomes refatorado com for string nome , mid , last ; int contador ; // nome default nome = \"\" ; mid = \"\" ; last = \"\" ; Console . WriteLine ( \" Seja bem vindo(a)!\" ); Console . WriteLine ( \" Por favor, insira o seu nome completo.\" ); Console . WriteLine ( \" Obs. No m\u00e1ximo 3 palavras\" ); contador = 1 ; for ( contador = 1 ; contador <= 3 ; contador ++ ) { Console . WriteLine ( $\" Qual a palavra n\u00ba {contador} do seu nome?\" ); if ( contador == 1 ) nome = Console . ReadLine (); else if ( contador == 2 ) mid = Console . ReadLine (); else if ( contador == 3 ) last = Console . ReadLine (); }; Console . WriteLine ( \" Bem Vindo(a)!\" ); Console . WriteLine ( nome ); Console . WriteLine ( mid ); Console . WriteLine ( last ); Console . WriteLine ( \" E Volte sempre!\" );","title":"Repeti\u00e7\u00e3o usando FOR"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#contadores-e-acumuladores","text":"Agora sabemos reduzir nossos c\u00f3digos usando 3 tipos de tokens fornecidos pelo c#. Vamos ver um pouquinho mais a respeito do atributo de contador do loop for . Um contador nada mais \u00e9 do que uma vari\u00e1vel do tipo constante que receber\u00e1 a atualiza\u00e7\u00e3o do seu valor a cada loop. Se a situa\u00e7\u00e3o inicial do nosso contador for igual a 1, a cada itera\u00e7\u00e3o ele receber\u00e1 a express\u00e3o contador = contador + 1 . Podemos criar um contador diretamente no c\u00f3digo atrav\u00e9s da atribui\u00e7\u00e3o do valor pela soma. Ou, podemos usar os operadores de incremento e decremento que aprendemos anteriormente. A cada itera\u00e7\u00e3o em uma estrutura de loop, a vari\u00e1vel receber\u00e1 +1 como incremento ou -1 no caso do decremento. Podemos usar o operador de incremento tanto no bloco de c\u00f3digo de um loop quanto como par\u00e2metro. Em um for , quando colocamos o terceiro par\u00e2metro igual a contador++ , a cada itera\u00e7\u00e3o teremos +1 atribu\u00eddo ao contador. Um acumulador \u00e9 muito parecido com um contador, a diferen\u00e7a \u00e9 que a cada itera\u00e7\u00e3o n\u00f3s podemos adicionar qualquer valor ao acumulador. Por exemplo, se queremos calcular a m\u00e9dia de uma turma, teremos que somar todas as notas e dividir pelo quantitativo dos alunos da turma. Para isso, podemos criar um acumulador chamado soma_notas que recebe, para cada aluno, a nota atrav\u00e9s de um comando parecido com o exemplo a baixo. // c# double soma_notas = 0 ; for ( n_aluno = 0 ; n_alunos <= qtd ; n_aluno ++ ) { soma_notas = soma_notas + nota }; A cada itera\u00e7\u00e3o, somamos o valor da vari\u00e1vel nota \u00e0 vari\u00e1vel soma_notas .","title":"Contadores e Acumuladores"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#manipulacao-de-dados-em-memoria-primaria-e-secundaria","text":"Ao longo do material n\u00f3s usamos v\u00e1rias vezes frases como \"a medida que nosso c\u00f3digo cresce\" ou \"para manter a simplicidade no processo de atualiza\u00e7\u00e3o\" e outras frases de mesmo teor. Isso n\u00e3o \u00e9 em v\u00e3o. Quando olhamos os c\u00f3digos dos sistemas operacionais, por exemplo, podemos ver que a quantidade de linhas de c\u00f3digo passam da casa do milh\u00e3o. Manter tudo isso funcionando de modo coeso e atualiz\u00e1vel \u00e9 uma tarefa que demanda muita habilidade e planejamento. Para nos ajudar nesse trabalho, vamos aprender sobre m\u00e9todos de organiza\u00e7\u00e3o de c\u00f3digo atrav\u00e9s do uso de fun\u00e7\u00f5es e procedimentos.","title":"Manipula\u00e7\u00e3o de Dados em Mem\u00f3ria Prim\u00e1ria e Secund\u00e1ria"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#criando-e-usando-funcoes-e-procedimentos","text":"Normalmente, quando estamos desenvolvendo uma solu\u00e7\u00e3o de software, primeiro n\u00f3s criamos um algoritmo que descreve os pormenores o que ser\u00e1 feito e como ser\u00e1 feito. Essa primeira etapa \u00e9 focada na solu\u00e7\u00e3o do problema. A partir dela, devemos pensar em encontrar procedimentos que se repetem ao longo do c\u00f3digo ou que podem ser usados para outros trabalhos similares. Sempre que identificarmos padr\u00f5es que podem ser reutilizados, estamos diante de uma melhoria por modulariza\u00e7\u00e3o. A modulariza\u00e7\u00e3o (tamb\u00e9m chamada de sub-rotinas ou sub-programas) \u00e9 a pr\u00e1tica de reduzir o nosso c\u00f3digo em partes menores que recebem nomes diferentes dependendo da linguagem. Em linguagens orientadas \u00e0 objeto como o c# n\u00f3s chamamos de modulariza\u00e7\u00e3o. A ideia \u00e9 simples: menos linhas, mais f\u00e1cil ser\u00e1 a manuten\u00e7\u00e3o. Esse \u00e9 um valor muito caro no meio do desenvolvimento profissional de software e devemos ter sempre essa postura em mente. Existem dois tipos de m\u00e9todos para modulariza\u00e7\u00e3o: fun\u00e7\u00f5es , que sempre retornam algum valor, e procedimentos que n\u00e3o retornam nenhum valor. Abaixo vemos como criar esses dois tipos. // c# // criando uma fun\u00e7\u00e3o que retorna um inteiro int nome_metodo ( string par1 , float par2 ,..., int parn ) { int valor_resultado ; comando1 ; ... return valor_retorno ; }; // criando um procedimento static void nome_procedimento ( string par1 , double par2 ,..., int parn ) { comando1 ; ... }; Podemos ver que um procedimento em c# recebe esse token void antes de ser criado (ainda n\u00e3o aprenderemos o que significa esse termo static ). Para usarmos um par\u00e2metro n\u00e3o precisamos fazer nenhuma atribui\u00e7\u00e3o, basta chamar-lo com os seus par\u00e2metros preenchidos e atribu\u00eddos ao tipo de vari\u00e1vel correto. No caso de uma fun\u00e7\u00e3o, como ela retorna um resultado, precisamos atribuir o resultado a alguma vari\u00e1vel. Abaixo temos um exemplo de como usar cada um desses m\u00e9todos. // c# // chamando um procedimento nome_procedimento ( par1 , par2 ); // chamando um m\u00e9todo resultado = nome_metodo ( par1 , par2 ); Coment\u00e1rio: Se n\u00e3o queremos usar nenhum par\u00e2metro, basta definir o procedimento ou o m\u00e9todo com os par\u00eanteses vazios, por exemplo, nome_procedimento() . A essa altura voc\u00ea j\u00e1 deve ter percebido que um procedimento nada mais \u00e9 que um tipo de m\u00e9todo. S\u00f3 que ele possui uma regra diferente na hora da cria\u00e7\u00e3o e n\u00e3o pode ter seu resultado atribu\u00eddo a nenhuma vari\u00e1vel. Desse modo, a modulariza\u00e7\u00e3o faz uso de dois m\u00e9todos poss\u00edveis.","title":"Criando e Usando Fun\u00e7\u00f5es e Procedimentos"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#passagem-de-parametros","text":"Os par\u00e2metros s\u00e3o vari\u00e1veis que podem ser transferidos (tamb\u00e9m dizemos que eles s\u00e3o \"passados\") para que o nosso m\u00e9todo seja executado. Esses ser\u00e3o os valores que o nosso m\u00e9todo vai receber e processar. Podemos classificar os par\u00e2metros em dois tipos: Formais , que s\u00e3o definidos na declara\u00e7\u00e3o (ou cria\u00e7\u00e3o) do m\u00e9todo e s\u00e3o trabalhados dentro do bloco de c\u00f3digo interno a ele como se fossem vari\u00e1veis novas; e os Reais , que s\u00e3o passados para o m\u00e9todo no momento da invoca\u00e7\u00e3o e ser\u00e3o atribu\u00eddos aos par\u00e2metros formal como representantes das vari\u00e1veis reais. Quanto a passagem desses par\u00e2metros, tamb\u00e9m temos duas nomenclaturas: Passagem por valor que \u00e9 quando o par\u00e2metro real \u00e9 compilado para o par\u00e2metro formal sem altera\u00e7\u00e3o do seu valor original e a Passagem por refer\u00eancia em que a manipula\u00e7\u00e3o feita dentro do bloco de c\u00f3digo \u00e9 espelhada nas vari\u00e1veis de refer\u00eancia fora do nosso m\u00e9todo. Quando usamos a passagem por valor, estamos usando os par\u00e2metros do tipo formais. Quando usamos a passagem por refer\u00eancia estamos usando os par\u00e2metros reais. // c# int a = 5 , b = 7 ; // exemplo de passagem por valor static void passagemValor ( int x , int y ) { int temp = x ; x = y ; x = temp } passagemValor ( a , b ); Console . Write ( $\"a = {a} e b = {b}\" ); > a = 5 e b = 7 // exemplo de passagem por refer\u00eancia static void passagemRef ( ref int x , ref int y ) { int temp = x ; x = y ; y = temp ; } passagemRef ( ref a , ref b ); Console . Write ( $\"a = {a} e b = {b}\" ); > a = 7 e b = 5","title":"Passagem de Par\u00e2metros"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#dicas-e-boas-praticas","text":"o m\u00e9todo Main() \u00e9 uma fun\u00e7\u00e3o especial de um programa escrito em c#. Ele \u00e9 automaticamente executado quando o programa \u00e9 iniciado e todos os outros m\u00e9todos est\u00e3o contidos dentro dele. Um m\u00e9todo deve ser o menor poss\u00edvel . Se o objetivo \u00e9 simplificar, devemos evitar ao m\u00e1ximo ter grandes blocos de c\u00f3digo dentro de um m\u00e9todo. Se est\u00e1 grande demais, n\u00e3o seria melhor quebrar em m\u00e9todos menores? Sempre devemos colocar nomes relevantes e esclarecedores. Devemos evitar ter m\u00e9todos com um n\u00famero muito elevado de par\u00e2metros. Cabe a mesma l\u00f3gica sobre o tamanho: n\u00e3o seria melhor quebrar em mais m\u00e9todos? Agora que aprendemos mais sobre o m\u00e9todos e boas pr\u00e1ticas, podemos entender bem melhor a estrutura padr\u00e3o de uma aplica\u00e7\u00e3o em c#. // c# using System ; public class Program { public static void Main () { Console . WriteLine ( \"Hello World\" ); } } Ainda n\u00e3o sabemos tudo que est\u00e1 nesse template padr\u00e3o de programa em c# mas, definitivamente, j\u00e1 podemos dizer que entendemos algumas coisas desse c\u00f3digo.","title":"Dicas e Boas Pr\u00e1ticas"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#manipulacao-de-arquivos-em-c","text":"Aprendemos que um programa pode ser separado em 3 etapas e, at\u00e9 agora, todo o input da informa\u00e7\u00e3o bem como o output est\u00e1 sendo feito via janela do terminal ou prompt de comando. Mas na vida real, \u00e9 super raro (se \u00e9 que acontece) de um usu\u00e1rio leigo ter que ficar usando o terminal para interagir com aplica\u00e7\u00f5es. Uma outra maneira de coletarmos informa\u00e7\u00e3o como input para o nosso processamento \u00e9 por meio da leitura de arquivos e, consequentemente, tamb\u00e9m podemos ter como output do nosso c\u00f3digo a escrita de um arquivo na mem\u00f3ria do computador. Para facilitar nossa vida, o c# j\u00e1 possui algumas classes (que podemos pensar como se fossem sin\u00f4nimos de objetos) que foram criadas especialmente para lidar com esse trabalho. Essas classes de manipula\u00e7\u00e3o de arquivos est\u00e3o guardadas em um namespace chamado System.IO 6 As classes que aprenderemos aqui s\u00e3o: StreamReader - Para cria\u00e7\u00e3o de um fluxo de leitura do arquivo para o programa StreamWriter - Para cria\u00e7\u00e3o de um fluxo de sa\u00edda ou grava\u00e7\u00e3o do programa para o arquivo A manipula\u00e7\u00e3o feita por um programa em um arquivo \u00e9, basicamente uma dessas opera\u00e7\u00f5es abaixo: Abrir para escrita Abrir para leitura Escrever dados no arquivo Ler dados Fechar o arquivo Agora o termo \"fluxo\" come\u00e7a a ficar mais claro. Para um programa trabalhar um arquivo, ele precisa sinalizar para o sistema operacional que aquele arquivo est\u00e1 sendo trabalhado por ele. Por isso existe esse fluxo de abrir o fluxo, ler ou gravar dados e, por fim, fechar o fluxo. Isso libera o arquivo para ser usado por outros programas.","title":"Manipula\u00e7\u00e3o de Arquivos em C#"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#abrir-um-arquivo-para-leitura","text":"Um arquivo n\u00e3o pode ser lido usando um instanciamento (que \u00e9 a cria\u00e7\u00e3o de uma vari\u00e1vel do tipo de um objeto definido previamente) atrav\u00e9s do objeto StreamReader . Esse objeto \u00e9 nativo e pode ser invocado sem precisar ser criado anteriormente. E, como todo objeto, possui m\u00e9todos dentro dele (10 pra ser mais preciso) mas n\u00f3s s\u00f3 vamos usar o mais b\u00e1sico. // c# // abrindo um arquivo para a leitura StreamReader NOME = new StreamReader ( \"path.txt\" ); StreamReader NOME = new StreamReader ( \"c:\\temp\\path.txt\" ); StreamReader NOME = new StreamReader ( @\"c: emp\\path.txt\" ); Agora que temos nosso objeto criado, para lermos o conte\u00fado s\u00f3 precisamos usar um dos m\u00e9todos contidos nesse objeto criado. // c# // obtendo o texto string linha = NOME . ReadLine (); // ler todas as linhas de um arquivo linha = NOME . ReadLine (); while ( linha != null ) { ... linha = NOME . ReadLine (); };","title":"Abrir um arquivo para leitura"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#abrir-um-arquivo-para-escrita","text":"// c# // criando o objeto de leitura em diferentes modos StreamWriter NOME = new StreamWriter ( \"path.txt\" ); StreamWriter NOME = new StreamWriter ( \"c:\\temp\\path.txt\" ); StreamWriter NOME = new StreamWriter ( @\"c: emp\\path.txt\" ); Qualquer arquivo que possa ser lida em um editor de texto (como o notepad) pode ser lida por esse m\u00e9todo. Independente da extens\u00e3o. // c# // usando o par\u00e2metro append (true ou false) // conte\u00fado existente sera apagado StreamWriter NOME = new StreamWriter ( \"path.txt\" , false ); // conte\u00fado existente sera mantido StreamWriter NOME = new StreamWriter ( \"path.txt\" , true ); Agora s\u00f3 precisamos saber como gravar os nossos dados no arquivo de texto. Isso \u00e9 feito de maneira parecida com o comando que mostrava mensagens na tela do terminal de comando. // c# // gravando uma string no arquivo texto aberto arquivo . Write ( string ); // ou arquivo . WriteLine ( string );","title":"Abrir um arquivo para escrita"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#fechando-um-arquivo","text":"Para fechar o stream, seja na leitura ou na grava\u00e7\u00e3o, usamos o m\u00e9todo Close() para garantir que o arquivo n\u00e3o vai ficar bloqueado por um esquecimento. Sempre devemos fechar os fluxos!","title":"Fechando um Arquivo"},{"location":"nav/PUC/eixo1/algoritmos_e_logica/#bibliografia","text":"Ana Fernanda Gomes ASCENCIO; Edilene Aparecida Veneruchi de CAMPOS. Fundamentos da Programa\u00e7\u00e3o de Computadores: algoritmos, Pascal, C/C++ e Java - 2\u00aa edi\u00e7\u00e3o . S\u00e3o Paulo, SP : Pearson Education do Brasil, 2012 H. DEITEL et. Al. C#: Como Programar . S\u00e3o Paulo: Makron Books, 2003 John SHARP. Microsoft Visual C# 2013 . Grupo A, 2014 Andr\u00e9 Luiz Villar FORBELLONE, Henri Frederico EBERSP\u00c4CHER. L\u00f3gica de programa\u00e7\u00e3o: a constru\u00e7\u00e3o de algoritmos e estruturas de dados . S\u00e3o Paulo: Prentice Hall, 2005. MANZANO, Jos\u00e9 Augusto N. G; OLIVEIRA, Jayr Figueiredo de. Al goritmos: l\u00f3gica para desenvolvimento de programa\u00e7\u00e3o de computadores 28. ed. rev. e atual. S\u00e3o Paulo, SP: \u00c9rica, 2016 Sandra PUGA, Gerson RISSETTI. L\u00f3gica de Programa\u00e7\u00e3o e Estrutura de Dados: com aplica\u00e7\u00f5es em Java - 2\u00aa edi\u00e7\u00e3o . S\u00e3o Paulo : Pearson, 2017 Float possui precis\u00e3o simples e Double possui dupla precis\u00e3o. \u21a9 Isso \u00e9 muito impressionante! \u21a9 Embora a gente saiba que a radicia\u00e7\u00e3o \u00e9 uma pot\u00eancia de fra\u00e7\u00e3o. \u21a9 Se voc\u00ea n\u00e3o se lembra como resolver um problema desse, seu professor da sexta s\u00e9rie est\u00e1 rindo de voc\u00ea nesse exato minuto. \u21a9 Refatorar \u00e9 o processo de mudar o c\u00f3digo e obter o mesmo resultado no final. \u00c9 uma \u00f3tima pr\u00e1tica a ser feita. \u21a9 IO significa Input/Output. \u21a9","title":"Bibliografia"},{"location":"nav/PUC/eixo1/desenvolvimento_web/","text":"hljs.initHighlightingOnLoad(); Assuntos A Web: Evolu\u00e7\u00e3o, Padr\u00f5es e Arquitetura Hist\u00f3rico e Evolu\u00e7\u00e3o da Web W3C e os Padr\u00f5es da Web Componentes da Arquitetura da Web URI, URL e URN Protocolo HTTP Servidores Web Din\u00e2mica de Aplica\u00e7\u00f5es Web Desenvolvimento de Interfaces Web A Linguagem HTML A Linguagem CSS A Linguagem JavaScript Bibliografia A web: Evolu\u00e7\u00e3o, Padr\u00f5es e Arquitetura Hist\u00f3rico e Evolu\u00e7\u00e3o da Web A Web \u00e9 um sistema da informa\u00e7\u00e3o de hipertextos onde o acesso \u00e9 feito por meio de navegadores (browsers) . Existem alguns protocolos comuns para transfer\u00eancia de alguns tipos de arquivos. Para mensagens (e-mail) usamos o SMTP , para transfer\u00eancia de arquivos usamos o FTP , aplica\u00e7\u00f5es de telefonia usam o VOIP e para p\u00e1ginas de conte\u00fado usamos o HTML . A hist\u00f3ria da web eu ainda vou colocar aqui quando tiver mais tempo. W3C e os Padr\u00f5es da Web O WORLD WIDE WEB CONSORTIUM (W3C) \u00e9 uma organiza\u00e7\u00e3o sem fins lucrativos cujo l\u00edder \u00e9 o Tim Berners-Lee, justamente o inventor da Web. Existem v\u00e1rias organiza\u00e7\u00f5es ao longo do planeta que fazem parte desse cons\u00f3rcio internacional. O W3C mant\u00e9m a gest\u00e3o de v\u00e1rios padr\u00f5es usados todos os dias: Design e Aplica\u00e7\u00f5es Web (HTML, CSS, SVG, Ajax, Acessibilidade); Arquitetura da Web (Protocolo HTTP, URI); Web Sem\u00e2ntica (Linked Data - RDF, OWL, SPARQL); Web Services (SOAP, WSDL); Tecnologia XML (XML, XML Schema, XSLT); Navegadores e ferramentas de autoria. A W3C possui um processo de publica\u00e7\u00e3o das normativas. Normalmente, o fluxo \u00e9: Working Draft (WD) Candidate Release (CR) Proposed Recomendation (PR) Recomendation (REC) Componentes da Arquitetura da Web A web pode ser entendida como uma cole\u00e7\u00e3o de componentes que permitem a comunica\u00e7\u00e3o entre o cliente e os servidores de aplica\u00e7\u00f5es. Os principais componentes dessa arquitetura s\u00e3o: Ambiente Cliente (Client Web ) Geralmente um Browser que envia as requisi\u00e7\u00f5es usando o protocolo HTTP(S) para o servidor web atrav\u00e9s de uma rede de computadores. Ambiente Servidor O ambiente servidor possui v\u00e1rios componentes (banco de dados, aplica\u00e7\u00f5es, API e etc) mas o principal componente \u00e9 o servidor web. Ele recebe a requisi\u00e7\u00e3o HTTP(S) do client, interpreta a URL e envia os recursos solicitados (HTML, CSS, JS, JPEG, MP4 e etc) por meio da rede. Internet \u00c9 a rede mundial baseada no protocolo TCP/IP onde todo computador conectado \u00e9 denominado host (hospedeiro) e possui um identificador de endere\u00e7o IP (internet protocol) que possui determinados padr\u00f5es. URI (uniform resource locator) Como o nome indica, um URI \u00e9 um localizado que pode ser classificado em duas maneiras. O URL \u00e9 o tipo de URI que usa o endere\u00e7o do conte\u00fado como m\u00e9todo de localiza\u00e7\u00e3o, ele nos diz onde encontrar o recurso (por exemplo, o caminho c://home/desktop/test.txt ). O URN \u00e9 o tipo que usa o nome do recurso, ele nos diz a identidade do item procurado (por exemplo, o sistema ISBN). Requisi\u00e7\u00e3o \u00c9 o pacote de dados enviado pelo client atrav\u00e9s da internet para o web server onde est\u00e1 a instru\u00e7\u00e3o do que deve ser enviado como resposta. Resposta Como o nome j\u00e1 diz, \u00e9 o retorno do web server ao client com os dados requisitados. Protocolo HTTP \u00c9 o padr\u00e3o como client e web server se comunicam pela rede. URI, URL e URN J\u00e1 vimos que o URI abarca dos conceitos de URL e URN. Agora vamos aprender um pouco mais sobre os padr\u00f5es de endere\u00e7os em ambos os protocolos. URL O padr\u00e3o URL serve para identificar o recurso pela sua localiza\u00e7\u00e3o e \u00e9 composto da seguinte maneira: ftp://example.com:8080/pasta/arquivo?name=book#nose Cujas partes s\u00e3o scheme://authority/path?query#fragment Como podemos ver, a URL \u00e9 composta por v\u00e1rias partes: scheme - \u00e9 a forma de intera\u00e7\u00e3o (ftp, http, https, ...). user:pass - s\u00e3o as informa\u00e7\u00f5es do user. host - endere\u00e7o de ip do server. porta - qual a porta TCP/IP do server (o padr\u00e3o http \u00e9 80 e pode ser omitida). path - local onde o recurso se encontra. query - detalhe da consulta na forma de pares nome-valor. fragmento - qual se\u00e7\u00e3o do recurso. URN urn:example:animal:ferret:nose Cujas partes s\u00e3o scheme:path:authority A URN apenas nos d\u00e1 um recurso espec\u00edfico (NSS) contido em algum namespace (NID) sem qualquer informa\u00e7\u00e3o sobre onde o arquivo est\u00e1 localizado. Protocolo HTTP O hypertext transfer protocol \u00e9 mantido pela W3C e rege a camada de aplica\u00e7\u00e3o dos sistemas distribu\u00eddos de informa\u00e7\u00e3o em hipertexto. Existem muitas vers\u00f5es mas a mais utilizada \u00e9 a 2.0 de 2015. Para entender melhor o http, consideremos o processo usual de navega\u00e7\u00e3o na web: user informa a URL client monta a requisi\u00e7\u00e3o http e envia ao web server server recebe a requisi\u00e7\u00e3o e envia a resposta ao client a resposta \u00e9 recebida e interpretada pelo browser com os dados exibidos ao user dependendo da p\u00e1gina, pode ser que novas requisi\u00e7\u00f5es sejam feitas para que todos os componentes sejam carregados propriamente. Podemos ver que o http \u00e9 o conjunto de regras que rege a comunica\u00e7\u00e3o client-server da web. Partes da requisi\u00e7\u00e3o HTTP Uma requisi\u00e7\u00e3o \u00e9 formada por 3 partes: Linha de Requisi\u00e7\u00e3o M\u00e9todo GET - Requisita dados. POST - Envia dados para o server. HEAD - Requisita dados mas o retorno deve ser um conjunto de cabe\u00e7alhos. PUT - Cria\u00e7\u00e3o ou Atualiza\u00e7\u00e3o de dados. DELETE - Excluir algum dado. TRACE - Solicita uma c\u00f3pia da requisi\u00e7\u00e3o (serve pra testar integridade). PATCH - Altera\u00e7\u00f5es parciais em um recurso. OPTIONS - Lista de m\u00e9todos e op\u00e7\u00f5es dispon\u00edveis para o server. CONNECT - Usado quando o client se conecta com o server via proxy. Recurso - \u00c9 o caminho do dado requerido. Vers\u00e3o do Protocolo - Qual vers\u00e3o do http ser\u00e1 usada. Linhas de Cabe\u00e7alho - Inclui informa\u00e7\u00f5es complementares \u00e0 requisi\u00e7\u00e3o sendo formado por pares nome-valor. Corpo da Entidade - Dados adicionais como forms, arquivos para upload e etc. Partes da resposta HTTP Linha de Resposta Vers\u00e3o HTTP. C\u00f3digo de Retorno. Mensagem explicativa do c\u00f3digo de retorno. Linhas de Cabe\u00e7alho - Uma informa\u00e7\u00e3o importante que consta no cabe\u00e7alho \u00e9 o content-type . Ele diz o formato do conte\u00fado enviado como resposta 1 . Essa informa\u00e7\u00e3o \u00e9 apresentada conforme os MIME Types . Corpo da Entidade - \u00c9 o recurso solicitado pelo client (html, css, js, jpeg, mp4, ...) Um pouco mais sobre Cabe\u00e7alhos Os cabe\u00e7alhos possuem caracter\u00edsticas parecidas tanto nas requests quanto nas responses. Podemos classifica-los como sendo dos tipos: Request header - Informa\u00e7\u00f5es sobre o client ou a requisi\u00e7\u00e3o feita. Response header - Informa\u00e7\u00f5es sobre a resposta ou sobre o web server. Entity header - Informa\u00e7\u00f5es sobre o conte\u00fado da entidade trocada (tamanho e tipo). General header - Informa\u00e7\u00f5es gerais usadas tanto em requests quanto em responses. Servidores Web Voc\u00ea s\u00f3 consegue visualizar as informa\u00e7\u00f5es de um site porque o servidor web foi capaz de interpretar a requisi\u00e7\u00e3o feita pelo seu browser e responder com o conte\u00fado adequado. Agora vamos entender um pouco mais sobre o ambiente servidor. O principal elemento do ambiente servidor \u00e9 o web server. Ele \u00e9 quem recebe, interpreta e responde as requisi\u00e7\u00f5es dos clients ao longo da internet. Podemos tamb\u00e9m incluir outros elementos importantes no ambiente servidor como o servidor de banco de dados e os servidores de servi\u00e7os (APIs) . Fun\u00e7\u00f5es de um web service Um web server nada mais \u00e9 que um software rodando em uma m\u00e1quina. Ele desempenha v\u00e1rias fun\u00e7\u00f5es que podemos elencar como: Atender as requests http e responder a elas. Gerencias sites. Gerencias arquivos dos sites. Integrar mecanismos de scripts: php, perl, aspx, Ruby, Python e etc. Autenticar users (b\u00e1sica ou com servidores de autentica\u00e7\u00e3o). Implementar criptografia nas comunica\u00e7\u00f5es (https - tls/ssl). Cache de recursos. Auditoria das altera\u00e7\u00f5es e logs. Software e Provedores Basicamente, existem 3 formas de tornar uma aplica\u00e7\u00e3o web acess\u00edvel aos clients: Rodar um web server na m\u00e1quina local; instalar e configurar um wer server em uma m\u00e1quina dedicada para esse trabalho e, por fim, contratar um provedor que ofere\u00e7a esse servi\u00e7o. A lista de softwares que se prop\u00f5e a fazer o trabalho de um web server \u00e9 enorme. O material do curso elenca dois: Apache HTTP Server | Apache Web Server \u00c9 um open source multi plataforma. Permite execu\u00e7\u00e3o de multilinguagens como php, perl entre outras. Uma maneira simples de instalar \u00e9 pelo XAMPP (que j\u00e1 integra o apache web server, banco de dados MariaDB e um ambiente PHP e Perl). Microsoft Internet Information Server (IIS) \u00c9 a solu\u00e7\u00e3o propriet\u00e1ria da Microsoft. Baseado na plataforma .NET, permite hospedar sites est\u00e1ticos. O IIS j\u00e1 vem dispon\u00edvel junto dos SO Windows. A lista de provedores tamb\u00e9m \u00e9 extensa e possuem diferentes capacidades distintas mas podemos destacar algumas ferramentas \u00fateis: Servidores em Nuvem Azure AWS Editores e IDEs online Replit CodeSandbox Glitch GitHub Pages 2 Din\u00e2mica de Aplica\u00e7\u00f5es Web Quando voc\u00ea acessa um site, o arquivo que coordena o modo de exposi\u00e7\u00e3o da informa\u00e7\u00e3o e os conte\u00fados da mesma \u00e9 um arquivo .html . Observe o exemplo abaixo de uma p\u00e1gina simples. <!-- > Html <--> <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Document </ title > < link rel = \"stylesheet\" href = \"style.css\" > < script > src = 'app.js' </ script > </ head > < body > < img src = 'logo.jpg' alt = \"imagem_logo\" > </ body > </ html > As tags que cont\u00e9m as partes style.css , app.js e logo.jpg fazem men\u00e7\u00e3o \u00e0 outros arquivos que far\u00e3o parte da composi\u00e7\u00e3o da p\u00e1gina. Alguns s\u00e3o referentes \u00e0 funcionalidades ou layout da aplica\u00e7\u00e3o enquanto outros podem ser referentes \u00e0 conte\u00fados mostrados na p\u00e1gina. Uma vez que o servidor compreende a request feita pelo client, ele envia uma s\u00e9rie de arquivos que ser\u00e3o lidos pelo browser do usu\u00e1rio e ser\u00e3o interpretados por ele. O html \u00e9 justamente o primeiro arquivo lido porque ele diz ao navegador quais conte\u00fados mostrar e, a partir das refer\u00eancias contidas no html, como mostrar e quais funcionalidades a p\u00e1gina ter\u00e1. O processamento de um site O client envia uma requisi\u00e7\u00e3o via http (com o m\u00e9todo GET) para o web server O server envia o arquivo html da p\u00e1gina requisitada para o browser Ao processar o html, o browser percebe que ele faz men\u00e7\u00e3o de outros arquivos (como css, js, mp3, etc) O browser faz novas requisi\u00e7\u00f5es ao server at\u00e9 ter todos os arquivos necess\u00e1rios para o carregamento da p\u00e1gina Como voc\u00ea pode ver, \u00e9 muita coisa acontecendo. S\u00f3 n\u00e3o nos damos conta disso porque o processo \u00e9 muito r\u00e1pido hoje em dia devida a velocidade das nossas conex\u00f5es banda larga. Lembrando sempre que todas as requisi\u00e7\u00f5es e respostas entre client e server s\u00e3o feitas usando-se o protocolo HTTP que a gente viu logo antes. Desenvolvimento de Interfaces Web A Linguagem HTML A linguagem HTML foi criada por Tim Berners-Lee no ano de 1991 e foi baseada no padr\u00e3o Standard Generalized Markup Language (SGML). Seu escopo original era para permitir a divulga\u00e7\u00e3o de pesquisas cient\u00edficas. Com o passar dos anos, novas tecnologias foram somadas ao ecossistema para facilitar o processo de constru\u00e7\u00e3o das solu\u00e7\u00f5es web. O Cascading Style Sheet (CSS) foi criado para facilitar o desenvolvimento do conte\u00fado separando a parte de estilo e apar\u00eancia do conte\u00fado em HTML. O JavaScript permitiu a manipula\u00e7\u00e3o de elementos al\u00e9m de dar mais din\u00e2mica para as p\u00e1ginas web. O W3C foi criado em 1993 e, a partir dessa data, o HTML foi mantido e padronizado por essa organiza\u00e7\u00e3o. Desde ent\u00e3o a linguagem vem sendo alterada para permitir sua evolu\u00e7\u00e3o. Em 2004 foi criado o Web Hypertext Application Technology Working Group (WHATWG) por pessoas da Apple, Mozilla e Opera. Na \u00e9poca, o W3C estava trabalhando no padr\u00e3o XHTML 2.0 (que iria substituir o HTML 4.01) mas o WHATWG conseguiu propor um monde que acabou sendo o HTML 5. O HTML 5 foi recebido e amplamente adotado no desenvolvimento de aplica\u00e7\u00f5es hoje em dia. Panorama de uma Aplica\u00e7\u00e3o N\u00f3s j\u00e1 sabemos que um client faz uma requisi\u00e7\u00e3o ao web server por HTTP e esse, por sua vez, responde a requisi\u00e7\u00e3o com, normalmente, um arquivo HTML. De posse de arquivo, o browser consegue saber se precisar\u00e1 solicitar mais arquivos ao web server at\u00e9 que todas as refer\u00eancias do HTML sejam satisfeitas e a p\u00e1gina carregada. A grosso modo, podemos dizer que o HTML pode fazer men\u00e7\u00f5es a arquivos dos seguintes tipos: CSS Arquivos de Multim\u00eddia JavaScript RIA - Rich Internet Applications Applet Java Adobe Flash Adobe Air Adobe Flex SilverLight Se o site utiliza solu\u00e7\u00f5es din\u00e2micas como PHP, Java, Python, Ruby ou ASP.NET, quando a requisi\u00e7\u00e3o \u00e9 feita, o web server primeiro faz o processamento desses arquivos (normalmente por um outro servidor de APIs) e o resultado ser\u00e3o outros arquivos HTML, CSS, JS ou Multim\u00eddia. Ap\u00f3s o processamento, o resultado \u00e9 enviado para o client que ser\u00e1 atualizado pelo browser. Nas aplica\u00e7\u00f5es modernas, o seu browser est\u00e1 em processo praticamente cont\u00ednuo de intera\u00e7\u00e3o com o servidor e vice-versa. A Sintaxe da Linguagem HTML Uma p\u00e1gina HTML \u00e9 uma cole\u00e7\u00e3o de elementos . Voc\u00ea consegue identific\u00e1-los facilmente porque est\u00e3o entre os pares de s\u00edmbolos <> . Cada elemento tamb\u00e9m tem uma tag de abertura e uma de fechamento. Por exemplo: < body > Aqui vai o conte\u00fado do body </ body > Tamb\u00e9m existem elementos que n\u00e3o precisam do par de tags de abertura e fechamento. Por exemplo: < input disable name = 'Nome' value = 'rommelcarneiro' > Atente para o fato que alguns elementos aceitam outros elementos internamente. Por exemplo, dentro do elemento <body></body> n\u00f3s colocamos todos os outros elementos que compor\u00e3o a nossa p\u00e1gina web, como por exemplo, formul\u00e1rios, par\u00e1grafos, v\u00eddeos e etc. Ent\u00e3o se acostume de termos elementos dentro de outros elementos. Dentro de alguns elementos podem ser inseridas informa\u00e7\u00f5es e configura\u00e7\u00f5es por meio de par\u00e2metros que chamamos de atributos do elemento. Por exemplo, no elemento logo acima, temos os atributos name e value . Agora que sabemos o que s\u00e3o elementos e como eles s\u00e3o constru\u00eddos, podemos seguir para a organiza\u00e7\u00e3o de um documento HTML . Existe um padr\u00e3o em todo arquivo HTML onde existem alguns elementos obrigat\u00f3rios para o processamento da p\u00e1gina pelo browser do client. // html <!DOCTYPE html> -------------------------------> Elemento da vers\u00e3o do HTML < html lang = \"en\" > ------------------------------> Abertura do documento HTML < head > ------------------------------------> Abertura do cabe\u00e7alho < meta charset = \"UTF-8\" > ----------------> Atributo nome = \"valor\" < title > Document </ title > ---------------> Elemento de T\u00edtulo </ head > -----------------------------------> Fechamento do cabe\u00e7alho < body > ------------------------------------> Abertura do corpo < img src = \"logo.jpg\" > ------------------> Elemento de imagem </ body > -----------------------------------> Abertura do corpo </ html > ---------------------------------------> Fechamento do HTML Pre\u00e2mbulo Como podemos ver, primeiro temos o pre\u00e2mbulo DOCTYPE , seguido do <html> </html> onde temos outros dois elementos maiores, o cabe\u00e7alho ( <head> </head> ) e o corpo ( <body> </body> ). O pre\u00e2mbulo diz ao navegador qual vers\u00e3o da HTML ser\u00e1 usada. Se ele n\u00e3o for indicado, o navegador vai tentar ``adivinhar'' qual a melhor maneira de interpretar a sua p\u00e1gina (chamamos isso de quirks mode ). Caso voc\u00ea informe qual a vers\u00e3o, o browser usar\u00e1 o processamento adequado (chamamos de strict mode ). Os formatos do pre\u00e2mbulo mudam de acordo com a vers\u00e3o do HTML: HTML 5 <!DOCTYPE html> HTML 4.01 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"> HTML 1.0 <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> Cabe\u00e7alho \u00c9 a primeira parte dentro da tag de html. Nele est\u00e3o as informa\u00e7\u00f5es sobre o documento de modo a organizar as refer\u00eancias de funcionalidade que ser\u00e3o usadas para o processamento da p\u00e1gina web. Podemos resumir os elementos no cabe\u00e7alho como: title - <title> </title> Define o t\u00edtulo do documento. Que tamb\u00e9m afeta a aba do navegador. link - <link rel=\"relacao\" href=\"link_do_arquivo.extensao\"> Define as liga\u00e7\u00f5es externas como arquivos, scripts, CSS e etc. style - <link rel=\"stylesheet\" href=\"style.css\"> \u00c9 um tipo de link. Nele \u00e9 que vamos indicar qual o arquivo que reger\u00e1 o layout da nossa aplica\u00e7\u00e3o. meta - meta name=\"nome\" content=\"conteudo\"> Aqui teremos as informa\u00e7\u00f5es adicionais sobre a p\u00e1gina: codifica\u00e7\u00e3o de caracteres, descri\u00e7\u00e3o, palavras-chaves, autor e etc. Corpo A segunda parte do html \u00e9 o corpo. Nele \u00e9 onde colocamos o conte\u00fado que far\u00e1 parte da p\u00e1gina. Como \u00e9 muito comum de se encontrar nos sites, esse conte\u00fado pode vir mesclado em v\u00e1rias m\u00eddias como texto, imagens, v\u00eddeos, mapas e etc. Veremos com calma um pouco mais a frente. Elementos de Texto e Multim\u00eddia Como esse material tem o objetivo de ser para futuras consultas. Eu vou colocar as tags com um pequeno resumo mas n\u00e3o vou comentar muito sobre elas. Par\u00e1grafos e T\u00edtulos Elemento Tags T\u00edtulos <h1></h1>,...,<h6></h6> Par\u00e1grafo <p></p> Quebra de Linha <br> It\u00e1lico <i></i> Negrito <b></b> Import\u00e2ncia <strong></strong> C\u00f3digo-fonte <code></code> Texto pre-formatado <pre></pre> Cita\u00e7\u00f5es <blockquote></blockquote> Enquanto estamos montando a nossa p\u00e1gina html, devemos evitar usar os elementos dela para a formata\u00e7\u00e3o de layout da nossa solu\u00e7\u00e3o. \u00c9 altamente recomendado deixar toda essa responsabilidade para a nossa Cascading Style Sheets (CSS) e focar apenas no conte\u00fado textual da p\u00e1gina web. Listas Existem 3 tipos de listas em HTML. Listas ordenadas: // html < ol > < li > Primeiro item </ li > --------> 1. Primeiro item < li > Segundo item </ li > ---------> 2. Segundo item < li > Terceiro item </ li > --------> 3. Terceiro item </ ol > Lista n\u00e3o ordenada: // html < ul > < li > Primeiro item </ li > --------> o Primeiro item < li > Segundo item </ li > ---------> o Segundo item < li > Terceiro item </ li > --------> o Terceiro item </ ul > Lista de defini\u00e7\u00f5es: // html < dl > < dt > Termo 01 </ li > -------------> Termo 01 < dd > Defini\u00e7\u00e3o 01 </ li > ---------> Defini\u00e7\u00e3o 01 < dt > Termo 02 </ li > -------------> Termo 02 < dd > Defini\u00e7\u00e3o 02 </ li > ---------> Defini\u00e7\u00e3o 02 </ dl > Imagens // html < img width = \"200\" height = \"180\" src = \"img.png\" alt = \"Peixe\" > Links // html < a href = \"link.com\" target = \"_blank\" > Texto </ a > ------> Nova tab < a href = \"link.com\" target = \"_self\" > Texto </ a > -------> Mesma tab < a href = \"link.com\" target = \"_parent\" > Texto </ a > -----> Frame pai < a href = \"link.com\" target = \"_top\" > Texto </ a > --------> Janela atual < a href = \"link.com\" target = \"nome_frame\" > Texto </ a > --> Frame nominado Elementos Estruturais A partir da vers\u00e3o 4.0 o principal elemento usado para segmentar as partes de uma p\u00e1gina html passou a ser o <div> que \u00e9 um um elemento de divis\u00e3o gen\u00e9rico para agrupar qualquer conjunto de elementos necess\u00e1rios. Por exemplo: // html < div > < h1 > Titulo </ h1 > < p > Par\u00e1grafo pequeno </ p > < ol > < li > Item </ li > < li > Item </ li > </ ol > </ div > Na vers\u00e3o 5 do HTML passamos a ter v\u00e1rios tipos de elementos com a mesma fun\u00e7\u00e3o dos <div> mas agora com nomes mais f\u00e1ceis de usar. As vezes nos referimos a eles como elementos sem\u00e2nticos . O novos elementos sem\u00e2nticos apresentados na vers\u00e3o 5 do html s\u00e3o: Elementos Descri\u00e7\u00e3o <article> Define um artigo <aside> Conte\u00fado ao lado da p\u00e1gina <details> Detalhes adicionais <figcaption> T\u00edtulo para <figure> <figure> Elemento autocontido <footer> Rodap\u00e9 para se\u00e7\u00e3o <header> Cabe\u00e7alho para se\u00e7\u00e3o <main> Conte\u00fado principal <mark> Texto destacado <nav> Conte\u00fado de navega\u00e7\u00e3o <section> Se\u00e7\u00e3o do documento <summary> Resumo <time> Define data/hora Quando constru\u00edmos a estrutura do nosso site apenas com elementos <div> gen\u00e9ricos, n\u00f3s n\u00e3o estamos indicando nenhuma rela\u00e7\u00e3o entre essas se\u00e7\u00f5es. Quando usamos a divis\u00e3o via elementos sem\u00e2nticos, permitimos um processamento por algoritmos de modo a abrir todo um leque de possibilidades de intera\u00e7\u00f5es a partir disso. Esse \u00e9 um dos motivos que justificam o nome da web 3.0 como sendo web sem\u00e2ntica . Abaixo temos duas maneiras de representar uma estrutura de um site. A primeira em estrutura gen\u00e9rica de div e a outra em elementos sem\u00e2nticos. Veja como a segunda abordagem \u00e9 mais simples de ler. N\u00e3o \u00e9 dif\u00edcil perceber que o uso de elementos sem\u00e2nticos \u00e9 fortemente indicado para o desenvolvimento de aplica\u00e7\u00f5es web modernas. Elementos de Tabelas N\u00e3o \u00e9 nada incomum ter que demonstrar dados usando uma tabela. Pensando nisso, a linguagem HTML tamb\u00e9m possui um elemento especificamente criado para cria\u00e7\u00e3o de tabelas. Uma tabela pode ser criada com o uso das seguintes tags: // html < table border = \"1\" > --------------> Cria a Tabela < caption > T\u00edtulo </ caption > -> Coloca um T\u00edtulo < tr > ------------------------> Table Row (tr) < td > L1C1 </ td > -----------> Table Data Column 1 < td > L1C2 </ td > -----------> Table Data Column 2 </ tr > < tr > < td > L2C1 </ td > -----------> Table Data Column 1 < td > L2C2 </ td > -----------> Table Data Column 2 </ tr > </ table > Existem v\u00e1rios elementos que podem ser usados dentro de uma tabela. S\u00e3o os principais: Elementos Descri\u00e7\u00e3o <table> Elemento que cria a tabela <caption> T\u00edtulo da tabela <thead> Linhas do cabe\u00e7alho <tbody> Linhas do body <tfoot> Linhas do rodap\u00e9 <tr> Linha da tabela <th> Cabe\u00e7alho dentro de uma linha <td> Table data Coment\u00e1rio: N\u00e3o podemos cair na tenta\u00e7\u00e3o de usar tabelas como ferramenta de layout da p\u00e1gina. Pode at\u00e9 parecer mais simples no come\u00e7o mas tabelas n\u00e3o s\u00e3o boas para cria\u00e7\u00e3o de aplica\u00e7\u00f5es fluidas e din\u00e2micas. Elementos de Formul\u00e1rios Uma das intera\u00e7\u00f5es mais b\u00e1sicas que precisamos de um usu\u00e1rio \u00e9 a inser\u00e7\u00e3o de dados na aplica\u00e7\u00e3o. Dentre as v\u00e1rias maneiras de conseguirmos um dado inserido pelo usu\u00e1rio, o formul\u00e1rio \u00e9 a mais simples. O HTML fornece v\u00e1rios atributos dentro do elemento <form></form> que nos permite a criar campos de texto, bot\u00f5es clic\u00e1veis, campos de senha e etc. A sintaxe mais b\u00e1sica de um formul\u00e1rio \u00e9 dada por: // html < form name = \"form_name\" action = \"login.html\" method = \"POST\" > Usu\u00e1rio: < br > < input type = \"text\" name = \"user\" value = \"\" > < br > Senha: < br > < input type = \"password\" name = \"psw\" value = \"\" > < br > < br > < input type = \"submit\" value = \"OK\" > </ form > Podemos usar o atributo name ou id para identificar o nosso formul\u00e1rio 3 . O atributo action indica qual URL vai ser disparada uma vez processado o form (no nosso exemplo seria algo como http://server.com/login.html ). O atributo method indica o m\u00e9todo HTTP de submiss\u00e3o dos dados do formul\u00e1rio no nosso bando de dados (pode ser POST ou GET ). Quando o m\u00e9todo usado for o GET , o browser faz uma requisi\u00e7\u00e3o da URL indicada para o servidor passando os par\u00e2metros de input como querystring na URL. No nosso exemplo, ficaria como http://server.com/login.html/ login.html?user=texto&psw=123 . Quando o m\u00e9todo escolhido \u00e9 o POST , os dados s\u00e3o enviados ao servidor no corpo da requisi\u00e7\u00e3o HTTP e n\u00e3o aparecem na URL. A essa altura voc\u00ea j\u00e1 deve ser capaz de entender as diferen\u00e7as entre esses dois m\u00e9todos. Elemento <input> Esse elemento \u00e9 bastante utilizado na composi\u00e7\u00e3o dos formul\u00e1rios (na verdade, eu nem consigo pensar em um formul\u00e1rio sem pelo menos um input). Ele define os campos ou entradas de informa\u00e7\u00e3o e possui os seguintes atributos: type - Cada tipo de input possui uma visualiza\u00e7\u00e3o diferente quando a p\u00e1gina \u00e9 carregada. Isso \u00e9 feito para permitir uma melhor intera\u00e7\u00e3o do usu\u00e1rio de acordo com a natureza da informa\u00e7\u00e3o requerida. As op\u00e7\u00f5es s\u00e3o: text - Campo de texto aberto. A quantidade de caracteres pode ser controlada pelo atributo maxlength . number - S\u00f3 aceita n\u00famero como input e permite a sele\u00e7\u00e3o por umas setinhas que aparecem ao lado do campo. password - Igual ao campo texto mas com os caracteres anonimizados. email - Confere se o texto inserido possui um @ antes de salvar o formul\u00e1rio. date - Coloca uma m\u00e1scara no formato de data e cria uma op\u00e7\u00e3o de input por calend\u00e1rio. radio button - Uma op\u00e7\u00e3o clic\u00e1vel com um valor associado e um nome. O navegador s\u00f3 permite que um \u00fanico radio button esteja selecionado se existir mais de uma op\u00e7\u00e3o com o mesmo nome no atributo name . checkbox - Mesma l\u00f3gica do radio button mas com permiss\u00e3o de v\u00e1rios selecionados simultaneamente. submit - \u00c9 um bot\u00e3o clic\u00e1vel que normalmente dispara a informa\u00e7\u00e3o do formul\u00e1rio ao servidor web ou a um script JS local. reset - \u00c9 igual um submit mas a \u00fanica fun\u00e7\u00e3o dele \u00e9 apagar tudo que foi preenchido no formul\u00e1rio. name - Nome de identifica\u00e7\u00e3o do campo. value - Valor contudo no campo. placeholder - Valor que aparece quando o campo estiver vazio. required - Valida\u00e7\u00e3o autom\u00e1tica para evitar o n\u00e3o preenchimento do campo antes da submiss\u00e3o do form. disabled - Inativa o campo e n\u00e3o permite intera\u00e7\u00e3o mas o user ainda poder\u00e1 ver. Na imagem abaixo podemos ver como cada tipo do elemento <input> aparece para um usu\u00e1rio: Elemento <textarea> Esse \u00e9 tranquilo de entender. Sempre que precisarmos de um input de texto maior do que uma linha, podemos usar o elemento <textarea name=\"\" rows=\"10\" cols=\"50\"></textarea> para isso. \u00c9 poss\u00edvel alterar a quantidade de linhas e a n\u00famero de colunas para apresenta\u00e7\u00e3o da nossa caixa de texto apenas mudando os par\u00e2metros dos atributos. Elemento <select> Podemos permitir que o usu\u00e1rio selecione uma lista pr\u00e9-selecionada de op\u00e7\u00f5es atrav\u00e9s de uma lista em caixa (tamb\u00e9m chamada de dropdown menu ). Um exemplo de c\u00f3digo contendo esse elemento por ser visto abaixo. // html < label for = \"lista\" > Dropdown Menu </ label > < select name = \"lista\" > < option value = \"\" > Selecione uma op\u00e7\u00e3o </ option > < option value = \"01\" > Op\u00e7\u00e3o 01 </ option > < option value = \"02\" > Op\u00e7\u00e3o 02 </ option > < option value = \"03\" > Op\u00e7\u00e3o 03 </ option > < option value = \"04\" > Op\u00e7\u00e3o 04 </ option > < option value = \"05\" > Op\u00e7\u00e3o 05 </ option > </ select > \u00c9 poss\u00edvel transformar a lista suspensa em uma lista fixa que permite mais de uma sele\u00e7\u00e3o. Para fazer isso \u00e9 s\u00f3 adicionar o atributo multiple e tamb\u00e9m o atributo size= no elemento select . Perceba que al\u00e9m do elemento de lista n\u00f3s trouxemos um novo elemento chamado label que adiciona um texto associado a algum elemento. No nosso exemplo, veja como foi indicado no atributo for o mesmo nome que o atributo name recebe dentro do elemento select . O resultado pode ser visto abaixo: A Linguagem CSS N\u00f3s falamos na parte inicial do nosso estudo sobre HTML, mas especificamente na parte do cabe\u00e7alho, que uma das refer\u00eancias que normalmente fazemos \u00e9 a de uma Cascading Style Sheet (CSS) . A ideia por tr\u00e1s disso \u00e9 que a manuten\u00e7\u00e3o e o desenvolvimento da aplica\u00e7\u00e3o web fica mais simples quando trabalhamos todo o aspecto de estilo visual em um arquivo separado (.css) do arquivo que trata da estrutura da aplica\u00e7\u00e3o (.html). Contudo, na realidade, existem outras formas de trabalhar o visual da aplica\u00e7\u00e3o al\u00e9m do arquivo .css em separado. No geral, podemos dizer que existem 3 formas de gerenciamento de estilo de um aplica\u00e7\u00e3o web: CSS externo - Melhor forma. Nosso material estar\u00e1 focado nesse tipo de arquitetura. Bloco interno - As regras ficam no pr\u00f3prio arquivo html. Pode ter aplica\u00e7\u00f5es para quest\u00f5es muito espec\u00edficas. Mas as atualiza\u00e7\u00f5es v\u00e3o precisar ser feitas em cada p\u00e1gina, sempre que necess\u00e1rio. Atributo inline - Pior forma. Aqui, as regras de estilo s\u00e3o definidas diretamente no elemento html. Qualquer m\u00ednima altera\u00e7\u00e3o ter\u00e1 de ser feita diretamente no elemento e em todas as p\u00e1ginas. Aqui podemos ver um exemplo de cada aplica\u00e7\u00e3o do estilo visual que elencamos acima: // html <!DOCTYPE html> < html lang = \"en\" > < head > < title > Exemplo CSS </ title > ###Esse \u00e9 um exemplo de arquivo externo### < link rel = \"stylesheet\" href = \"style.css\" type = \"text/css\" > ###Exemplo de bloco interno#### < style type = \"text/css\" > p { font-size : 10 pt ; font-family : \"Verdana\" ; color : blue ; } h1 { font-size : 16 pt ; font-family : \"Impact\" ; color : red ; } </ style > </ head > < body > ####Exemplo de inline##### < p style = \"margin-left: 0.5in; font-size: 8pt;\" > Texto do par\u00e1grafo </ p > </ body > </ html > A prioridade de leitura das regras de estilo que o browser vai usar \u00e9 1) inline, 2) Bloco interno, 3) CSS externo e 4) Default do navegador. Sintaxe da linguagem CSS A leitura de um arquivo CSS \u00e9 bem simples. A primeira coisa que precisamos saber \u00e9 quais elementos est\u00e3o presentes no html que ser\u00e1 trabalhado e quais desses elementos possuem atribui\u00e7\u00e3o de id espec\u00edfico. Por exemplo, se tivermos no nosso html dois elementos <p> , s\u00f3 que um deles possui o atributo id <p id=\"teste\"> . Para criarmos uma regra de estilo no nosso CSS basta escrevermos a tag do elemento (sem os s\u00edmbolos <> ) do seguinte modo. // css p { color : red ; } Essa regra diz que todos os textos contidos nos elementos <p> ter\u00e3o a cor vermelha. Contudo, se quisermos adotar uma regra espec\u00edfica para apenas um elemento em quest\u00e3o, podemos definir a regra no css diretamente para o elemento com o seu id. // css # teste { color : black ; } Isso nos dar\u00e1 uma p\u00e1gina onde todos os textos dos par\u00e1grafos ser\u00e3o vermelhos \u00e0 exce\u00e7\u00e3o do par\u00e1grafo identificado pelo id=\"teste\" . Podemos resumir a sintaxe do CSS como sendo: // css seletor { propriedade_1 : valor_da_propriedade_1 ; propriedade_2 : valor_da_propriedade_2 ; ... propriedade_n : valor_da_propriedade_n ; } Ou seja, para aprender bem CSS, vamos precisar aprender as v\u00e1rias maneiras de selecionar os elementos da p\u00e1gina html e as propriedades de estilo que o CSS nos permite manipular na constru\u00e7\u00e3o das nossas aplica\u00e7\u00f5es web. Seletores de Elementos Eu j\u00e1 adianto, existem muitos tipos de seletores. N\u00f3s precisamos decorar todos os tipos? Evidente que n\u00e3o. O importante \u00e9 saber que o estilo de uma aplica\u00e7\u00e3o pode ser desenvolvido de v\u00e1rias maneiras e que, quanto melhor for o m\u00e9todo de organiza\u00e7\u00e3o do CSS, mais f\u00e1cil ser\u00e1 o desenvolvimento e a manuten\u00e7\u00e3o da aplica\u00e7\u00e3o no futuro. A tabela a seguir \u00e9 uma refer\u00eancia para os v\u00e1rios tipos de seletores em CSS. Tipo Link com HTML Exemplo de Sintaxe Elemento Nome da tag html p {color:blue;} Identificador id dos elementos #ident {color:blue;} Classe Classe dos elementos .classe {color:blue;} Atributo Atributos dos elementos [atrib] {color:blue;} [id=\"p01\"] {color:blue;} [class~=\"marked\" {color:blue;} Pseudo-Classe Situa\u00e7\u00f5es dos elementos p:first-of-type {color:blue;} p:nth-child(3) {color:blue;} :hover {color:blue;} Pseudo-Elemento Partes de elementos p::first-letter {color:blue;} p::first-time {color:blue;} p::after {color:blue;} Universal Todos os elementos * {color:blue;} Podemos ver que existem v\u00e1rios modelos de seletores para os elementos html de um p\u00e1gina. Alguns deles s\u00e3o dependente de contexto de intera\u00e7\u00e3o do elemento. Especialmente, as situa\u00e7\u00f5es de pseudo-classe s\u00e3o muito \u00fateis para cria\u00e7\u00e3o de aplica\u00e7\u00f5es fluidas e avan\u00e7adas. Link para lista de todos os pseudo-elementos e pseudo-classes suportados pelo CSS atualmente: link . Combina\u00e7\u00e3o de Seletores Podemos usar combina\u00e7\u00f5es de seletores para definir as regras de estilo das nossas aplica\u00e7\u00f5es web. Essas combina\u00e7\u00f5es obedecem a determinadas regras que devem ser seguidas para se obter o resultado esperado. Abaixo segue uma tabela de refer\u00eancia. Regra Interpreta\u00e7\u00e3o A,B {...} Aplica a mesma regra em A e B A.B {...} classes e ids associados \u00e0 A e B ao mesmo tempo A B {...} Elementos em B que tamb\u00e9m perten\u00e7am a A A > B {...} Elementos em B filhos de elementos de A A + B {...} Elemento em B pr\u00f3ximo irm\u00e3o de elementos de A A ~ B {...} Elementos em B pr\u00f3ximos irm\u00e3os de elementos de A Prioridade de Seletores O processamento das declara\u00e7\u00f5es CSS obedecem a ordem em 3 regras: O processamento \u00e9 de cima para baixo. A \u00faltima declara\u00e7\u00e3o \u00e9 a que prevalecer\u00e1. Regras espec\u00edficas s\u00e3o prioridade em rela\u00e7\u00e3o \u00e0 regras gerais. As declara\u00e7\u00f5es marcadas como importantes p {color: red !important;} s\u00e3o priorit\u00e1rias. Valores e Unidades Aten\u00e7\u00e3o aqui. Entender bem quais unidades podem ser usadas e os tipos de unidades ajuda muito o desenvolvimento de interfaces bem planejadas e responsivas. Aqui tem um link com um material de refer\u00eancia sobre esse assunto. Cores em CSS Existem infinitas combina\u00e7\u00f5es de cores para a paleta que ser\u00e1 usada em qualquer aplica\u00e7\u00e3o web. Existem diferentes maneiras de definir quais cores ser\u00e3o usadas em CSS: RGB hexadecimal - #RRGGBB RGB abreviado - #RGB RGB decimal - rgb(rrr,ggg,bbb) Palavras-Chaves Podemos usar qualquer uma dessas codifica\u00e7\u00f5es para definir as cores que vamos usar no estilo das nossas aplica\u00e7\u00f5es web. Display e Box Model Um dos aspectos mais importantes na constru\u00e7\u00e3o de uma aplica\u00e7\u00e3o web \u00e9 a disposi\u00e7\u00e3o dos elementos. Agora que aprendemos como a linguagem CSS nos fornece uma maneira mais simples de controlar as informa\u00e7\u00f5es de estilo da nossa p\u00e1gina HTML, vamos aprender como controlamos os locais onde os elementos s\u00e3o dispostos. A propriedade display \u00e9 que determina como um elemento e seus filhos s\u00e3o dispostos na p\u00e1gina. Alguns valores dessa propriedade se referem a maneira como o elemento \u00e9 organizado em rela\u00e7\u00e3o aos elementos irm\u00e3os e alguns valores se referem a maneira como seus elementos filhos s\u00e3o dispostos dentro do elemento pai. Caso n\u00e3o coloquemos nenhuma informa\u00e7\u00e3o de display nos elementos, eles possuem uma categoria default pr\u00f3pria que pode ser do tipo inline ou block . Os elementos inline s\u00e3o colocados automaticamente um ao lado do outro na mesma linha enquanto existir espa\u00e7o na tela. <a> <span> <img> <button> <input> etc Os elementos block sempre ocupam uma linha inteira da p\u00e1gina. <div> <h1> ... <h6> <p> <form> <canvas> <table> etc Mais ou menos como nessa imagem abaixo Podemos modificar o comportamento padr\u00e3o de um elemento atrav\u00e9s do par\u00e2metro display: no CSS. Por exemplo, para transformar os <input> em um elemento sozinho na p\u00e1gina, podemos colocar no CSS a seguinte linha // css input { display : block ; margin : 0 auto ; } No caso de elementos inside 4 , o atributo display pode receber os valores display=\"table\" , display=\"grid\" e display=\"flex\" . Quando colocamos esses atributos nos elementos inside, o elemento que o cont\u00e9m, que chamamos de elemento pai (outside), automaticamente vira um elemento do tipo display=\"block\" . A propriedade display=\"table\" em um elemento outside permite que os elementos inside recebam varia\u00e7\u00f5es desse atributo para a constru\u00e7\u00e3o de layout em formato de tabela. Desse modo, se nosso elemento outside \u00e9 do tipo display=\"table\" , ent\u00e3o, os elementos inside podem ser \"table-row\" , \"table-cell\" , \"table-column\" , \"table-caption\" , \"table-row-group\" , \"table-header-group\" e \"table-footer-group\" . A propriedade display=\"flex\" permite que os elementos inside sejam controlados de maneira fluida para se ajustar \u00e0 largura da janela do navegador. A propriedade display=\"grid\" permite um controle das regi\u00f5es onde os elementos inside ser\u00e3o dispostos. Isso d\u00e1 mais controle ao desenvolver. Veremos com mais calma os atributos display:flex e display:grid porque eles s\u00e3o usados na constru\u00e7\u00e3o de aplica\u00e7\u00f5es mais fluidas e din\u00e2micas. Box Model Existe um conjunto de atributos CSS que comp\u00f5e o que podemos chamar de box model . A ideia aqui \u00e9 que podemos trabalhar os elementos como pertencentes a uma ``caixa'' imagin\u00e1ria. Isso torna o design da aplica\u00e7\u00e3o mais simples de compreender e tamb\u00e9m facilita o posicionamento dos elementos ao longo da nossa p\u00e1gina. Os atributos CSS que comp\u00f5e o modelo de caixa s\u00e3o: margin border padding width height background-color As propriedades de margin , border e padding aceitam atributos de orienta\u00e7\u00e3o como top-right-bottom-left . Caso queira aplicar o mesmo valor para todos \u00e9 s\u00f3 informar um \u00fanico valor no atributo. Se quiser discriminar, \u00e9 s\u00f3 apontar os valores na ordem descrita no sentido hor\u00e1rio ou usar a propriedade inteira para cada lado. A imagem abaixo deixa mais f\u00e1cil a compreens\u00e3o do atributos do modelo de caixa. Durante a elabora\u00e7\u00e3o da interface n\u00e3o \u00e9 nada incomum usar as bordas como m\u00e9todo de visualiza\u00e7\u00e3o. O comando que cria a borda \u00e9 border: solid 20px black Fundo de Elementos (Background) Todo elementos html possui um atributo de background que pode ser acessado pelos seguintes comandos: background-color - Cor de fundo background-image - Imagem ou gradiente 5 background-repeat - Comando caso a img n\u00e3o seja do tamanho do elemento. Pode ser do tipo repeat , repeat-x , repeat-y , space , round background-position - Define a posi\u00e7\u00e3o inicial da imagem. Pode ser do tipo top , left , right , center , bottom Propriedades de Texto Existem v\u00e1rias propriedades quando o assunto \u00e9 texto em CSS. Abaixo podemos ver uma tabela para refer\u00eancia. Aqui tem um material bem completo fornecido pelo Mozilla Fontes de Texto na Web O CSS nos d\u00e1 as seguintes op\u00e7\u00f5es de letras: serif, sans-serif,monospace, cursive e fantasy. Contudo, n\u00f3s nunca teremos certeza se o navegados do user ter\u00e1 a capacidade de carregar a fonte que desejamos. Para evitar esse problema, podemos definir op\u00e7\u00f5es de fontes do seguinte modo: // css p { font-family : \"Trebuchet MS\" , Verdana , sans-serif ; } O navegador do user vai tenter renderizar a p\u00e1gina usando a primeira op\u00e7\u00e3o, caso ele n\u00e3o consiga, ele vai para as outras op\u00e7\u00f5es. Al\u00e9m das op\u00e7\u00f5es padr\u00e3o CSS, podemos usar fontes propriet\u00e1rias de outras fontes (Google Fonts, DaFont, Adobe e etc). A maneira de fazer isso \u00e9 definir uma propriedade de importa\u00e7\u00e3o como no exemplo abaixo // css @ import url ( 'https://fonts.googleapis.com/css?family=Baloo' ) ; div { font-family : 'Baloo' , cursive ; } Layouts Responsivos N\u00e3o \u00e9 nada incomum acharmos sites que respondem dinamicamente ao tamanho da tela. Agora vamos aprender um pouco sobre esse m\u00e9todo de desenvolvimento de aplica\u00e7\u00f5es web. O Responsive Web Design (RWD) \u00e9 a ferramenta que define o layout de um site de modo din\u00e2mico ao tamanho da tela ou janela do dispositivo. Para poder usar esse m\u00e9todo, n\u00f3s precisamos planejar nosso c\u00f3digo HTML e CSS de maneira compat\u00edvel com essa metodologia. Os principais padr\u00f5es de layout responsivos s\u00e3o. Por enquanto eu vou deixar esse se\u00e7\u00e3o mais enxuta: Mostly Fluid Column Drop Layout Shifter Off Canvas Tiny Tweaks Media Queries As media queries s\u00e3o os par\u00e2metros usados na aplica\u00e7\u00e3o que usam alguma caracter\u00edstica do dispositivo onde a p\u00e1gina est\u00e1 sendo exibida. Abaixo n\u00f3s podemos ver um exemplo de elemento HTML com media query. // html < head > < link rel = \"stylesheet\" media = 'screen and (min-width: 900px)' href = \"tela_g.css\" > < link rel = \"stylesheet\" media = 'screen and (max-width: 600px)' href = \"tela_p.css\" > </ head > Nesse exemplo HTML, podemos ver como, de acordo com o tamanho da tela, o arquivo de estilo CSS carregado vai ser o \"tela_g.css\" ou o \"tela_p.css\". Do lado do CSS, a sintaxe das media queries s\u00e3o usadas da seguinte maneira: // css body { background-color : red ; } @ media screen and ( min-width : 600px ) { body { background-color : orange ;} } @ media screen and ( min-width : 800px ) { body { background-color : yellow ;} } Podemos ver que, de acordo com a largura da tela, o CSS envia para o navegador uma cor de fundo do body diferente. Agora estamos come\u00e7ando a ver a l\u00f3gica por tr\u00e1s dos designs responsivos. As op\u00e7\u00f5es de media types s\u00e3o: all - Qualquer tipo de m\u00eddia handheld - Para telas responsivas ao toque print - Impressoras screen - Telas de computadores, smartphones e tablets outras As op\u00e7\u00f5es de media features s\u00e3o as caracter\u00edsticas dos dispositivos tais como: color - Profundidade de cores em bits color-index - N\u00famero de cores indexadas width e height - Largura e altura do viewport device-width e device-height - Largura e altura do dispositivo orientation - Propor\u00e7\u00e3o do viewport (portrait ou landscape) resolution - Resolu\u00e7\u00e3o de sa\u00edda em dpi Resolu\u00e7\u00e3o e Viewport Quando as tela mudam de tamanho, o valor do pixel tamb\u00e9m \u00e9 alterado. Para resolver esse problema, o CSS utiliza um m\u00e9todo de c\u00e1lculo que padroniza as medidas independentemente do tamanho da tela. Se nossa aplica\u00e7\u00e3o for desenvolvida para uma tela com 1920 pixels (full HD), podemos converter cada pixel em uma nova unidade que permita a aplica\u00e7\u00e3o recalcular os tamanhos dos componentes em pixels de modo a se adequar melhor ao display. No exemplo a abaixo, n\u00f3s estamos \"mudando\" o valor padr\u00e3o do pixel para caber em uma tela com 1/3 de 1920 (640 pixels): \\[ Viewport = \\dfrac{ \\textrm{Resolu\u00e7\u00e3o}}{ \\textrm{Pixel-Ratio}} = \\dfrac{1920}{3} = 640 \\ pixels \\] Para habilitar esse m\u00e9todo de ajuste, o HTML precisa ter a seguinte linha no head : // html < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > A Vantagem dessa abordagem \u00e9 que ela permite a manuten\u00e7\u00e3o da leitura quando nossa p\u00e1gina \u00e9 carregada por telas menores. Tamb\u00e9m podemos controlar a capacidade de rolagem e zoom do usu\u00e1rio por meio dessa meta tag. Layout Flex J\u00e1 aprendemos como reduzir a escala da nossa aplica\u00e7\u00e3o com o viewport. Mas, em telas de smartphones ou monitores pequenos, simplesmente reduzir a aplica\u00e7\u00e3o para caber no dispositivo pode n\u00e3o ser suficiente para uma boa experi\u00eancia. No Layout Flex (flexbox) n\u00f3s podemos definir o comportamento dos elementos html filhos dentro de um bloco maior. Nesse modelo, n\u00f3s conseguimos mudar o posicionamento relativo dos elementos filhos sempre que a tela se comportar de determinada maneira prevista (como o caso do nosso site ser aberto em uma tela de smartphone ao inv\u00e9s de um monitor). Para usar esse recurso, usaremos no elemento pai 6 o par\u00e2metro display: flex; flex-wrap: wrap; . Al\u00e9m de definirmos o tipo de display no elemento pai, usaremos a media query para ajustar o tamanho ideal dos elementos na tela. Podemos ver melhor no exemplo de c\u00f3digo abaixo: // html <!DOCTYPE html> < body > < main class = 'container' > < div id = \"orange\" ></ div > < div id = \"green\" ></ div > < div id = \"yellow\" ></ div > </ main > </ body > </ html > // css . container { display : flex ; flex-wrap : wrap ; } div { height : 80 px ; width : 100 % ; } /* tela pequena */ # orange { background-color : orange ; order : 1 ; } # green { background-color : green ; order : 2 ; } # yellow { background-color : yellow ; order : 3 ; } /* tela media */ @ media screen and ( min-width : 600px ) { # orange { width : 100 % } # green { width : 70 % } # yellow { width : 30 % } } /* tela grande */ @ media screen and ( min-width : 1000px ) { # orange { width : 40 % } # green { width : 40 % } # yellow { width : 20 % } } O resultado desses c\u00f3digos acima produzem o seguinte resultado: Layout Grid Para al\u00e9m das medias queries e layout flex, podemos construir o front end de uma aplica\u00e7\u00e3o usando o Sistema Grid que o CSS possui. A ideia \u00e9 pensar no front end da aplica\u00e7\u00e3o em termos de dois elementos visuais: O Container e os Itens. Coment\u00e1rio: Depois eu vou revisitar essa se\u00e7\u00e3o com base no material dispon\u00edvel nesse link . O sistema Grid possui alguns conceitos que nos ajudam a criar e manter a interface de uma aplica\u00e7\u00e3o que use essa metodologia: Line - Separa as cells Cell - \u00c9 uma unidade encapsulada em uma linha e uma coluna Area - Conjunto de cells Track - Um conjunto linear de cells (uma linha ou uma coluna do grid) Abaixo temos o c\u00f3digo de uma aplica\u00e7\u00e3o simples usando esse sistema de constru\u00e7\u00e3o de front end: // html < body > < div class = \"container\" > < header > Header </ header > < main > Main </ main > < nav > Sidebar </ nav > < footer > Footer </ footer > </ div > </ body > // css body { background-color : rgb ( 255 , 255 , 255 ); } . container { height : 700 px ; display : grid ; grid-template-columns : 20 % 30 % 30 % 19 % ; grid-template-rows : auto ; grid-template-areas : \"header header header header\" \"main main main sidebar\" \"footer footer footer footer\" ; column-gap : 5 px ; row-gap : 5 px ; } header { grid-area : header ; background-color : orange ; height : 100 px ; } main { grid-area : main ; background-color : blue ; height : 500 px ; } nav { grid-area : sidebar ; background-color : red ; height : 500 px ; } footer { grid-area : footer ; background-color : green ; margin : solid black 5 px ; height : 100 px ; } Com base nessa l\u00f3gica, podemos posicionar elementos usando o sistemas de coordenadas do CSS Grid. Vamos refazer a interface que acabamos de ver usando apenas esse conceito de \"items\" dentro de um \"container\". Ao inv\u00e9s de definir a separa\u00e7\u00e3o da tela como par\u00e2metro da classe container no CSS, n\u00f3s vamos criar o container e orientar, dentro de cada item, como ele se comportar\u00e1 no grid. // html < body > < div class = \"container\" > < div class = \"item-a\" > Header </ div > < div class = \"item-b\" > Main </ div > < div class = \"item-c\" > Nav </ div > < div class = \"item-d\" > Footer </ div > </ div > </ body > // css body { background-color : rgb ( 255 , 255 , 255 ); } . container { height : 700 px ; display : grid ; grid-template-columns : 24 % 25 % 25 % 25 % ; grid-template-rows : 10 % 80 % 10 % ; grid-column-gap : 5 px ; grid-row-gap : 5 px ; } . item-a { background-color : orange ; grid-column-start : 1 ; grid-column-end : span 4 ; grid-row-start : 1 ; grid-row-end : 1 ; } . item-b { background-color : blue ; grid-column-start : 1 ; grid-column-end : span 3 ; grid-row-start : 2 ; grid-row-end : 2 ; } . item-c { background-color : red ; grid-column-start : 4 ; grid-column-end : 4 ; grid-row-start : 2 ; grid-row-end : 2 ; } . item-d { background-color : green ; grid-column-start : 1 ; grid-column-end : span 4 ; grid-row-start : 3 ; grid-row-end : 3 ; } Nem vale a pena mostrar uma imagem do resultado porque ele \u00e9 exatamente igual \u00e0 imagem anterior. Com isso, podemos ver que \u00e9 o desenvolvimento de uma interface de aplica\u00e7\u00e3o web pode ser feito de diferentes maneiras, mas o que realmente importa \u00e9 uma boa documenta\u00e7\u00e3o e um planejamento bem feito para que o cliente termine com o que ele realmente precisa e o time de desenvolvimento n\u00e3o precise perder preciosas horas no bem conhecido ciclo de ``vai-e-volta'' at\u00e9 que o cliente aceite algum layout. Exemplo de Aplica\u00e7\u00e3o Web Responsiva Para finalizar nosso estudo de desenvolvimento web com CSS vamos fazer uma aplica\u00e7\u00e3o simples. O prot\u00f3tipo no MarvelApp pode ser visto nesse link . Coment\u00e1rio: Acredite, com os conceitos aprendidos at\u00e9 agora n\u00f3s j\u00e1 conseguimos fazer aplica\u00e7\u00f5es simples com p\u00e1ginas est\u00e1ticas com relativa facilidade. A prova disso \u00e9 que enquanto escrevo esse par\u00e1grafo acabamos de criar a primeira p\u00e1gina da aplica\u00e7\u00e3o web front end que meu grupo precisa entregar como projeto do primeiro semestre da gradua\u00e7\u00e3o. Eu usei, basicamente, apenas o que aprendemos aqui e alguma pesquisa no google para coisas mais simples. Frameworks front-end - Bootstrap Como era de se esperar, os programadores perceberam que era poss\u00edvel combinar v\u00e1rias pr\u00e1ticas do mercado em \"pacotes\",\"bibliotecas\" ou \"frameworks\" que, no fundo, s\u00e3o c\u00f3digos escritos em HTML, CSS e JavaScript. Essas ferramentas facilitam demais o processo de desenvolvimento mas, como tudo na vida, precisam ser usadas com modera\u00e7\u00e3o e habilidade. N\u00e3o podemos correr o risco de virarmos \"escravos\" de nenhum framework. Com o devido aviso dado, podemos iniciar nosso estudo de Frameworks famosos com o Boostrap. A culpa de v\u00e1rias sites que acessamos terem um \"jeit\u00e3o\" parecido \u00e9, em boa parte, desse framework que at\u00e9 hoje \u00e9 o mais famoso. Foi desenvolvido em 2011 por Mark Otto e Jacob Thornton no Twitter e disponibilizado no GitHub. O Bootstrap se ajusta automaticamente a diferentes modelos de tela porque tem, dentro dele, tamanhos pr\u00e9-determinados de telas que se ajustam ao dispositivo. A \"fronteira\" entre os tamanhos de tela s\u00e3o os chamados Breakpoints . A tabela abaixo resume as rela\u00e7\u00f5es entre tamanho da tela e ajuste do container da aplica\u00e7\u00e3o. O site oficial pode ser acessado nesse link . Extra Small Small Medium Large Extra Large <57px \\(\\geq\\) 576px \\(\\geq\\) 768px \\(\\geq\\) 992px \\(\\geq\\) 1200px Max container size (auto) 540px 720px 960px 1140px Nome da Classe .col- .col-sm- .col-md- .col-lg- .col-xl- Download do Bootstrap Existem duas op\u00e7\u00f5es de download desse Framework: CSS e JS compilados - J\u00e1 vem pronto pra uso mas \u00e9 um pouco limitado. C\u00f3digo Fonte - Permite customiza\u00e7\u00e3o e vem com as fontes do Bootstrap mas precisa de compila\u00e7\u00e3o. Para saber como fazer basta uma pesquisa r\u00e1pida no youtube. Conte\u00fado do Boostrap A melhor fonte sobre qualquer tecnologia geralmente \u00e9 a pr\u00f3pria documenta\u00e7\u00e3o oficial . Mas podemos dividir as partes do Bootstrap em: Reboot - Para uniformiza\u00e7\u00e3o da apar\u00eancia em diferentes navegadores Tipografia - Textos e fontes Code - Linhas de c\u00f3digo Images - Relacionado aos recursos de imagens Tables - Relacionado aos recursos de tabelas Figures - Imagens com textos associados Componentes do Boostrap N\u00f3s j\u00e1 sabemos que o HTML possui uma l\u00f3gica de estrutura\u00e7\u00e3o da p\u00e1gina. Contudo, quando estamos usando o Bootstrap temos que ``reaprender'' como pensar nossa estrutura da p\u00e1gina a partir dos conceitos e modelos do framework. Para o Bootstrap, a p\u00e1gina \u00e9 criada usando-se componentes . A lista \u00e9 bem grande mas podemos destacar alguns: Breadcrumb - Trilha com o caminho do site at\u00e9 uma p\u00e1gina Navbar - Barra de menu e pesquisa Carousel - Conjunto rotativo de imagens em destaque no site Cards - Cart\u00f5es para uso diverso. Podem ser imagens ou texto Modal - Caixas de di\u00e1logo (tipo um popup s\u00f3 que dentro da p\u00e1gina) Sistema Grid no Bootstrap Como n\u00f3s j\u00e1 sabemos, o sistema grid \u00e9 uma maneira conveniente de controlarmos a estrutura visual da nossa aplica\u00e7\u00e3o. Diante disso, n\u00e3o \u00e9 surpreendente que esse framework tamb\u00e9m use uma vers\u00e3o dessa l\u00f3gica. Para o Bootstrap, todas as p\u00e1ginas ser\u00e3o sempre divididas em 12 colunas. Quando um elemento est\u00e1 dentro de outro, o padr\u00e3o de 12 colunas se mant\u00e9m. A l\u00f3gica de divis\u00e3o \u00e9 como na imagem abaixo: O c\u00f3digo HTML usando o Bootstrap \u00e9 fortemente baseado em <div> . A novidade est\u00e1 no uso de classes espec\u00edficas que d\u00e3o a l\u00f3gica contida nos arquivos usados pelo framework. A hierarquia \u00e9 similar ao grid system porque a aplica\u00e7\u00e3o existira dentro de um container. O Container ter\u00e1 pelo menos uma linha (row). Cada linha ter\u00e1 pelo menos uma coluna. Internalize essa hierarquia de Container, Linhas e Colunas. // html < div class = \"row\" > < div class = \"col-md-6\" id = \"cel1\" > .col-md-6 </ div > < div class = \"col-md-6\" id = \"cel2\" > .col-md-6 </ div > </ div > < div class = \"row\" > < div class = \"col-md-2\" id = \"cel1\" > .col-md-2 </ div > < div class = \"col-md-10\" id = \"cel2\" > .col-md-10 </ div > </ div > < div class = \"row\" > < div class = \"col-md-9\" id = \"cel1\" > .col-md-9 </ div > < div class = \"col-md-3\" id = \"cel2\" > .col-md-3 </ div > </ div > // css # cel1 { color : white ; background-color : red ; height : 100 px ; border : solid black 3 px ; } # cel2 { color : white ; background-color : blue ; height : 100 px ; border : solid black 3 px ; } Na pr\u00f3xima imagem podemos ver o resultado desse c\u00f3digo. O sistema de 12 colunas md-1 torna bem simples a disposi\u00e7\u00e3o dos conte\u00fados na tela. A Linguagem JavaScript J\u00e1 aprendemos que a Web utiliza a linguagem HTML para estrutura do conte\u00fado, a linguagem CSS para formato e apresenta\u00e7\u00e3o. Contudo, n\u00f3s sabemos que hoje em dia as aplica\u00e7\u00f5es possuem fun\u00e7\u00f5es bem complexas com sistemas inteiros baseados todo no navegador do client. A linguagem JavaScript \u00e9 justamente o mecanismo que tr\u00e1s essa capacidade de interatividade e processamento para \u00e0 web. Hoje em dia, a linguagem JavaScript (tamb\u00e9m chamada de JS) \u00e9 mantida pela ECMA International . Uma organiza\u00e7\u00e3o su\u00ed\u00e7a criada em 1961 cujas atividades s\u00e3o separadas em v\u00e1rios campos de atua\u00e7\u00e3o. Um desses campos \u00e9 a padroniza\u00e7\u00e3o de linguagens de programa\u00e7\u00e3o. Atualmente, ela elabora os padr\u00f5es para as linguagens ECMAScript (TC39), C# (TC49) e outras. Sim, \u00e9 isso mesmo. Nada de JavaScript. O JS foi criado em 1995 por Brendan Eich mas em 1996 foi transferido para a ECMA para padroniza\u00e7\u00e3o. O primeiro padr\u00e3o JS dentro do ECMAScript foi feito em 1997. Como consta na edi\u00e7\u00e3o 2020 do padr\u00e3o \"O ECMAScript \u00e9 baseado em v\u00e1rias tecnologias cujas mais conhecidas s\u00e3o o JavaScript (Netscape) e JScript (Microsoft)\". O ECMAScript foi adotado na maioria dos navegadores desde o final dos anos 90. Hoje em dia, praticamente todos os navegadores adotam o padr\u00e3o ECMAScript e, consequentemente, o JavaScript dentro deles. A ECMA International cria os padr\u00f5es e especifica\u00e7\u00f5es que permitam a execu\u00e7\u00e3o de uma determinada linguagem. O JS \u00e9 a implementa\u00e7\u00e3o dessas padroniza\u00e7\u00f5es dentro dos navegadores do mercado. Tanto \u00e9 assim, que diferentemente do que acontece com as outras linguagens como Python, R e etc, voc\u00ea n\u00e3o precisa instalar um interpretador ou um compilador para rodar c\u00f3digos em JS. Os navegadores possuem, dentro deles, um motor pr\u00f3prio que executa o padr\u00e3o ECMAScript. Para citar alguns desses motores: Navegador Motor Web Motor ECMAScript Firefox Gecko Spider Monkey Chrome Blink Google V8 Safari WebKit JavaScriptCore IE Trident Chakra Core Edge EDGE Chakra Core Opera Blink Coment\u00e1rio: N\u00e3o confunda a linguagem de programa\u00e7\u00e3o Java com JavaScript. S\u00e3o linguagens totalmente diferentes. Aplica\u00e7\u00e3o da Linguagem JavaScript Da mesma maneira que vimos com o CSS, podemos trazer o JS para nossa aplica\u00e7\u00e3o web de diferentes maneiras: Por arquivo externo - C\u00f3digo \u00e9 mantido em um arquivo separado // js < script type = \"text/javascript\" src = \"script.js\" >< /script> Em Bloco interno - C\u00f3digo fica em um bloco dentro do HTML // js < script type = \"text/javascript\" > /* C\u00f3digo JS */ alert ( \"Ol\u00e1 mundo!\" ); < /script> Inline - C\u00f3digo fica dentro de um atributo do elemento HTML // js < p onClick = \"alert('Click feito!');\" >< /p> Agora que sabemos que podemos \"turbinar\" nossas p\u00e1ginas web com o uso de JS, podemos nos perguntar o que pode ser feito com essa ferramenta. A resposta \u00e9 praticamente qualquer coisa! Podemos elencar como principais aplica\u00e7\u00f5es: Manipula\u00e7\u00e3o de objetos e tratamento de eventos relacionados aos elementos HTML a partir do uso de uma API chamada DOM (Documento Object Model). Comunica\u00e7\u00e3o com servidores e utiliza\u00e7\u00e3o de APIs via AJAX usando o XMLHttpRequest ou na API Fetch Armazenamento de dados no client com o uso das APIs Indexed DB e LocalStorage/SessionStorage Usar as APIs do HTML5: Canvas, Media, File, Drag and Drop, Geolocation, Web Workers, History JavaScript al\u00e9m do Browser As pessoas gostaram tanto de JS que foram capazes de construir uma aplica\u00e7\u00e3o que implementa o v8 do chrome fora do browser. Isso mesmo, podemos rodar aplica\u00e7\u00f5es em JS direto no terminal do seu computador. Basta usar a aplica\u00e7\u00e3o Node.js . Hoje em dia, d\u00e1 pra fazer uma aplica\u00e7\u00e3o inteira, backend e frontend com JS. Com JS podemos tamb\u00e9m construir aplica\u00e7\u00f5es desktop usando uma biblioteca chamada Electron . Esse aqui \u00e9 apenas o come\u00e7o da nossa caminhada! Vari\u00e1veis e Tipos de Dados A linguagem JS \u00e9 de tipagem din\u00e2mica. Ent\u00e3o o tipo de vari\u00e1vel \u00e9 definido pela pr\u00f3pria linguagem na hora da atribui\u00e7\u00e3o do valor. Temos dois tokens de atribui\u00e7\u00e3o em JS var ou let . // js var variavel01 ; // Aqui eu declarei sem atribuir nada var x = 10 ; // x agora \u00e9 um num\u00e9rico de valor 10 let y = \"Ol\u00e1 mundo\" // y \u00e9 uma string Agora temos que entender o motivo de termos dois tokens de atribui\u00e7\u00e3o. Mas, para poder explicar isso, precisamos entender que existem diferentes escopos de vari\u00e1veis quando um programa em JS \u00e9 executado. Os escopos das vari\u00e1veis em JS s\u00e3o: Escopo Global - Vari\u00e1veis sempre dispon\u00edveis para consulta e edi\u00e7\u00e3o Escopo Local - Vari\u00e1veis existem apenas dentro de um bloco de c\u00f3digo (um loop ou uma condicional, por exemplo) As vari\u00e1veis declaradas com var s\u00e3o de escopo global se forem declaradas fora de fun\u00e7\u00f5es (Nesse caso s\u00e3o de escopo local). J\u00e1 a atribui\u00e7\u00e3o feita com let \u00e9 de escopo local . Abaixo temos um exemplo bem bacana mostrando essas diferen\u00e7as. // js var a = 5 ; var b = 10 ; if ( a === 5 ) { let a = 4 ; var b = 1 ; console . log ( a ); console . log ( b ); } > Mostra 4 e 1 no console console . log ( a ); console . log ( b ); > Mostra 5 e 1 no console Coment\u00e1rio: Uma boa pr\u00e1tica em JS (e em praticamente todas as linguagens) \u00e9 sempre declarar as vari\u00e1veis na parte de cima de cada bloco ou no come\u00e7o do c\u00f3digo. Tamb\u00e9m \u00e9 poss\u00edvel usar o token const para atribui\u00e7\u00e3o. Esse token funciona igual ao let e \u00e9 definido para constantes. Uma boa pr\u00e1tica da comunidade \u00e9 usar letra mai\u00fasculas para definir suas constantes. Tipos e Estruturas de Dados Todas as vari\u00e1veis que s\u00e3o n\u00fameros, textos (strings) ou valores booleanos (true ou false) s\u00e3o o que chamamos de tipo Primitivo . As vari\u00e1veis especiais do tipo nulo (null) ou indefinido (undefined) s\u00e3o possuem caracter\u00edsticas de tipo primitivo mas podem ser entendidas como sendo de um tipo \u00fanico especial. No ECMAScript 6 foi inserida uma nova categoria de vari\u00e1veis chamadas de tipo Simb\u00f3lico ou Symbol (N\u00e3o vamos nos aprofundar nisso agora. Depois eu atualizo esse material com o ECMAScript 6.). O que n\u00e3o for de tipo primitivo, null, undefined ou symbol, ser\u00e1 do tipo Objeto que possui uma lista de propriedades, que por sua vez, possuem um nome e valores associados. Podemos resumir o que acabamos de ver como: Tipo Num\u00e9rico JS n\u00e3o faz diferen\u00e7a entre n\u00fameros inteiros ou fracionados. Para essa linguagem, tudo \u00e9 considerado o que chamamos de ponto flutuante de 64 bits. O valor m\u00e1ximo poss\u00edvel \u00e9 acessado pela propriedade do objeto Number por meio das propriedades Number.POSITIVE_INFINITY e Number.NEGATIVE_INFINITY \". Quando tentamos fazer uma opera\u00e7\u00e3o matem\u00e1tica n\u00e3o poss\u00edvel (como raiz de -1) recebemos o resultado NaN que significa Not-a-Number. N\u00e3o \u00e9 incomum termos que converter caracteres do tipo texto mas que representam n\u00fameros. Para isso, podemos usar a fun\u00e7\u00e3o nativa parseInt ou parseFloat . Tipo Boolean Os operadores booleanos s\u00e3o operadores que apenas admitem duas entradas: true ou false . Podemos chamar essas entradas diretamente ou atrav\u00e9s de opera\u00e7\u00f5es l\u00f3gicas usando operadores l\u00f3gicos ou matem\u00e1ticos. Abaixo temos uma tabela que podemos usar de refer\u00eancia. Operador Exemplo Observa\u00e7\u00e3o Mesmo valor x == y true se mesmo valor Mesmo valor e tipo x === y true se mesmo valor e tipo Diferente valor x !== y true se diferente valor Maior que x > y true se x maior que y Menor que x < y true se x menor que y Maior igual x >= y true se maior igual Menor igual x <= y true se menor igual Nega\u00e7\u00e3o !x true se x for false And x && y true se x e y forem true Or x || y true se x ou y forem true Tipo String Qualquer aplica\u00e7\u00e3o precisa ser capaz de lidar com textos. Uma string \u00e9 exatamente uma cadeia de caracteres n\u00e3o num\u00e9ricos (mas caracteres num\u00e9ricos tamb\u00e9m podem compor uma string) que pode ser declarada por meio de aspas simples \"abc\" ou compostas 'abc'. Tamb\u00e9m \u00e9 comum precisarmos juntar diferentes strings. No javascript, podemos fazer isso simplesmente usando o operador de soma: // js str = 'abc' + 'def' console . log ( str ) > abcdef Alguns caracteres das nossas strings podem ser os mesmos usados na pr\u00f3pria linguagem. Isso nos obriga a termos que aprender como fazer um \"bypass\" desses caracteres. Abaixo temos uma tabela para refer\u00eancia. C\u00f3digo Significado \\(\\backslash\\) 0 Null \\(\\backslash\\) ' Aspas simples \\(\\backslash\\) \" Aspas compostas \\(\\backslash \\backslash\\) Barra invertida \\(\\backslash\\) n Nova linha \\(\\backslash\\) r Retorno \\(\\backslash\\) v Tabula\u00e7\u00e3o Vertical \\(\\backslash\\) t Tabula\u00e7\u00e3o \\(\\backslash\\) b Backspace \\(\\backslash\\) f form feed \\(\\backslash\\) uXXXX Unicode \\(\\backslash\\) xXX Latin-1 A partir do ECMAScript6 existe outra maneira de compor strings: por meio do uso da crase isso \u00e9 uma string . A vantagem desse m\u00e9todo, chamado de TemplateString \u00e9 que esse tipo de string \u00e9 especial que pode receber express\u00f5es interpret\u00e1veis como no exemplo abaixo: // js nome = \"bruno\" console . log ( nome ) > bruno linha = `meu nome \u00e9 ${ nome } ` console . log ( linha ) > meu nome \u00e9 bruno Podemos ver que na \u00faltima linha o resultado faz uso do valor da vari\u00e1vel nome . Provavelmente, sempre que a gente entra em um site que possui aquela mensagem amig\u00e1vel de \"Seja bem vindo, Fulano\", o programador usou essa fun\u00e7\u00e3o para produzir aquele texto. Tipo Objeto Objetos s\u00e3o uma boa parte do que faz o JS ser t\u00e3o poderoso. Cada objeto \u00e9 simplesmente uma cole\u00e7\u00e3o de pares nome-valor. Os nomes s\u00e3o as propriedades do objeto e os valores podem ser qualquer tipo de vari\u00e1vel que vimos logo antes (incluindo outros objetos e fun\u00e7\u00f5es). Quando a propriedade for uma fun\u00e7\u00e3o, dizemos que essa fun\u00e7\u00e3o \u00e9 um m\u00e9todo do objeto. // js var objeto1 = new Object (); // Criando o objeto \"objeto1\" objeto1 . name = \"bruno\" ; // modo 1 de criar uma propriedade objeto1 [ \"age\" ] = 28 ; // modo 2 de criar uma propriedade console . log ( objeto1 ) > { age : 28 , name : bruno } var objeto2 = { // modo de criar o objeto nome : \"bruno\" , // junto das propriedades idade : 28 } console . log ( objeto2 ) > { nome : bruno , idade : 28 } Para acessar o valor de uma propriedade em um objeto basta escrever algo como: objeto.propriedade (Python \u00e9 assim tamb\u00e9m). Datas e Horas Na elabora\u00e7\u00e3o de uma aplica\u00e7\u00e3o \u00e9 comum ter que lidar com var\u00e1veis do relacionadas ao tempo. Para isso o JS possui um tipo de objeto especialmente projetado para facilitar essa tratativa. O objeto Date() . Podemos usa-lo como: // js var a = new Date () // Atribui a data atual ao objeto var c = new Date ( string ) // Atribui a data por uma string var d = new Date ( Ano , Mes , Dia , Hora , Segundo , Milisegundos ) Geralmente estamos preocupados apenas com o dia, m\u00eas e ano. Para criar um objeto com esses valores basta ir colocando na mesma ordem do \u00faltimo elemento do exemplo acima. Aviso: Quando voc\u00ea for indicar o m\u00eas, saiba que para o JS, janeiro \u00e9 0 e dezembro \u00e9 11. Ent\u00e3o quando quisermos salvar a data 01/01/2022 usaremos Date(2022,0,1) . Como todo objeto, a vari\u00e1vel criada com o Date() possui v\u00e1rias propriedades e m\u00e9todos. Uma boa refer\u00eancia \u00e9 o material do MDN que pode ser visto aqui . Mas podemos elencar alguns m\u00e9todos importantes como: // js var z = new Date () z . getFullYear () z . getMonth () z . getDate () z . getDay () z . getHours () z . getMinutes () z . getSeconds () z . getMillisecondes () z . getTimes () Acho que n\u00e3o \u00e9 necess\u00e1rio explicar cada m\u00e9todo desse porque o nome \u00e9 bem alto explicativo. Arrays, Vetores ou Matrizes Um array \u00e9 uma estrutura de dados semelhante a uma lista. Em JS temos algumas maneiras de criar arrays: // js /* Modo 01 */ var a = new Array () a [ 0 ] = 'valor01' a [ 1 ] = 'valor02' /* Modo 02 */ var b = new Array ( 'valor01' , 'valor02' ) /* Modo 03 */ var c = [ 'valor01' , 'valor02' ] Todos os 3 modos produzem o mesmo resultado e podem ser usados alternadamente. Como qualquer objeto, existem v\u00e1rios m\u00e9todos muito \u00fateis dentro de um Array(). // js concat () // Junta dois ou mais vetores fill () // Preencher os elementos em um vetor com um valor est\u00e1tico find () // Retorna o valor do primeiro elemento em um vetor que atender ao filtro findIndex () // Retorna o \u00edndice do primeiro elemento em um vetor forEach () // Chama uma fun\u00e7\u00e3o para cada elemento do vetor indexOf () // Busca um elemento no vetor e retorna a sua posi\u00e7\u00e3o isArray () // Verifica se um objeto \u00e9 um vetor join () // Junta todos os elementos de um vetor em uma string lastIndexOf () // Pesquisar o vetor por um elemento, come\u00e7ando no final pop () // Remove o \u00faltimo elemento de um vetor e retorna o elemento push () // Adiciona novos elementos para o final de um vetor reverse () // Inverte a ordem dos elementos em um vetor slice () // Seleciona uma parte de um vetor e retorna o novo vetor sort () // Classifica os elementos de um vetor splice () // Adiciona/remove elementos de um vetor toString () // Converte um vetor em uma string e retorna o resultado valueOf () // Retorna o valor primitivo de um vetor Coment\u00e1rio: Eu achei estranho que o material n\u00e3o falou nada sobre vetor e matriz. Ent\u00e3o uma hora eu volto para expandir essa parte com esses outros dois tipos de dados. Controle de Fluxo Em qualquer linguagem de programa\u00e7\u00e3o 7 existem maneiras de organizar blocos de c\u00f3digo para o compilador/interpretador saber o que priorizar na hora do processamento do c\u00f3digo. Em JS isso \u00e9 feito com o uso das chaves { }. Declara\u00e7\u00f5es de Sele\u00e7\u00e3o Quando estamos fazendo um script de c\u00f3digo, \u00e9 muito comum termos que nos adaptar as situa\u00e7\u00f5es onde determinados eventos podem ou n\u00e3o acontecer. Para isso, usamos algumas estruturas l\u00f3gicas que permitem o processamento de blocos de texto apenas se alguma condi\u00e7\u00e3o predeterminada seja satisfeita. Ou seja, usamos um condicionante do tipo \"Se-Ent\u00e3o\". // js if ( expressao ) { bloco de codigo caso true } else { outro bloco de codigo caso false } Existem situa\u00e7\u00f5es onde existem m\u00faltiplas possibilidades. Pensando nisso, o JS possui um operador de switch que permite v\u00e1rios condicionantes de maneiras mais simples do que v\u00e1rios if s sucessivos. // c# switch ( expressao ) { case valor01 : bloco_se_01 break case valor02 : bloco_se_02 break default : bloco_se_nao_01_ou_02 break } Veja que usamos o token break para indicar que vamos para outra condicional. N\u00e3o podemos esquecer disso. Abaixo temos um exemplo de uma aplica\u00e7\u00e3o simples usando esse m\u00e9todo de gest\u00e3o de fluxo. N\u00e3o se preocupe em entender o c\u00f3digo inteiro, foque apenas no que estamos estudando. // js // Fun\u00e7\u00e3o que recebe um input no terminal const readLine = require ( 'readline' ). createInterface ({ input : process . stdin , output : process . stdout }) readLine . question ( 'Qual seu nome? ' , name => { switch ( name ) { case 'bruno' : console . log ( `OI, BRUNO!` ) break case 'mario' : console . log ( 'Salve, Mario!' ) break default : console . log ( `Ol\u00e1, ${ name } . Seja bem-vindo(a)!` ) } readLine . close () }) > Qual seu nome ? bruno > OI , BRUNO ! > Qual seu nome ? mario > Salve , Mario ! > Qual seu nome ? pedro > Ol\u00e1 , pedro . Seja bem - vindo ( a ) ! Declara\u00e7\u00f5es de Repeti\u00e7\u00e3o Al\u00e9m de termos tokens que nos permitem executar apenas alguns blocos de c\u00f3digo. Existem outros que nos permitem usarmos um mesmo bloco de c\u00f3digo repetidamente. Chamamos essas estruturas l\u00f3gicas de la\u00e7os de repeti\u00e7\u00e3o. A primeira maneira de criarmos um la\u00e7o de repeti\u00e7\u00e3o em JS \u00e9 por meio do token while do seguinte modo: // js // Exemplo de loop com while var i = 0 while ( i <= 5 ) { console . log ( `Contagem: ${ i } ` ) i ++ // soma + 1 ao valor de i } > Contagem : 0 > Contagem : 1 > Contagem : 2 > Contagem : 3 > Contagem : 4 > Contagem : 5 Primeiro criamos a vari\u00e1vel i e usamos a estrutura de loop while para a seguinte regra \"Se i for menor igual a 5 ent\u00e3o mostre a mensagem 'Contagem: N\u00famero i'\". Quando o valor da vari\u00e1vel i \u00e9 6, a express\u00e3o do loop retorna um false e sa\u00edmos do loop. O operador que aprendemos anteriormente faz um loop enquanto a condi\u00e7\u00e3o expressa entre os par\u00eanteses n\u00e3o for false. Mas existem situa\u00e7\u00f5es onde queremos executar o bloco de c\u00f3digo um n\u00famero definido de vezes. Para isso o JS possui o token for . // js // Exemplo de loop com for let frutas = [ 'pera' , 'uva' , 'maca' , 'banana' ] for ( let index = 0 ; index < frutas . length ; index ++ ) { console . log ( frutas [ index ]) } > pera > uva > maca > banana Nesse exemplo acima vemos que o par\u00eanteses da express\u00e3o do for possui 3 linhas de c\u00f3digos separadas por ponto e v\u00edrgula. Na primeira, criamos uma vari\u00e1vel index. Na segunda, temos a nossa express\u00e3o que avalia se o index \u00e9 menor que o tamanho do array frutas. E na terceira, temos a regra de incremento + 1 para cada itera\u00e7\u00e3o do loop. Dentro do loop, n\u00f3s mandamos ele lan\u00e7ar no terminal o valor do elemento do array correspondente ao index. Fun\u00e7\u00f5es N\u00f3s aprendemos anteriormente que fun\u00e7\u00f5es s\u00e3o umas das var\u00e1veis do tipo objeto no JS. Sempre que pudermos generalizar um tratamento de dados por meio da cria\u00e7\u00e3o de uma fun\u00e7\u00e3o, devemos optar por esse caminho porque assim tornamos a manuten\u00e7\u00e3o dos nossos programas melhor e evitamos ter que repetir linhas de c\u00f3digo muito parecidas. Mesmo sendo um objeto, o JS possui um token espec\u00edfico para a cria\u00e7\u00e3o de fun\u00e7\u00f5es. Abaixo temos dois exemplos adaptados do material do curso. // js // Criacao de uma funcao de soma function soma ( x , y ) { var total = x + y return total } soma ( 2 , 3 ) > 5 Para o segundo exemplo, n\u00f3s queremos construir uma fun\u00e7\u00e3o que retorna a m\u00e9dia dos valores apresentados entre os par\u00eanteses. Para isso, precisaremos de um dos tokens que vimos na se\u00e7\u00e3o passada. Sabemos muito bem que a m\u00e9dia \u00e9 calculada pela soma dos \\(n\\) valores dividida pela quantidade \\(n\\) . Para isso, teremos que usar o token de la\u00e7o de repeti\u00e7\u00e3o. // js function media () { var soma = 0 n = arguments . length for ( var i = 0 ; i < n ; i ++ ) { soma = arguments [ i ] + soma } return soma / n } media ( 2 , 3 , 4 , 5 ) > 3.5 Calma, eu sei que em uma primeira vista \u00e9 estranho esse objeto arguments ter sido chamado do nada. Acontece que no JS (e em muitas linguagens) alguns objetos, a exemplo das fun\u00e7\u00f5es, possuem m\u00e9todos que podem ser usados mesmo no momento da sua cria\u00e7\u00e3o. Nesse caso, \u00e9 o exemplo desse objeto que nos diz a quantidade de argumentos que foram inseridos na nossa fun\u00e7\u00e3o media(). Tamb\u00e9m podemos usar as fun\u00e7\u00f5es para cria\u00e7\u00e3o de estruturas padronizadas de objetos que s\u00e3o conhecidas como classes . Abaixo vamos criar uma estrutura para objetos do tipo Pessoa . // js function Pessoa ( primeiro , ultimo ) { this . primeiro = primeiro this . ultimo = ultimo this . nomeCompleto = function () { return this . primeiro + ' ' + this . ultimo } this . nomeCompletoInvertido = function () { return this . ultimo + ' ' + this . primeiro } } var chefe = new Pessoa ( 'Bruno' , 'Ruas' ) console . log ( chefe . nomeCompleto ) console . log ( chefe . nomeCompletoInvertido ) > Bruno Ruas > Ruas Bruno Novamente, temos um termo sendo usado sem que antes ele tenha sido criado. Nesse caso \u00e9 o termo this . Ele \u00e9 usado para fazer refer\u00eancia ao objeto criado (ou classe) como podemos ver no chamamento dos valores do console.log . Outra novidade \u00e9 que criamos uma `c\u00f3pia'' do objeto Pessoa s\u00f3 que com um outro nome: chefe`. Arrow Functions Agora vamos entrar num ponto que, para mim, foi bem dif\u00edcil de entender no come\u00e7o. O JS permite que a constru\u00e7\u00e3o de fun\u00e7\u00f5es an\u00f4nimas , ou seja, fun\u00e7\u00f5es que n\u00e3o precisam de nomes definidos. Mas antes de aprendermos mais sobre isso, precisamos saber que existem diferentes modos de se criar uma fun\u00e7\u00e3o em JS. Abaixo temos 3 maneiras de se criar a fun\u00e7\u00e3o soma . // js // forma tradicional soma = function ( a , b ) { return a + b } //forma com arrow function soma = ( a , b ) => { return a + b } //arrow function com chaves omitidas soma = ( a , b ) => a + b Agora que entendemos um pouco melhor a constru\u00e7\u00e3o de fun\u00e7\u00f5es em JS, podemos ir mais fundo nas arrow functions . Esse m\u00e9todo de defini\u00e7\u00e3o de fun\u00e7\u00f5es foi criado para facilitar a cria\u00e7\u00e3o de fun\u00e7\u00f5es dentro de contextos, ou seja, se voc\u00ea est\u00e1 criando uma fun\u00e7\u00e3o em uma linha de c\u00f3digo normal (sem estrar em um bloco de c\u00f3digo) \u00e9 melhor usar a forma tradicional. Agora, se voc\u00ea estiver em um contexto diferente (como em um par\u00e2metro de um objeto ou mesmo uma fun\u00e7\u00e3o) \u00e9 melhor usar a arrow function. Assim como os outros objetos, existem propriedades e m\u00e9todos das arrow functions que podemos usar. Um exemplo disso \u00e9 o operador this que faz refer\u00eancia ao bloco em que nossa arrow functions est\u00e1 contida. Em uma fun\u00e7\u00e3o normal, n\u00f3s aprendemos que esse operador faz refer\u00eancia \u00e0 pr\u00f3pria fun\u00e7\u00e3o. Abaixo temos um exemplo adaptado do material. // js // usando 'this' em uma arrow function var Pessoa2 = { nome : 'Bruno' , amigos : [ 'Ana' , 'Clarck' , 'Bruce' ], exibeAmigos () { this . amigos . forEach ( f => console . log ( this . nome + ' \u00e9 amigo de ' + f )) } } Pessoa2 . exibeAmigos () > Bruno \u00e9 amigo de Ana > Bruno \u00e9 amigo de Clarck > Bruno \u00e9 amigo de Bruce Vamos ver o que esse c\u00f3digo acima nos ensina. Primeiro n\u00f3s criamos uma vari\u00e1vel de objeto chamado Pessoa2 e atribu\u00edmos duas propriedades a ela: nome e amigos. Sendo que a propriedade `amigos' \u00e9 um array com 3 elementos. Como Pessoa2 \u00e9 um objeto, n\u00f3s podemos criar m\u00e9todos dentro dele (que nada mais s\u00e3o do que fun\u00e7\u00f5es em um objeto), e \u00e9 exatamente o que fizemos com a fun\u00e7\u00e3o exibeAmigos(). Quando criamos o m\u00e9todo exibeAmigos, n\u00f3s usamos o operador this em um contexto onde ele faz refer\u00eancia ao bloco que cont\u00e9m a fun\u00e7\u00e3o, nesse caso, \u00e9 a vari\u00e1vel Pessoa2. Na primeira linha da nossa fun\u00e7\u00e3o exibeAmigos n\u00f3s usamos um m\u00e9todo Dentro de fun\u00e7\u00e3o exibeAmigos n\u00f3s chamamos a propriedade amigos do nosso objeto Pessoa2 por meio do 'this'. Como j\u00e1 vimos, um array \u00e9 um objeto em JS, portanto, ele possui v\u00e1rias propriedades e m\u00e9todos dentro dele. O forEach que est\u00e1 ali \u00e9 precisamente uma desses m\u00e9todos desse objeto que faz um loop para cada elemento do array. Dentro do loop criado pelo m\u00e9todo forEach do nosso array amigos n\u00f3s criamos uma arrow function que usa a vari\u00e1vel f (que nada mais \u00e9 do que o elemento do array no loop). Ent\u00e3o n\u00f3s fizemos o seguinte, para cada elemento do array que agora chamamos de f, vamos fazer um console.log que nos d\u00e1 o nome da Pessoa2, a string \"conhece\" e o nome do amigo que \u00e9 a vari\u00e1vel f. Com isso temos o resultado apresentado no final desse bloco de c\u00f3digo. Com o tempo as coisas v\u00e3o ficar menos confusas, mas j\u00e1 podemos ver que o JS possui bastante metodologias de processamento de informa\u00e7\u00e3o que teremos que dominar para tirar o m\u00e1ximo das nossas aplica\u00e7\u00f5es web. Documento Object Model (DOM) Como o contexto de aplica\u00e7\u00e3o do JS sempre foi o web, essa linguagem possui algumas integra\u00e7\u00f5es ao ambiente do navegador que s\u00e3o muito \u00fateis para a constru\u00e7\u00e3o de aplica\u00e7\u00f5es verdadeiramente inteligentes. Uma das capacidades mais relevantes \u00e9 a de alterar estruturas HTML e CSS por meio de c\u00f3digos escritos em JS. Isso \u00e9 feito por interm\u00e9dio da API Document Object Model (DOM) que \u00e9 um padr\u00e3o da W3C para os navegadores. Abaixo temos os principais elementos que a comp\u00f5e. Todos esses objetos est\u00e3o vinculados ao objeto maior window que \u00e9 a janela do navegador. history navigator location screen document link anchor form button check box radio password reset submit Cada um desses elementos possui informa\u00e7\u00f5es e podem ser manipulados para conseguirmos construir as aplica\u00e7\u00f5es da maneira como quisermos. Coment\u00e1rio: No material do curso n\u00f3s s\u00f3 aprofundamos em dois desses v\u00e1rios elementos. Depois eu volto aqui a medida que for aprendendo mais sobre os outros. Objeto Window O objeto window \u00e9 o representante da da janela do browser. Ele cont\u00e9m toda a hierarquia que mostramos nessa lista de elementos acima. Al\u00e9m de conter todos esses elementos dentro dele, esse objeto (Como o pr\u00f3prio nome diz, tudo no DOM s\u00e3o, em algum grau, objetos. Mantenha isso em mente!) possui m\u00e9todos e propriedades que s\u00e3o \u00fateis para o gerenciamento das nossas aplica\u00e7\u00f5es. Na parte de armazenamento de dados o window nos d\u00e1 duas maneiras: localStorage e sessionStorage . No primeiro os dados s\u00e3o mantidos mesmo se o navegador seja fechado. J\u00e1 o sessionStorage mant\u00e9m os arquivos apenas enquanto o navegador \u00e9 mantido aberto. Abaixo temos um exemplo de como usar esses reposit\u00f3rios. // js // guardando dados no reposit\u00f3rio de sess\u00e3o sessionStorage . setItem ( 'login' , 'Bruno Ruas' ) alert ( 'O usu\u00e1rio logado \u00e9: ' + sessionStorage . getItem ( 'login' )) > Aparece um popup com a mensagem \"O Usu\u00e1rio logado \u00e9: Bruno Ruas\" Veja que para salvar o dado, temos o uso do par 'nome'-'valor' e do m\u00e9todo setItem . Para obter o dado, basta usar o m\u00e9todo getItem e passar o nome do valor salvo anteriormente. Tamb\u00e9m podemos atrelar algumas funcionalidades ao tempo. \u00c9 bem comum vermos depois de x minutos a se\u00e7\u00e3o de um site ser encerrada, por exemplo. O objeto window possui algumas maneiras de lidarmos com o tempo: setInterval(funcao, intervalo) - Browser executa uma fun\u00e7\u00e3o continuamente a cada x milisegundos clearInterval() - Cancela a repeti\u00e7\u00e3o da fun\u00e7\u00e3o setTimeout(funcao,intervalo) - Agenda a execu\u00e7\u00e3o de uma fun\u00e7\u00e3o com um delay de x milissegundos clearTimeout() - Cancela o agendamento Object Document Logo ap\u00f3s o navegador processar os arquivos da p\u00e1gina web, o objeto document passa a existir e pode ser manipulado pelo nosso c\u00f3digo JS. No material temos uma lista das principais propriedades que esse objeto possui (A descri\u00e7\u00e3o eu s\u00f3 vou colocar se for algo n\u00e3o \u00f3bvio). Propriedade Descri\u00e7\u00e3o addEventListener Uma fun\u00e7\u00e3o dispara se um evento ocorre baseURI Retorna a URI body Retorna ou modifica o body cookie Retorna todos os cookies characterSet Charset da p\u00e1gina documentElement Todo o html documentoURI URI do document forms Um array com os forms do html getElementsById getElementsByClassName getElementsByName getElementsByTagName images lastModified Data de modifica\u00e7\u00e3o do documento links Array com todos os links querySelector Primeiro elemento por um seletor CSS querySelectorAll Array com todos os de um seletor CSS removeEventListener scripts Array com os scripts do documento title URL N\u00e3o tem muito pra onde correr. S\u00f3 vamos aprender bem usando, mas por agora, basta termos em mente que essas funcinalidades existem e poder\u00e3o ser \u00fateis em algum momento. Abaixo tempos um exemplo usando uma fun\u00e7\u00e3o JS para alterar um elemento do body atrav\u00e9s do DOM. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> <!-- JavaScript --> < script type = 'text/javascript' > function Executar () { document . getElementById ( 'saida' ). innerHTML = Date () } < /script> < /head> < body > < button type = \"button\" onclick = \"Executar()\" > Aperte ! < /button> < h1 > Sa\u00edda < /h1> < div id = \"saida\" > Condi\u00e7\u00e3o Inicial < /div> < /body> < /html> No c\u00f3digo acima temos o script em JS dentro do pr\u00f3prio arquivo HTML usando a tag <script> . Nesse script n\u00f3s criamos a fun\u00e7\u00e3o Executar() que nada mais faz do que procurar o elemento HTML cujo id \u00e9 igual a 'sa\u00edda' e substitui o HTML desse elemento pela data atual vinda da fun\u00e7\u00e3o nativa Date() . Abaixo podemos ver a diferen\u00e7a entre a situa\u00e7\u00e3o inicial e a final ap\u00f3s apertar o bot\u00e3o. Objeto Navigator Como o pr\u00f3prio deixa claro, o objeto navigator representa o software do navegador usado pelo user. Esse objeto nos d\u00e1 algumas informa\u00e7\u00f5es \u00fateis sobre o navegador usado. Abaixo temos uma tabela com alguns dos m\u00e9todos contidos nesse objeto. Propriedade Descri\u00e7\u00e3o appCodeName Codigo do navegador appName Nome do navegador appVersion Vers\u00e3o do navegador cookieEnabled Cookies habilitados geolocation Geolocation language onLine Se o browser est\u00e1 online platform Qual sistema operacional product Engine do navegador userAgent User-agent que o browser envia ao navegador Abaixo temos um exemplo de p\u00e1gina web adaptado do material do curso que faz uso o objeto navegador e retorna a geolocaliza\u00e7\u00e3o do navegador. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> < script type = \"text/javascript\" > // fun\u00e7\u00e3o que recebe as coord e retorna um string function showPosition ( position ) { lat = position . coords . latitude long = position . coords . longitude texto = `Lat: ${ lat } e Long ${ long } ` document . getElementById ( 'saida' ). innerHTML = texto } // fun\u00e7\u00e3o que muda o HTML do elemento saida function getPosition () { if ( window . navigator . geolocation ) { window . navigator . geolocation . getCurrentPosition ( showPosition ) } else { x . innerHTML = 'N\u00e3o tivemos acesso a' + 'sua localiza\u00e7\u00e3o!' } } < /script> < /head> < body > < button type = \"button\" onclick = \"getPosition()\" > Geolocation < /button> < h1 > Mensagem < /h1> < div id = \"saida\" > Sua localiza\u00e7\u00e3o vai aparecer aqui !< /div> < /body> < /html> Nesse c\u00f3digo acima temos uma p\u00e1gina simples com um bot\u00e3o que, ao ser ativado, dispara a fun\u00e7\u00e3o getPosition() . Essa fun\u00e7\u00e3o dispara uma outra fun\u00e7\u00e3o chamada showPosition . O resultado pode ser visto na imagem abaixo. Eventos Outra funcionalidade interessante do DOM \u00e9 a capacidade de usarmos n\u00e3o apenas os elementos da p\u00e1gina mas tamb\u00e9m o contexto (ou eventos) em que esses elementos se encontram. Por exemplo, \u00e9 comum vermos uma imagem aumentar de tamanho quando colocamos o mouse sobre ela. Com essa funcionalidade, conseguimos explorar v\u00e1rios cen\u00e1rios de intera\u00e7\u00e3o do usu\u00e1rio com a p\u00e1gina. No exemplo abaixo, temos o uso de dois contextos do mouse sobre um elemento de texto. Quando o mouse est\u00e1 sobre o elemento, n\u00f3s mudamos a cor dele para vermelho. Quando o mouse n\u00e3o est\u00e1 sobre o elemento, a cor dele se torna preto. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> < /head> < body > < p onmouseover = \"this.style.color='red'\" onmouseout = \"this.style.color='black'\" > Texto < /p> < /body> < /html> Podemos ver mais um exemplo do uso do token this mas dessa vez fora de um bloco de c\u00f3digo de uma fun\u00e7\u00e3o. Nesse contexto, esse operador faz refer\u00eancia ao elemento HTML e altera o seu valor do par\u00e2metro de estilo que indicamos (a cor do texto). Mesmo sendo poss\u00edvel fazer uso do atributo de evento direto no HTML, como fizemos no exemplo anterior, a boa pr\u00e1tica \u00e9 manter essas features em um arquivo JS \u00e0 parte (igual n\u00f3s fizemos com o CSS) pois isso torna o arquivo de estrutura mais f\u00e1cil de ler. Abaixo temos exatamente a mesma funcionalidade mas usando o campo de script do meta mas que poderia ser hospedado em um arquivo .js em separado. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> < /head> < body > < p id = \"texto\" > Texto < /p> < /body> < script type = \"text/javascript\" > var elem = window . document . getElementById ( 'texto' ) elem . addEventListener ( 'mouseout' , function () { window . document . getElementById ( 'texto' ). style . color = '' window . document . getElementById ( 'texto' ). style . fontSize = '' }, false ) elem . addEventListener ( 'mouseover' , function () { window . document . getElementById ( 'texto' ). style . color = 'red' window . document . getElementById ( 'texto' ). style . fontSize = '20px' }, false ) < /script> < /html> Veja que primeiro n\u00f3s criamos uma vari\u00e1vel elem utilizando o getElementById . Como essa vari\u00e1vel \u00e9 um objeto, podemos usar um de seus m\u00e9todos chamado addEventListener que recebe 3 par\u00e2metros: o primeiro \u00e9 o gatilho de disparo, o segundo \u00e9 a fun\u00e7\u00e3o que ser\u00e1 executada e o terceiro \u00e9, para todos os efeitos, sempre falso. No exemplo acima temos dois gatilhos de eventos cadastrados. O primeiro \u00e9 o mouseout que nada mais \u00e9 que o padr\u00e3o. O segundo \u00e9 mouseover que dispara sempre que o mouse estiver sobre o elemento selecionado. Mesmo que a primeira vista pare\u00e7a mais simples usar os atributos de contexto direto no HTML, n\u00f3s precisamos pensar em situa\u00e7\u00f5es onde a aplica\u00e7\u00e3o se torna demasiada grande. Nesses casos, \u00e9 muito melhor, para controlar a evolu\u00e7\u00e3o da nossa aplica\u00e7\u00e3o web e garantir uma boa manuten\u00e7\u00e3o, mantermos em arquivos separados tanto o estilo quanto a funcionalidade. Outra coisa importante a ser notada \u00e9 que o script deve estar abaixo da vari\u00e1vel que ser\u00e1 manipulada. Primeiro o elemento precisa existir para usarmos o nosso c\u00f3digo. Esse \u00e9 o motivo da tag script estar na parte de baixo da p\u00e1gina e n\u00e3o no head como nos outros exemplos. Na tabela a baixo temos os principais tipos de gatilhos que podem ser usados pelo DOM. Para usar algum desses no direto no HTML \u00e9 necess\u00e1rio colocar a palavra on' na frente. Por exemplo, click' vira `onclick'. Propriedade Descri\u00e7\u00e3o click Click em link ou elemento change Default alterado em input texto focus Foco em um elemento blur Ao tirar o foco mouseover Mouse em cima mouseout Mouse em outro lugar select Select em um form submit Submit em um form resize Mudan\u00e7a na janela do broser load Algum elemento \u00e9 carregado unload Ao sair da p\u00e1gina Coment\u00e1rio: Aqui o professor da disciplina faz o desafio de criarmos uma calculadora simples com o uso dos elementos estudados nessa se\u00e7\u00e3o. Um dia eu volto aqui e fa\u00e7o esse desafio. A Nota\u00e7\u00e3o de Objetos (JSON) O JavaScript Object Notation (JSON) \u00e9 um formato de descri\u00e7\u00e3o de dados que se baseia em texto e pode ser lido diretamente sem muita dificuldade. Existem v\u00e1rios outros tipos de escrita de dados onde, geralmente, temos um trade-off entre efici\u00eancia versus simplicidade. Quanto mais pr\u00f3ximo da linguagem de m\u00e1quina, melhor \u00e9 pro computador processar mas mais dif\u00edcil \u00e9 para os humanos entender. Como o JSON se popularizou muito, diversas outras linguagens j\u00e1 possuem a capacidade de processar dados nesse formato. O que aumenta ainda mais a aceitabilidade dele como ve\u00edculo de envio e codifica\u00e7\u00e3o de informa\u00e7\u00e3o tanto no frontend quanto no backend. Falando em backend, com a populariza\u00e7\u00e3o de programas como nodejs, \u00e9 cada vez mais comuns a constru\u00e7\u00e3o de comunica\u00e7\u00e3o entre a camada de aplica\u00e7\u00e3o web e servidor atrav\u00e9s de APIs cuja atividade \u00e9, simplificadamente, receber JSON e enviar JSON. Como dito anteriormente, o JSON n\u00e3o \u00e9 o \u00fanico formato existente no mercado. Para destacar alguns outros, temos o XML, RDF, Planilhas, CSV, Documentos TXT, JPEG-2000, TIFF e v\u00e1rios outros formatos propriet\u00e1rios. Mas, sem d\u00favida, a competi\u00e7\u00e3o mais \u00e1rdua \u00e9 entre JSON e XML. Sintaxe do JSON Um arquivo JSON \u00e9 muito parecido com um bloco de c\u00f3digo JS. Come\u00e7a e termina com chaves {} e cada elemento \u00e9 formado por um par de nome-valor e s\u00e3o separados por v\u00edrgula. O JSON permite diferentes tipos de valores que podem ser dos mesmo tipos de dados que estudamos anteriormente para o JS. Abaixo temos um exemplo de um arquivo JS. // json { \"idade\" : 28 , \"nome\" : \"Bruno Ruas\" , \"materias\" : [ { \"materia\" : \"Econometria\" , \"professor\" : \"Bill Gates\" }, { \"materia\" : \"Microeconomia\" , \"professor\" : \"Steve Jobs\" } ], \"nerd\" : true } Nesse exemplo, podemos ver que o valor para Idade \u00e9 do tipo number. Nome \u00e9 uma string. Mat\u00e9rias \u00e9 um array, veja que ele est\u00e1 entre colchetes [] , exatamente como aprendemos antes. Cada elemento do nosso array de mat\u00e9rias \u00e9 um objeto, que come\u00e7am e terminam com chaves, com duas propriedades: mat\u00e9ria e professor. Por fim, temos um booliano para a pegunta \"\u00c9 nerd?\". Os outros tipos de dados como datas, geolocaliza\u00e7\u00e3o e outros, s\u00e3o passados em JSON como uma string. Temos que lembrar disso se um dia precisamos lidar com esse tipo de informa\u00e7\u00e3o. Coment\u00e1rio: Quando estamos criando um JSON dentro de um c\u00f3digo JS n\u00f3s n\u00e3o precisamos colocar as aspas no nome dos elementos. Mas \u00e9 padr\u00e3o que essas aspas sejam usadas em objetos JSON. Ent\u00e3o temos que ficar atentos a isso tamb\u00e9m. Objeto JSON no JavaScript Agora que sabemos um pouco sobre esse tipo de estrutura de dados, vamos aprender como manipular esse objeto dentro de um script JS. A maneira que o JS tem que trabalhar com JSON \u00e9 por meio de um objeto nativo da linguagem chamado, nem um pouco sem querer, de JSON. Esse objeto possui dois m\u00e9todos \u00fateis: Um parse() que recebe uma string e retorna um objeto na nota\u00e7\u00e3o JSON e um stringfy() que pega um objeto an\u00e1logo JSON e transforma em string. // JSON para string var Tex t oJSON = ' { \"Revistas\" : [ { \"titulo\" : \"V de Vingan\u00e7a\" , \"autor\" : \"Frank Miller\" }, { \"titulo\" : \"Batman - The Dark Knight\" , \"autor\" : \"Frank Miller\" }, { \"titulo\" : \"One Piece N\u00ba 29\" , \"autor\" : \"Eichiro Oda\" } ] } ' // Usando o m\u00e9todo de parse do JSON var banca = JSON . parse ( TextoJSON ) function listaTitulos () { lista = '' for ( let i = 0 ; i < banca . Revistas . length ; i ++ ) { lista += banca . Revistas [ i ]. titulo + ' - ' + banca . Revistas [ i ]. autor + ' ' } console . log ( lista ) } listaTitulos () > V de Vingan\u00e7a - Frank Miller > Batman - The Dark Knight - Frank Miller > One Piece N\u00ba 29 - Eichiro Oda Primeiro n\u00f3s criamos uma string no formato de um JSON. Depois passamos essa string pelo objeto JSON com o m\u00e9todo parse . Ap\u00f3s isso, n\u00f3s temos um objeto chamado banca com a mesma estrutura do nosso JSON desejado. Depois n\u00f3s criamos uma fun\u00e7\u00e3o de loop que retorna uma string com o t\u00edtulo, o autor e o car\u00e1cter especial de quebra de linha. Para converter nosso objeto novamente para string basta usarmos o seguinte comando: // js JSON . stringify ( banca , null , 2 ) O primeiro par\u00e2metro \u00e9 o objeto a ser convertido. O segundo n\u00f3s podemos colocar como null (Existe uma explica\u00e7\u00e3o para isso mas n\u00e3o precisamos dela agora). Por fim, o terceiro diz o tamanho do espa\u00e7o para melhorar a identa\u00e7\u00e3o. Saber como lidar com objetos JSON dentro de um script JS nos permite construir aplica\u00e7\u00f5es inteiras apenas com JS. Um framework muito famoso hoje em dia chamado MEAN (MongoDb, Express, Angular e NodeJS) utiliza o JS como principal linguagem para constru\u00e7\u00e3o de toda a aplica\u00e7\u00e3o web. Programa\u00e7\u00e3o Ajax Diferente do que vimos at\u00e9 agora, o Asynchronous Javascript and XML ou AJAX, n\u00e3o \u00e9 uma tecnologia propriamente dito mas sim uma t\u00e9cnica de programa\u00e7\u00e3o que utiliza diferentes tecnologias. A ideia geral \u00e9 construir ferramentas que possuam as seguintes caracter\u00edsticas: Paginas com padr\u00e3o XHTML e CSS Din\u00e2mica atrav\u00e9s do DOM Troca de informa\u00e7\u00f5es por JSON, XML ou outro Recupera\u00e7\u00e3o ass\u00edncrona de dados com o objeto XMLHTTPRequest ou APT fetch JavaScript como linguagem Algumas aplica\u00e7\u00f5es muito famosas foram constru\u00edda usando, em algum grau, essa abordagem. Podemos citar o Youtube, Gmail, Google Earth e mais um monte de outras aplica\u00e7\u00f5es do Google. Para entendermos como o AJAX \u00e9 diferente da abordagem tradicional, vamos comparar as duas maneiras. No modelo tradicional, o browser faz requisi\u00e7\u00f5es ao web server que, por sua vez, devolve a p\u00e1gina solicitada com as devidas altera\u00e7\u00f5es previamente programadas. Contudo, nessa abordagem, toda a intelig\u00eancia de neg\u00f3cio \u00e9 mantida no ambiente do servidor. O esquema abaixo nos permite relembrar como \u00e9 feita a comunica\u00e7\u00e3o entre essas duas entidades. O problema dessa abordagem tradicional \u00e9 que os dados enviados entre servidor e browser s\u00e3o p\u00e1ginas inteiras. O m\u00e9todo AJAX trouxe a possibilidade de quebramos esses dados em \"pacotes\" menores de informa\u00e7\u00f5es. Nesse caso, ao inv\u00e9s de requisi\u00e7\u00f5es de p\u00e1ginas inteiras, podemos pedir ao servidor apenas \"peda\u00e7os\" menores de informa\u00e7\u00e3o. A metodologia AJAX tr\u00e1s para o lado do cliente (client side) parte da tarefa de processar os dados. Parte do processamento fica no server side e a outra parte \u00e9 feita no client. Durante a sess\u00e3o, v\u00e1rias requisi\u00e7\u00f5es s\u00e3o feitas do browser (que cont\u00e9m o c\u00f3digo JS) para o server por meio do uso do XMLHTTPRequest ou API Fetch. A atualiza\u00e7\u00e3o da p\u00e1gina acontece via DOM e n\u00e3o pelo recebimento de um HTML novo. Essa comunica\u00e7\u00e3o acontece geralmente por meio de arquivos XML ou JSON (mas pode ser qualquer outro formato de dados). Ao abrirmos a aplica\u00e7\u00e3o pela primeira vez, o servidor nos envia a maior parte dos dados que ser\u00e3o usados na visualiza\u00e7\u00e3o (a base de toda a aplica\u00e7\u00e3o). Depois disso, todas as mudan\u00e7as na tela ser\u00e3o baseadas em DOM e arquivos de dados JSON ou XML. Podemos elencar algumas vantagens desse modelo de constru\u00e7\u00e3o de solu\u00e7\u00e3o web: Redu\u00e7\u00e3o do tr\u00e1fego na rede Redu\u00e7\u00e3o de carga no web server Flexibilidade no desenolvimento do lado do server (foco em APIs) Mas como tudo na vida, o AJAX possui algumas desvantagens: Maior complexidade de desenvolvimento Aplica\u00e7\u00e3o mais pesada no client S\u00f3 funciona em navegadores mais modernos Pode precisar de ajustes dependendo do navegador do client O usu\u00e1rio perde a op\u00e7\u00e3o de avan\u00e7ar e voltar no seu hist\u00f3rico Objeto XMLHTTPRequest Agora que entendemos melhor o que \u00e9 o AJAX e como podemos construir aplica\u00e7\u00f5es com ele, precisamos entender bem uma das suas principais ferramentas: o objeto XMLHTTPRequest. Inicialmente criado pelo Microsoft e adaptado pelo Mozilla, o XMLHTTPRequest \u00e9 um objeto (mas tamb\u00e9m pode ser interpretado como uma API) que \u00e9 fornecido pelo pr\u00f3prio navegador e que permite que nosso c\u00f3digo JS troque dados com um servidor web. O objeto XMLHTTPRequest \u00e9 a base do AJAX. Mas cuidado. Apesar do nome, ele aceita a troca de informa\u00e7\u00f5es em diferentes formatos al\u00e9m do XML: JSON, HTML, TXT, XML. Al\u00e9m disso por ele podemos nos conectar \u00e0 servi\u00e7os por outros m\u00e9todos al\u00e9m do HTTP. Para aprender como usar essa ferramenta, vamos por partes. Podemos come\u00e7ar o nosso script com a cria\u00e7\u00e3o de um objeto que ser\u00e1 do tipo XMLHTTPRequest. // js // fun\u00e7\u00e3o caso a conex\u00e3o funcione function success () { window . document . getElementById ( 'texto' ). innerHTML = this . responseText } // fun\u00e7\u00e3o caso a conex\u00e3o de erro function error ( err ) { console . log ( 'Erro:' , err )} // cria\u00e7\u00e3o do objeto XmlHttpRequest var xhr = new XMLHttpRequest () // executa a fun\u00e7\u00e3o success se a requisi\u00e7\u00e3o funcionar xhr . onload = success // executa um fun\u00e7\u00e3o erro se a conex\u00e3o nao funcionar xhr . onerror = error // defindo a requisicao xhr . open ( 'GET' , 'https://api.github.com/users/brunoruas2' ) xhr . send () Esse script acima executa uma consulta a uma url do github que retorna um JSON com informa\u00e7\u00f5es a respeito da conta de algum usu\u00e1rio. Essa requisi\u00e7\u00e3o \u00e9 feita no m\u00e9todo send() . Em caso de sucesso, o xhr dispara a fun\u00e7\u00e3o success que, por sua vez, altera usa o DOM para printar na tela o JSON coletado. Em caso de erro, ele mostra, no console (Para acessar basta apertar f12 em qualquer navegador moderno) com uma mensagem de texto que cont\u00e9m o erro. Como podemos perceber (e como quase tudo em JS) existem v\u00e1rios m\u00e9todos \u00fateis no objeto XMLHttpRequest que devemos aprender. Abaixo temos uma tabela de refer\u00eancia com esses m\u00e9todos. Propriedade Descri\u00e7\u00e3o status Codigo HTTP da resposta statusText Texto da resposta readyState Status do pedido responseTexte Txt bruto da resposta responseXML Resposta em um objeto no DOM. Mas s\u00f3 funciona Se o tipo for text onreadystatechange Dispara uma fun\u00e7\u00e3o quando o readState muda onerror Executa fun\u00e7\u00e3o se erro onprogress Dispara uma fun\u00e7\u00e3o em caso de demora na resposta onload Fun\u00e7\u00e3o se o send funcionar Para cada requisi\u00e7\u00e3o, o m\u00e9todo readyState retorna um est\u00e1gio diferente. Podemos pensar que cada requisi\u00e7\u00e3o possui uma s\u00e9rie de passos a serem feitos at\u00e9 a sua conclus\u00e3o. Esses passos s\u00e3o lidos pelo m\u00e9todo onreadystatechange e possuem caracter\u00edsticas que podemos ver na lista abaixo. Os est\u00e1gios de uma requisi\u00e7\u00e3o s\u00e3o: Uninitialized (0) - Objeto criado mas n\u00e3o iniciado Loading (1) - Objeto criado mas n\u00e3o usou o m\u00e9todo send() Loaded (2) - Send() executado mas os cabe\u00e7alhos n\u00e3o est\u00e3o dispon\u00edveis Interactive (3) - Alguns dados recebidos mas n\u00e3o completamente Completed (4) - Todos os dados foram recebidos e podem ser lidos Abaixo temos um exemplo de uso do readyState para verifica\u00e7\u00e3o do status da chamada. // js function requisicaoAJAX () { var xmlhttp = new HMLHttpResquest () } xmlhttp . onreadystatechange = function () { if ( xmlhttp . readyState == 4 && xmlhttp . status == 200 ) { divElement = document . getElementById ( 'texto' ) divElement . innerHTML = xmlhttp . responseText } } xmlhttp . open ( \"GET\" , \"www.google.com/api.php\" ) xmlhttp . send () Podemos ver que n\u00f3s criamos uma fun\u00e7\u00e3o disparada apenas quando o status muda e, como colocamos uma condi\u00e7\u00e3o dentro, s\u00f3 teremos a realm modifica\u00e7\u00e3o caso o status da comunica\u00e7\u00e3o seja 200 (que \u00e9 o padr\u00e3o para sucesso) e o status da comunica\u00e7\u00e3o seja o de completo. API Fetch Os navegadores atuais nos permitem uma alternativa ao XMLHttpRequest chamada API Fetch. A vantagem \u00e9 que essa nova tecnologia nos permite fazer uso das promises que simplifica a escrita da programa\u00e7\u00e3o ass\u00edncrona. Podemos ver um exemplo abaixo. // js < script > fetch ( 'https:api.github.com/users/brunoruas2' ) . then ( res => res . json ()) . then ( data => console . log ( data )) . catch ( err => console . log ( 'Erro: ' , err )) < /script> Coment\u00e1rio: O material n\u00e3o se aprofunda no tema, ent\u00e3o eu volto aqui para aprofundar no futuro. Aqui tem um link com um material de refer\u00eancia da MDN. Bibliografia SIKOS, L. Web Standards. Mastering HTML5, CSS3, and XML . DACONTA, M. C.; SMITH, K. T.; OBRST, L. J. The semantic Web: a guide to the future of XML, Web services, and knowledge management . [s. l.]: Wiley, [s. d.]. ISBN 0471432571 SILVA, Maur\u00edcio Samy. HTML 5: a linguagem de marca\u00e7\u00e3o quer revolucionar a web . 2. ed. rev. e ampl. [s. l.]: Novatec, 2014. ISBN 9788575224038 SANDERS, William B. Smashing HTML5: t\u00e9cnicas para a nova gera\u00e7\u00e3o da web . Porto Alegre: Bookman, 2012. xiv, 354 p. ISBN 9788577809608 DEITEL, Paul J., Deitel, Harvey M. Ajax, Rich. Internet Applications e Desenvolvimento Web para Programadores . Pearson 776. ISBN 9788576051619 SILVA, Maur\u00edcio Samy. CSS3: desenvolva aplica\u00e7\u00f5es web profissionais com uso dos poderosos recursos de estiliza\u00e7\u00e3o das CSS3 . S\u00e3o Paulo: Novatec, 2011. 494 p. ISBN 9788575222898 BERTAGNOLLI, S. de C.; MILETTO, E. M. Desenvolvimento de software II: introdu\u00e7\u00e3o ao desenvolvimento web com HTML, CSS, JavaScript e PHP . [s. l.]: Bookman, 2014. ISBN 9788582601952 Isso pode ser a causa de alguns bugs na sua aplica\u00e7\u00e3o. \u21a9 Esse eu to usando para hospedar esse site. \u21a9 Isso \u00e9 muito importante porque vamos usar essa informa\u00e7\u00e3o para fazer alguma coisa. \u21a9 tamb\u00e9m chamados de elementos filhos. \u21a9 Voc\u00ea pode pesquisar para saber a lista dos gradientes dispon\u00edveis. \u21a9 Que no exemplo abaixo ser\u00e1 um elemento da classe \"container\". \u21a9 Sempre vai existir alguma exce\u00e7\u00e3o, eu sei. \u21a9","title":"Desenvolvimento Web Frontend"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#assuntos","text":"A Web: Evolu\u00e7\u00e3o, Padr\u00f5es e Arquitetura Hist\u00f3rico e Evolu\u00e7\u00e3o da Web W3C e os Padr\u00f5es da Web Componentes da Arquitetura da Web URI, URL e URN Protocolo HTTP Servidores Web Din\u00e2mica de Aplica\u00e7\u00f5es Web Desenvolvimento de Interfaces Web A Linguagem HTML A Linguagem CSS A Linguagem JavaScript Bibliografia","title":"Assuntos"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#a-web-evolucao-padroes-e-arquitetura","text":"","title":"A web: Evolu\u00e7\u00e3o, Padr\u00f5es e Arquitetura"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#historico-e-evolucao-da-web","text":"A Web \u00e9 um sistema da informa\u00e7\u00e3o de hipertextos onde o acesso \u00e9 feito por meio de navegadores (browsers) . Existem alguns protocolos comuns para transfer\u00eancia de alguns tipos de arquivos. Para mensagens (e-mail) usamos o SMTP , para transfer\u00eancia de arquivos usamos o FTP , aplica\u00e7\u00f5es de telefonia usam o VOIP e para p\u00e1ginas de conte\u00fado usamos o HTML . A hist\u00f3ria da web eu ainda vou colocar aqui quando tiver mais tempo.","title":"Hist\u00f3rico e Evolu\u00e7\u00e3o da Web"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#w3c-e-os-padroes-da-web","text":"O WORLD WIDE WEB CONSORTIUM (W3C) \u00e9 uma organiza\u00e7\u00e3o sem fins lucrativos cujo l\u00edder \u00e9 o Tim Berners-Lee, justamente o inventor da Web. Existem v\u00e1rias organiza\u00e7\u00f5es ao longo do planeta que fazem parte desse cons\u00f3rcio internacional. O W3C mant\u00e9m a gest\u00e3o de v\u00e1rios padr\u00f5es usados todos os dias: Design e Aplica\u00e7\u00f5es Web (HTML, CSS, SVG, Ajax, Acessibilidade); Arquitetura da Web (Protocolo HTTP, URI); Web Sem\u00e2ntica (Linked Data - RDF, OWL, SPARQL); Web Services (SOAP, WSDL); Tecnologia XML (XML, XML Schema, XSLT); Navegadores e ferramentas de autoria. A W3C possui um processo de publica\u00e7\u00e3o das normativas. Normalmente, o fluxo \u00e9: Working Draft (WD) Candidate Release (CR) Proposed Recomendation (PR) Recomendation (REC)","title":"W3C e os Padr\u00f5es da Web"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#componentes-da-arquitetura-da-web","text":"A web pode ser entendida como uma cole\u00e7\u00e3o de componentes que permitem a comunica\u00e7\u00e3o entre o cliente e os servidores de aplica\u00e7\u00f5es. Os principais componentes dessa arquitetura s\u00e3o: Ambiente Cliente (Client Web ) Geralmente um Browser que envia as requisi\u00e7\u00f5es usando o protocolo HTTP(S) para o servidor web atrav\u00e9s de uma rede de computadores. Ambiente Servidor O ambiente servidor possui v\u00e1rios componentes (banco de dados, aplica\u00e7\u00f5es, API e etc) mas o principal componente \u00e9 o servidor web. Ele recebe a requisi\u00e7\u00e3o HTTP(S) do client, interpreta a URL e envia os recursos solicitados (HTML, CSS, JS, JPEG, MP4 e etc) por meio da rede. Internet \u00c9 a rede mundial baseada no protocolo TCP/IP onde todo computador conectado \u00e9 denominado host (hospedeiro) e possui um identificador de endere\u00e7o IP (internet protocol) que possui determinados padr\u00f5es. URI (uniform resource locator) Como o nome indica, um URI \u00e9 um localizado que pode ser classificado em duas maneiras. O URL \u00e9 o tipo de URI que usa o endere\u00e7o do conte\u00fado como m\u00e9todo de localiza\u00e7\u00e3o, ele nos diz onde encontrar o recurso (por exemplo, o caminho c://home/desktop/test.txt ). O URN \u00e9 o tipo que usa o nome do recurso, ele nos diz a identidade do item procurado (por exemplo, o sistema ISBN). Requisi\u00e7\u00e3o \u00c9 o pacote de dados enviado pelo client atrav\u00e9s da internet para o web server onde est\u00e1 a instru\u00e7\u00e3o do que deve ser enviado como resposta. Resposta Como o nome j\u00e1 diz, \u00e9 o retorno do web server ao client com os dados requisitados. Protocolo HTTP \u00c9 o padr\u00e3o como client e web server se comunicam pela rede.","title":"Componentes da Arquitetura da Web"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#uri-url-e-urn","text":"J\u00e1 vimos que o URI abarca dos conceitos de URL e URN. Agora vamos aprender um pouco mais sobre os padr\u00f5es de endere\u00e7os em ambos os protocolos.","title":"URI, URL e URN"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#url","text":"O padr\u00e3o URL serve para identificar o recurso pela sua localiza\u00e7\u00e3o e \u00e9 composto da seguinte maneira: ftp://example.com:8080/pasta/arquivo?name=book#nose Cujas partes s\u00e3o scheme://authority/path?query#fragment Como podemos ver, a URL \u00e9 composta por v\u00e1rias partes: scheme - \u00e9 a forma de intera\u00e7\u00e3o (ftp, http, https, ...). user:pass - s\u00e3o as informa\u00e7\u00f5es do user. host - endere\u00e7o de ip do server. porta - qual a porta TCP/IP do server (o padr\u00e3o http \u00e9 80 e pode ser omitida). path - local onde o recurso se encontra. query - detalhe da consulta na forma de pares nome-valor. fragmento - qual se\u00e7\u00e3o do recurso.","title":"URL"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#urn","text":"urn:example:animal:ferret:nose Cujas partes s\u00e3o scheme:path:authority A URN apenas nos d\u00e1 um recurso espec\u00edfico (NSS) contido em algum namespace (NID) sem qualquer informa\u00e7\u00e3o sobre onde o arquivo est\u00e1 localizado.","title":"URN"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#protocolo-http","text":"O hypertext transfer protocol \u00e9 mantido pela W3C e rege a camada de aplica\u00e7\u00e3o dos sistemas distribu\u00eddos de informa\u00e7\u00e3o em hipertexto. Existem muitas vers\u00f5es mas a mais utilizada \u00e9 a 2.0 de 2015. Para entender melhor o http, consideremos o processo usual de navega\u00e7\u00e3o na web: user informa a URL client monta a requisi\u00e7\u00e3o http e envia ao web server server recebe a requisi\u00e7\u00e3o e envia a resposta ao client a resposta \u00e9 recebida e interpretada pelo browser com os dados exibidos ao user dependendo da p\u00e1gina, pode ser que novas requisi\u00e7\u00f5es sejam feitas para que todos os componentes sejam carregados propriamente. Podemos ver que o http \u00e9 o conjunto de regras que rege a comunica\u00e7\u00e3o client-server da web.","title":"Protocolo HTTP"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#partes-da-requisicao-http","text":"Uma requisi\u00e7\u00e3o \u00e9 formada por 3 partes: Linha de Requisi\u00e7\u00e3o M\u00e9todo GET - Requisita dados. POST - Envia dados para o server. HEAD - Requisita dados mas o retorno deve ser um conjunto de cabe\u00e7alhos. PUT - Cria\u00e7\u00e3o ou Atualiza\u00e7\u00e3o de dados. DELETE - Excluir algum dado. TRACE - Solicita uma c\u00f3pia da requisi\u00e7\u00e3o (serve pra testar integridade). PATCH - Altera\u00e7\u00f5es parciais em um recurso. OPTIONS - Lista de m\u00e9todos e op\u00e7\u00f5es dispon\u00edveis para o server. CONNECT - Usado quando o client se conecta com o server via proxy. Recurso - \u00c9 o caminho do dado requerido. Vers\u00e3o do Protocolo - Qual vers\u00e3o do http ser\u00e1 usada. Linhas de Cabe\u00e7alho - Inclui informa\u00e7\u00f5es complementares \u00e0 requisi\u00e7\u00e3o sendo formado por pares nome-valor. Corpo da Entidade - Dados adicionais como forms, arquivos para upload e etc.","title":"Partes da requisi\u00e7\u00e3o HTTP"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#partes-da-resposta-http","text":"Linha de Resposta Vers\u00e3o HTTP. C\u00f3digo de Retorno. Mensagem explicativa do c\u00f3digo de retorno. Linhas de Cabe\u00e7alho - Uma informa\u00e7\u00e3o importante que consta no cabe\u00e7alho \u00e9 o content-type . Ele diz o formato do conte\u00fado enviado como resposta 1 . Essa informa\u00e7\u00e3o \u00e9 apresentada conforme os MIME Types . Corpo da Entidade - \u00c9 o recurso solicitado pelo client (html, css, js, jpeg, mp4, ...)","title":"Partes da resposta HTTP"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#um-pouco-mais-sobre-cabecalhos","text":"Os cabe\u00e7alhos possuem caracter\u00edsticas parecidas tanto nas requests quanto nas responses. Podemos classifica-los como sendo dos tipos: Request header - Informa\u00e7\u00f5es sobre o client ou a requisi\u00e7\u00e3o feita. Response header - Informa\u00e7\u00f5es sobre a resposta ou sobre o web server. Entity header - Informa\u00e7\u00f5es sobre o conte\u00fado da entidade trocada (tamanho e tipo). General header - Informa\u00e7\u00f5es gerais usadas tanto em requests quanto em responses.","title":"Um pouco mais sobre Cabe\u00e7alhos"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#servidores-web","text":"Voc\u00ea s\u00f3 consegue visualizar as informa\u00e7\u00f5es de um site porque o servidor web foi capaz de interpretar a requisi\u00e7\u00e3o feita pelo seu browser e responder com o conte\u00fado adequado. Agora vamos entender um pouco mais sobre o ambiente servidor. O principal elemento do ambiente servidor \u00e9 o web server. Ele \u00e9 quem recebe, interpreta e responde as requisi\u00e7\u00f5es dos clients ao longo da internet. Podemos tamb\u00e9m incluir outros elementos importantes no ambiente servidor como o servidor de banco de dados e os servidores de servi\u00e7os (APIs) .","title":"Servidores Web"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#funcoes-de-um-web-service","text":"Um web server nada mais \u00e9 que um software rodando em uma m\u00e1quina. Ele desempenha v\u00e1rias fun\u00e7\u00f5es que podemos elencar como: Atender as requests http e responder a elas. Gerencias sites. Gerencias arquivos dos sites. Integrar mecanismos de scripts: php, perl, aspx, Ruby, Python e etc. Autenticar users (b\u00e1sica ou com servidores de autentica\u00e7\u00e3o). Implementar criptografia nas comunica\u00e7\u00f5es (https - tls/ssl). Cache de recursos. Auditoria das altera\u00e7\u00f5es e logs.","title":"Fun\u00e7\u00f5es de um web service"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#software-e-provedores","text":"Basicamente, existem 3 formas de tornar uma aplica\u00e7\u00e3o web acess\u00edvel aos clients: Rodar um web server na m\u00e1quina local; instalar e configurar um wer server em uma m\u00e1quina dedicada para esse trabalho e, por fim, contratar um provedor que ofere\u00e7a esse servi\u00e7o. A lista de softwares que se prop\u00f5e a fazer o trabalho de um web server \u00e9 enorme. O material do curso elenca dois: Apache HTTP Server | Apache Web Server \u00c9 um open source multi plataforma. Permite execu\u00e7\u00e3o de multilinguagens como php, perl entre outras. Uma maneira simples de instalar \u00e9 pelo XAMPP (que j\u00e1 integra o apache web server, banco de dados MariaDB e um ambiente PHP e Perl). Microsoft Internet Information Server (IIS) \u00c9 a solu\u00e7\u00e3o propriet\u00e1ria da Microsoft. Baseado na plataforma .NET, permite hospedar sites est\u00e1ticos. O IIS j\u00e1 vem dispon\u00edvel junto dos SO Windows. A lista de provedores tamb\u00e9m \u00e9 extensa e possuem diferentes capacidades distintas mas podemos destacar algumas ferramentas \u00fateis: Servidores em Nuvem Azure AWS Editores e IDEs online Replit CodeSandbox Glitch GitHub Pages 2","title":"Software e Provedores"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#dinamica-de-aplicacoes-web","text":"Quando voc\u00ea acessa um site, o arquivo que coordena o modo de exposi\u00e7\u00e3o da informa\u00e7\u00e3o e os conte\u00fados da mesma \u00e9 um arquivo .html . Observe o exemplo abaixo de uma p\u00e1gina simples. <!-- > Html <--> <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Document </ title > < link rel = \"stylesheet\" href = \"style.css\" > < script > src = 'app.js' </ script > </ head > < body > < img src = 'logo.jpg' alt = \"imagem_logo\" > </ body > </ html > As tags que cont\u00e9m as partes style.css , app.js e logo.jpg fazem men\u00e7\u00e3o \u00e0 outros arquivos que far\u00e3o parte da composi\u00e7\u00e3o da p\u00e1gina. Alguns s\u00e3o referentes \u00e0 funcionalidades ou layout da aplica\u00e7\u00e3o enquanto outros podem ser referentes \u00e0 conte\u00fados mostrados na p\u00e1gina. Uma vez que o servidor compreende a request feita pelo client, ele envia uma s\u00e9rie de arquivos que ser\u00e3o lidos pelo browser do usu\u00e1rio e ser\u00e3o interpretados por ele. O html \u00e9 justamente o primeiro arquivo lido porque ele diz ao navegador quais conte\u00fados mostrar e, a partir das refer\u00eancias contidas no html, como mostrar e quais funcionalidades a p\u00e1gina ter\u00e1.","title":"Din\u00e2mica de Aplica\u00e7\u00f5es Web"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#o-processamento-de-um-site","text":"O client envia uma requisi\u00e7\u00e3o via http (com o m\u00e9todo GET) para o web server O server envia o arquivo html da p\u00e1gina requisitada para o browser Ao processar o html, o browser percebe que ele faz men\u00e7\u00e3o de outros arquivos (como css, js, mp3, etc) O browser faz novas requisi\u00e7\u00f5es ao server at\u00e9 ter todos os arquivos necess\u00e1rios para o carregamento da p\u00e1gina Como voc\u00ea pode ver, \u00e9 muita coisa acontecendo. S\u00f3 n\u00e3o nos damos conta disso porque o processo \u00e9 muito r\u00e1pido hoje em dia devida a velocidade das nossas conex\u00f5es banda larga. Lembrando sempre que todas as requisi\u00e7\u00f5es e respostas entre client e server s\u00e3o feitas usando-se o protocolo HTTP que a gente viu logo antes.","title":"O processamento de um site"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#desenvolvimento-de-interfaces-web","text":"","title":"Desenvolvimento de Interfaces Web"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#a-linguagem-html","text":"A linguagem HTML foi criada por Tim Berners-Lee no ano de 1991 e foi baseada no padr\u00e3o Standard Generalized Markup Language (SGML). Seu escopo original era para permitir a divulga\u00e7\u00e3o de pesquisas cient\u00edficas. Com o passar dos anos, novas tecnologias foram somadas ao ecossistema para facilitar o processo de constru\u00e7\u00e3o das solu\u00e7\u00f5es web. O Cascading Style Sheet (CSS) foi criado para facilitar o desenvolvimento do conte\u00fado separando a parte de estilo e apar\u00eancia do conte\u00fado em HTML. O JavaScript permitiu a manipula\u00e7\u00e3o de elementos al\u00e9m de dar mais din\u00e2mica para as p\u00e1ginas web. O W3C foi criado em 1993 e, a partir dessa data, o HTML foi mantido e padronizado por essa organiza\u00e7\u00e3o. Desde ent\u00e3o a linguagem vem sendo alterada para permitir sua evolu\u00e7\u00e3o. Em 2004 foi criado o Web Hypertext Application Technology Working Group (WHATWG) por pessoas da Apple, Mozilla e Opera. Na \u00e9poca, o W3C estava trabalhando no padr\u00e3o XHTML 2.0 (que iria substituir o HTML 4.01) mas o WHATWG conseguiu propor um monde que acabou sendo o HTML 5. O HTML 5 foi recebido e amplamente adotado no desenvolvimento de aplica\u00e7\u00f5es hoje em dia.","title":"A Linguagem HTML"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#panorama-de-uma-aplicacao","text":"N\u00f3s j\u00e1 sabemos que um client faz uma requisi\u00e7\u00e3o ao web server por HTTP e esse, por sua vez, responde a requisi\u00e7\u00e3o com, normalmente, um arquivo HTML. De posse de arquivo, o browser consegue saber se precisar\u00e1 solicitar mais arquivos ao web server at\u00e9 que todas as refer\u00eancias do HTML sejam satisfeitas e a p\u00e1gina carregada. A grosso modo, podemos dizer que o HTML pode fazer men\u00e7\u00f5es a arquivos dos seguintes tipos: CSS Arquivos de Multim\u00eddia JavaScript RIA - Rich Internet Applications Applet Java Adobe Flash Adobe Air Adobe Flex SilverLight Se o site utiliza solu\u00e7\u00f5es din\u00e2micas como PHP, Java, Python, Ruby ou ASP.NET, quando a requisi\u00e7\u00e3o \u00e9 feita, o web server primeiro faz o processamento desses arquivos (normalmente por um outro servidor de APIs) e o resultado ser\u00e3o outros arquivos HTML, CSS, JS ou Multim\u00eddia. Ap\u00f3s o processamento, o resultado \u00e9 enviado para o client que ser\u00e1 atualizado pelo browser. Nas aplica\u00e7\u00f5es modernas, o seu browser est\u00e1 em processo praticamente cont\u00ednuo de intera\u00e7\u00e3o com o servidor e vice-versa.","title":"Panorama de uma Aplica\u00e7\u00e3o"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#a-sintaxe-da-linguagem-html","text":"Uma p\u00e1gina HTML \u00e9 uma cole\u00e7\u00e3o de elementos . Voc\u00ea consegue identific\u00e1-los facilmente porque est\u00e3o entre os pares de s\u00edmbolos <> . Cada elemento tamb\u00e9m tem uma tag de abertura e uma de fechamento. Por exemplo: < body > Aqui vai o conte\u00fado do body </ body > Tamb\u00e9m existem elementos que n\u00e3o precisam do par de tags de abertura e fechamento. Por exemplo: < input disable name = 'Nome' value = 'rommelcarneiro' > Atente para o fato que alguns elementos aceitam outros elementos internamente. Por exemplo, dentro do elemento <body></body> n\u00f3s colocamos todos os outros elementos que compor\u00e3o a nossa p\u00e1gina web, como por exemplo, formul\u00e1rios, par\u00e1grafos, v\u00eddeos e etc. Ent\u00e3o se acostume de termos elementos dentro de outros elementos. Dentro de alguns elementos podem ser inseridas informa\u00e7\u00f5es e configura\u00e7\u00f5es por meio de par\u00e2metros que chamamos de atributos do elemento. Por exemplo, no elemento logo acima, temos os atributos name e value . Agora que sabemos o que s\u00e3o elementos e como eles s\u00e3o constru\u00eddos, podemos seguir para a organiza\u00e7\u00e3o de um documento HTML . Existe um padr\u00e3o em todo arquivo HTML onde existem alguns elementos obrigat\u00f3rios para o processamento da p\u00e1gina pelo browser do client. // html <!DOCTYPE html> -------------------------------> Elemento da vers\u00e3o do HTML < html lang = \"en\" > ------------------------------> Abertura do documento HTML < head > ------------------------------------> Abertura do cabe\u00e7alho < meta charset = \"UTF-8\" > ----------------> Atributo nome = \"valor\" < title > Document </ title > ---------------> Elemento de T\u00edtulo </ head > -----------------------------------> Fechamento do cabe\u00e7alho < body > ------------------------------------> Abertura do corpo < img src = \"logo.jpg\" > ------------------> Elemento de imagem </ body > -----------------------------------> Abertura do corpo </ html > ---------------------------------------> Fechamento do HTML","title":"A Sintaxe da Linguagem HTML"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#preambulo","text":"Como podemos ver, primeiro temos o pre\u00e2mbulo DOCTYPE , seguido do <html> </html> onde temos outros dois elementos maiores, o cabe\u00e7alho ( <head> </head> ) e o corpo ( <body> </body> ). O pre\u00e2mbulo diz ao navegador qual vers\u00e3o da HTML ser\u00e1 usada. Se ele n\u00e3o for indicado, o navegador vai tentar ``adivinhar'' qual a melhor maneira de interpretar a sua p\u00e1gina (chamamos isso de quirks mode ). Caso voc\u00ea informe qual a vers\u00e3o, o browser usar\u00e1 o processamento adequado (chamamos de strict mode ). Os formatos do pre\u00e2mbulo mudam de acordo com a vers\u00e3o do HTML: HTML 5 <!DOCTYPE html> HTML 4.01 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"> HTML 1.0 <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">","title":"Pre\u00e2mbulo"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#cabecalho","text":"\u00c9 a primeira parte dentro da tag de html. Nele est\u00e3o as informa\u00e7\u00f5es sobre o documento de modo a organizar as refer\u00eancias de funcionalidade que ser\u00e3o usadas para o processamento da p\u00e1gina web. Podemos resumir os elementos no cabe\u00e7alho como: title - <title> </title> Define o t\u00edtulo do documento. Que tamb\u00e9m afeta a aba do navegador. link - <link rel=\"relacao\" href=\"link_do_arquivo.extensao\"> Define as liga\u00e7\u00f5es externas como arquivos, scripts, CSS e etc. style - <link rel=\"stylesheet\" href=\"style.css\"> \u00c9 um tipo de link. Nele \u00e9 que vamos indicar qual o arquivo que reger\u00e1 o layout da nossa aplica\u00e7\u00e3o. meta - meta name=\"nome\" content=\"conteudo\"> Aqui teremos as informa\u00e7\u00f5es adicionais sobre a p\u00e1gina: codifica\u00e7\u00e3o de caracteres, descri\u00e7\u00e3o, palavras-chaves, autor e etc.","title":"Cabe\u00e7alho"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#corpo","text":"A segunda parte do html \u00e9 o corpo. Nele \u00e9 onde colocamos o conte\u00fado que far\u00e1 parte da p\u00e1gina. Como \u00e9 muito comum de se encontrar nos sites, esse conte\u00fado pode vir mesclado em v\u00e1rias m\u00eddias como texto, imagens, v\u00eddeos, mapas e etc. Veremos com calma um pouco mais a frente.","title":"Corpo"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#elementos-de-texto-e-multimidia","text":"Como esse material tem o objetivo de ser para futuras consultas. Eu vou colocar as tags com um pequeno resumo mas n\u00e3o vou comentar muito sobre elas.","title":"Elementos de Texto e Multim\u00eddia"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#paragrafos-e-titulos","text":"Elemento Tags T\u00edtulos <h1></h1>,...,<h6></h6> Par\u00e1grafo <p></p> Quebra de Linha <br> It\u00e1lico <i></i> Negrito <b></b> Import\u00e2ncia <strong></strong> C\u00f3digo-fonte <code></code> Texto pre-formatado <pre></pre> Cita\u00e7\u00f5es <blockquote></blockquote> Enquanto estamos montando a nossa p\u00e1gina html, devemos evitar usar os elementos dela para a formata\u00e7\u00e3o de layout da nossa solu\u00e7\u00e3o. \u00c9 altamente recomendado deixar toda essa responsabilidade para a nossa Cascading Style Sheets (CSS) e focar apenas no conte\u00fado textual da p\u00e1gina web.","title":"Par\u00e1grafos e T\u00edtulos"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#listas","text":"Existem 3 tipos de listas em HTML. Listas ordenadas: // html < ol > < li > Primeiro item </ li > --------> 1. Primeiro item < li > Segundo item </ li > ---------> 2. Segundo item < li > Terceiro item </ li > --------> 3. Terceiro item </ ol > Lista n\u00e3o ordenada: // html < ul > < li > Primeiro item </ li > --------> o Primeiro item < li > Segundo item </ li > ---------> o Segundo item < li > Terceiro item </ li > --------> o Terceiro item </ ul > Lista de defini\u00e7\u00f5es: // html < dl > < dt > Termo 01 </ li > -------------> Termo 01 < dd > Defini\u00e7\u00e3o 01 </ li > ---------> Defini\u00e7\u00e3o 01 < dt > Termo 02 </ li > -------------> Termo 02 < dd > Defini\u00e7\u00e3o 02 </ li > ---------> Defini\u00e7\u00e3o 02 </ dl >","title":"Listas"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#imagens","text":"// html < img width = \"200\" height = \"180\" src = \"img.png\" alt = \"Peixe\" >","title":"Imagens"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#links","text":"// html < a href = \"link.com\" target = \"_blank\" > Texto </ a > ------> Nova tab < a href = \"link.com\" target = \"_self\" > Texto </ a > -------> Mesma tab < a href = \"link.com\" target = \"_parent\" > Texto </ a > -----> Frame pai < a href = \"link.com\" target = \"_top\" > Texto </ a > --------> Janela atual < a href = \"link.com\" target = \"nome_frame\" > Texto </ a > --> Frame nominado","title":"Links"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#elementos-estruturais","text":"A partir da vers\u00e3o 4.0 o principal elemento usado para segmentar as partes de uma p\u00e1gina html passou a ser o <div> que \u00e9 um um elemento de divis\u00e3o gen\u00e9rico para agrupar qualquer conjunto de elementos necess\u00e1rios. Por exemplo: // html < div > < h1 > Titulo </ h1 > < p > Par\u00e1grafo pequeno </ p > < ol > < li > Item </ li > < li > Item </ li > </ ol > </ div > Na vers\u00e3o 5 do HTML passamos a ter v\u00e1rios tipos de elementos com a mesma fun\u00e7\u00e3o dos <div> mas agora com nomes mais f\u00e1ceis de usar. As vezes nos referimos a eles como elementos sem\u00e2nticos . O novos elementos sem\u00e2nticos apresentados na vers\u00e3o 5 do html s\u00e3o: Elementos Descri\u00e7\u00e3o <article> Define um artigo <aside> Conte\u00fado ao lado da p\u00e1gina <details> Detalhes adicionais <figcaption> T\u00edtulo para <figure> <figure> Elemento autocontido <footer> Rodap\u00e9 para se\u00e7\u00e3o <header> Cabe\u00e7alho para se\u00e7\u00e3o <main> Conte\u00fado principal <mark> Texto destacado <nav> Conte\u00fado de navega\u00e7\u00e3o <section> Se\u00e7\u00e3o do documento <summary> Resumo <time> Define data/hora Quando constru\u00edmos a estrutura do nosso site apenas com elementos <div> gen\u00e9ricos, n\u00f3s n\u00e3o estamos indicando nenhuma rela\u00e7\u00e3o entre essas se\u00e7\u00f5es. Quando usamos a divis\u00e3o via elementos sem\u00e2nticos, permitimos um processamento por algoritmos de modo a abrir todo um leque de possibilidades de intera\u00e7\u00f5es a partir disso. Esse \u00e9 um dos motivos que justificam o nome da web 3.0 como sendo web sem\u00e2ntica . Abaixo temos duas maneiras de representar uma estrutura de um site. A primeira em estrutura gen\u00e9rica de div e a outra em elementos sem\u00e2nticos. Veja como a segunda abordagem \u00e9 mais simples de ler. N\u00e3o \u00e9 dif\u00edcil perceber que o uso de elementos sem\u00e2nticos \u00e9 fortemente indicado para o desenvolvimento de aplica\u00e7\u00f5es web modernas.","title":"Elementos Estruturais"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#elementos-de-tabelas","text":"N\u00e3o \u00e9 nada incomum ter que demonstrar dados usando uma tabela. Pensando nisso, a linguagem HTML tamb\u00e9m possui um elemento especificamente criado para cria\u00e7\u00e3o de tabelas. Uma tabela pode ser criada com o uso das seguintes tags: // html < table border = \"1\" > --------------> Cria a Tabela < caption > T\u00edtulo </ caption > -> Coloca um T\u00edtulo < tr > ------------------------> Table Row (tr) < td > L1C1 </ td > -----------> Table Data Column 1 < td > L1C2 </ td > -----------> Table Data Column 2 </ tr > < tr > < td > L2C1 </ td > -----------> Table Data Column 1 < td > L2C2 </ td > -----------> Table Data Column 2 </ tr > </ table > Existem v\u00e1rios elementos que podem ser usados dentro de uma tabela. S\u00e3o os principais: Elementos Descri\u00e7\u00e3o <table> Elemento que cria a tabela <caption> T\u00edtulo da tabela <thead> Linhas do cabe\u00e7alho <tbody> Linhas do body <tfoot> Linhas do rodap\u00e9 <tr> Linha da tabela <th> Cabe\u00e7alho dentro de uma linha <td> Table data Coment\u00e1rio: N\u00e3o podemos cair na tenta\u00e7\u00e3o de usar tabelas como ferramenta de layout da p\u00e1gina. Pode at\u00e9 parecer mais simples no come\u00e7o mas tabelas n\u00e3o s\u00e3o boas para cria\u00e7\u00e3o de aplica\u00e7\u00f5es fluidas e din\u00e2micas.","title":"Elementos de Tabelas"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#elementos-de-formularios","text":"Uma das intera\u00e7\u00f5es mais b\u00e1sicas que precisamos de um usu\u00e1rio \u00e9 a inser\u00e7\u00e3o de dados na aplica\u00e7\u00e3o. Dentre as v\u00e1rias maneiras de conseguirmos um dado inserido pelo usu\u00e1rio, o formul\u00e1rio \u00e9 a mais simples. O HTML fornece v\u00e1rios atributos dentro do elemento <form></form> que nos permite a criar campos de texto, bot\u00f5es clic\u00e1veis, campos de senha e etc. A sintaxe mais b\u00e1sica de um formul\u00e1rio \u00e9 dada por: // html < form name = \"form_name\" action = \"login.html\" method = \"POST\" > Usu\u00e1rio: < br > < input type = \"text\" name = \"user\" value = \"\" > < br > Senha: < br > < input type = \"password\" name = \"psw\" value = \"\" > < br > < br > < input type = \"submit\" value = \"OK\" > </ form > Podemos usar o atributo name ou id para identificar o nosso formul\u00e1rio 3 . O atributo action indica qual URL vai ser disparada uma vez processado o form (no nosso exemplo seria algo como http://server.com/login.html ). O atributo method indica o m\u00e9todo HTTP de submiss\u00e3o dos dados do formul\u00e1rio no nosso bando de dados (pode ser POST ou GET ). Quando o m\u00e9todo usado for o GET , o browser faz uma requisi\u00e7\u00e3o da URL indicada para o servidor passando os par\u00e2metros de input como querystring na URL. No nosso exemplo, ficaria como http://server.com/login.html/ login.html?user=texto&psw=123 . Quando o m\u00e9todo escolhido \u00e9 o POST , os dados s\u00e3o enviados ao servidor no corpo da requisi\u00e7\u00e3o HTTP e n\u00e3o aparecem na URL. A essa altura voc\u00ea j\u00e1 deve ser capaz de entender as diferen\u00e7as entre esses dois m\u00e9todos.","title":"Elementos de Formul\u00e1rios"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#elemento-input","text":"Esse elemento \u00e9 bastante utilizado na composi\u00e7\u00e3o dos formul\u00e1rios (na verdade, eu nem consigo pensar em um formul\u00e1rio sem pelo menos um input). Ele define os campos ou entradas de informa\u00e7\u00e3o e possui os seguintes atributos: type - Cada tipo de input possui uma visualiza\u00e7\u00e3o diferente quando a p\u00e1gina \u00e9 carregada. Isso \u00e9 feito para permitir uma melhor intera\u00e7\u00e3o do usu\u00e1rio de acordo com a natureza da informa\u00e7\u00e3o requerida. As op\u00e7\u00f5es s\u00e3o: text - Campo de texto aberto. A quantidade de caracteres pode ser controlada pelo atributo maxlength . number - S\u00f3 aceita n\u00famero como input e permite a sele\u00e7\u00e3o por umas setinhas que aparecem ao lado do campo. password - Igual ao campo texto mas com os caracteres anonimizados. email - Confere se o texto inserido possui um @ antes de salvar o formul\u00e1rio. date - Coloca uma m\u00e1scara no formato de data e cria uma op\u00e7\u00e3o de input por calend\u00e1rio. radio button - Uma op\u00e7\u00e3o clic\u00e1vel com um valor associado e um nome. O navegador s\u00f3 permite que um \u00fanico radio button esteja selecionado se existir mais de uma op\u00e7\u00e3o com o mesmo nome no atributo name . checkbox - Mesma l\u00f3gica do radio button mas com permiss\u00e3o de v\u00e1rios selecionados simultaneamente. submit - \u00c9 um bot\u00e3o clic\u00e1vel que normalmente dispara a informa\u00e7\u00e3o do formul\u00e1rio ao servidor web ou a um script JS local. reset - \u00c9 igual um submit mas a \u00fanica fun\u00e7\u00e3o dele \u00e9 apagar tudo que foi preenchido no formul\u00e1rio. name - Nome de identifica\u00e7\u00e3o do campo. value - Valor contudo no campo. placeholder - Valor que aparece quando o campo estiver vazio. required - Valida\u00e7\u00e3o autom\u00e1tica para evitar o n\u00e3o preenchimento do campo antes da submiss\u00e3o do form. disabled - Inativa o campo e n\u00e3o permite intera\u00e7\u00e3o mas o user ainda poder\u00e1 ver. Na imagem abaixo podemos ver como cada tipo do elemento <input> aparece para um usu\u00e1rio:","title":"Elemento &lt;input&gt;"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#elemento-textarea","text":"Esse \u00e9 tranquilo de entender. Sempre que precisarmos de um input de texto maior do que uma linha, podemos usar o elemento <textarea name=\"\" rows=\"10\" cols=\"50\"></textarea> para isso. \u00c9 poss\u00edvel alterar a quantidade de linhas e a n\u00famero de colunas para apresenta\u00e7\u00e3o da nossa caixa de texto apenas mudando os par\u00e2metros dos atributos.","title":"Elemento &lt;textarea&gt;"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#elemento-select","text":"Podemos permitir que o usu\u00e1rio selecione uma lista pr\u00e9-selecionada de op\u00e7\u00f5es atrav\u00e9s de uma lista em caixa (tamb\u00e9m chamada de dropdown menu ). Um exemplo de c\u00f3digo contendo esse elemento por ser visto abaixo. // html < label for = \"lista\" > Dropdown Menu </ label > < select name = \"lista\" > < option value = \"\" > Selecione uma op\u00e7\u00e3o </ option > < option value = \"01\" > Op\u00e7\u00e3o 01 </ option > < option value = \"02\" > Op\u00e7\u00e3o 02 </ option > < option value = \"03\" > Op\u00e7\u00e3o 03 </ option > < option value = \"04\" > Op\u00e7\u00e3o 04 </ option > < option value = \"05\" > Op\u00e7\u00e3o 05 </ option > </ select > \u00c9 poss\u00edvel transformar a lista suspensa em uma lista fixa que permite mais de uma sele\u00e7\u00e3o. Para fazer isso \u00e9 s\u00f3 adicionar o atributo multiple e tamb\u00e9m o atributo size= no elemento select . Perceba que al\u00e9m do elemento de lista n\u00f3s trouxemos um novo elemento chamado label que adiciona um texto associado a algum elemento. No nosso exemplo, veja como foi indicado no atributo for o mesmo nome que o atributo name recebe dentro do elemento select . O resultado pode ser visto abaixo:","title":"Elemento &lt;select&gt;"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#a-linguagem-css","text":"N\u00f3s falamos na parte inicial do nosso estudo sobre HTML, mas especificamente na parte do cabe\u00e7alho, que uma das refer\u00eancias que normalmente fazemos \u00e9 a de uma Cascading Style Sheet (CSS) . A ideia por tr\u00e1s disso \u00e9 que a manuten\u00e7\u00e3o e o desenvolvimento da aplica\u00e7\u00e3o web fica mais simples quando trabalhamos todo o aspecto de estilo visual em um arquivo separado (.css) do arquivo que trata da estrutura da aplica\u00e7\u00e3o (.html). Contudo, na realidade, existem outras formas de trabalhar o visual da aplica\u00e7\u00e3o al\u00e9m do arquivo .css em separado. No geral, podemos dizer que existem 3 formas de gerenciamento de estilo de um aplica\u00e7\u00e3o web: CSS externo - Melhor forma. Nosso material estar\u00e1 focado nesse tipo de arquitetura. Bloco interno - As regras ficam no pr\u00f3prio arquivo html. Pode ter aplica\u00e7\u00f5es para quest\u00f5es muito espec\u00edficas. Mas as atualiza\u00e7\u00f5es v\u00e3o precisar ser feitas em cada p\u00e1gina, sempre que necess\u00e1rio. Atributo inline - Pior forma. Aqui, as regras de estilo s\u00e3o definidas diretamente no elemento html. Qualquer m\u00ednima altera\u00e7\u00e3o ter\u00e1 de ser feita diretamente no elemento e em todas as p\u00e1ginas. Aqui podemos ver um exemplo de cada aplica\u00e7\u00e3o do estilo visual que elencamos acima: // html <!DOCTYPE html> < html lang = \"en\" > < head > < title > Exemplo CSS </ title > ###Esse \u00e9 um exemplo de arquivo externo### < link rel = \"stylesheet\" href = \"style.css\" type = \"text/css\" > ###Exemplo de bloco interno#### < style type = \"text/css\" > p { font-size : 10 pt ; font-family : \"Verdana\" ; color : blue ; } h1 { font-size : 16 pt ; font-family : \"Impact\" ; color : red ; } </ style > </ head > < body > ####Exemplo de inline##### < p style = \"margin-left: 0.5in; font-size: 8pt;\" > Texto do par\u00e1grafo </ p > </ body > </ html > A prioridade de leitura das regras de estilo que o browser vai usar \u00e9 1) inline, 2) Bloco interno, 3) CSS externo e 4) Default do navegador.","title":"A Linguagem CSS"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#sintaxe-da-linguagem-css","text":"A leitura de um arquivo CSS \u00e9 bem simples. A primeira coisa que precisamos saber \u00e9 quais elementos est\u00e3o presentes no html que ser\u00e1 trabalhado e quais desses elementos possuem atribui\u00e7\u00e3o de id espec\u00edfico. Por exemplo, se tivermos no nosso html dois elementos <p> , s\u00f3 que um deles possui o atributo id <p id=\"teste\"> . Para criarmos uma regra de estilo no nosso CSS basta escrevermos a tag do elemento (sem os s\u00edmbolos <> ) do seguinte modo. // css p { color : red ; } Essa regra diz que todos os textos contidos nos elementos <p> ter\u00e3o a cor vermelha. Contudo, se quisermos adotar uma regra espec\u00edfica para apenas um elemento em quest\u00e3o, podemos definir a regra no css diretamente para o elemento com o seu id. // css # teste { color : black ; } Isso nos dar\u00e1 uma p\u00e1gina onde todos os textos dos par\u00e1grafos ser\u00e3o vermelhos \u00e0 exce\u00e7\u00e3o do par\u00e1grafo identificado pelo id=\"teste\" . Podemos resumir a sintaxe do CSS como sendo: // css seletor { propriedade_1 : valor_da_propriedade_1 ; propriedade_2 : valor_da_propriedade_2 ; ... propriedade_n : valor_da_propriedade_n ; } Ou seja, para aprender bem CSS, vamos precisar aprender as v\u00e1rias maneiras de selecionar os elementos da p\u00e1gina html e as propriedades de estilo que o CSS nos permite manipular na constru\u00e7\u00e3o das nossas aplica\u00e7\u00f5es web.","title":"Sintaxe da linguagem CSS"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#seletores-de-elementos","text":"Eu j\u00e1 adianto, existem muitos tipos de seletores. N\u00f3s precisamos decorar todos os tipos? Evidente que n\u00e3o. O importante \u00e9 saber que o estilo de uma aplica\u00e7\u00e3o pode ser desenvolvido de v\u00e1rias maneiras e que, quanto melhor for o m\u00e9todo de organiza\u00e7\u00e3o do CSS, mais f\u00e1cil ser\u00e1 o desenvolvimento e a manuten\u00e7\u00e3o da aplica\u00e7\u00e3o no futuro. A tabela a seguir \u00e9 uma refer\u00eancia para os v\u00e1rios tipos de seletores em CSS. Tipo Link com HTML Exemplo de Sintaxe Elemento Nome da tag html p {color:blue;} Identificador id dos elementos #ident {color:blue;} Classe Classe dos elementos .classe {color:blue;} Atributo Atributos dos elementos [atrib] {color:blue;} [id=\"p01\"] {color:blue;} [class~=\"marked\" {color:blue;} Pseudo-Classe Situa\u00e7\u00f5es dos elementos p:first-of-type {color:blue;} p:nth-child(3) {color:blue;} :hover {color:blue;} Pseudo-Elemento Partes de elementos p::first-letter {color:blue;} p::first-time {color:blue;} p::after {color:blue;} Universal Todos os elementos * {color:blue;} Podemos ver que existem v\u00e1rios modelos de seletores para os elementos html de um p\u00e1gina. Alguns deles s\u00e3o dependente de contexto de intera\u00e7\u00e3o do elemento. Especialmente, as situa\u00e7\u00f5es de pseudo-classe s\u00e3o muito \u00fateis para cria\u00e7\u00e3o de aplica\u00e7\u00f5es fluidas e avan\u00e7adas. Link para lista de todos os pseudo-elementos e pseudo-classes suportados pelo CSS atualmente: link .","title":"Seletores de Elementos"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#combinacao-de-seletores","text":"Podemos usar combina\u00e7\u00f5es de seletores para definir as regras de estilo das nossas aplica\u00e7\u00f5es web. Essas combina\u00e7\u00f5es obedecem a determinadas regras que devem ser seguidas para se obter o resultado esperado. Abaixo segue uma tabela de refer\u00eancia. Regra Interpreta\u00e7\u00e3o A,B {...} Aplica a mesma regra em A e B A.B {...} classes e ids associados \u00e0 A e B ao mesmo tempo A B {...} Elementos em B que tamb\u00e9m perten\u00e7am a A A > B {...} Elementos em B filhos de elementos de A A + B {...} Elemento em B pr\u00f3ximo irm\u00e3o de elementos de A A ~ B {...} Elementos em B pr\u00f3ximos irm\u00e3os de elementos de A","title":"Combina\u00e7\u00e3o de Seletores"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#prioridade-de-seletores","text":"O processamento das declara\u00e7\u00f5es CSS obedecem a ordem em 3 regras: O processamento \u00e9 de cima para baixo. A \u00faltima declara\u00e7\u00e3o \u00e9 a que prevalecer\u00e1. Regras espec\u00edficas s\u00e3o prioridade em rela\u00e7\u00e3o \u00e0 regras gerais. As declara\u00e7\u00f5es marcadas como importantes p {color: red !important;} s\u00e3o priorit\u00e1rias.","title":"Prioridade de Seletores"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#valores-e-unidades","text":"Aten\u00e7\u00e3o aqui. Entender bem quais unidades podem ser usadas e os tipos de unidades ajuda muito o desenvolvimento de interfaces bem planejadas e responsivas. Aqui tem um link com um material de refer\u00eancia sobre esse assunto.","title":"Valores e Unidades"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#cores-em-css","text":"Existem infinitas combina\u00e7\u00f5es de cores para a paleta que ser\u00e1 usada em qualquer aplica\u00e7\u00e3o web. Existem diferentes maneiras de definir quais cores ser\u00e3o usadas em CSS: RGB hexadecimal - #RRGGBB RGB abreviado - #RGB RGB decimal - rgb(rrr,ggg,bbb) Palavras-Chaves Podemos usar qualquer uma dessas codifica\u00e7\u00f5es para definir as cores que vamos usar no estilo das nossas aplica\u00e7\u00f5es web.","title":"Cores em CSS"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#display-e-box-model","text":"Um dos aspectos mais importantes na constru\u00e7\u00e3o de uma aplica\u00e7\u00e3o web \u00e9 a disposi\u00e7\u00e3o dos elementos. Agora que aprendemos como a linguagem CSS nos fornece uma maneira mais simples de controlar as informa\u00e7\u00f5es de estilo da nossa p\u00e1gina HTML, vamos aprender como controlamos os locais onde os elementos s\u00e3o dispostos. A propriedade display \u00e9 que determina como um elemento e seus filhos s\u00e3o dispostos na p\u00e1gina. Alguns valores dessa propriedade se referem a maneira como o elemento \u00e9 organizado em rela\u00e7\u00e3o aos elementos irm\u00e3os e alguns valores se referem a maneira como seus elementos filhos s\u00e3o dispostos dentro do elemento pai. Caso n\u00e3o coloquemos nenhuma informa\u00e7\u00e3o de display nos elementos, eles possuem uma categoria default pr\u00f3pria que pode ser do tipo inline ou block . Os elementos inline s\u00e3o colocados automaticamente um ao lado do outro na mesma linha enquanto existir espa\u00e7o na tela. <a> <span> <img> <button> <input> etc Os elementos block sempre ocupam uma linha inteira da p\u00e1gina. <div> <h1> ... <h6> <p> <form> <canvas> <table> etc Mais ou menos como nessa imagem abaixo Podemos modificar o comportamento padr\u00e3o de um elemento atrav\u00e9s do par\u00e2metro display: no CSS. Por exemplo, para transformar os <input> em um elemento sozinho na p\u00e1gina, podemos colocar no CSS a seguinte linha // css input { display : block ; margin : 0 auto ; } No caso de elementos inside 4 , o atributo display pode receber os valores display=\"table\" , display=\"grid\" e display=\"flex\" . Quando colocamos esses atributos nos elementos inside, o elemento que o cont\u00e9m, que chamamos de elemento pai (outside), automaticamente vira um elemento do tipo display=\"block\" . A propriedade display=\"table\" em um elemento outside permite que os elementos inside recebam varia\u00e7\u00f5es desse atributo para a constru\u00e7\u00e3o de layout em formato de tabela. Desse modo, se nosso elemento outside \u00e9 do tipo display=\"table\" , ent\u00e3o, os elementos inside podem ser \"table-row\" , \"table-cell\" , \"table-column\" , \"table-caption\" , \"table-row-group\" , \"table-header-group\" e \"table-footer-group\" . A propriedade display=\"flex\" permite que os elementos inside sejam controlados de maneira fluida para se ajustar \u00e0 largura da janela do navegador. A propriedade display=\"grid\" permite um controle das regi\u00f5es onde os elementos inside ser\u00e3o dispostos. Isso d\u00e1 mais controle ao desenvolver. Veremos com mais calma os atributos display:flex e display:grid porque eles s\u00e3o usados na constru\u00e7\u00e3o de aplica\u00e7\u00f5es mais fluidas e din\u00e2micas.","title":"Display e Box Model"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#box-model","text":"Existe um conjunto de atributos CSS que comp\u00f5e o que podemos chamar de box model . A ideia aqui \u00e9 que podemos trabalhar os elementos como pertencentes a uma ``caixa'' imagin\u00e1ria. Isso torna o design da aplica\u00e7\u00e3o mais simples de compreender e tamb\u00e9m facilita o posicionamento dos elementos ao longo da nossa p\u00e1gina. Os atributos CSS que comp\u00f5e o modelo de caixa s\u00e3o: margin border padding width height background-color As propriedades de margin , border e padding aceitam atributos de orienta\u00e7\u00e3o como top-right-bottom-left . Caso queira aplicar o mesmo valor para todos \u00e9 s\u00f3 informar um \u00fanico valor no atributo. Se quiser discriminar, \u00e9 s\u00f3 apontar os valores na ordem descrita no sentido hor\u00e1rio ou usar a propriedade inteira para cada lado. A imagem abaixo deixa mais f\u00e1cil a compreens\u00e3o do atributos do modelo de caixa. Durante a elabora\u00e7\u00e3o da interface n\u00e3o \u00e9 nada incomum usar as bordas como m\u00e9todo de visualiza\u00e7\u00e3o. O comando que cria a borda \u00e9 border: solid 20px black","title":"Box Model"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#fundo-de-elementos-background","text":"Todo elementos html possui um atributo de background que pode ser acessado pelos seguintes comandos: background-color - Cor de fundo background-image - Imagem ou gradiente 5 background-repeat - Comando caso a img n\u00e3o seja do tamanho do elemento. Pode ser do tipo repeat , repeat-x , repeat-y , space , round background-position - Define a posi\u00e7\u00e3o inicial da imagem. Pode ser do tipo top , left , right , center , bottom","title":"Fundo de Elementos (Background)"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#propriedades-de-texto","text":"Existem v\u00e1rias propriedades quando o assunto \u00e9 texto em CSS. Abaixo podemos ver uma tabela para refer\u00eancia. Aqui tem um material bem completo fornecido pelo Mozilla","title":"Propriedades de Texto"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#fontes-de-texto-na-web","text":"O CSS nos d\u00e1 as seguintes op\u00e7\u00f5es de letras: serif, sans-serif,monospace, cursive e fantasy. Contudo, n\u00f3s nunca teremos certeza se o navegados do user ter\u00e1 a capacidade de carregar a fonte que desejamos. Para evitar esse problema, podemos definir op\u00e7\u00f5es de fontes do seguinte modo: // css p { font-family : \"Trebuchet MS\" , Verdana , sans-serif ; } O navegador do user vai tenter renderizar a p\u00e1gina usando a primeira op\u00e7\u00e3o, caso ele n\u00e3o consiga, ele vai para as outras op\u00e7\u00f5es. Al\u00e9m das op\u00e7\u00f5es padr\u00e3o CSS, podemos usar fontes propriet\u00e1rias de outras fontes (Google Fonts, DaFont, Adobe e etc). A maneira de fazer isso \u00e9 definir uma propriedade de importa\u00e7\u00e3o como no exemplo abaixo // css @ import url ( 'https://fonts.googleapis.com/css?family=Baloo' ) ; div { font-family : 'Baloo' , cursive ; }","title":"Fontes de Texto na Web"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#layouts-responsivos","text":"N\u00e3o \u00e9 nada incomum acharmos sites que respondem dinamicamente ao tamanho da tela. Agora vamos aprender um pouco sobre esse m\u00e9todo de desenvolvimento de aplica\u00e7\u00f5es web. O Responsive Web Design (RWD) \u00e9 a ferramenta que define o layout de um site de modo din\u00e2mico ao tamanho da tela ou janela do dispositivo. Para poder usar esse m\u00e9todo, n\u00f3s precisamos planejar nosso c\u00f3digo HTML e CSS de maneira compat\u00edvel com essa metodologia. Os principais padr\u00f5es de layout responsivos s\u00e3o. Por enquanto eu vou deixar esse se\u00e7\u00e3o mais enxuta: Mostly Fluid Column Drop Layout Shifter Off Canvas Tiny Tweaks","title":"Layouts Responsivos"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#media-queries","text":"As media queries s\u00e3o os par\u00e2metros usados na aplica\u00e7\u00e3o que usam alguma caracter\u00edstica do dispositivo onde a p\u00e1gina est\u00e1 sendo exibida. Abaixo n\u00f3s podemos ver um exemplo de elemento HTML com media query. // html < head > < link rel = \"stylesheet\" media = 'screen and (min-width: 900px)' href = \"tela_g.css\" > < link rel = \"stylesheet\" media = 'screen and (max-width: 600px)' href = \"tela_p.css\" > </ head > Nesse exemplo HTML, podemos ver como, de acordo com o tamanho da tela, o arquivo de estilo CSS carregado vai ser o \"tela_g.css\" ou o \"tela_p.css\". Do lado do CSS, a sintaxe das media queries s\u00e3o usadas da seguinte maneira: // css body { background-color : red ; } @ media screen and ( min-width : 600px ) { body { background-color : orange ;} } @ media screen and ( min-width : 800px ) { body { background-color : yellow ;} } Podemos ver que, de acordo com a largura da tela, o CSS envia para o navegador uma cor de fundo do body diferente. Agora estamos come\u00e7ando a ver a l\u00f3gica por tr\u00e1s dos designs responsivos. As op\u00e7\u00f5es de media types s\u00e3o: all - Qualquer tipo de m\u00eddia handheld - Para telas responsivas ao toque print - Impressoras screen - Telas de computadores, smartphones e tablets outras As op\u00e7\u00f5es de media features s\u00e3o as caracter\u00edsticas dos dispositivos tais como: color - Profundidade de cores em bits color-index - N\u00famero de cores indexadas width e height - Largura e altura do viewport device-width e device-height - Largura e altura do dispositivo orientation - Propor\u00e7\u00e3o do viewport (portrait ou landscape) resolution - Resolu\u00e7\u00e3o de sa\u00edda em dpi","title":"Media Queries"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#resolucao-e-viewport","text":"Quando as tela mudam de tamanho, o valor do pixel tamb\u00e9m \u00e9 alterado. Para resolver esse problema, o CSS utiliza um m\u00e9todo de c\u00e1lculo que padroniza as medidas independentemente do tamanho da tela. Se nossa aplica\u00e7\u00e3o for desenvolvida para uma tela com 1920 pixels (full HD), podemos converter cada pixel em uma nova unidade que permita a aplica\u00e7\u00e3o recalcular os tamanhos dos componentes em pixels de modo a se adequar melhor ao display. No exemplo a abaixo, n\u00f3s estamos \"mudando\" o valor padr\u00e3o do pixel para caber em uma tela com 1/3 de 1920 (640 pixels): \\[ Viewport = \\dfrac{ \\textrm{Resolu\u00e7\u00e3o}}{ \\textrm{Pixel-Ratio}} = \\dfrac{1920}{3} = 640 \\ pixels \\] Para habilitar esse m\u00e9todo de ajuste, o HTML precisa ter a seguinte linha no head : // html < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > A Vantagem dessa abordagem \u00e9 que ela permite a manuten\u00e7\u00e3o da leitura quando nossa p\u00e1gina \u00e9 carregada por telas menores. Tamb\u00e9m podemos controlar a capacidade de rolagem e zoom do usu\u00e1rio por meio dessa meta tag.","title":"Resolu\u00e7\u00e3o e Viewport"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#layout-flex","text":"J\u00e1 aprendemos como reduzir a escala da nossa aplica\u00e7\u00e3o com o viewport. Mas, em telas de smartphones ou monitores pequenos, simplesmente reduzir a aplica\u00e7\u00e3o para caber no dispositivo pode n\u00e3o ser suficiente para uma boa experi\u00eancia. No Layout Flex (flexbox) n\u00f3s podemos definir o comportamento dos elementos html filhos dentro de um bloco maior. Nesse modelo, n\u00f3s conseguimos mudar o posicionamento relativo dos elementos filhos sempre que a tela se comportar de determinada maneira prevista (como o caso do nosso site ser aberto em uma tela de smartphone ao inv\u00e9s de um monitor). Para usar esse recurso, usaremos no elemento pai 6 o par\u00e2metro display: flex; flex-wrap: wrap; . Al\u00e9m de definirmos o tipo de display no elemento pai, usaremos a media query para ajustar o tamanho ideal dos elementos na tela. Podemos ver melhor no exemplo de c\u00f3digo abaixo: // html <!DOCTYPE html> < body > < main class = 'container' > < div id = \"orange\" ></ div > < div id = \"green\" ></ div > < div id = \"yellow\" ></ div > </ main > </ body > </ html > // css . container { display : flex ; flex-wrap : wrap ; } div { height : 80 px ; width : 100 % ; } /* tela pequena */ # orange { background-color : orange ; order : 1 ; } # green { background-color : green ; order : 2 ; } # yellow { background-color : yellow ; order : 3 ; } /* tela media */ @ media screen and ( min-width : 600px ) { # orange { width : 100 % } # green { width : 70 % } # yellow { width : 30 % } } /* tela grande */ @ media screen and ( min-width : 1000px ) { # orange { width : 40 % } # green { width : 40 % } # yellow { width : 20 % } } O resultado desses c\u00f3digos acima produzem o seguinte resultado:","title":"Layout Flex"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#layout-grid","text":"Para al\u00e9m das medias queries e layout flex, podemos construir o front end de uma aplica\u00e7\u00e3o usando o Sistema Grid que o CSS possui. A ideia \u00e9 pensar no front end da aplica\u00e7\u00e3o em termos de dois elementos visuais: O Container e os Itens. Coment\u00e1rio: Depois eu vou revisitar essa se\u00e7\u00e3o com base no material dispon\u00edvel nesse link . O sistema Grid possui alguns conceitos que nos ajudam a criar e manter a interface de uma aplica\u00e7\u00e3o que use essa metodologia: Line - Separa as cells Cell - \u00c9 uma unidade encapsulada em uma linha e uma coluna Area - Conjunto de cells Track - Um conjunto linear de cells (uma linha ou uma coluna do grid) Abaixo temos o c\u00f3digo de uma aplica\u00e7\u00e3o simples usando esse sistema de constru\u00e7\u00e3o de front end: // html < body > < div class = \"container\" > < header > Header </ header > < main > Main </ main > < nav > Sidebar </ nav > < footer > Footer </ footer > </ div > </ body > // css body { background-color : rgb ( 255 , 255 , 255 ); } . container { height : 700 px ; display : grid ; grid-template-columns : 20 % 30 % 30 % 19 % ; grid-template-rows : auto ; grid-template-areas : \"header header header header\" \"main main main sidebar\" \"footer footer footer footer\" ; column-gap : 5 px ; row-gap : 5 px ; } header { grid-area : header ; background-color : orange ; height : 100 px ; } main { grid-area : main ; background-color : blue ; height : 500 px ; } nav { grid-area : sidebar ; background-color : red ; height : 500 px ; } footer { grid-area : footer ; background-color : green ; margin : solid black 5 px ; height : 100 px ; } Com base nessa l\u00f3gica, podemos posicionar elementos usando o sistemas de coordenadas do CSS Grid. Vamos refazer a interface que acabamos de ver usando apenas esse conceito de \"items\" dentro de um \"container\". Ao inv\u00e9s de definir a separa\u00e7\u00e3o da tela como par\u00e2metro da classe container no CSS, n\u00f3s vamos criar o container e orientar, dentro de cada item, como ele se comportar\u00e1 no grid. // html < body > < div class = \"container\" > < div class = \"item-a\" > Header </ div > < div class = \"item-b\" > Main </ div > < div class = \"item-c\" > Nav </ div > < div class = \"item-d\" > Footer </ div > </ div > </ body > // css body { background-color : rgb ( 255 , 255 , 255 ); } . container { height : 700 px ; display : grid ; grid-template-columns : 24 % 25 % 25 % 25 % ; grid-template-rows : 10 % 80 % 10 % ; grid-column-gap : 5 px ; grid-row-gap : 5 px ; } . item-a { background-color : orange ; grid-column-start : 1 ; grid-column-end : span 4 ; grid-row-start : 1 ; grid-row-end : 1 ; } . item-b { background-color : blue ; grid-column-start : 1 ; grid-column-end : span 3 ; grid-row-start : 2 ; grid-row-end : 2 ; } . item-c { background-color : red ; grid-column-start : 4 ; grid-column-end : 4 ; grid-row-start : 2 ; grid-row-end : 2 ; } . item-d { background-color : green ; grid-column-start : 1 ; grid-column-end : span 4 ; grid-row-start : 3 ; grid-row-end : 3 ; } Nem vale a pena mostrar uma imagem do resultado porque ele \u00e9 exatamente igual \u00e0 imagem anterior. Com isso, podemos ver que \u00e9 o desenvolvimento de uma interface de aplica\u00e7\u00e3o web pode ser feito de diferentes maneiras, mas o que realmente importa \u00e9 uma boa documenta\u00e7\u00e3o e um planejamento bem feito para que o cliente termine com o que ele realmente precisa e o time de desenvolvimento n\u00e3o precise perder preciosas horas no bem conhecido ciclo de ``vai-e-volta'' at\u00e9 que o cliente aceite algum layout.","title":"Layout Grid"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#exemplo-de-aplicacao-web-responsiva","text":"Para finalizar nosso estudo de desenvolvimento web com CSS vamos fazer uma aplica\u00e7\u00e3o simples. O prot\u00f3tipo no MarvelApp pode ser visto nesse link . Coment\u00e1rio: Acredite, com os conceitos aprendidos at\u00e9 agora n\u00f3s j\u00e1 conseguimos fazer aplica\u00e7\u00f5es simples com p\u00e1ginas est\u00e1ticas com relativa facilidade. A prova disso \u00e9 que enquanto escrevo esse par\u00e1grafo acabamos de criar a primeira p\u00e1gina da aplica\u00e7\u00e3o web front end que meu grupo precisa entregar como projeto do primeiro semestre da gradua\u00e7\u00e3o. Eu usei, basicamente, apenas o que aprendemos aqui e alguma pesquisa no google para coisas mais simples.","title":"Exemplo de Aplica\u00e7\u00e3o Web Responsiva"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#frameworks-front-end-bootstrap","text":"Como era de se esperar, os programadores perceberam que era poss\u00edvel combinar v\u00e1rias pr\u00e1ticas do mercado em \"pacotes\",\"bibliotecas\" ou \"frameworks\" que, no fundo, s\u00e3o c\u00f3digos escritos em HTML, CSS e JavaScript. Essas ferramentas facilitam demais o processo de desenvolvimento mas, como tudo na vida, precisam ser usadas com modera\u00e7\u00e3o e habilidade. N\u00e3o podemos correr o risco de virarmos \"escravos\" de nenhum framework. Com o devido aviso dado, podemos iniciar nosso estudo de Frameworks famosos com o Boostrap. A culpa de v\u00e1rias sites que acessamos terem um \"jeit\u00e3o\" parecido \u00e9, em boa parte, desse framework que at\u00e9 hoje \u00e9 o mais famoso. Foi desenvolvido em 2011 por Mark Otto e Jacob Thornton no Twitter e disponibilizado no GitHub. O Bootstrap se ajusta automaticamente a diferentes modelos de tela porque tem, dentro dele, tamanhos pr\u00e9-determinados de telas que se ajustam ao dispositivo. A \"fronteira\" entre os tamanhos de tela s\u00e3o os chamados Breakpoints . A tabela abaixo resume as rela\u00e7\u00f5es entre tamanho da tela e ajuste do container da aplica\u00e7\u00e3o. O site oficial pode ser acessado nesse link . Extra Small Small Medium Large Extra Large <57px \\(\\geq\\) 576px \\(\\geq\\) 768px \\(\\geq\\) 992px \\(\\geq\\) 1200px Max container size (auto) 540px 720px 960px 1140px Nome da Classe .col- .col-sm- .col-md- .col-lg- .col-xl-","title":"Frameworks front-end - Bootstrap"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#download-do-bootstrap","text":"Existem duas op\u00e7\u00f5es de download desse Framework: CSS e JS compilados - J\u00e1 vem pronto pra uso mas \u00e9 um pouco limitado. C\u00f3digo Fonte - Permite customiza\u00e7\u00e3o e vem com as fontes do Bootstrap mas precisa de compila\u00e7\u00e3o. Para saber como fazer basta uma pesquisa r\u00e1pida no youtube.","title":"Download do Bootstrap"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#conteudo-do-boostrap","text":"A melhor fonte sobre qualquer tecnologia geralmente \u00e9 a pr\u00f3pria documenta\u00e7\u00e3o oficial . Mas podemos dividir as partes do Bootstrap em: Reboot - Para uniformiza\u00e7\u00e3o da apar\u00eancia em diferentes navegadores Tipografia - Textos e fontes Code - Linhas de c\u00f3digo Images - Relacionado aos recursos de imagens Tables - Relacionado aos recursos de tabelas Figures - Imagens com textos associados","title":"Conte\u00fado do Boostrap"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#componentes-do-boostrap","text":"N\u00f3s j\u00e1 sabemos que o HTML possui uma l\u00f3gica de estrutura\u00e7\u00e3o da p\u00e1gina. Contudo, quando estamos usando o Bootstrap temos que ``reaprender'' como pensar nossa estrutura da p\u00e1gina a partir dos conceitos e modelos do framework. Para o Bootstrap, a p\u00e1gina \u00e9 criada usando-se componentes . A lista \u00e9 bem grande mas podemos destacar alguns: Breadcrumb - Trilha com o caminho do site at\u00e9 uma p\u00e1gina Navbar - Barra de menu e pesquisa Carousel - Conjunto rotativo de imagens em destaque no site Cards - Cart\u00f5es para uso diverso. Podem ser imagens ou texto Modal - Caixas de di\u00e1logo (tipo um popup s\u00f3 que dentro da p\u00e1gina)","title":"Componentes do Boostrap"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#sistema-grid-no-bootstrap","text":"Como n\u00f3s j\u00e1 sabemos, o sistema grid \u00e9 uma maneira conveniente de controlarmos a estrutura visual da nossa aplica\u00e7\u00e3o. Diante disso, n\u00e3o \u00e9 surpreendente que esse framework tamb\u00e9m use uma vers\u00e3o dessa l\u00f3gica. Para o Bootstrap, todas as p\u00e1ginas ser\u00e3o sempre divididas em 12 colunas. Quando um elemento est\u00e1 dentro de outro, o padr\u00e3o de 12 colunas se mant\u00e9m. A l\u00f3gica de divis\u00e3o \u00e9 como na imagem abaixo: O c\u00f3digo HTML usando o Bootstrap \u00e9 fortemente baseado em <div> . A novidade est\u00e1 no uso de classes espec\u00edficas que d\u00e3o a l\u00f3gica contida nos arquivos usados pelo framework. A hierarquia \u00e9 similar ao grid system porque a aplica\u00e7\u00e3o existira dentro de um container. O Container ter\u00e1 pelo menos uma linha (row). Cada linha ter\u00e1 pelo menos uma coluna. Internalize essa hierarquia de Container, Linhas e Colunas. // html < div class = \"row\" > < div class = \"col-md-6\" id = \"cel1\" > .col-md-6 </ div > < div class = \"col-md-6\" id = \"cel2\" > .col-md-6 </ div > </ div > < div class = \"row\" > < div class = \"col-md-2\" id = \"cel1\" > .col-md-2 </ div > < div class = \"col-md-10\" id = \"cel2\" > .col-md-10 </ div > </ div > < div class = \"row\" > < div class = \"col-md-9\" id = \"cel1\" > .col-md-9 </ div > < div class = \"col-md-3\" id = \"cel2\" > .col-md-3 </ div > </ div > // css # cel1 { color : white ; background-color : red ; height : 100 px ; border : solid black 3 px ; } # cel2 { color : white ; background-color : blue ; height : 100 px ; border : solid black 3 px ; } Na pr\u00f3xima imagem podemos ver o resultado desse c\u00f3digo. O sistema de 12 colunas md-1 torna bem simples a disposi\u00e7\u00e3o dos conte\u00fados na tela.","title":"Sistema Grid no Bootstrap"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#a-linguagem-javascript","text":"J\u00e1 aprendemos que a Web utiliza a linguagem HTML para estrutura do conte\u00fado, a linguagem CSS para formato e apresenta\u00e7\u00e3o. Contudo, n\u00f3s sabemos que hoje em dia as aplica\u00e7\u00f5es possuem fun\u00e7\u00f5es bem complexas com sistemas inteiros baseados todo no navegador do client. A linguagem JavaScript \u00e9 justamente o mecanismo que tr\u00e1s essa capacidade de interatividade e processamento para \u00e0 web. Hoje em dia, a linguagem JavaScript (tamb\u00e9m chamada de JS) \u00e9 mantida pela ECMA International . Uma organiza\u00e7\u00e3o su\u00ed\u00e7a criada em 1961 cujas atividades s\u00e3o separadas em v\u00e1rios campos de atua\u00e7\u00e3o. Um desses campos \u00e9 a padroniza\u00e7\u00e3o de linguagens de programa\u00e7\u00e3o. Atualmente, ela elabora os padr\u00f5es para as linguagens ECMAScript (TC39), C# (TC49) e outras. Sim, \u00e9 isso mesmo. Nada de JavaScript. O JS foi criado em 1995 por Brendan Eich mas em 1996 foi transferido para a ECMA para padroniza\u00e7\u00e3o. O primeiro padr\u00e3o JS dentro do ECMAScript foi feito em 1997. Como consta na edi\u00e7\u00e3o 2020 do padr\u00e3o \"O ECMAScript \u00e9 baseado em v\u00e1rias tecnologias cujas mais conhecidas s\u00e3o o JavaScript (Netscape) e JScript (Microsoft)\". O ECMAScript foi adotado na maioria dos navegadores desde o final dos anos 90. Hoje em dia, praticamente todos os navegadores adotam o padr\u00e3o ECMAScript e, consequentemente, o JavaScript dentro deles. A ECMA International cria os padr\u00f5es e especifica\u00e7\u00f5es que permitam a execu\u00e7\u00e3o de uma determinada linguagem. O JS \u00e9 a implementa\u00e7\u00e3o dessas padroniza\u00e7\u00f5es dentro dos navegadores do mercado. Tanto \u00e9 assim, que diferentemente do que acontece com as outras linguagens como Python, R e etc, voc\u00ea n\u00e3o precisa instalar um interpretador ou um compilador para rodar c\u00f3digos em JS. Os navegadores possuem, dentro deles, um motor pr\u00f3prio que executa o padr\u00e3o ECMAScript. Para citar alguns desses motores: Navegador Motor Web Motor ECMAScript Firefox Gecko Spider Monkey Chrome Blink Google V8 Safari WebKit JavaScriptCore IE Trident Chakra Core Edge EDGE Chakra Core Opera Blink Coment\u00e1rio: N\u00e3o confunda a linguagem de programa\u00e7\u00e3o Java com JavaScript. S\u00e3o linguagens totalmente diferentes.","title":"A Linguagem JavaScript"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#aplicacao-da-linguagem-javascript","text":"Da mesma maneira que vimos com o CSS, podemos trazer o JS para nossa aplica\u00e7\u00e3o web de diferentes maneiras: Por arquivo externo - C\u00f3digo \u00e9 mantido em um arquivo separado // js < script type = \"text/javascript\" src = \"script.js\" >< /script> Em Bloco interno - C\u00f3digo fica em um bloco dentro do HTML // js < script type = \"text/javascript\" > /* C\u00f3digo JS */ alert ( \"Ol\u00e1 mundo!\" ); < /script> Inline - C\u00f3digo fica dentro de um atributo do elemento HTML // js < p onClick = \"alert('Click feito!');\" >< /p> Agora que sabemos que podemos \"turbinar\" nossas p\u00e1ginas web com o uso de JS, podemos nos perguntar o que pode ser feito com essa ferramenta. A resposta \u00e9 praticamente qualquer coisa! Podemos elencar como principais aplica\u00e7\u00f5es: Manipula\u00e7\u00e3o de objetos e tratamento de eventos relacionados aos elementos HTML a partir do uso de uma API chamada DOM (Documento Object Model). Comunica\u00e7\u00e3o com servidores e utiliza\u00e7\u00e3o de APIs via AJAX usando o XMLHttpRequest ou na API Fetch Armazenamento de dados no client com o uso das APIs Indexed DB e LocalStorage/SessionStorage Usar as APIs do HTML5: Canvas, Media, File, Drag and Drop, Geolocation, Web Workers, History","title":"Aplica\u00e7\u00e3o da Linguagem JavaScript"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#javascript-alem-do-browser","text":"As pessoas gostaram tanto de JS que foram capazes de construir uma aplica\u00e7\u00e3o que implementa o v8 do chrome fora do browser. Isso mesmo, podemos rodar aplica\u00e7\u00f5es em JS direto no terminal do seu computador. Basta usar a aplica\u00e7\u00e3o Node.js . Hoje em dia, d\u00e1 pra fazer uma aplica\u00e7\u00e3o inteira, backend e frontend com JS. Com JS podemos tamb\u00e9m construir aplica\u00e7\u00f5es desktop usando uma biblioteca chamada Electron . Esse aqui \u00e9 apenas o come\u00e7o da nossa caminhada!","title":"JavaScript al\u00e9m do Browser"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#variaveis-e-tipos-de-dados","text":"A linguagem JS \u00e9 de tipagem din\u00e2mica. Ent\u00e3o o tipo de vari\u00e1vel \u00e9 definido pela pr\u00f3pria linguagem na hora da atribui\u00e7\u00e3o do valor. Temos dois tokens de atribui\u00e7\u00e3o em JS var ou let . // js var variavel01 ; // Aqui eu declarei sem atribuir nada var x = 10 ; // x agora \u00e9 um num\u00e9rico de valor 10 let y = \"Ol\u00e1 mundo\" // y \u00e9 uma string Agora temos que entender o motivo de termos dois tokens de atribui\u00e7\u00e3o. Mas, para poder explicar isso, precisamos entender que existem diferentes escopos de vari\u00e1veis quando um programa em JS \u00e9 executado. Os escopos das vari\u00e1veis em JS s\u00e3o: Escopo Global - Vari\u00e1veis sempre dispon\u00edveis para consulta e edi\u00e7\u00e3o Escopo Local - Vari\u00e1veis existem apenas dentro de um bloco de c\u00f3digo (um loop ou uma condicional, por exemplo) As vari\u00e1veis declaradas com var s\u00e3o de escopo global se forem declaradas fora de fun\u00e7\u00f5es (Nesse caso s\u00e3o de escopo local). J\u00e1 a atribui\u00e7\u00e3o feita com let \u00e9 de escopo local . Abaixo temos um exemplo bem bacana mostrando essas diferen\u00e7as. // js var a = 5 ; var b = 10 ; if ( a === 5 ) { let a = 4 ; var b = 1 ; console . log ( a ); console . log ( b ); } > Mostra 4 e 1 no console console . log ( a ); console . log ( b ); > Mostra 5 e 1 no console Coment\u00e1rio: Uma boa pr\u00e1tica em JS (e em praticamente todas as linguagens) \u00e9 sempre declarar as vari\u00e1veis na parte de cima de cada bloco ou no come\u00e7o do c\u00f3digo. Tamb\u00e9m \u00e9 poss\u00edvel usar o token const para atribui\u00e7\u00e3o. Esse token funciona igual ao let e \u00e9 definido para constantes. Uma boa pr\u00e1tica da comunidade \u00e9 usar letra mai\u00fasculas para definir suas constantes.","title":"Vari\u00e1veis e Tipos de Dados"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#tipos-e-estruturas-de-dados","text":"Todas as vari\u00e1veis que s\u00e3o n\u00fameros, textos (strings) ou valores booleanos (true ou false) s\u00e3o o que chamamos de tipo Primitivo . As vari\u00e1veis especiais do tipo nulo (null) ou indefinido (undefined) s\u00e3o possuem caracter\u00edsticas de tipo primitivo mas podem ser entendidas como sendo de um tipo \u00fanico especial. No ECMAScript 6 foi inserida uma nova categoria de vari\u00e1veis chamadas de tipo Simb\u00f3lico ou Symbol (N\u00e3o vamos nos aprofundar nisso agora. Depois eu atualizo esse material com o ECMAScript 6.). O que n\u00e3o for de tipo primitivo, null, undefined ou symbol, ser\u00e1 do tipo Objeto que possui uma lista de propriedades, que por sua vez, possuem um nome e valores associados. Podemos resumir o que acabamos de ver como:","title":"Tipos e Estruturas de Dados"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#tipo-numerico","text":"JS n\u00e3o faz diferen\u00e7a entre n\u00fameros inteiros ou fracionados. Para essa linguagem, tudo \u00e9 considerado o que chamamos de ponto flutuante de 64 bits. O valor m\u00e1ximo poss\u00edvel \u00e9 acessado pela propriedade do objeto Number por meio das propriedades Number.POSITIVE_INFINITY e Number.NEGATIVE_INFINITY \". Quando tentamos fazer uma opera\u00e7\u00e3o matem\u00e1tica n\u00e3o poss\u00edvel (como raiz de -1) recebemos o resultado NaN que significa Not-a-Number. N\u00e3o \u00e9 incomum termos que converter caracteres do tipo texto mas que representam n\u00fameros. Para isso, podemos usar a fun\u00e7\u00e3o nativa parseInt ou parseFloat .","title":"Tipo Num\u00e9rico"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#tipo-boolean","text":"Os operadores booleanos s\u00e3o operadores que apenas admitem duas entradas: true ou false . Podemos chamar essas entradas diretamente ou atrav\u00e9s de opera\u00e7\u00f5es l\u00f3gicas usando operadores l\u00f3gicos ou matem\u00e1ticos. Abaixo temos uma tabela que podemos usar de refer\u00eancia. Operador Exemplo Observa\u00e7\u00e3o Mesmo valor x == y true se mesmo valor Mesmo valor e tipo x === y true se mesmo valor e tipo Diferente valor x !== y true se diferente valor Maior que x > y true se x maior que y Menor que x < y true se x menor que y Maior igual x >= y true se maior igual Menor igual x <= y true se menor igual Nega\u00e7\u00e3o !x true se x for false And x && y true se x e y forem true Or x || y true se x ou y forem true","title":"Tipo Boolean"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#tipo-string","text":"Qualquer aplica\u00e7\u00e3o precisa ser capaz de lidar com textos. Uma string \u00e9 exatamente uma cadeia de caracteres n\u00e3o num\u00e9ricos (mas caracteres num\u00e9ricos tamb\u00e9m podem compor uma string) que pode ser declarada por meio de aspas simples \"abc\" ou compostas 'abc'. Tamb\u00e9m \u00e9 comum precisarmos juntar diferentes strings. No javascript, podemos fazer isso simplesmente usando o operador de soma: // js str = 'abc' + 'def' console . log ( str ) > abcdef Alguns caracteres das nossas strings podem ser os mesmos usados na pr\u00f3pria linguagem. Isso nos obriga a termos que aprender como fazer um \"bypass\" desses caracteres. Abaixo temos uma tabela para refer\u00eancia. C\u00f3digo Significado \\(\\backslash\\) 0 Null \\(\\backslash\\) ' Aspas simples \\(\\backslash\\) \" Aspas compostas \\(\\backslash \\backslash\\) Barra invertida \\(\\backslash\\) n Nova linha \\(\\backslash\\) r Retorno \\(\\backslash\\) v Tabula\u00e7\u00e3o Vertical \\(\\backslash\\) t Tabula\u00e7\u00e3o \\(\\backslash\\) b Backspace \\(\\backslash\\) f form feed \\(\\backslash\\) uXXXX Unicode \\(\\backslash\\) xXX Latin-1 A partir do ECMAScript6 existe outra maneira de compor strings: por meio do uso da crase isso \u00e9 uma string . A vantagem desse m\u00e9todo, chamado de TemplateString \u00e9 que esse tipo de string \u00e9 especial que pode receber express\u00f5es interpret\u00e1veis como no exemplo abaixo: // js nome = \"bruno\" console . log ( nome ) > bruno linha = `meu nome \u00e9 ${ nome } ` console . log ( linha ) > meu nome \u00e9 bruno Podemos ver que na \u00faltima linha o resultado faz uso do valor da vari\u00e1vel nome . Provavelmente, sempre que a gente entra em um site que possui aquela mensagem amig\u00e1vel de \"Seja bem vindo, Fulano\", o programador usou essa fun\u00e7\u00e3o para produzir aquele texto.","title":"Tipo String"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#tipo-objeto","text":"Objetos s\u00e3o uma boa parte do que faz o JS ser t\u00e3o poderoso. Cada objeto \u00e9 simplesmente uma cole\u00e7\u00e3o de pares nome-valor. Os nomes s\u00e3o as propriedades do objeto e os valores podem ser qualquer tipo de vari\u00e1vel que vimos logo antes (incluindo outros objetos e fun\u00e7\u00f5es). Quando a propriedade for uma fun\u00e7\u00e3o, dizemos que essa fun\u00e7\u00e3o \u00e9 um m\u00e9todo do objeto. // js var objeto1 = new Object (); // Criando o objeto \"objeto1\" objeto1 . name = \"bruno\" ; // modo 1 de criar uma propriedade objeto1 [ \"age\" ] = 28 ; // modo 2 de criar uma propriedade console . log ( objeto1 ) > { age : 28 , name : bruno } var objeto2 = { // modo de criar o objeto nome : \"bruno\" , // junto das propriedades idade : 28 } console . log ( objeto2 ) > { nome : bruno , idade : 28 } Para acessar o valor de uma propriedade em um objeto basta escrever algo como: objeto.propriedade (Python \u00e9 assim tamb\u00e9m).","title":"Tipo Objeto"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#datas-e-horas","text":"Na elabora\u00e7\u00e3o de uma aplica\u00e7\u00e3o \u00e9 comum ter que lidar com var\u00e1veis do relacionadas ao tempo. Para isso o JS possui um tipo de objeto especialmente projetado para facilitar essa tratativa. O objeto Date() . Podemos usa-lo como: // js var a = new Date () // Atribui a data atual ao objeto var c = new Date ( string ) // Atribui a data por uma string var d = new Date ( Ano , Mes , Dia , Hora , Segundo , Milisegundos ) Geralmente estamos preocupados apenas com o dia, m\u00eas e ano. Para criar um objeto com esses valores basta ir colocando na mesma ordem do \u00faltimo elemento do exemplo acima. Aviso: Quando voc\u00ea for indicar o m\u00eas, saiba que para o JS, janeiro \u00e9 0 e dezembro \u00e9 11. Ent\u00e3o quando quisermos salvar a data 01/01/2022 usaremos Date(2022,0,1) . Como todo objeto, a vari\u00e1vel criada com o Date() possui v\u00e1rias propriedades e m\u00e9todos. Uma boa refer\u00eancia \u00e9 o material do MDN que pode ser visto aqui . Mas podemos elencar alguns m\u00e9todos importantes como: // js var z = new Date () z . getFullYear () z . getMonth () z . getDate () z . getDay () z . getHours () z . getMinutes () z . getSeconds () z . getMillisecondes () z . getTimes () Acho que n\u00e3o \u00e9 necess\u00e1rio explicar cada m\u00e9todo desse porque o nome \u00e9 bem alto explicativo.","title":"Datas e Horas"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#arrays-vetores-ou-matrizes","text":"Um array \u00e9 uma estrutura de dados semelhante a uma lista. Em JS temos algumas maneiras de criar arrays: // js /* Modo 01 */ var a = new Array () a [ 0 ] = 'valor01' a [ 1 ] = 'valor02' /* Modo 02 */ var b = new Array ( 'valor01' , 'valor02' ) /* Modo 03 */ var c = [ 'valor01' , 'valor02' ] Todos os 3 modos produzem o mesmo resultado e podem ser usados alternadamente. Como qualquer objeto, existem v\u00e1rios m\u00e9todos muito \u00fateis dentro de um Array(). // js concat () // Junta dois ou mais vetores fill () // Preencher os elementos em um vetor com um valor est\u00e1tico find () // Retorna o valor do primeiro elemento em um vetor que atender ao filtro findIndex () // Retorna o \u00edndice do primeiro elemento em um vetor forEach () // Chama uma fun\u00e7\u00e3o para cada elemento do vetor indexOf () // Busca um elemento no vetor e retorna a sua posi\u00e7\u00e3o isArray () // Verifica se um objeto \u00e9 um vetor join () // Junta todos os elementos de um vetor em uma string lastIndexOf () // Pesquisar o vetor por um elemento, come\u00e7ando no final pop () // Remove o \u00faltimo elemento de um vetor e retorna o elemento push () // Adiciona novos elementos para o final de um vetor reverse () // Inverte a ordem dos elementos em um vetor slice () // Seleciona uma parte de um vetor e retorna o novo vetor sort () // Classifica os elementos de um vetor splice () // Adiciona/remove elementos de um vetor toString () // Converte um vetor em uma string e retorna o resultado valueOf () // Retorna o valor primitivo de um vetor Coment\u00e1rio: Eu achei estranho que o material n\u00e3o falou nada sobre vetor e matriz. Ent\u00e3o uma hora eu volto para expandir essa parte com esses outros dois tipos de dados.","title":"Arrays, Vetores ou Matrizes"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#controle-de-fluxo","text":"Em qualquer linguagem de programa\u00e7\u00e3o 7 existem maneiras de organizar blocos de c\u00f3digo para o compilador/interpretador saber o que priorizar na hora do processamento do c\u00f3digo. Em JS isso \u00e9 feito com o uso das chaves { }.","title":"Controle de Fluxo"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#declaracoes-de-selecao","text":"Quando estamos fazendo um script de c\u00f3digo, \u00e9 muito comum termos que nos adaptar as situa\u00e7\u00f5es onde determinados eventos podem ou n\u00e3o acontecer. Para isso, usamos algumas estruturas l\u00f3gicas que permitem o processamento de blocos de texto apenas se alguma condi\u00e7\u00e3o predeterminada seja satisfeita. Ou seja, usamos um condicionante do tipo \"Se-Ent\u00e3o\". // js if ( expressao ) { bloco de codigo caso true } else { outro bloco de codigo caso false } Existem situa\u00e7\u00f5es onde existem m\u00faltiplas possibilidades. Pensando nisso, o JS possui um operador de switch que permite v\u00e1rios condicionantes de maneiras mais simples do que v\u00e1rios if s sucessivos. // c# switch ( expressao ) { case valor01 : bloco_se_01 break case valor02 : bloco_se_02 break default : bloco_se_nao_01_ou_02 break } Veja que usamos o token break para indicar que vamos para outra condicional. N\u00e3o podemos esquecer disso. Abaixo temos um exemplo de uma aplica\u00e7\u00e3o simples usando esse m\u00e9todo de gest\u00e3o de fluxo. N\u00e3o se preocupe em entender o c\u00f3digo inteiro, foque apenas no que estamos estudando. // js // Fun\u00e7\u00e3o que recebe um input no terminal const readLine = require ( 'readline' ). createInterface ({ input : process . stdin , output : process . stdout }) readLine . question ( 'Qual seu nome? ' , name => { switch ( name ) { case 'bruno' : console . log ( `OI, BRUNO!` ) break case 'mario' : console . log ( 'Salve, Mario!' ) break default : console . log ( `Ol\u00e1, ${ name } . Seja bem-vindo(a)!` ) } readLine . close () }) > Qual seu nome ? bruno > OI , BRUNO ! > Qual seu nome ? mario > Salve , Mario ! > Qual seu nome ? pedro > Ol\u00e1 , pedro . Seja bem - vindo ( a ) !","title":"Declara\u00e7\u00f5es de Sele\u00e7\u00e3o"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#declaracoes-de-repeticao","text":"Al\u00e9m de termos tokens que nos permitem executar apenas alguns blocos de c\u00f3digo. Existem outros que nos permitem usarmos um mesmo bloco de c\u00f3digo repetidamente. Chamamos essas estruturas l\u00f3gicas de la\u00e7os de repeti\u00e7\u00e3o. A primeira maneira de criarmos um la\u00e7o de repeti\u00e7\u00e3o em JS \u00e9 por meio do token while do seguinte modo: // js // Exemplo de loop com while var i = 0 while ( i <= 5 ) { console . log ( `Contagem: ${ i } ` ) i ++ // soma + 1 ao valor de i } > Contagem : 0 > Contagem : 1 > Contagem : 2 > Contagem : 3 > Contagem : 4 > Contagem : 5 Primeiro criamos a vari\u00e1vel i e usamos a estrutura de loop while para a seguinte regra \"Se i for menor igual a 5 ent\u00e3o mostre a mensagem 'Contagem: N\u00famero i'\". Quando o valor da vari\u00e1vel i \u00e9 6, a express\u00e3o do loop retorna um false e sa\u00edmos do loop. O operador que aprendemos anteriormente faz um loop enquanto a condi\u00e7\u00e3o expressa entre os par\u00eanteses n\u00e3o for false. Mas existem situa\u00e7\u00f5es onde queremos executar o bloco de c\u00f3digo um n\u00famero definido de vezes. Para isso o JS possui o token for . // js // Exemplo de loop com for let frutas = [ 'pera' , 'uva' , 'maca' , 'banana' ] for ( let index = 0 ; index < frutas . length ; index ++ ) { console . log ( frutas [ index ]) } > pera > uva > maca > banana Nesse exemplo acima vemos que o par\u00eanteses da express\u00e3o do for possui 3 linhas de c\u00f3digos separadas por ponto e v\u00edrgula. Na primeira, criamos uma vari\u00e1vel index. Na segunda, temos a nossa express\u00e3o que avalia se o index \u00e9 menor que o tamanho do array frutas. E na terceira, temos a regra de incremento + 1 para cada itera\u00e7\u00e3o do loop. Dentro do loop, n\u00f3s mandamos ele lan\u00e7ar no terminal o valor do elemento do array correspondente ao index.","title":"Declara\u00e7\u00f5es de Repeti\u00e7\u00e3o"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#funcoes","text":"N\u00f3s aprendemos anteriormente que fun\u00e7\u00f5es s\u00e3o umas das var\u00e1veis do tipo objeto no JS. Sempre que pudermos generalizar um tratamento de dados por meio da cria\u00e7\u00e3o de uma fun\u00e7\u00e3o, devemos optar por esse caminho porque assim tornamos a manuten\u00e7\u00e3o dos nossos programas melhor e evitamos ter que repetir linhas de c\u00f3digo muito parecidas. Mesmo sendo um objeto, o JS possui um token espec\u00edfico para a cria\u00e7\u00e3o de fun\u00e7\u00f5es. Abaixo temos dois exemplos adaptados do material do curso. // js // Criacao de uma funcao de soma function soma ( x , y ) { var total = x + y return total } soma ( 2 , 3 ) > 5 Para o segundo exemplo, n\u00f3s queremos construir uma fun\u00e7\u00e3o que retorna a m\u00e9dia dos valores apresentados entre os par\u00eanteses. Para isso, precisaremos de um dos tokens que vimos na se\u00e7\u00e3o passada. Sabemos muito bem que a m\u00e9dia \u00e9 calculada pela soma dos \\(n\\) valores dividida pela quantidade \\(n\\) . Para isso, teremos que usar o token de la\u00e7o de repeti\u00e7\u00e3o. // js function media () { var soma = 0 n = arguments . length for ( var i = 0 ; i < n ; i ++ ) { soma = arguments [ i ] + soma } return soma / n } media ( 2 , 3 , 4 , 5 ) > 3.5 Calma, eu sei que em uma primeira vista \u00e9 estranho esse objeto arguments ter sido chamado do nada. Acontece que no JS (e em muitas linguagens) alguns objetos, a exemplo das fun\u00e7\u00f5es, possuem m\u00e9todos que podem ser usados mesmo no momento da sua cria\u00e7\u00e3o. Nesse caso, \u00e9 o exemplo desse objeto que nos diz a quantidade de argumentos que foram inseridos na nossa fun\u00e7\u00e3o media(). Tamb\u00e9m podemos usar as fun\u00e7\u00f5es para cria\u00e7\u00e3o de estruturas padronizadas de objetos que s\u00e3o conhecidas como classes . Abaixo vamos criar uma estrutura para objetos do tipo Pessoa . // js function Pessoa ( primeiro , ultimo ) { this . primeiro = primeiro this . ultimo = ultimo this . nomeCompleto = function () { return this . primeiro + ' ' + this . ultimo } this . nomeCompletoInvertido = function () { return this . ultimo + ' ' + this . primeiro } } var chefe = new Pessoa ( 'Bruno' , 'Ruas' ) console . log ( chefe . nomeCompleto ) console . log ( chefe . nomeCompletoInvertido ) > Bruno Ruas > Ruas Bruno Novamente, temos um termo sendo usado sem que antes ele tenha sido criado. Nesse caso \u00e9 o termo this . Ele \u00e9 usado para fazer refer\u00eancia ao objeto criado (ou classe) como podemos ver no chamamento dos valores do console.log . Outra novidade \u00e9 que criamos uma `c\u00f3pia'' do objeto Pessoa s\u00f3 que com um outro nome: chefe`.","title":"Fun\u00e7\u00f5es"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#arrow-functions","text":"Agora vamos entrar num ponto que, para mim, foi bem dif\u00edcil de entender no come\u00e7o. O JS permite que a constru\u00e7\u00e3o de fun\u00e7\u00f5es an\u00f4nimas , ou seja, fun\u00e7\u00f5es que n\u00e3o precisam de nomes definidos. Mas antes de aprendermos mais sobre isso, precisamos saber que existem diferentes modos de se criar uma fun\u00e7\u00e3o em JS. Abaixo temos 3 maneiras de se criar a fun\u00e7\u00e3o soma . // js // forma tradicional soma = function ( a , b ) { return a + b } //forma com arrow function soma = ( a , b ) => { return a + b } //arrow function com chaves omitidas soma = ( a , b ) => a + b Agora que entendemos um pouco melhor a constru\u00e7\u00e3o de fun\u00e7\u00f5es em JS, podemos ir mais fundo nas arrow functions . Esse m\u00e9todo de defini\u00e7\u00e3o de fun\u00e7\u00f5es foi criado para facilitar a cria\u00e7\u00e3o de fun\u00e7\u00f5es dentro de contextos, ou seja, se voc\u00ea est\u00e1 criando uma fun\u00e7\u00e3o em uma linha de c\u00f3digo normal (sem estrar em um bloco de c\u00f3digo) \u00e9 melhor usar a forma tradicional. Agora, se voc\u00ea estiver em um contexto diferente (como em um par\u00e2metro de um objeto ou mesmo uma fun\u00e7\u00e3o) \u00e9 melhor usar a arrow function. Assim como os outros objetos, existem propriedades e m\u00e9todos das arrow functions que podemos usar. Um exemplo disso \u00e9 o operador this que faz refer\u00eancia ao bloco em que nossa arrow functions est\u00e1 contida. Em uma fun\u00e7\u00e3o normal, n\u00f3s aprendemos que esse operador faz refer\u00eancia \u00e0 pr\u00f3pria fun\u00e7\u00e3o. Abaixo temos um exemplo adaptado do material. // js // usando 'this' em uma arrow function var Pessoa2 = { nome : 'Bruno' , amigos : [ 'Ana' , 'Clarck' , 'Bruce' ], exibeAmigos () { this . amigos . forEach ( f => console . log ( this . nome + ' \u00e9 amigo de ' + f )) } } Pessoa2 . exibeAmigos () > Bruno \u00e9 amigo de Ana > Bruno \u00e9 amigo de Clarck > Bruno \u00e9 amigo de Bruce Vamos ver o que esse c\u00f3digo acima nos ensina. Primeiro n\u00f3s criamos uma vari\u00e1vel de objeto chamado Pessoa2 e atribu\u00edmos duas propriedades a ela: nome e amigos. Sendo que a propriedade `amigos' \u00e9 um array com 3 elementos. Como Pessoa2 \u00e9 um objeto, n\u00f3s podemos criar m\u00e9todos dentro dele (que nada mais s\u00e3o do que fun\u00e7\u00f5es em um objeto), e \u00e9 exatamente o que fizemos com a fun\u00e7\u00e3o exibeAmigos(). Quando criamos o m\u00e9todo exibeAmigos, n\u00f3s usamos o operador this em um contexto onde ele faz refer\u00eancia ao bloco que cont\u00e9m a fun\u00e7\u00e3o, nesse caso, \u00e9 a vari\u00e1vel Pessoa2. Na primeira linha da nossa fun\u00e7\u00e3o exibeAmigos n\u00f3s usamos um m\u00e9todo Dentro de fun\u00e7\u00e3o exibeAmigos n\u00f3s chamamos a propriedade amigos do nosso objeto Pessoa2 por meio do 'this'. Como j\u00e1 vimos, um array \u00e9 um objeto em JS, portanto, ele possui v\u00e1rias propriedades e m\u00e9todos dentro dele. O forEach que est\u00e1 ali \u00e9 precisamente uma desses m\u00e9todos desse objeto que faz um loop para cada elemento do array. Dentro do loop criado pelo m\u00e9todo forEach do nosso array amigos n\u00f3s criamos uma arrow function que usa a vari\u00e1vel f (que nada mais \u00e9 do que o elemento do array no loop). Ent\u00e3o n\u00f3s fizemos o seguinte, para cada elemento do array que agora chamamos de f, vamos fazer um console.log que nos d\u00e1 o nome da Pessoa2, a string \"conhece\" e o nome do amigo que \u00e9 a vari\u00e1vel f. Com isso temos o resultado apresentado no final desse bloco de c\u00f3digo. Com o tempo as coisas v\u00e3o ficar menos confusas, mas j\u00e1 podemos ver que o JS possui bastante metodologias de processamento de informa\u00e7\u00e3o que teremos que dominar para tirar o m\u00e1ximo das nossas aplica\u00e7\u00f5es web.","title":"Arrow Functions"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#documento-object-model-dom","text":"Como o contexto de aplica\u00e7\u00e3o do JS sempre foi o web, essa linguagem possui algumas integra\u00e7\u00f5es ao ambiente do navegador que s\u00e3o muito \u00fateis para a constru\u00e7\u00e3o de aplica\u00e7\u00f5es verdadeiramente inteligentes. Uma das capacidades mais relevantes \u00e9 a de alterar estruturas HTML e CSS por meio de c\u00f3digos escritos em JS. Isso \u00e9 feito por interm\u00e9dio da API Document Object Model (DOM) que \u00e9 um padr\u00e3o da W3C para os navegadores. Abaixo temos os principais elementos que a comp\u00f5e. Todos esses objetos est\u00e3o vinculados ao objeto maior window que \u00e9 a janela do navegador. history navigator location screen document link anchor form button check box radio password reset submit Cada um desses elementos possui informa\u00e7\u00f5es e podem ser manipulados para conseguirmos construir as aplica\u00e7\u00f5es da maneira como quisermos. Coment\u00e1rio: No material do curso n\u00f3s s\u00f3 aprofundamos em dois desses v\u00e1rios elementos. Depois eu volto aqui a medida que for aprendendo mais sobre os outros.","title":"Documento Object Model (DOM)"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#objeto-window","text":"O objeto window \u00e9 o representante da da janela do browser. Ele cont\u00e9m toda a hierarquia que mostramos nessa lista de elementos acima. Al\u00e9m de conter todos esses elementos dentro dele, esse objeto (Como o pr\u00f3prio nome diz, tudo no DOM s\u00e3o, em algum grau, objetos. Mantenha isso em mente!) possui m\u00e9todos e propriedades que s\u00e3o \u00fateis para o gerenciamento das nossas aplica\u00e7\u00f5es. Na parte de armazenamento de dados o window nos d\u00e1 duas maneiras: localStorage e sessionStorage . No primeiro os dados s\u00e3o mantidos mesmo se o navegador seja fechado. J\u00e1 o sessionStorage mant\u00e9m os arquivos apenas enquanto o navegador \u00e9 mantido aberto. Abaixo temos um exemplo de como usar esses reposit\u00f3rios. // js // guardando dados no reposit\u00f3rio de sess\u00e3o sessionStorage . setItem ( 'login' , 'Bruno Ruas' ) alert ( 'O usu\u00e1rio logado \u00e9: ' + sessionStorage . getItem ( 'login' )) > Aparece um popup com a mensagem \"O Usu\u00e1rio logado \u00e9: Bruno Ruas\" Veja que para salvar o dado, temos o uso do par 'nome'-'valor' e do m\u00e9todo setItem . Para obter o dado, basta usar o m\u00e9todo getItem e passar o nome do valor salvo anteriormente. Tamb\u00e9m podemos atrelar algumas funcionalidades ao tempo. \u00c9 bem comum vermos depois de x minutos a se\u00e7\u00e3o de um site ser encerrada, por exemplo. O objeto window possui algumas maneiras de lidarmos com o tempo: setInterval(funcao, intervalo) - Browser executa uma fun\u00e7\u00e3o continuamente a cada x milisegundos clearInterval() - Cancela a repeti\u00e7\u00e3o da fun\u00e7\u00e3o setTimeout(funcao,intervalo) - Agenda a execu\u00e7\u00e3o de uma fun\u00e7\u00e3o com um delay de x milissegundos clearTimeout() - Cancela o agendamento","title":"Objeto Window"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#object-document","text":"Logo ap\u00f3s o navegador processar os arquivos da p\u00e1gina web, o objeto document passa a existir e pode ser manipulado pelo nosso c\u00f3digo JS. No material temos uma lista das principais propriedades que esse objeto possui (A descri\u00e7\u00e3o eu s\u00f3 vou colocar se for algo n\u00e3o \u00f3bvio). Propriedade Descri\u00e7\u00e3o addEventListener Uma fun\u00e7\u00e3o dispara se um evento ocorre baseURI Retorna a URI body Retorna ou modifica o body cookie Retorna todos os cookies characterSet Charset da p\u00e1gina documentElement Todo o html documentoURI URI do document forms Um array com os forms do html getElementsById getElementsByClassName getElementsByName getElementsByTagName images lastModified Data de modifica\u00e7\u00e3o do documento links Array com todos os links querySelector Primeiro elemento por um seletor CSS querySelectorAll Array com todos os de um seletor CSS removeEventListener scripts Array com os scripts do documento title URL N\u00e3o tem muito pra onde correr. S\u00f3 vamos aprender bem usando, mas por agora, basta termos em mente que essas funcinalidades existem e poder\u00e3o ser \u00fateis em algum momento. Abaixo tempos um exemplo usando uma fun\u00e7\u00e3o JS para alterar um elemento do body atrav\u00e9s do DOM. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> <!-- JavaScript --> < script type = 'text/javascript' > function Executar () { document . getElementById ( 'saida' ). innerHTML = Date () } < /script> < /head> < body > < button type = \"button\" onclick = \"Executar()\" > Aperte ! < /button> < h1 > Sa\u00edda < /h1> < div id = \"saida\" > Condi\u00e7\u00e3o Inicial < /div> < /body> < /html> No c\u00f3digo acima temos o script em JS dentro do pr\u00f3prio arquivo HTML usando a tag <script> . Nesse script n\u00f3s criamos a fun\u00e7\u00e3o Executar() que nada mais faz do que procurar o elemento HTML cujo id \u00e9 igual a 'sa\u00edda' e substitui o HTML desse elemento pela data atual vinda da fun\u00e7\u00e3o nativa Date() . Abaixo podemos ver a diferen\u00e7a entre a situa\u00e7\u00e3o inicial e a final ap\u00f3s apertar o bot\u00e3o.","title":"Object Document"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#objeto-navigator","text":"Como o pr\u00f3prio deixa claro, o objeto navigator representa o software do navegador usado pelo user. Esse objeto nos d\u00e1 algumas informa\u00e7\u00f5es \u00fateis sobre o navegador usado. Abaixo temos uma tabela com alguns dos m\u00e9todos contidos nesse objeto. Propriedade Descri\u00e7\u00e3o appCodeName Codigo do navegador appName Nome do navegador appVersion Vers\u00e3o do navegador cookieEnabled Cookies habilitados geolocation Geolocation language onLine Se o browser est\u00e1 online platform Qual sistema operacional product Engine do navegador userAgent User-agent que o browser envia ao navegador Abaixo temos um exemplo de p\u00e1gina web adaptado do material do curso que faz uso o objeto navegador e retorna a geolocaliza\u00e7\u00e3o do navegador. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> < script type = \"text/javascript\" > // fun\u00e7\u00e3o que recebe as coord e retorna um string function showPosition ( position ) { lat = position . coords . latitude long = position . coords . longitude texto = `Lat: ${ lat } e Long ${ long } ` document . getElementById ( 'saida' ). innerHTML = texto } // fun\u00e7\u00e3o que muda o HTML do elemento saida function getPosition () { if ( window . navigator . geolocation ) { window . navigator . geolocation . getCurrentPosition ( showPosition ) } else { x . innerHTML = 'N\u00e3o tivemos acesso a' + 'sua localiza\u00e7\u00e3o!' } } < /script> < /head> < body > < button type = \"button\" onclick = \"getPosition()\" > Geolocation < /button> < h1 > Mensagem < /h1> < div id = \"saida\" > Sua localiza\u00e7\u00e3o vai aparecer aqui !< /div> < /body> < /html> Nesse c\u00f3digo acima temos uma p\u00e1gina simples com um bot\u00e3o que, ao ser ativado, dispara a fun\u00e7\u00e3o getPosition() . Essa fun\u00e7\u00e3o dispara uma outra fun\u00e7\u00e3o chamada showPosition . O resultado pode ser visto na imagem abaixo.","title":"Objeto Navigator"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#eventos","text":"Outra funcionalidade interessante do DOM \u00e9 a capacidade de usarmos n\u00e3o apenas os elementos da p\u00e1gina mas tamb\u00e9m o contexto (ou eventos) em que esses elementos se encontram. Por exemplo, \u00e9 comum vermos uma imagem aumentar de tamanho quando colocamos o mouse sobre ela. Com essa funcionalidade, conseguimos explorar v\u00e1rios cen\u00e1rios de intera\u00e7\u00e3o do usu\u00e1rio com a p\u00e1gina. No exemplo abaixo, temos o uso de dois contextos do mouse sobre um elemento de texto. Quando o mouse est\u00e1 sobre o elemento, n\u00f3s mudamos a cor dele para vermelho. Quando o mouse n\u00e3o est\u00e1 sobre o elemento, a cor dele se torna preto. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> < /head> < body > < p onmouseover = \"this.style.color='red'\" onmouseout = \"this.style.color='black'\" > Texto < /p> < /body> < /html> Podemos ver mais um exemplo do uso do token this mas dessa vez fora de um bloco de c\u00f3digo de uma fun\u00e7\u00e3o. Nesse contexto, esse operador faz refer\u00eancia ao elemento HTML e altera o seu valor do par\u00e2metro de estilo que indicamos (a cor do texto). Mesmo sendo poss\u00edvel fazer uso do atributo de evento direto no HTML, como fizemos no exemplo anterior, a boa pr\u00e1tica \u00e9 manter essas features em um arquivo JS \u00e0 parte (igual n\u00f3s fizemos com o CSS) pois isso torna o arquivo de estrutura mais f\u00e1cil de ler. Abaixo temos exatamente a mesma funcionalidade mas usando o campo de script do meta mas que poderia ser hospedado em um arquivo .js em separado. // js <! DOCTYPE html > < html lang = \"en\" > < head > < title > PUC - MG < /title> < /head> < body > < p id = \"texto\" > Texto < /p> < /body> < script type = \"text/javascript\" > var elem = window . document . getElementById ( 'texto' ) elem . addEventListener ( 'mouseout' , function () { window . document . getElementById ( 'texto' ). style . color = '' window . document . getElementById ( 'texto' ). style . fontSize = '' }, false ) elem . addEventListener ( 'mouseover' , function () { window . document . getElementById ( 'texto' ). style . color = 'red' window . document . getElementById ( 'texto' ). style . fontSize = '20px' }, false ) < /script> < /html> Veja que primeiro n\u00f3s criamos uma vari\u00e1vel elem utilizando o getElementById . Como essa vari\u00e1vel \u00e9 um objeto, podemos usar um de seus m\u00e9todos chamado addEventListener que recebe 3 par\u00e2metros: o primeiro \u00e9 o gatilho de disparo, o segundo \u00e9 a fun\u00e7\u00e3o que ser\u00e1 executada e o terceiro \u00e9, para todos os efeitos, sempre falso. No exemplo acima temos dois gatilhos de eventos cadastrados. O primeiro \u00e9 o mouseout que nada mais \u00e9 que o padr\u00e3o. O segundo \u00e9 mouseover que dispara sempre que o mouse estiver sobre o elemento selecionado. Mesmo que a primeira vista pare\u00e7a mais simples usar os atributos de contexto direto no HTML, n\u00f3s precisamos pensar em situa\u00e7\u00f5es onde a aplica\u00e7\u00e3o se torna demasiada grande. Nesses casos, \u00e9 muito melhor, para controlar a evolu\u00e7\u00e3o da nossa aplica\u00e7\u00e3o web e garantir uma boa manuten\u00e7\u00e3o, mantermos em arquivos separados tanto o estilo quanto a funcionalidade. Outra coisa importante a ser notada \u00e9 que o script deve estar abaixo da vari\u00e1vel que ser\u00e1 manipulada. Primeiro o elemento precisa existir para usarmos o nosso c\u00f3digo. Esse \u00e9 o motivo da tag script estar na parte de baixo da p\u00e1gina e n\u00e3o no head como nos outros exemplos. Na tabela a baixo temos os principais tipos de gatilhos que podem ser usados pelo DOM. Para usar algum desses no direto no HTML \u00e9 necess\u00e1rio colocar a palavra on' na frente. Por exemplo, click' vira `onclick'. Propriedade Descri\u00e7\u00e3o click Click em link ou elemento change Default alterado em input texto focus Foco em um elemento blur Ao tirar o foco mouseover Mouse em cima mouseout Mouse em outro lugar select Select em um form submit Submit em um form resize Mudan\u00e7a na janela do broser load Algum elemento \u00e9 carregado unload Ao sair da p\u00e1gina Coment\u00e1rio: Aqui o professor da disciplina faz o desafio de criarmos uma calculadora simples com o uso dos elementos estudados nessa se\u00e7\u00e3o. Um dia eu volto aqui e fa\u00e7o esse desafio.","title":"Eventos"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#a-notacao-de-objetos-json","text":"O JavaScript Object Notation (JSON) \u00e9 um formato de descri\u00e7\u00e3o de dados que se baseia em texto e pode ser lido diretamente sem muita dificuldade. Existem v\u00e1rios outros tipos de escrita de dados onde, geralmente, temos um trade-off entre efici\u00eancia versus simplicidade. Quanto mais pr\u00f3ximo da linguagem de m\u00e1quina, melhor \u00e9 pro computador processar mas mais dif\u00edcil \u00e9 para os humanos entender. Como o JSON se popularizou muito, diversas outras linguagens j\u00e1 possuem a capacidade de processar dados nesse formato. O que aumenta ainda mais a aceitabilidade dele como ve\u00edculo de envio e codifica\u00e7\u00e3o de informa\u00e7\u00e3o tanto no frontend quanto no backend. Falando em backend, com a populariza\u00e7\u00e3o de programas como nodejs, \u00e9 cada vez mais comuns a constru\u00e7\u00e3o de comunica\u00e7\u00e3o entre a camada de aplica\u00e7\u00e3o web e servidor atrav\u00e9s de APIs cuja atividade \u00e9, simplificadamente, receber JSON e enviar JSON. Como dito anteriormente, o JSON n\u00e3o \u00e9 o \u00fanico formato existente no mercado. Para destacar alguns outros, temos o XML, RDF, Planilhas, CSV, Documentos TXT, JPEG-2000, TIFF e v\u00e1rios outros formatos propriet\u00e1rios. Mas, sem d\u00favida, a competi\u00e7\u00e3o mais \u00e1rdua \u00e9 entre JSON e XML.","title":"A Nota\u00e7\u00e3o de Objetos (JSON)"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#sintaxe-do-json","text":"Um arquivo JSON \u00e9 muito parecido com um bloco de c\u00f3digo JS. Come\u00e7a e termina com chaves {} e cada elemento \u00e9 formado por um par de nome-valor e s\u00e3o separados por v\u00edrgula. O JSON permite diferentes tipos de valores que podem ser dos mesmo tipos de dados que estudamos anteriormente para o JS. Abaixo temos um exemplo de um arquivo JS. // json { \"idade\" : 28 , \"nome\" : \"Bruno Ruas\" , \"materias\" : [ { \"materia\" : \"Econometria\" , \"professor\" : \"Bill Gates\" }, { \"materia\" : \"Microeconomia\" , \"professor\" : \"Steve Jobs\" } ], \"nerd\" : true } Nesse exemplo, podemos ver que o valor para Idade \u00e9 do tipo number. Nome \u00e9 uma string. Mat\u00e9rias \u00e9 um array, veja que ele est\u00e1 entre colchetes [] , exatamente como aprendemos antes. Cada elemento do nosso array de mat\u00e9rias \u00e9 um objeto, que come\u00e7am e terminam com chaves, com duas propriedades: mat\u00e9ria e professor. Por fim, temos um booliano para a pegunta \"\u00c9 nerd?\". Os outros tipos de dados como datas, geolocaliza\u00e7\u00e3o e outros, s\u00e3o passados em JSON como uma string. Temos que lembrar disso se um dia precisamos lidar com esse tipo de informa\u00e7\u00e3o. Coment\u00e1rio: Quando estamos criando um JSON dentro de um c\u00f3digo JS n\u00f3s n\u00e3o precisamos colocar as aspas no nome dos elementos. Mas \u00e9 padr\u00e3o que essas aspas sejam usadas em objetos JSON. Ent\u00e3o temos que ficar atentos a isso tamb\u00e9m.","title":"Sintaxe do JSON"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#objeto-json-no-javascript","text":"Agora que sabemos um pouco sobre esse tipo de estrutura de dados, vamos aprender como manipular esse objeto dentro de um script JS. A maneira que o JS tem que trabalhar com JSON \u00e9 por meio de um objeto nativo da linguagem chamado, nem um pouco sem querer, de JSON. Esse objeto possui dois m\u00e9todos \u00fateis: Um parse() que recebe uma string e retorna um objeto na nota\u00e7\u00e3o JSON e um stringfy() que pega um objeto an\u00e1logo JSON e transforma em string. // JSON para string var Tex t oJSON = ' { \"Revistas\" : [ { \"titulo\" : \"V de Vingan\u00e7a\" , \"autor\" : \"Frank Miller\" }, { \"titulo\" : \"Batman - The Dark Knight\" , \"autor\" : \"Frank Miller\" }, { \"titulo\" : \"One Piece N\u00ba 29\" , \"autor\" : \"Eichiro Oda\" } ] } ' // Usando o m\u00e9todo de parse do JSON var banca = JSON . parse ( TextoJSON ) function listaTitulos () { lista = '' for ( let i = 0 ; i < banca . Revistas . length ; i ++ ) { lista += banca . Revistas [ i ]. titulo + ' - ' + banca . Revistas [ i ]. autor + ' ' } console . log ( lista ) } listaTitulos () > V de Vingan\u00e7a - Frank Miller > Batman - The Dark Knight - Frank Miller > One Piece N\u00ba 29 - Eichiro Oda Primeiro n\u00f3s criamos uma string no formato de um JSON. Depois passamos essa string pelo objeto JSON com o m\u00e9todo parse . Ap\u00f3s isso, n\u00f3s temos um objeto chamado banca com a mesma estrutura do nosso JSON desejado. Depois n\u00f3s criamos uma fun\u00e7\u00e3o de loop que retorna uma string com o t\u00edtulo, o autor e o car\u00e1cter especial de quebra de linha. Para converter nosso objeto novamente para string basta usarmos o seguinte comando: // js JSON . stringify ( banca , null , 2 ) O primeiro par\u00e2metro \u00e9 o objeto a ser convertido. O segundo n\u00f3s podemos colocar como null (Existe uma explica\u00e7\u00e3o para isso mas n\u00e3o precisamos dela agora). Por fim, o terceiro diz o tamanho do espa\u00e7o para melhorar a identa\u00e7\u00e3o. Saber como lidar com objetos JSON dentro de um script JS nos permite construir aplica\u00e7\u00f5es inteiras apenas com JS. Um framework muito famoso hoje em dia chamado MEAN (MongoDb, Express, Angular e NodeJS) utiliza o JS como principal linguagem para constru\u00e7\u00e3o de toda a aplica\u00e7\u00e3o web.","title":"Objeto JSON no JavaScript"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#programacao-ajax","text":"Diferente do que vimos at\u00e9 agora, o Asynchronous Javascript and XML ou AJAX, n\u00e3o \u00e9 uma tecnologia propriamente dito mas sim uma t\u00e9cnica de programa\u00e7\u00e3o que utiliza diferentes tecnologias. A ideia geral \u00e9 construir ferramentas que possuam as seguintes caracter\u00edsticas: Paginas com padr\u00e3o XHTML e CSS Din\u00e2mica atrav\u00e9s do DOM Troca de informa\u00e7\u00f5es por JSON, XML ou outro Recupera\u00e7\u00e3o ass\u00edncrona de dados com o objeto XMLHTTPRequest ou APT fetch JavaScript como linguagem Algumas aplica\u00e7\u00f5es muito famosas foram constru\u00edda usando, em algum grau, essa abordagem. Podemos citar o Youtube, Gmail, Google Earth e mais um monte de outras aplica\u00e7\u00f5es do Google. Para entendermos como o AJAX \u00e9 diferente da abordagem tradicional, vamos comparar as duas maneiras. No modelo tradicional, o browser faz requisi\u00e7\u00f5es ao web server que, por sua vez, devolve a p\u00e1gina solicitada com as devidas altera\u00e7\u00f5es previamente programadas. Contudo, nessa abordagem, toda a intelig\u00eancia de neg\u00f3cio \u00e9 mantida no ambiente do servidor. O esquema abaixo nos permite relembrar como \u00e9 feita a comunica\u00e7\u00e3o entre essas duas entidades. O problema dessa abordagem tradicional \u00e9 que os dados enviados entre servidor e browser s\u00e3o p\u00e1ginas inteiras. O m\u00e9todo AJAX trouxe a possibilidade de quebramos esses dados em \"pacotes\" menores de informa\u00e7\u00f5es. Nesse caso, ao inv\u00e9s de requisi\u00e7\u00f5es de p\u00e1ginas inteiras, podemos pedir ao servidor apenas \"peda\u00e7os\" menores de informa\u00e7\u00e3o. A metodologia AJAX tr\u00e1s para o lado do cliente (client side) parte da tarefa de processar os dados. Parte do processamento fica no server side e a outra parte \u00e9 feita no client. Durante a sess\u00e3o, v\u00e1rias requisi\u00e7\u00f5es s\u00e3o feitas do browser (que cont\u00e9m o c\u00f3digo JS) para o server por meio do uso do XMLHTTPRequest ou API Fetch. A atualiza\u00e7\u00e3o da p\u00e1gina acontece via DOM e n\u00e3o pelo recebimento de um HTML novo. Essa comunica\u00e7\u00e3o acontece geralmente por meio de arquivos XML ou JSON (mas pode ser qualquer outro formato de dados). Ao abrirmos a aplica\u00e7\u00e3o pela primeira vez, o servidor nos envia a maior parte dos dados que ser\u00e3o usados na visualiza\u00e7\u00e3o (a base de toda a aplica\u00e7\u00e3o). Depois disso, todas as mudan\u00e7as na tela ser\u00e3o baseadas em DOM e arquivos de dados JSON ou XML. Podemos elencar algumas vantagens desse modelo de constru\u00e7\u00e3o de solu\u00e7\u00e3o web: Redu\u00e7\u00e3o do tr\u00e1fego na rede Redu\u00e7\u00e3o de carga no web server Flexibilidade no desenolvimento do lado do server (foco em APIs) Mas como tudo na vida, o AJAX possui algumas desvantagens: Maior complexidade de desenvolvimento Aplica\u00e7\u00e3o mais pesada no client S\u00f3 funciona em navegadores mais modernos Pode precisar de ajustes dependendo do navegador do client O usu\u00e1rio perde a op\u00e7\u00e3o de avan\u00e7ar e voltar no seu hist\u00f3rico","title":"Programa\u00e7\u00e3o Ajax"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#objeto-xmlhttprequest","text":"Agora que entendemos melhor o que \u00e9 o AJAX e como podemos construir aplica\u00e7\u00f5es com ele, precisamos entender bem uma das suas principais ferramentas: o objeto XMLHTTPRequest. Inicialmente criado pelo Microsoft e adaptado pelo Mozilla, o XMLHTTPRequest \u00e9 um objeto (mas tamb\u00e9m pode ser interpretado como uma API) que \u00e9 fornecido pelo pr\u00f3prio navegador e que permite que nosso c\u00f3digo JS troque dados com um servidor web. O objeto XMLHTTPRequest \u00e9 a base do AJAX. Mas cuidado. Apesar do nome, ele aceita a troca de informa\u00e7\u00f5es em diferentes formatos al\u00e9m do XML: JSON, HTML, TXT, XML. Al\u00e9m disso por ele podemos nos conectar \u00e0 servi\u00e7os por outros m\u00e9todos al\u00e9m do HTTP. Para aprender como usar essa ferramenta, vamos por partes. Podemos come\u00e7ar o nosso script com a cria\u00e7\u00e3o de um objeto que ser\u00e1 do tipo XMLHTTPRequest. // js // fun\u00e7\u00e3o caso a conex\u00e3o funcione function success () { window . document . getElementById ( 'texto' ). innerHTML = this . responseText } // fun\u00e7\u00e3o caso a conex\u00e3o de erro function error ( err ) { console . log ( 'Erro:' , err )} // cria\u00e7\u00e3o do objeto XmlHttpRequest var xhr = new XMLHttpRequest () // executa a fun\u00e7\u00e3o success se a requisi\u00e7\u00e3o funcionar xhr . onload = success // executa um fun\u00e7\u00e3o erro se a conex\u00e3o nao funcionar xhr . onerror = error // defindo a requisicao xhr . open ( 'GET' , 'https://api.github.com/users/brunoruas2' ) xhr . send () Esse script acima executa uma consulta a uma url do github que retorna um JSON com informa\u00e7\u00f5es a respeito da conta de algum usu\u00e1rio. Essa requisi\u00e7\u00e3o \u00e9 feita no m\u00e9todo send() . Em caso de sucesso, o xhr dispara a fun\u00e7\u00e3o success que, por sua vez, altera usa o DOM para printar na tela o JSON coletado. Em caso de erro, ele mostra, no console (Para acessar basta apertar f12 em qualquer navegador moderno) com uma mensagem de texto que cont\u00e9m o erro. Como podemos perceber (e como quase tudo em JS) existem v\u00e1rios m\u00e9todos \u00fateis no objeto XMLHttpRequest que devemos aprender. Abaixo temos uma tabela de refer\u00eancia com esses m\u00e9todos. Propriedade Descri\u00e7\u00e3o status Codigo HTTP da resposta statusText Texto da resposta readyState Status do pedido responseTexte Txt bruto da resposta responseXML Resposta em um objeto no DOM. Mas s\u00f3 funciona Se o tipo for text onreadystatechange Dispara uma fun\u00e7\u00e3o quando o readState muda onerror Executa fun\u00e7\u00e3o se erro onprogress Dispara uma fun\u00e7\u00e3o em caso de demora na resposta onload Fun\u00e7\u00e3o se o send funcionar Para cada requisi\u00e7\u00e3o, o m\u00e9todo readyState retorna um est\u00e1gio diferente. Podemos pensar que cada requisi\u00e7\u00e3o possui uma s\u00e9rie de passos a serem feitos at\u00e9 a sua conclus\u00e3o. Esses passos s\u00e3o lidos pelo m\u00e9todo onreadystatechange e possuem caracter\u00edsticas que podemos ver na lista abaixo. Os est\u00e1gios de uma requisi\u00e7\u00e3o s\u00e3o: Uninitialized (0) - Objeto criado mas n\u00e3o iniciado Loading (1) - Objeto criado mas n\u00e3o usou o m\u00e9todo send() Loaded (2) - Send() executado mas os cabe\u00e7alhos n\u00e3o est\u00e3o dispon\u00edveis Interactive (3) - Alguns dados recebidos mas n\u00e3o completamente Completed (4) - Todos os dados foram recebidos e podem ser lidos Abaixo temos um exemplo de uso do readyState para verifica\u00e7\u00e3o do status da chamada. // js function requisicaoAJAX () { var xmlhttp = new HMLHttpResquest () } xmlhttp . onreadystatechange = function () { if ( xmlhttp . readyState == 4 && xmlhttp . status == 200 ) { divElement = document . getElementById ( 'texto' ) divElement . innerHTML = xmlhttp . responseText } } xmlhttp . open ( \"GET\" , \"www.google.com/api.php\" ) xmlhttp . send () Podemos ver que n\u00f3s criamos uma fun\u00e7\u00e3o disparada apenas quando o status muda e, como colocamos uma condi\u00e7\u00e3o dentro, s\u00f3 teremos a realm modifica\u00e7\u00e3o caso o status da comunica\u00e7\u00e3o seja 200 (que \u00e9 o padr\u00e3o para sucesso) e o status da comunica\u00e7\u00e3o seja o de completo.","title":"Objeto XMLHTTPRequest"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#api-fetch","text":"Os navegadores atuais nos permitem uma alternativa ao XMLHttpRequest chamada API Fetch. A vantagem \u00e9 que essa nova tecnologia nos permite fazer uso das promises que simplifica a escrita da programa\u00e7\u00e3o ass\u00edncrona. Podemos ver um exemplo abaixo. // js < script > fetch ( 'https:api.github.com/users/brunoruas2' ) . then ( res => res . json ()) . then ( data => console . log ( data )) . catch ( err => console . log ( 'Erro: ' , err )) < /script> Coment\u00e1rio: O material n\u00e3o se aprofunda no tema, ent\u00e3o eu volto aqui para aprofundar no futuro. Aqui tem um link com um material de refer\u00eancia da MDN.","title":"API Fetch"},{"location":"nav/PUC/eixo1/desenvolvimento_web/#bibliografia","text":"SIKOS, L. Web Standards. Mastering HTML5, CSS3, and XML . DACONTA, M. C.; SMITH, K. T.; OBRST, L. J. The semantic Web: a guide to the future of XML, Web services, and knowledge management . [s. l.]: Wiley, [s. d.]. ISBN 0471432571 SILVA, Maur\u00edcio Samy. HTML 5: a linguagem de marca\u00e7\u00e3o quer revolucionar a web . 2. ed. rev. e ampl. [s. l.]: Novatec, 2014. ISBN 9788575224038 SANDERS, William B. Smashing HTML5: t\u00e9cnicas para a nova gera\u00e7\u00e3o da web . Porto Alegre: Bookman, 2012. xiv, 354 p. ISBN 9788577809608 DEITEL, Paul J., Deitel, Harvey M. Ajax, Rich. Internet Applications e Desenvolvimento Web para Programadores . Pearson 776. ISBN 9788576051619 SILVA, Maur\u00edcio Samy. CSS3: desenvolva aplica\u00e7\u00f5es web profissionais com uso dos poderosos recursos de estiliza\u00e7\u00e3o das CSS3 . S\u00e3o Paulo: Novatec, 2011. 494 p. ISBN 9788575222898 BERTAGNOLLI, S. de C.; MILETTO, E. M. Desenvolvimento de software II: introdu\u00e7\u00e3o ao desenvolvimento web com HTML, CSS, JavaScript e PHP . [s. l.]: Bookman, 2014. ISBN 9788582601952 Isso pode ser a causa de alguns bugs na sua aplica\u00e7\u00e3o. \u21a9 Esse eu to usando para hospedar esse site. \u21a9 Isso \u00e9 muito importante porque vamos usar essa informa\u00e7\u00e3o para fazer alguma coisa. \u21a9 tamb\u00e9m chamados de elementos filhos. \u21a9 Voc\u00ea pode pesquisar para saber a lista dos gradientes dispon\u00edveis. \u21a9 Que no exemplo abaixo ser\u00e1 um elemento da classe \"container\". \u21a9 Sempre vai existir alguma exce\u00e7\u00e3o, eu sei. \u21a9","title":"Bibliografia"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/","text":"hljs.initHighlightingOnLoad(); Assuntos Conceitos e Processos de Software Defini\u00e7\u00f5es Modelos e Princ\u00edpios de Processo de Software Processos \u00c1geis Processos Prescritivos Quando usar cada Processo? Requisitos Requisitos Funcionais Requisitos N\u00e3o Funcionais Atividades e Artefatos da Engenharia de Software Atividades T\u00e9cnicas Atividades Gerenciais Testes de Software Artefatos e Templates Desenhando Processos de Software Bibliografia Conceitos e Processos de Software A engenharia de software \u00e9 sub\u00e1rea da Ci\u00eancia da Computa\u00e7\u00e3o que lida com as atividades de desenvolvimento, opera\u00e7\u00e3o e evolu\u00e7\u00e3o de software. Esse campo surgiu com a crise do software de 1968. Defini\u00e7\u00f5es Agora vamos aprender os conceitos usados ao longo do trabalho de engenharia de software: Programa - Conjunto de instru\u00e7\u00f5es em uma linguagem de programa\u00e7\u00e3o. Software - Programa + Estrutura de Dados + Documenta\u00e7\u00e3o. Sistema - Conjunto de elementos interdependentes de Softwares, Hardware e Pessoas. Podem ser intensivos em qualquer umas dessas 3 partes. Modelos e Princ\u00edpios de Processo de Software O processo de Software \u00e9 um conjunto de etapas usadas para a produ\u00e7\u00e3o de solu\u00e7\u00f5es de software. Podemos elencar dois conceitos importantes que comp\u00f5e o processo de software: Descri\u00e7\u00e3o de Processos: Atividades - Lista de etapas necess\u00e1rias. Produtos ou Artefatos - Produto gerado pelas atividades. Pap\u00e9is - Quem executa cada atividade. Condi\u00e7\u00f5es - As requisi\u00e7\u00f5es pr\u00e9 e p\u00f3s execu\u00e7\u00e3o das atividades. Modelos de Ciclo de Vida: Modelo Sequencial Linear: An\u00e1lise/Projeto/Codifica\u00e7\u00e3o/Teste. Modelo em Cascata: Defini\u00e7\u00e3o/Projeto/Implementa\u00e7\u00e3o/Integra\u00e7\u00e3o/Manuten\u00e7\u00e3o. Modelo Incremental: O projeto \u00e9 quebrado em incrementos e cada incremento possui um modelo sequencial linear ou em cascata. Modelo Incremental Evolutivo: Esbo\u00e7o/loop{Especifica\u00e7\u00e3o/Desenvolvimento/Valida\u00e7\u00e3o} at\u00e9 que se tenha a vers\u00e3o final. Modelo Espiral: loop{Planejamento/Modelagem/Constru\u00e7\u00e3o/Entrega/Feedback} para cada incremento novo ao software. Modelo Iterativo: \u00c9 o modelo Sequencial Linear mas com possibilidade de retorno para as etapas anteriores at\u00e9 que se esteja aprovado pelo cliente. Modelo V: Durante todas as etapas de processo de software n\u00f3s j\u00e1 vamos definindo os testes que ser\u00e3o usados para a aprova\u00e7\u00e3o do produto. Hoje em dia, temos dois modelos mais usados. A modelo incremental foca em entregar um peda\u00e7o de cada vez e o modelo iterativo permite entregar vers\u00f5es mais simples do produto e ir aprimorando elas. O modelo atual mais usado \u00e9 justamente o Modelo incremental iterativo . Agora que aprendemos o conceito de modelo de processo de software, vamos analisar algumas abordagens de elabora\u00e7\u00e3o de software. Podemos dizer que existem 3 grupos principais de processos de gest\u00e3o de software: 1) Processos \u00e1geis; 2) Processos Prescritivos e 3) Processos Enxutos (lean process). Coment\u00e1rio: No material do curso s\u00f3 foram abordadas os dois primeiros processos. Processos \u00c1geis Os processos \u00e1geis nasceram no final do s\u00e9culo XX. Seguem o modelo incremental e iterativo de desenvolvimento. Os incrementos s\u00e3o pequenos e sucessivos (2 a 3 semanas). O cliente est\u00e1 constantemente em contato com o produto gerado no ciclo. A documenta\u00e7\u00e3o \u00e9 reduzida porque h\u00e1 muita comunica\u00e7\u00e3o interpessoal. Existem v\u00e1rias metodologias mas podemos elencar alguns: eXtreme Programming (XP) Scrum Dynamic System Development (DSDM) Feature Driven Development (FDD) Crystal Families Hoje em dia o m\u00e9todo mais usado \u00e9 o Scrum. A novidade dele \u00e9 que a abordagem do desenvolvimento \u00e9 emp\u00edrica e permite a evolu\u00e7\u00e3o dos requisitos do processo ao longo do processo. O Scrum \u00e9 divido em apenas 3 etapas: 1) Planejamento inicial do projeto; 2) Loop de desenvolvimento e feedback (chamado de sprint) e 3) Entrega ao cliente. As equipes do scrum s\u00e3o pequenas, multidisciplinares, de lideran\u00e7a dilu\u00edda e trabalham com um foco de melhorias pequenas em um prazo mais curto (2 ou 4 semanas). Existe a figura do facilitador do processo chamado Scrum Master. Os requisitos do software s\u00e3o mantidos no artefato chamado Backlog e serve de norte pada os times de desenvolvimento. Existem 3 papeis no processo de gest\u00e3o do Scrum: Product Owner (PO) - O cliente ou algu\u00e9m representante da vontade dele. Podemos pensar no PO como a ponte entre a empresa-cliente e a empresa-desenvolvedora. Scrum Master - \u00c9 o facilitador do time de desenvolvimento. Atua como ponte entre o time de desenvolvimento e o PO. Atentemos para o fato do PO n\u00e3o participar do processo de desenvolvimento t\u00e9cnico. Equipe de Desenvolvimento - \u00c9 auto-organizada e respons\u00e1vel pela produ\u00e7\u00e3o dos algoritmos que compor\u00e3o o software. Agora veremos de maneira organizada os artefatos produzidos no processo de Scrum: Backlog do Produto - Lista de caracter\u00edsticas necess\u00e1rias ao software atreladas a um grau de import\u00e2ncia. Cada caracter\u00edstica \u00e9 fruto de uma hist\u00f3ria de usu\u00e1rio que \u00e9 composta de 3 informa\u00e7\u00f5es (quem?; o que? e por qu\u00ea?). Backlog da Sprint - \u00c9 um subconjunto das caracter\u00edsticas elencadas do backlog do produto. Esses itens ser\u00e3o o foco da sprint (2 a 4 semanas). Incremento do Produto - \u00c9 o resultado do trabalho realizado na sprint. Al\u00e9m dos pap\u00e9is e dos artefatos, existem as cerim\u00f4nias do modelo Scrum: Reuni\u00e3o de planejamento da Sprint - Decide quais caracter\u00edsticas do Backlog do projeto ser\u00e3o objeto de trabalho pelo time de desenvolvimento. Daily - Acompanhamento a cada 24 horas do esfor\u00e7o do time de desenvolvimento para o alcance do planejamento da sprint. Algo r\u00e1pido (15 min). Revis\u00e3o da Sprint - Avalia\u00e7\u00e3o pelo PO do cumprimento do backlog da sprint. Foco no produto. Retrospectiva da Sprint - Melhoria do processo por meio de feedback de todas as partes envolvidas no processo de sprint. Foco no processo. Processos Prescritivos Antes do predom\u00ednio das metodologias \u00e1geis, os processos de controle de produ\u00e7\u00e3o de software eram orientados por processos prescritivos, tamb\u00e9m s\u00e3o chamados de processos dirigidos por planos. A ideia \u00e9 primeiro planejar tudo e ir visualizando o caminhar dos trabalhos em termos do planejamento inicial. O Rational Unified Process (RUP) \u00e9 o mais famoso desses modelos. O RUP hoje pertence \u00e0 IBM e possui algumas caracter\u00edsticas principais: Possui v\u00e1rios princ\u00edpios dos quais podemos citar: Foco nos riscos principais Garantia do valor Permitir mudan\u00e7as Defini\u00e7\u00e3o da arquitetura da solu\u00e7\u00e3o o mais breve poss\u00edvel Constru\u00e7\u00e3o da solu\u00e7\u00e3o em componentes Baseado em componentes/etapas planejadas Disciplinas (o que deve ser feito): Requisitos/An\u00e1lise/Projeto/Implementa\u00e7\u00e3o/Teste Fases (as etapas de cumprimento das disciplinas): Concep\u00e7\u00e3o/Elabora\u00e7\u00e3o/Constru\u00e7\u00e3o/Transi\u00e7\u00e3o Possui linguagem padronizada: Unified Modeling Language (UML) \u00c9 dirigido por caso de uso Funciona por modelo iterativo-incremental Os benef\u00edcios dos processos prescritivos ainda s\u00e3o vistos nas maiores empresas, principalmente relacionados ao uso da UML para defini\u00e7\u00e3o de etapas necess\u00e1rias em intera\u00e7\u00f5es e processos. Abaixo temos um exemplo retirado do material do curso. Mais informa\u00e7\u00f5es sobre a UML podem ser encontradas nesse link . Especifica\u00e7\u00e3o do caso de uso Matricular em disciplinas do sistema de controle acad\u00eamico. Fonte: A especifica\u00e7\u00e3o do caso de uso foi adaptada do livro BEZERRA, Eduardo. Princ\u00edpios de an\u00e1lise e projeto de sistemas com UML. Rio de Janeiro: Campus, 2003. Matricular em disciplinas Sum\u00e1rio: O aluno usa o sistema para se matricular em disciplinas. Ator prim\u00e1rio: aluno Ator secund\u00e1rio: Sistema Financeiro Pr\u00e9-condi\u00e7\u00f5es: o aluno est\u00e1 identificado pelo sistema Fluxo Principal: O aluno solicita a matr\u00edcula em disciplinas; O sistema apresenta a lista de disciplinas dispon\u00edveis para o semestre corrente para as quais o alunos possui pr\u00e9-requisitos; O aluno seleciona as disciplinas desejadas e solicita a matr\u00edcula; O sistema aloca o aluno em turmas de ofertas das disciplinas desejadas e informa ao aluno a turma alocada para cada disciplina bem como o professor, os hor\u00e1rios e dias da semana e as salas de aula; O aluno confirma as aloca\u00e7\u00f5es feitas; O sistema realiza a matr\u00edcula e envia os dados para o Sistema Financeiro; O caso de uso termina. Fluxo Alternativo (4): Inclus\u00e3o em lista de espera a. Se n\u00e3o h\u00e1 vaga ou oferta dispon\u00edvel para alguma disciplina selecionada pelo aluno, o sistema informa o fato ao aluno e fornece a op\u00e7\u00e3o de inserir o aluno em uma lista de espera para aquela disciplina; b. Se o aluno aceitar o sistema insere o aluno na lista de espera desejada e apresenta a posi\u00e7\u00e3o do aluno na lista. O caso de uso retorna ao passo 4; c. Se o aluno n\u00e3o aceitar o caso de uso prossegue a partir do passo 4. Fluxo de Exce\u00e7\u00e3o (4): Viola\u00e7\u00e3o de regra de neg\u00f3cio relativa quantidade m\u00e1xima de cr\u00e9ditos a) Se o aluno j\u00e1 atingiu a quantidade m\u00e1xima de cr\u00e9ditos em que pode se matricular por semestre, o sistema informa a quantidade de disciplinas que ele pode se matricular e o caso de uso retorna ao passo 2; P\u00f3s-Condi\u00e7\u00f5es: O aluno foi inscrito em turmas das disciplinas selecionadas ou foi acrescentado a listas de esperas das disciplinas selecionadas. Ao final de cada fase s\u00e3o superados os marcos principais do RUP. Cada marco significa o maior risco relacionado \u00e0quela etapa. Na fase de concep\u00e7\u00e3o \u00e9 o marco de objetivo de ciclo de vida. Na fase de elabora\u00e7\u00e3o \u00e9 o marco que arquitetura do software. Na fase da constru\u00e7\u00e3o \u00e9 o marco da capacidade operacional inicial e, por fim, no marco da transi\u00e7\u00e3o \u00e9 o marco da entrega do produto. Existem problemas nos m\u00e9todos prescritivos, os principais s\u00e3o: Forte apego \u00e0 hierarquia Segmenta\u00e7\u00e3o elevada do processo de constru\u00e7\u00e3o Em situa\u00e7\u00f5es cr\u00edticas, acabam dando lugar a processos \u00e1geis Quando usar cada Processo? Na vida real, podemos encontrar v\u00e1rios modelos misturados no dia a dia das empresas. As pr\u00e1ticas em cada empresa s\u00e3o org\u00e2nicas e fortemente baseadas na cultura organiza\u00e7\u00e3o local. Podemos sempre analisar os modelos como uma matriz de 2 eixos: Cascata x Iterativo e Disciplinado x Flex\u00edvel. Aqui n\u00f3s s\u00f3 analisamos os processos iterativos. Cabe a voc\u00ea saber se precisa de um processos mais formal como o RUP ou algo mais r\u00e1pido e flex\u00edvel como o SCRUM. Requisitos Podem ser divididos em 2 grupos: requisitos de cliente e requisitos do software. A primeira classe \u00e9 focada nas necessidades dos usu\u00e1rios 1 que utiliza\u00e7\u00e3o o sistema (\u00e9 o problema a ser resolvido). A segunda categoria s\u00e3o as caracter\u00edsticas que o produto deve ter para cumpri os requisitos dos clientes (s\u00e3o as ferramentas que o sistema ter\u00e1 para interagir com os users). Os requisitos de software podem ser divididos em funcionais e n\u00e3o funcionais. Essa divis\u00e3o ser\u00e1 abordada de maneira mais detalhada abaixo. Requisitos Funcionais Os requisitos funcionais s\u00e3o as caracter\u00edsticas que o software deve ter para resolver os problemas elencados como objetivos do sistema proposto. S\u00e3o definidos pelos stakeholders (user, clientes, especialistas e investidores). No SCRUM eles est\u00e3o no backlog do projeto e no RUP est\u00e1 num documento espec\u00edfico para isso. \u00c9 uma lista de exposi\u00e7\u00f5es breves das funcionalidades que o software far\u00e1 e como ele se comportar\u00e1 em rela\u00e7\u00e3o a alguma intera\u00e7\u00e3o dos usu\u00e1rios. Atente para o fato que os requisitos funcionais s\u00e3o sempre relacionados a algum usu\u00e1rio e n\u00e3o \u00e0 caracter\u00edsticas t\u00e9cnicas do sistema. Requisitos N\u00e3o Funcionais S\u00e3o as descri\u00e7\u00f5es das normas e padr\u00f5es do produto de software. \u00c9 aqui que definimos a linguagem de programa\u00e7\u00e3o, o ambiente, os crit\u00e9rios de seguran\u00e7a, banco de dados, disponibilidade do produto, desempenho e etc. Um requisito n\u00e3o funcional deve sempre citar um crit\u00e9rio de aceita\u00e7\u00e3o quantific\u00e1vel. Desse modo, podemos realizar testes objetivos na hora de avaliar se o desenvolvimento da feature foi bem sucedido na itera\u00e7\u00e3o. Podemos elencar alguns tipos de requisito n\u00e3o funcional: Desempenho Disponibilidade Portabilidade Usabilidade Capacidade e Degrada\u00e7\u00e3o Manutenibilidade Outros requisitos n\u00e3o funcionais s\u00e3o relacionados ao processo de desenvolvimento. Como por exemplo: Restri\u00e7\u00e3o da equipe desenvolvedora Qual processo de software deve ser usada Qual documenta\u00e7\u00e3o deve ser criada Al\u00e9m dessas duas classifica\u00e7\u00f5es, podemos ter restri\u00e7\u00f5es relacionadas ao projeto de software: Qual SGBD deve ser usado Plataforma de disponibilidade (web ou n\u00e3o) Qual linguagem de programa\u00e7\u00e3o usada Qual o SO das plataformas Exist\u00eancia de sistema legado Todos os requisitos n\u00e3o funcionais estar\u00e3o no backlog da sprint atrav\u00e9s da aceita\u00e7\u00e3o do incremento pelo cliente e no RUP existe uma documenta\u00e7\u00e3o espec\u00edfica para isso. Atividades e Artefatos da Engenharia de Software O processo de produ\u00e7\u00e3o de software \u00e9 divido em atividades com seus respectivos respons\u00e1veis e os artefatos criados a cada etapa finalizada. As atividades s\u00e3o dividas em t\u00e9cnicas, gerenciais, testes e de apoio 2 . Essas atividades s\u00e3o as que comp\u00f5e toda a gest\u00e3o da engenharia de software. Atividades T\u00e9cnicas Dentro das atividades t\u00e9cnicas n\u00f3s temos a engenharia de requisitos , design/projeto de software , implementa\u00e7\u00e3o/codifica\u00e7\u00e3o , testes e aceita\u00e7\u00e3o do cliente . Podemos elencar as seguintes atividades t\u00e9cnicas necess\u00e1rias ao bom processo de engenharia de requisitos: Levantamento de Requisitos (Elicita\u00e7\u00e3o): Entrevistas Observa\u00e7\u00e3o Leitura de documenta\u00e7\u00e3o An\u00e1lise dos Requisitos: An\u00e1lise das lacunas Modelagem gr\u00e1fica Revis\u00e3o das descri\u00e7\u00f5es Especifica\u00e7\u00e3o dos Requisitos: Descri\u00e7\u00e3o sem ambiguidades Linguagem natural, controlada ou espec\u00edfica Valida\u00e7\u00e3o dos Requisitos: Revis\u00e3o de tudo Prototipagem Nota\u00e7\u00f5es complexas podem dificultar entendimento do cliente Valida\u00e7\u00e3o por parte do cliente Agora vamos ver as atividades de Projeto (design) de Software: Pondera\u00e7\u00e3o das alternativas de solu\u00e7\u00f5es Escolha da solu\u00e7\u00e3o que ser\u00e1 implementada Detalhamento da solu\u00e7\u00e3o escolhida (elabora\u00e7\u00e3o do projeto): Arquitetura do Software: Alto n\u00edvel de abstra\u00e7\u00e3o. Foco nos requisitos n\u00e3o funcionais. Representa\u00e7\u00e3o das partes gerais da solu\u00e7\u00e3o. Projeto Detalhado: Baixa abstra\u00e7\u00e3o. Defini\u00e7\u00e3o dos objetos e das intera\u00e7\u00f5es. Foco nos requisitos funcionais. Algoritmos e estruturas de dados. Uma vez que temos os requisitos elencados e o projeto definido, entramos na etapa de implementa\u00e7\u00e3o ou codifica\u00e7\u00e3o. Implementados os algoritmos, temos a etapa de testes de software para validar os requisitos e garantir que os objetivos sejam alcan\u00e7ados. Podem ser manuais ou automatizados. Por fim, temos a aprova\u00e7\u00e3o do cliente no sentido de cumprimento das funcionalidades esperadas e da qualidade exigida da solu\u00e7\u00e3o. Ap\u00f3s a aprova\u00e7\u00e3o, existe a etapa de manuten\u00e7\u00e3o de software que \u00e9 composta da repeti\u00e7\u00e3o de todas as etapas expostas acima. Cada manuten\u00e7\u00e3o ou aprimoramento passa pelas etapas descritas desde a an\u00e1lise de requisito at\u00e9 a aprova\u00e7\u00e3o. Medidas de Software S\u00e3o abordagens de medi\u00e7\u00e3o e defini\u00e7\u00e3o de metas para o cumprimento das etapas programadas para alcance dos objetivos da solu\u00e7\u00e3o contratada. Atividades Gerenciais S\u00e3o as atividades que atuam no controle da complexidade da solu\u00e7\u00e3o desenvolvida e podem ser dividas em gest\u00e3o de configura\u00e7\u00e3o , gest\u00e3o de projeto , gest\u00e3o de requisitos e gest\u00e3o de processos e, al\u00e9m dessas, possuem atividades afins como gest\u00e3o da qualidade e estimativas de software. A gest\u00e3o de configura\u00e7\u00e3o ou gest\u00e3o de vers\u00f5es \u00e9 a atividade que cuida da manuten\u00e7\u00e3o e organiza\u00e7\u00e3o dos arquivos produzidos durante todo o processo de software. \u00c9 a atividade que controla as atualiza\u00e7\u00f5es dos programas e mant\u00e9m a mem\u00f3ria de todas as etapas anteriores. A ger\u00eancia de projeto de software \u00e9 a atividade que controle a din\u00e2mica de tempo, pessoas, custos envolvido no processo de desenvolvimento. A ger\u00eancia de requisitos \u00e9 a atividade de controle das necessidades de mudan\u00e7a no escopo do projeto bem como controla as mudan\u00e7as na mudan\u00e7a da necessidade do cliente a respeito da mudan\u00e7a de requisitos. Tamb\u00e9m atua na prioriza\u00e7\u00e3o dos requisitos para a defini\u00e7\u00e3o dos focos de trabalho. Outra atribui\u00e7\u00e3o relacionada \u00e9 o controle da rastreabilidade dos requisitos pois todas as etapas de elabora\u00e7\u00e3o devem ser relacionadas a algum requisito que perten\u00e7a ao escopo solicitado pelo cliente. A gest\u00e3o de Processos \u00e9 a atividade de defini\u00e7\u00e3o e melhoria do processo de gest\u00e3o de software de acordo com as boas pr\u00e1ticas, dos modelos de capacita\u00e7\u00e3o e maturidade como (CMMI e MPS.BR). A gest\u00e3o da qualidade \u00e9 a atividade que avalia as v\u00e1rias interfaces de din\u00e2micas que impactam no resultado final do produto de software. A estimativa de software \u00e9 a atividade de gerar previs\u00f5es com base na hist\u00f3ria da empresa de desenvolvimento afim de melhorar a aloca\u00e7\u00e3o dos recursos para cumprimento das etapas previstas no in\u00edcio do processo de planejamento. Testes de Software O objetivo dos testes \u00e9 identificar os problemas da solu\u00e7\u00e3o desenvolvida mas, como tudo na vida, existem restri\u00e7\u00f5es a quantidade e qualidade de testes poss\u00edveis de serem feitos uma vez que existem custos associados a essa atividade. Diante das restri\u00e7\u00f5es impostas pela realidade e da complexidade do processo de desenvolvimento, \u00e9 imposs\u00edvel, n\u00e3o importa o dimensionamento do esfor\u00e7o, garantir uma aplica\u00e7\u00e3o livre de erros. O foco dessa atividade \u00e9 garantir que, ao dado n\u00edvel de confian\u00e7a requerido, que o software entregar\u00e1 as capacidades requeridas no projeto. Os testes s\u00e3o necess\u00e1rios para garantir o cumprimento dos requisitos funcionais e n\u00e3o funcionais e podem ser divididos em dois tipos: Testes Funcionais/Caixa Preta - Baseados no ponto de vista do usu\u00e1rio do software. Testes Estruturais/Caixa Branca - Ponto de vista de quem desenvolveu o software por meio de inputs e avalia\u00e7\u00e3o de outputs. Uma boa maneira de realizar os testes funcionais \u00e9 reproduzir as situa\u00e7\u00f5es listadas nas hist\u00f3rias dos usu\u00e1rios. Uma Plano de Testes \u00e9 o documento que indica o conjunto de informa\u00e7\u00f5es relacionadas ao teste realizado, tais como: Testes de desempenho Testes funcionais da hist\u00f3ria de usu\u00e1rio x Teste de responsividade Teste de campos de formul\u00e1rios Teste de navegabilidade ou links Teste de ponta a ponta No teste ponta a ponta passamos por todas as principais caracter\u00edsticas e funcionalidades do produto que desenvolvimento para cumprimento dos requisitos. Um plano de teste deve conter os casos de testes que, por sua vez, devem conter as seguintes informa\u00e7\u00f5es: Objetivo Valores de entrada Valores de sa\u00edda esperada Valores de sa\u00edda real Registro de execu\u00e7\u00e3o (falha ou sucesso) Artefatos e Templates Artefatos Os artefatos s\u00e3o um dos produtos que as atividades t\u00e9cnicas e gerencias produzem em cada ciclo de trabalho e podem ser usados nas etapas posteriores da execu\u00e7\u00e3o do projeto. Existem v\u00e1rios tipos, vamos elencar alguns: Artefatos do processo de desenvolvimento: Backlog do produto 3 Diagramas de casos de usados Descri\u00e7\u00e3o de casos de uso Documento de especifica\u00e7\u00e3o de requisitos Descreve os requisitos baseados em casos de uso ou outra forma de descri\u00e7\u00e3o. Artefatos do processe de gerenciamento: Documento de arquitetura de software O nome j\u00e1 denuncia mas \u00e9 importante porque cont\u00e9m v\u00e1rios diagramas do desenho da aplica\u00e7\u00e3o e como a solu\u00e7\u00e3o foi constru\u00edda em partes funcionais. Plano de Teste de software Casos de testes Lista de bugs Plano de projeto Matriz de rastreabilidade Mostra como os requisitos (que comp\u00f5e as linhas da matriz) se relacionam com os artefatos produzidos durante o processo de produ\u00e7\u00e3o. Templates N\u00f3s j\u00e1 aprendemos o que s\u00e3o os artefatos de software e em que contexto eles s\u00e3o gerados, agora, vamos aprender algumas ferramentas e templates que nos auxiliam no processo de cria\u00e7\u00e3o desses artefatos durante o processo de desenvolvimento de software. Coment\u00e1rio: Essa se\u00e7\u00e3o \u00e9 mais para consulta quando voc\u00ea precisar gerenciar algum projeto de desenvolvimento de software. Vou tentar manter os links atualizados mas caso algum deixe de funcionar, pode me avisar pelo twitter . Backlog do produto e Kanban Existem v\u00e1rias maneiras de organizar o cumprimento dos requisitos contidos no backlog do projeto. O kanban \u00e9 um quadro onde transformamos cada item do backlog em unidades separ\u00e1veis (geralmente post-its ou quadros) onde podemos mover para quadrantes de um board maior. Usualmente temos os quadrantes \"A fazer\", \"Fazendo\" e \"Feito\". Desse modo, podemos ver rapidamente o estado do desenvolvimento das atividades programadas para a sprint. Existem v\u00e1rias ferramentas virtuais que podem ser usadas no processo como: Trello PivotalTracker Especifica\u00e7\u00e3o de Requisitos de Software Existem v\u00e1rios templates dispon\u00edveis na internet: IEE/ISO/IEC 29148 Esse exemplo M\u00e9todo Volere PUC-MG Documento de Arquitetura de Software Architecture View Template Interface Template IEE/ISO/IEC 42020 Nesse link aqui voc\u00ea pode ver como elaborar um caso de teste funcional a partir dos casos de uso. Aqui tem um template de ata de reuni\u00e3o . Por fim, temos um template de matriz de impacto de mudan\u00e7as aqui . E uma matriz de rastreabilidade em excel aqui . Desenhando Processos de Software Essa \u00faltima se\u00e7\u00e3o \u00e9 um exerc\u00edcio onde vamos colocar em pr\u00e1tica todos os conceitos aprendidos at\u00e9 agora. Temos que saber que os conceitos aprendidos n\u00e3o s\u00e3o regras imut\u00e1veis na aplica\u00e7\u00e3o pr\u00e1tica em um processo de software. Podemos combinar caracter\u00edsticas de v\u00e1rios modelos durante o processo de execu\u00e7\u00e3o de um planejamento sempre com foco na melhora cont\u00ednua da qualidade do software. Mesmo tendo muita flexibilidade sobre o processo de software, podemos elencar caracter\u00edsticas que s\u00e3o obrigat\u00f3rias em qualquer desenho: Qual o modelo de ciclo de vida Quais as atividades que compor\u00e3o o processo de software e quais a t\u00e9cnicas usadas ao longo delas Quais produtos ou artefatos ser\u00e3o gerados a cada etapa Os pap\u00e9is dos agentes relacionados ao longo do processo N\u00f3s come\u00e7amos o nosso estudo de engenharia de software pelos modelos de ciclo de vida exatamente porque eles regem grande parte das atividades e artefatos produzidos durante todo o processo de software. A maturidade da empresa, dimensionamento da m\u00e3o de obra, recursos dispon\u00edveis, verba do projeto, tempo de execu\u00e7\u00e3o e outras caracter\u00edsticas s\u00e3o importantes para defini\u00e7\u00e3o do melhor modelo de ciclo de vida a ser adotado. A nossa jornada pela engenharia de software vai ser em grande medida construir um amplo repert\u00f3rio de modelos de ciclo de vida, atividades e artefatos. Para facilitar o complexo processo de software, existem v\u00e1rias ferramentas que centralizam as diferentes etapas e simplificam o processo de gest\u00e3o: Bizagi Modeler Eclipse Process Framework Bibliografia PRESSMAN, Roger S.; MAXIM, Bruce R. Engenharia de software: uma abordagem profissional . 8. ed. Porto Alegre: AMGH, 2016. E-book ISBN 9788580555349. Cap\u00edtulos 1, 2, 3 PRIKLADNICKI, Rafael, WILLI, Renato, e MILANI, Fabiano. Me\u0301todos a\u0301geis para desenvolvimento de software . Porto Alegre: Bookman, 2014 1 recurso online ISBN 9788582602089 Cap\u00edtulos 1,2,3,8,12,13 SOMMERVILLE, Ian. Engenharia de software , 10\u00aa ed. Pearson 768 ISBN 9788543024974 Cap\u00edtulos 1,2,3,4 COHN, Mike; SILVA, Aldir Jos\u00e9 Coelho Corr\u00eaa da. Desenvolvimento de software com Scrum: aplicando m\u00e9todos \u00e1geis com sucesso . Porto Alegre: Bookman, 2011. E-book ISBN 9788577808199 LARMAN, Craig. Utilizando UML e padr\u00f5es: uma introdu\u00e7\u00e3o \u00e1 an\u00e1lise e ao projeto orientados a objetos e desenvolvimento iterativo . 3. ed. Porto Alegre: Bookman, 2007. E-book (695 p\u00e1ginas) ISBN 9788577800476 PAULA FILHO, Wilson de P\u00e1dua. Engenharia de software , v. 2 projetos e processos. 4. Rio de Janeiro LTC 2019 1 recurso online ISBN 9788521636748 VETORAZZO, Adriana de Souza. Engenharia de software. Porto Alegre SAGAH 2018 1 recurso online ISBN 9788595026780 WAZLAWICK, Raul Sidnei. Engenharia de software conceitos e pr\u00e1ticas . Rio de Janeiro GEN LTC 2013 1 recurso online ISBN 9788595156173 Por meio das hist\u00f3rias de usu\u00e1rios ou dos casos de uso. \u21a9 N\u00e3o focaremos nessa parte mas s\u00e3o as atividades de RH, administrativo e etc. \u21a9 N\u00f3s j\u00e1 sabemos o que \u00e9. \u21a9","title":"Fundamentos de Eng. de Software"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#assuntos","text":"Conceitos e Processos de Software Defini\u00e7\u00f5es Modelos e Princ\u00edpios de Processo de Software Processos \u00c1geis Processos Prescritivos Quando usar cada Processo? Requisitos Requisitos Funcionais Requisitos N\u00e3o Funcionais Atividades e Artefatos da Engenharia de Software Atividades T\u00e9cnicas Atividades Gerenciais Testes de Software Artefatos e Templates Desenhando Processos de Software Bibliografia","title":"Assuntos"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#conceitos-e-processos-de-software","text":"A engenharia de software \u00e9 sub\u00e1rea da Ci\u00eancia da Computa\u00e7\u00e3o que lida com as atividades de desenvolvimento, opera\u00e7\u00e3o e evolu\u00e7\u00e3o de software. Esse campo surgiu com a crise do software de 1968.","title":"Conceitos e Processos de Software"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#definicoes","text":"Agora vamos aprender os conceitos usados ao longo do trabalho de engenharia de software: Programa - Conjunto de instru\u00e7\u00f5es em uma linguagem de programa\u00e7\u00e3o. Software - Programa + Estrutura de Dados + Documenta\u00e7\u00e3o. Sistema - Conjunto de elementos interdependentes de Softwares, Hardware e Pessoas. Podem ser intensivos em qualquer umas dessas 3 partes.","title":"Defini\u00e7\u00f5es"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#modelos-e-principios-de-processo-de-software","text":"O processo de Software \u00e9 um conjunto de etapas usadas para a produ\u00e7\u00e3o de solu\u00e7\u00f5es de software. Podemos elencar dois conceitos importantes que comp\u00f5e o processo de software: Descri\u00e7\u00e3o de Processos: Atividades - Lista de etapas necess\u00e1rias. Produtos ou Artefatos - Produto gerado pelas atividades. Pap\u00e9is - Quem executa cada atividade. Condi\u00e7\u00f5es - As requisi\u00e7\u00f5es pr\u00e9 e p\u00f3s execu\u00e7\u00e3o das atividades. Modelos de Ciclo de Vida: Modelo Sequencial Linear: An\u00e1lise/Projeto/Codifica\u00e7\u00e3o/Teste. Modelo em Cascata: Defini\u00e7\u00e3o/Projeto/Implementa\u00e7\u00e3o/Integra\u00e7\u00e3o/Manuten\u00e7\u00e3o. Modelo Incremental: O projeto \u00e9 quebrado em incrementos e cada incremento possui um modelo sequencial linear ou em cascata. Modelo Incremental Evolutivo: Esbo\u00e7o/loop{Especifica\u00e7\u00e3o/Desenvolvimento/Valida\u00e7\u00e3o} at\u00e9 que se tenha a vers\u00e3o final. Modelo Espiral: loop{Planejamento/Modelagem/Constru\u00e7\u00e3o/Entrega/Feedback} para cada incremento novo ao software. Modelo Iterativo: \u00c9 o modelo Sequencial Linear mas com possibilidade de retorno para as etapas anteriores at\u00e9 que se esteja aprovado pelo cliente. Modelo V: Durante todas as etapas de processo de software n\u00f3s j\u00e1 vamos definindo os testes que ser\u00e3o usados para a aprova\u00e7\u00e3o do produto. Hoje em dia, temos dois modelos mais usados. A modelo incremental foca em entregar um peda\u00e7o de cada vez e o modelo iterativo permite entregar vers\u00f5es mais simples do produto e ir aprimorando elas. O modelo atual mais usado \u00e9 justamente o Modelo incremental iterativo . Agora que aprendemos o conceito de modelo de processo de software, vamos analisar algumas abordagens de elabora\u00e7\u00e3o de software. Podemos dizer que existem 3 grupos principais de processos de gest\u00e3o de software: 1) Processos \u00e1geis; 2) Processos Prescritivos e 3) Processos Enxutos (lean process). Coment\u00e1rio: No material do curso s\u00f3 foram abordadas os dois primeiros processos.","title":"Modelos e Princ\u00edpios de Processo de Software"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#processos-ageis","text":"Os processos \u00e1geis nasceram no final do s\u00e9culo XX. Seguem o modelo incremental e iterativo de desenvolvimento. Os incrementos s\u00e3o pequenos e sucessivos (2 a 3 semanas). O cliente est\u00e1 constantemente em contato com o produto gerado no ciclo. A documenta\u00e7\u00e3o \u00e9 reduzida porque h\u00e1 muita comunica\u00e7\u00e3o interpessoal. Existem v\u00e1rias metodologias mas podemos elencar alguns: eXtreme Programming (XP) Scrum Dynamic System Development (DSDM) Feature Driven Development (FDD) Crystal Families Hoje em dia o m\u00e9todo mais usado \u00e9 o Scrum. A novidade dele \u00e9 que a abordagem do desenvolvimento \u00e9 emp\u00edrica e permite a evolu\u00e7\u00e3o dos requisitos do processo ao longo do processo. O Scrum \u00e9 divido em apenas 3 etapas: 1) Planejamento inicial do projeto; 2) Loop de desenvolvimento e feedback (chamado de sprint) e 3) Entrega ao cliente. As equipes do scrum s\u00e3o pequenas, multidisciplinares, de lideran\u00e7a dilu\u00edda e trabalham com um foco de melhorias pequenas em um prazo mais curto (2 ou 4 semanas). Existe a figura do facilitador do processo chamado Scrum Master. Os requisitos do software s\u00e3o mantidos no artefato chamado Backlog e serve de norte pada os times de desenvolvimento. Existem 3 papeis no processo de gest\u00e3o do Scrum: Product Owner (PO) - O cliente ou algu\u00e9m representante da vontade dele. Podemos pensar no PO como a ponte entre a empresa-cliente e a empresa-desenvolvedora. Scrum Master - \u00c9 o facilitador do time de desenvolvimento. Atua como ponte entre o time de desenvolvimento e o PO. Atentemos para o fato do PO n\u00e3o participar do processo de desenvolvimento t\u00e9cnico. Equipe de Desenvolvimento - \u00c9 auto-organizada e respons\u00e1vel pela produ\u00e7\u00e3o dos algoritmos que compor\u00e3o o software. Agora veremos de maneira organizada os artefatos produzidos no processo de Scrum: Backlog do Produto - Lista de caracter\u00edsticas necess\u00e1rias ao software atreladas a um grau de import\u00e2ncia. Cada caracter\u00edstica \u00e9 fruto de uma hist\u00f3ria de usu\u00e1rio que \u00e9 composta de 3 informa\u00e7\u00f5es (quem?; o que? e por qu\u00ea?). Backlog da Sprint - \u00c9 um subconjunto das caracter\u00edsticas elencadas do backlog do produto. Esses itens ser\u00e3o o foco da sprint (2 a 4 semanas). Incremento do Produto - \u00c9 o resultado do trabalho realizado na sprint. Al\u00e9m dos pap\u00e9is e dos artefatos, existem as cerim\u00f4nias do modelo Scrum: Reuni\u00e3o de planejamento da Sprint - Decide quais caracter\u00edsticas do Backlog do projeto ser\u00e3o objeto de trabalho pelo time de desenvolvimento. Daily - Acompanhamento a cada 24 horas do esfor\u00e7o do time de desenvolvimento para o alcance do planejamento da sprint. Algo r\u00e1pido (15 min). Revis\u00e3o da Sprint - Avalia\u00e7\u00e3o pelo PO do cumprimento do backlog da sprint. Foco no produto. Retrospectiva da Sprint - Melhoria do processo por meio de feedback de todas as partes envolvidas no processo de sprint. Foco no processo.","title":"Processos \u00c1geis"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#processos-prescritivos","text":"Antes do predom\u00ednio das metodologias \u00e1geis, os processos de controle de produ\u00e7\u00e3o de software eram orientados por processos prescritivos, tamb\u00e9m s\u00e3o chamados de processos dirigidos por planos. A ideia \u00e9 primeiro planejar tudo e ir visualizando o caminhar dos trabalhos em termos do planejamento inicial. O Rational Unified Process (RUP) \u00e9 o mais famoso desses modelos. O RUP hoje pertence \u00e0 IBM e possui algumas caracter\u00edsticas principais: Possui v\u00e1rios princ\u00edpios dos quais podemos citar: Foco nos riscos principais Garantia do valor Permitir mudan\u00e7as Defini\u00e7\u00e3o da arquitetura da solu\u00e7\u00e3o o mais breve poss\u00edvel Constru\u00e7\u00e3o da solu\u00e7\u00e3o em componentes Baseado em componentes/etapas planejadas Disciplinas (o que deve ser feito): Requisitos/An\u00e1lise/Projeto/Implementa\u00e7\u00e3o/Teste Fases (as etapas de cumprimento das disciplinas): Concep\u00e7\u00e3o/Elabora\u00e7\u00e3o/Constru\u00e7\u00e3o/Transi\u00e7\u00e3o Possui linguagem padronizada: Unified Modeling Language (UML) \u00c9 dirigido por caso de uso Funciona por modelo iterativo-incremental Os benef\u00edcios dos processos prescritivos ainda s\u00e3o vistos nas maiores empresas, principalmente relacionados ao uso da UML para defini\u00e7\u00e3o de etapas necess\u00e1rias em intera\u00e7\u00f5es e processos. Abaixo temos um exemplo retirado do material do curso. Mais informa\u00e7\u00f5es sobre a UML podem ser encontradas nesse link . Especifica\u00e7\u00e3o do caso de uso Matricular em disciplinas do sistema de controle acad\u00eamico. Fonte: A especifica\u00e7\u00e3o do caso de uso foi adaptada do livro BEZERRA, Eduardo. Princ\u00edpios de an\u00e1lise e projeto de sistemas com UML. Rio de Janeiro: Campus, 2003. Matricular em disciplinas Sum\u00e1rio: O aluno usa o sistema para se matricular em disciplinas. Ator prim\u00e1rio: aluno Ator secund\u00e1rio: Sistema Financeiro Pr\u00e9-condi\u00e7\u00f5es: o aluno est\u00e1 identificado pelo sistema Fluxo Principal: O aluno solicita a matr\u00edcula em disciplinas; O sistema apresenta a lista de disciplinas dispon\u00edveis para o semestre corrente para as quais o alunos possui pr\u00e9-requisitos; O aluno seleciona as disciplinas desejadas e solicita a matr\u00edcula; O sistema aloca o aluno em turmas de ofertas das disciplinas desejadas e informa ao aluno a turma alocada para cada disciplina bem como o professor, os hor\u00e1rios e dias da semana e as salas de aula; O aluno confirma as aloca\u00e7\u00f5es feitas; O sistema realiza a matr\u00edcula e envia os dados para o Sistema Financeiro; O caso de uso termina. Fluxo Alternativo (4): Inclus\u00e3o em lista de espera a. Se n\u00e3o h\u00e1 vaga ou oferta dispon\u00edvel para alguma disciplina selecionada pelo aluno, o sistema informa o fato ao aluno e fornece a op\u00e7\u00e3o de inserir o aluno em uma lista de espera para aquela disciplina; b. Se o aluno aceitar o sistema insere o aluno na lista de espera desejada e apresenta a posi\u00e7\u00e3o do aluno na lista. O caso de uso retorna ao passo 4; c. Se o aluno n\u00e3o aceitar o caso de uso prossegue a partir do passo 4. Fluxo de Exce\u00e7\u00e3o (4): Viola\u00e7\u00e3o de regra de neg\u00f3cio relativa quantidade m\u00e1xima de cr\u00e9ditos a) Se o aluno j\u00e1 atingiu a quantidade m\u00e1xima de cr\u00e9ditos em que pode se matricular por semestre, o sistema informa a quantidade de disciplinas que ele pode se matricular e o caso de uso retorna ao passo 2; P\u00f3s-Condi\u00e7\u00f5es: O aluno foi inscrito em turmas das disciplinas selecionadas ou foi acrescentado a listas de esperas das disciplinas selecionadas. Ao final de cada fase s\u00e3o superados os marcos principais do RUP. Cada marco significa o maior risco relacionado \u00e0quela etapa. Na fase de concep\u00e7\u00e3o \u00e9 o marco de objetivo de ciclo de vida. Na fase de elabora\u00e7\u00e3o \u00e9 o marco que arquitetura do software. Na fase da constru\u00e7\u00e3o \u00e9 o marco da capacidade operacional inicial e, por fim, no marco da transi\u00e7\u00e3o \u00e9 o marco da entrega do produto. Existem problemas nos m\u00e9todos prescritivos, os principais s\u00e3o: Forte apego \u00e0 hierarquia Segmenta\u00e7\u00e3o elevada do processo de constru\u00e7\u00e3o Em situa\u00e7\u00f5es cr\u00edticas, acabam dando lugar a processos \u00e1geis","title":"Processos Prescritivos"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#quando-usar-cada-processo","text":"Na vida real, podemos encontrar v\u00e1rios modelos misturados no dia a dia das empresas. As pr\u00e1ticas em cada empresa s\u00e3o org\u00e2nicas e fortemente baseadas na cultura organiza\u00e7\u00e3o local. Podemos sempre analisar os modelos como uma matriz de 2 eixos: Cascata x Iterativo e Disciplinado x Flex\u00edvel. Aqui n\u00f3s s\u00f3 analisamos os processos iterativos. Cabe a voc\u00ea saber se precisa de um processos mais formal como o RUP ou algo mais r\u00e1pido e flex\u00edvel como o SCRUM.","title":"Quando usar cada Processo?"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#requisitos","text":"Podem ser divididos em 2 grupos: requisitos de cliente e requisitos do software. A primeira classe \u00e9 focada nas necessidades dos usu\u00e1rios 1 que utiliza\u00e7\u00e3o o sistema (\u00e9 o problema a ser resolvido). A segunda categoria s\u00e3o as caracter\u00edsticas que o produto deve ter para cumpri os requisitos dos clientes (s\u00e3o as ferramentas que o sistema ter\u00e1 para interagir com os users). Os requisitos de software podem ser divididos em funcionais e n\u00e3o funcionais. Essa divis\u00e3o ser\u00e1 abordada de maneira mais detalhada abaixo.","title":"Requisitos"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#requisitos-funcionais","text":"Os requisitos funcionais s\u00e3o as caracter\u00edsticas que o software deve ter para resolver os problemas elencados como objetivos do sistema proposto. S\u00e3o definidos pelos stakeholders (user, clientes, especialistas e investidores). No SCRUM eles est\u00e3o no backlog do projeto e no RUP est\u00e1 num documento espec\u00edfico para isso. \u00c9 uma lista de exposi\u00e7\u00f5es breves das funcionalidades que o software far\u00e1 e como ele se comportar\u00e1 em rela\u00e7\u00e3o a alguma intera\u00e7\u00e3o dos usu\u00e1rios. Atente para o fato que os requisitos funcionais s\u00e3o sempre relacionados a algum usu\u00e1rio e n\u00e3o \u00e0 caracter\u00edsticas t\u00e9cnicas do sistema.","title":"Requisitos Funcionais"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#requisitos-nao-funcionais","text":"S\u00e3o as descri\u00e7\u00f5es das normas e padr\u00f5es do produto de software. \u00c9 aqui que definimos a linguagem de programa\u00e7\u00e3o, o ambiente, os crit\u00e9rios de seguran\u00e7a, banco de dados, disponibilidade do produto, desempenho e etc. Um requisito n\u00e3o funcional deve sempre citar um crit\u00e9rio de aceita\u00e7\u00e3o quantific\u00e1vel. Desse modo, podemos realizar testes objetivos na hora de avaliar se o desenvolvimento da feature foi bem sucedido na itera\u00e7\u00e3o. Podemos elencar alguns tipos de requisito n\u00e3o funcional: Desempenho Disponibilidade Portabilidade Usabilidade Capacidade e Degrada\u00e7\u00e3o Manutenibilidade Outros requisitos n\u00e3o funcionais s\u00e3o relacionados ao processo de desenvolvimento. Como por exemplo: Restri\u00e7\u00e3o da equipe desenvolvedora Qual processo de software deve ser usada Qual documenta\u00e7\u00e3o deve ser criada Al\u00e9m dessas duas classifica\u00e7\u00f5es, podemos ter restri\u00e7\u00f5es relacionadas ao projeto de software: Qual SGBD deve ser usado Plataforma de disponibilidade (web ou n\u00e3o) Qual linguagem de programa\u00e7\u00e3o usada Qual o SO das plataformas Exist\u00eancia de sistema legado Todos os requisitos n\u00e3o funcionais estar\u00e3o no backlog da sprint atrav\u00e9s da aceita\u00e7\u00e3o do incremento pelo cliente e no RUP existe uma documenta\u00e7\u00e3o espec\u00edfica para isso.","title":"Requisitos N\u00e3o Funcionais"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#atividades-e-artefatos-da-engenharia-de-software","text":"O processo de produ\u00e7\u00e3o de software \u00e9 divido em atividades com seus respectivos respons\u00e1veis e os artefatos criados a cada etapa finalizada. As atividades s\u00e3o dividas em t\u00e9cnicas, gerenciais, testes e de apoio 2 . Essas atividades s\u00e3o as que comp\u00f5e toda a gest\u00e3o da engenharia de software.","title":"Atividades e Artefatos da Engenharia de Software"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#atividades-tecnicas","text":"Dentro das atividades t\u00e9cnicas n\u00f3s temos a engenharia de requisitos , design/projeto de software , implementa\u00e7\u00e3o/codifica\u00e7\u00e3o , testes e aceita\u00e7\u00e3o do cliente . Podemos elencar as seguintes atividades t\u00e9cnicas necess\u00e1rias ao bom processo de engenharia de requisitos: Levantamento de Requisitos (Elicita\u00e7\u00e3o): Entrevistas Observa\u00e7\u00e3o Leitura de documenta\u00e7\u00e3o An\u00e1lise dos Requisitos: An\u00e1lise das lacunas Modelagem gr\u00e1fica Revis\u00e3o das descri\u00e7\u00f5es Especifica\u00e7\u00e3o dos Requisitos: Descri\u00e7\u00e3o sem ambiguidades Linguagem natural, controlada ou espec\u00edfica Valida\u00e7\u00e3o dos Requisitos: Revis\u00e3o de tudo Prototipagem Nota\u00e7\u00f5es complexas podem dificultar entendimento do cliente Valida\u00e7\u00e3o por parte do cliente Agora vamos ver as atividades de Projeto (design) de Software: Pondera\u00e7\u00e3o das alternativas de solu\u00e7\u00f5es Escolha da solu\u00e7\u00e3o que ser\u00e1 implementada Detalhamento da solu\u00e7\u00e3o escolhida (elabora\u00e7\u00e3o do projeto): Arquitetura do Software: Alto n\u00edvel de abstra\u00e7\u00e3o. Foco nos requisitos n\u00e3o funcionais. Representa\u00e7\u00e3o das partes gerais da solu\u00e7\u00e3o. Projeto Detalhado: Baixa abstra\u00e7\u00e3o. Defini\u00e7\u00e3o dos objetos e das intera\u00e7\u00f5es. Foco nos requisitos funcionais. Algoritmos e estruturas de dados. Uma vez que temos os requisitos elencados e o projeto definido, entramos na etapa de implementa\u00e7\u00e3o ou codifica\u00e7\u00e3o. Implementados os algoritmos, temos a etapa de testes de software para validar os requisitos e garantir que os objetivos sejam alcan\u00e7ados. Podem ser manuais ou automatizados. Por fim, temos a aprova\u00e7\u00e3o do cliente no sentido de cumprimento das funcionalidades esperadas e da qualidade exigida da solu\u00e7\u00e3o. Ap\u00f3s a aprova\u00e7\u00e3o, existe a etapa de manuten\u00e7\u00e3o de software que \u00e9 composta da repeti\u00e7\u00e3o de todas as etapas expostas acima. Cada manuten\u00e7\u00e3o ou aprimoramento passa pelas etapas descritas desde a an\u00e1lise de requisito at\u00e9 a aprova\u00e7\u00e3o.","title":"Atividades T\u00e9cnicas"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#medidas-de-software","text":"S\u00e3o abordagens de medi\u00e7\u00e3o e defini\u00e7\u00e3o de metas para o cumprimento das etapas programadas para alcance dos objetivos da solu\u00e7\u00e3o contratada.","title":"Medidas de Software"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#atividades-gerenciais","text":"S\u00e3o as atividades que atuam no controle da complexidade da solu\u00e7\u00e3o desenvolvida e podem ser dividas em gest\u00e3o de configura\u00e7\u00e3o , gest\u00e3o de projeto , gest\u00e3o de requisitos e gest\u00e3o de processos e, al\u00e9m dessas, possuem atividades afins como gest\u00e3o da qualidade e estimativas de software. A gest\u00e3o de configura\u00e7\u00e3o ou gest\u00e3o de vers\u00f5es \u00e9 a atividade que cuida da manuten\u00e7\u00e3o e organiza\u00e7\u00e3o dos arquivos produzidos durante todo o processo de software. \u00c9 a atividade que controla as atualiza\u00e7\u00f5es dos programas e mant\u00e9m a mem\u00f3ria de todas as etapas anteriores. A ger\u00eancia de projeto de software \u00e9 a atividade que controle a din\u00e2mica de tempo, pessoas, custos envolvido no processo de desenvolvimento. A ger\u00eancia de requisitos \u00e9 a atividade de controle das necessidades de mudan\u00e7a no escopo do projeto bem como controla as mudan\u00e7as na mudan\u00e7a da necessidade do cliente a respeito da mudan\u00e7a de requisitos. Tamb\u00e9m atua na prioriza\u00e7\u00e3o dos requisitos para a defini\u00e7\u00e3o dos focos de trabalho. Outra atribui\u00e7\u00e3o relacionada \u00e9 o controle da rastreabilidade dos requisitos pois todas as etapas de elabora\u00e7\u00e3o devem ser relacionadas a algum requisito que perten\u00e7a ao escopo solicitado pelo cliente. A gest\u00e3o de Processos \u00e9 a atividade de defini\u00e7\u00e3o e melhoria do processo de gest\u00e3o de software de acordo com as boas pr\u00e1ticas, dos modelos de capacita\u00e7\u00e3o e maturidade como (CMMI e MPS.BR). A gest\u00e3o da qualidade \u00e9 a atividade que avalia as v\u00e1rias interfaces de din\u00e2micas que impactam no resultado final do produto de software. A estimativa de software \u00e9 a atividade de gerar previs\u00f5es com base na hist\u00f3ria da empresa de desenvolvimento afim de melhorar a aloca\u00e7\u00e3o dos recursos para cumprimento das etapas previstas no in\u00edcio do processo de planejamento.","title":"Atividades Gerenciais"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#testes-de-software","text":"O objetivo dos testes \u00e9 identificar os problemas da solu\u00e7\u00e3o desenvolvida mas, como tudo na vida, existem restri\u00e7\u00f5es a quantidade e qualidade de testes poss\u00edveis de serem feitos uma vez que existem custos associados a essa atividade. Diante das restri\u00e7\u00f5es impostas pela realidade e da complexidade do processo de desenvolvimento, \u00e9 imposs\u00edvel, n\u00e3o importa o dimensionamento do esfor\u00e7o, garantir uma aplica\u00e7\u00e3o livre de erros. O foco dessa atividade \u00e9 garantir que, ao dado n\u00edvel de confian\u00e7a requerido, que o software entregar\u00e1 as capacidades requeridas no projeto. Os testes s\u00e3o necess\u00e1rios para garantir o cumprimento dos requisitos funcionais e n\u00e3o funcionais e podem ser divididos em dois tipos: Testes Funcionais/Caixa Preta - Baseados no ponto de vista do usu\u00e1rio do software. Testes Estruturais/Caixa Branca - Ponto de vista de quem desenvolveu o software por meio de inputs e avalia\u00e7\u00e3o de outputs. Uma boa maneira de realizar os testes funcionais \u00e9 reproduzir as situa\u00e7\u00f5es listadas nas hist\u00f3rias dos usu\u00e1rios. Uma Plano de Testes \u00e9 o documento que indica o conjunto de informa\u00e7\u00f5es relacionadas ao teste realizado, tais como: Testes de desempenho Testes funcionais da hist\u00f3ria de usu\u00e1rio x Teste de responsividade Teste de campos de formul\u00e1rios Teste de navegabilidade ou links Teste de ponta a ponta No teste ponta a ponta passamos por todas as principais caracter\u00edsticas e funcionalidades do produto que desenvolvimento para cumprimento dos requisitos. Um plano de teste deve conter os casos de testes que, por sua vez, devem conter as seguintes informa\u00e7\u00f5es: Objetivo Valores de entrada Valores de sa\u00edda esperada Valores de sa\u00edda real Registro de execu\u00e7\u00e3o (falha ou sucesso)","title":"Testes de Software"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#artefatos-e-templates","text":"","title":"Artefatos e Templates"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#artefatos","text":"Os artefatos s\u00e3o um dos produtos que as atividades t\u00e9cnicas e gerencias produzem em cada ciclo de trabalho e podem ser usados nas etapas posteriores da execu\u00e7\u00e3o do projeto. Existem v\u00e1rios tipos, vamos elencar alguns: Artefatos do processo de desenvolvimento: Backlog do produto 3 Diagramas de casos de usados Descri\u00e7\u00e3o de casos de uso Documento de especifica\u00e7\u00e3o de requisitos Descreve os requisitos baseados em casos de uso ou outra forma de descri\u00e7\u00e3o. Artefatos do processe de gerenciamento: Documento de arquitetura de software O nome j\u00e1 denuncia mas \u00e9 importante porque cont\u00e9m v\u00e1rios diagramas do desenho da aplica\u00e7\u00e3o e como a solu\u00e7\u00e3o foi constru\u00edda em partes funcionais. Plano de Teste de software Casos de testes Lista de bugs Plano de projeto Matriz de rastreabilidade Mostra como os requisitos (que comp\u00f5e as linhas da matriz) se relacionam com os artefatos produzidos durante o processo de produ\u00e7\u00e3o.","title":"Artefatos"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#templates","text":"N\u00f3s j\u00e1 aprendemos o que s\u00e3o os artefatos de software e em que contexto eles s\u00e3o gerados, agora, vamos aprender algumas ferramentas e templates que nos auxiliam no processo de cria\u00e7\u00e3o desses artefatos durante o processo de desenvolvimento de software. Coment\u00e1rio: Essa se\u00e7\u00e3o \u00e9 mais para consulta quando voc\u00ea precisar gerenciar algum projeto de desenvolvimento de software. Vou tentar manter os links atualizados mas caso algum deixe de funcionar, pode me avisar pelo twitter .","title":"Templates"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#backlog-do-produto-e-kanban","text":"Existem v\u00e1rias maneiras de organizar o cumprimento dos requisitos contidos no backlog do projeto. O kanban \u00e9 um quadro onde transformamos cada item do backlog em unidades separ\u00e1veis (geralmente post-its ou quadros) onde podemos mover para quadrantes de um board maior. Usualmente temos os quadrantes \"A fazer\", \"Fazendo\" e \"Feito\". Desse modo, podemos ver rapidamente o estado do desenvolvimento das atividades programadas para a sprint. Existem v\u00e1rias ferramentas virtuais que podem ser usadas no processo como: Trello PivotalTracker","title":"Backlog do produto e Kanban"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#especificacao-de-requisitos-de-software","text":"Existem v\u00e1rios templates dispon\u00edveis na internet: IEE/ISO/IEC 29148 Esse exemplo M\u00e9todo Volere PUC-MG","title":"Especifica\u00e7\u00e3o de Requisitos de Software"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#documento-de-arquitetura-de-software","text":"Architecture View Template Interface Template IEE/ISO/IEC 42020 Nesse link aqui voc\u00ea pode ver como elaborar um caso de teste funcional a partir dos casos de uso. Aqui tem um template de ata de reuni\u00e3o . Por fim, temos um template de matriz de impacto de mudan\u00e7as aqui . E uma matriz de rastreabilidade em excel aqui .","title":"Documento de Arquitetura de Software"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#desenhando-processos-de-software","text":"Essa \u00faltima se\u00e7\u00e3o \u00e9 um exerc\u00edcio onde vamos colocar em pr\u00e1tica todos os conceitos aprendidos at\u00e9 agora. Temos que saber que os conceitos aprendidos n\u00e3o s\u00e3o regras imut\u00e1veis na aplica\u00e7\u00e3o pr\u00e1tica em um processo de software. Podemos combinar caracter\u00edsticas de v\u00e1rios modelos durante o processo de execu\u00e7\u00e3o de um planejamento sempre com foco na melhora cont\u00ednua da qualidade do software. Mesmo tendo muita flexibilidade sobre o processo de software, podemos elencar caracter\u00edsticas que s\u00e3o obrigat\u00f3rias em qualquer desenho: Qual o modelo de ciclo de vida Quais as atividades que compor\u00e3o o processo de software e quais a t\u00e9cnicas usadas ao longo delas Quais produtos ou artefatos ser\u00e3o gerados a cada etapa Os pap\u00e9is dos agentes relacionados ao longo do processo N\u00f3s come\u00e7amos o nosso estudo de engenharia de software pelos modelos de ciclo de vida exatamente porque eles regem grande parte das atividades e artefatos produzidos durante todo o processo de software. A maturidade da empresa, dimensionamento da m\u00e3o de obra, recursos dispon\u00edveis, verba do projeto, tempo de execu\u00e7\u00e3o e outras caracter\u00edsticas s\u00e3o importantes para defini\u00e7\u00e3o do melhor modelo de ciclo de vida a ser adotado. A nossa jornada pela engenharia de software vai ser em grande medida construir um amplo repert\u00f3rio de modelos de ciclo de vida, atividades e artefatos. Para facilitar o complexo processo de software, existem v\u00e1rias ferramentas que centralizam as diferentes etapas e simplificam o processo de gest\u00e3o: Bizagi Modeler Eclipse Process Framework","title":"Desenhando Processos de Software"},{"location":"nav/PUC/eixo1/fundamentos_eng_soft/#bibliografia","text":"PRESSMAN, Roger S.; MAXIM, Bruce R. Engenharia de software: uma abordagem profissional . 8. ed. Porto Alegre: AMGH, 2016. E-book ISBN 9788580555349. Cap\u00edtulos 1, 2, 3 PRIKLADNICKI, Rafael, WILLI, Renato, e MILANI, Fabiano. Me\u0301todos a\u0301geis para desenvolvimento de software . Porto Alegre: Bookman, 2014 1 recurso online ISBN 9788582602089 Cap\u00edtulos 1,2,3,8,12,13 SOMMERVILLE, Ian. Engenharia de software , 10\u00aa ed. Pearson 768 ISBN 9788543024974 Cap\u00edtulos 1,2,3,4 COHN, Mike; SILVA, Aldir Jos\u00e9 Coelho Corr\u00eaa da. Desenvolvimento de software com Scrum: aplicando m\u00e9todos \u00e1geis com sucesso . Porto Alegre: Bookman, 2011. E-book ISBN 9788577808199 LARMAN, Craig. Utilizando UML e padr\u00f5es: uma introdu\u00e7\u00e3o \u00e1 an\u00e1lise e ao projeto orientados a objetos e desenvolvimento iterativo . 3. ed. Porto Alegre: Bookman, 2007. E-book (695 p\u00e1ginas) ISBN 9788577800476 PAULA FILHO, Wilson de P\u00e1dua. Engenharia de software , v. 2 projetos e processos. 4. Rio de Janeiro LTC 2019 1 recurso online ISBN 9788521636748 VETORAZZO, Adriana de Souza. Engenharia de software. Porto Alegre SAGAH 2018 1 recurso online ISBN 9788595026780 WAZLAWICK, Raul Sidnei. Engenharia de software conceitos e pr\u00e1ticas . Rio de Janeiro GEN LTC 2013 1 recurso online ISBN 9788595156173 Por meio das hist\u00f3rias de usu\u00e1rios ou dos casos de uso. \u21a9 N\u00e3o focaremos nessa parte mas s\u00e3o as atividades de RH, administrativo e etc. \u21a9 N\u00f3s j\u00e1 sabemos o que \u00e9. \u21a9","title":"Bibliografia"},{"location":"nav/PUC/eixo1/logica_comp/","text":"hljs.initHighlightingOnLoad(); Assuntos Pensamento L\u00f3gico Defini\u00e7\u00f5es Subconjuntos Opera\u00e7\u00f5es sobre Conjuntos Princ\u00edpios da L\u00f3gica Proposicional Conectivos L\u00f3gicos Tabela Verdade e Equival\u00eancia L\u00f3gica Predicados e Quantificadores Ligando Vari\u00e1veis Nega\u00e7\u00f5es Pensamento Anal\u00edtico Provas de Teoremas Regras de Infer\u00eancia Argumentos V\u00e1lidos Indu\u00e7\u00e3o Matem\u00e1tica Indu\u00e7\u00e3o Forte Recurs\u00e3o Especifica\u00e7\u00e3o de Sistemas Bibliografia Pensamento L\u00f3gico A primeira parte eu j\u00e1 cobri, de maneira mais aprofundada, no projeto matem\u00e1tica. Se quiserem ver um material mais completo, podem conferir na Bibliografia ou no meu Projeto Matem\u00e1tica . Provavelmente, essa se\u00e7\u00e3o inteira ser\u00e1 deletada no futuro e todo o conte\u00fado dela ser\u00e1 desenvolvido pelo projeto matem\u00e1tica. Defini\u00e7\u00f5es Aqui vai ficar apenas uma lista de todos os conceitos explicados nesse t\u00f3pico. Se algu\u00e9m tiver alguma d\u00favida sobre eles, recomendo ler a bibliografia indicada ou o projeto matem\u00e1tica. Conjunto Elemento Pertencimento e Igualdade Propriedades dos conjuntos Conjunto vazio Tipos de defini\u00e7\u00f5es de conjuntos (chaves, set builder notation, recurs\u00e3o, caracter\u00edstica) Subconjuntos Nota\u00e7\u00e3o \\((A \\subset B)\\) Diagrama de Venn Conjunto Pot\u00eancia (Power Set) Sequ\u00eancias (lista de objetos ordenados) Opera\u00e7\u00f5es sobre Conjuntos Cardinalidade \\((|{1,5,3}| = 3)\\) Emparelhamento: Se X e Y possuem a mesmo cardinal, ao ligarmos cada elemento de X a um elemento de Y, dizemos que os conjuntos est\u00e3o emparelhados Produto Cartesiano: \\(A \\times B = \\{(a,b) | a \\in A \\land b \\in B\\}\\) Conjunto Universo/Universal Propriedades dos Conjuntos: Comutatividade Associatividade Distributividade Uni\u00e3o e Interse\u00e7\u00e3o com Universo Complemento Duplo Idempot\u00eancia Lei de DeMorgan Absor\u00e7\u00e3o Diferen\u00e7a de Conjuntos Uni\u00e3o e Interse\u00e7\u00e3o com Vazio Uni\u00e3o e Interse\u00e7\u00e3o com complemento Complementos de U e vazio Conjunto Disjuntos ( \\(A \\cap B = \\emptyset\\) ) Parti\u00e7\u00e3o ( \\(A = A_1 \\cup A_2 \\dots \\cup A_n\\) ) Princ\u00edpios da L\u00f3gica Proposicional L\u00f3gica: Ramo da Filosofia, Matem\u00e1tica e Ci\u00eancia da Computa\u00e7\u00e3o que lida com infer\u00eancias v\u00e1lidas Hip\u00f3teses vedadeiras \\(\\rightarrow\\) Conclus\u00f5es Verdadeiras Asser\u00e7\u00e3o: Uma afirma\u00e7\u00e3o declarativa Proposi\u00e7\u00e3o: Uma asser\u00e7\u00e3o verdadeira ou falsa mas n\u00e3o ambos Vari\u00e1veis Proposicionais: \u00c9 a vari\u00e1vel atribu\u00edda \u00e0 alguma proposi\u00e7\u00e3o Proposi\u00e7\u00f5es Compostas: Proposi\u00e7\u00f5es ligadas por operadores l\u00f3gicos Tabela Verdade Conectivos L\u00f3gicos Conectivos: Criam novas proposi\u00e7\u00f5es a partir de duas ou mais proposi\u00e7\u00f5es Nega\u00e7\u00e3o ( \\(\\neq\\) ) Conjun\u00e7\u00e3o ( \\(\\land\\) ) Disjun\u00e7\u00e3o ( \\(\\lor\\) ) Disjun\u00e7\u00e3o Exclusva ( \\(\\oplus\\) ) Condicional ou Implica\u00e7\u00e3o ( \\(p \\rightarrow q\\) ). Onde p \u00e9 a hip\u00f3tese e q \u00e9 a conclus\u00e3o Bicondicional ( \\(p \\rightarrow q \\land q \\rightarrow p\\) ) ou ( \\(p \\leftrightarrow q\\) ) Proposi\u00e7\u00f5es Compostas Ordem de Preced\u00eancia em Proposi\u00e7\u00f5es Compostas: Nega\u00e7\u00e3o Conjun\u00e7\u00e3o Disjun\u00e7\u00e3o Implica\u00e7\u00e3o Implica\u00e7\u00e3o Dupla Tabela Verdade e Equival\u00eancia L\u00f3gica Esse assunto eu realmente recomendo o material do projeto matem\u00e1tica no site Economia Mainstream. Tautologia: Uma proposi\u00e7\u00e3o que sempre ser\u00e1 verdadeira Contradi\u00e7\u00e3o ou Absurdo: Proposi\u00e7\u00e3o sempre falsa Conting\u00eancia: Proposi\u00e7\u00e3o cujo valor ser\u00e1 definido pelas suas vari\u00e1veis proposicionais Equival\u00eancia L\u00f3gica: Se duas proposi\u00e7\u00f5es possuem a mesma tabela verdade, elas s\u00e3o equivalentes L\u00f3gica Proposicional - Senten\u00e7as objetivas e n\u00e3o amb\u00edguas, circuitos l\u00f3gicos, automa\u00e7\u00e3o de processos e etc Predicados e Quantificadores A proposi\u00e7\u00e3o \\(x > 3\\) possui dois componentes: \\(x\\) \u00e9 chamado de sujeito \\(>3\\) \u00e9 chamado de predicado \\(P(x)\\) \u00e9 a nota\u00e7\u00e3o para uma declara\u00e7\u00e3o com predicado \\(P\\) e sujeito \\(x\\) A validade de uma proposi\u00e7\u00e3o desse tipo depende inteiramente do valor do sujeito Quantificador universal: \\(\\{ \\forall x \\in \\mathbb{R} : P(X)\\} = \\{P(x_1) \\land P(x_2) \\land \\dots\\}\\) Quantificador existencial: \\(\\{\\exists x \\in \\mathbb{R} : P(X)\\} = \\{P(x_1) \\lor P(x_2) \\lor \\dots\\}\\) Ligando Vari\u00e1veis Uma vari\u00e1vel \u00e9 dita amarrada quando est\u00e1 atrelada a algum quantificador ou quando algum valor \u00e9 atribu\u00eddo a ela Se uma vari\u00e1vel n\u00e3o est\u00e1 amarrada, ent\u00e3o dizemos que ela est\u00e1 livre Um proposi\u00e7\u00e3o s\u00f3 existe se todas as suas vari\u00e1veis estiverem amarradas Quando atribu\u00edmos um quantificador a uma vari\u00e1veis, dizemos que estamos definindo o seu escopo \\(\\exists x (P(x) \\land Q(x)) \\lor \\forall x R(x)\\) : \u00c9 uma proposi\u00e7\u00e3o cujo primeiro escopo \u00e9 dado por \\(\\exists x\\) e o segundo \u00e9 dado por \\(\\forall x\\) Nega\u00e7\u00f5es \\(\\neg \\forall P(x) = \\exists x \\neg P(x)\\) \\(\\neg \\exists x Q(x) = \\forall x \\neg Q(x)\\) Pensamento Anal\u00edtico Provas de Teoremas Um teorema \u00e9 uma declara\u00e7\u00e3o em que pode-se demonstrar a sua validade de maneira l\u00f3gica. Esse processo \u00e9 chamado de prova e obedece aos construdos l\u00f3gicos que aprendemos na primeira parte desse microfundamento. Sempre que temos um teorema, podemos reduzir sua estrutura em dois componentes: Sua hip\u00f3tese ( \\(p\\) ) e sua conclus\u00e3o ( \\(q\\) ). A prova do teorema \u00e9 justamente a comprova\u00e7\u00e3o que, a partir da hip\u00f3tese, podemos chegar na conclus\u00e3o proposta. A habilidade de comprovar teoremas \u00e9 a real linguagem da matem\u00e1tica. Requer muita criatividade, l\u00f3gica e capacidade de ser claro na exposi\u00e7\u00e3o dos argumentos. A constru\u00e7\u00e3o de provas matem\u00e1ticas deve ter um conjunto de ferramentas que podemos elencar: Axiomas/Postulados Teoremas j\u00e1 provados Hip\u00f3teses Proposi\u00e7\u00f5es derivadas as anteriores segundo as regras de infer\u00eancia Regras de Infer\u00eancia as regras de infer\u00eancia s\u00e3o as regras que garantem a obten\u00e7\u00e3o de novas informa\u00e7\u00f5es a partir de informa\u00e7\u00f5es anteriores e, simultaneamente, o respeito \u00e0s regras l\u00f3gicas. O modus ponens (modo de afirmar) \u00e9 a regra de infer\u00eancia fundamental. Sua l\u00f3gica \u00e9 a seguinte: Data a tautologia \\((p \\land (p \\rightarrow q)) \\rightarrow q\\) Se \\(p\\) for verdade, ent\u00e3o, a tautologia nos diz que ser\u00e1 verdade que \\(p \\rightarrow q\\) O que por fim, nos garante que \\(q\\) seja o resultado alcan\u00e7ado com a verdade de \\(p\\) A escrita desse argumento \u00e9 com a coloca\u00e7\u00e3o das verdades na parte de cima de uma linha horizontal e das conclus\u00f5es na parte de baixo. \\(p\\) \\(p \\rightarrow q\\) \\(\\therefore q\\) Esse \" \\(\\therefore\\) \" significa \"portanto\". Al\u00e9m da regra fundamental, n\u00f3s temos uma grande quantidade de outras regras importantes para constru\u00e7\u00e3o de provas de teoremas. Abaixo podemos ver uma tabela com v\u00e1rias delas. Tautologia Nome \\(p \\rightarrow (p \\lor q)\\) Adi\u00e7\u00e3o \\((p \\land q) \\rightarrow p\\) Simplifica\u00e7\u00e3o \\(((p) \\land (q)) \\rightarrow (p \\land q)\\) Conjun\u00e7\u00e3o \\([p \\land (p \\rightarrow q)] \\rightarrow q\\) Modus Ponens \\([\\neg q \\land (p \\rightarrow q)] \\rightarrow \\neg p\\) Modus Tollens \\([(p \\rightarrow q) \\land (q \\rightarrow r)] \\rightarrow (p \\rightarrow r)\\) Silogismo hipot\u00e9tico \\([(p \\lor q) \\land \\neg p] \\rightarrow q\\) Silogismo disjuntivo \\([(p \\lor q) \\land (\\neg p \\lor r)]\\) Resolu\u00e7\u00e3o Argumentos V\u00e1lidos Na l\u00f3gica proposicional, um argumento \u00e9 dito valido se sempre que as hip\u00f3teses forem verdadeiras, a conclus\u00e3o ser\u00e1, obrigatoriamente, verdadeira. Em nota\u00e7\u00e3o formal dizemos que \\(p_1 \\land \\dots \\land p_n \\rightarrow q\\) A demonstra\u00e7\u00e3o da validade de um argumento depende de como as hip\u00f3teses se conectam com as conclus\u00f5es sempre de maneira l\u00f3gica segundo o correto uso dos conectivos l\u00f3gicos j\u00e1 estudados. Em tese, a constru\u00e7\u00e3o de uma tabela verdade \u00e9 sempre poss\u00edvel para um n\u00famero arbitr\u00e1rio de hip\u00f3teses, o problema disso, \u00e9 que o tamanho dessa tabela cresce na raz\u00e3o de \\(2^n\\) sendo \\(n\\) a quantidade de hip\u00f3teses. Para superarmos esse problema, fazemos grande uso das regras de infer\u00eancia. Uma premissa falsa aplicada a uma argumenta\u00e7\u00e3o logicamente correta gera conclus\u00f5es falsas. Ent\u00e3o a validade das premissas tamb\u00e9m pode ser um motivo de cuidado na hora de construirmos teoremas. Uma fal\u00e1cia \u00e9 um tipo de erro argumentativo que, \u00e0 primeira vista, at\u00e9 se parece com um argumento v\u00e1lido, mas possui algum erro na sua constru\u00e7\u00e3o. Um exemplo \u00e9 a fal\u00e1cia da afirma\u00e7\u00e3o da conclus\u00e3o que pode ser expressa como \\([(p \\rightarrow q) \\land q] \\rightarrow p\\) . Essa express\u00e3o \u00e9 falsa quando \\(p\\) \u00e9 falso e \\(q\\) verdadeiro. Um exemplo em linguagem natural dessa fal\u00e1cia \u00e9 \" \\(p \\rightarrow q\\) : Quem resolve todos os exerc\u00edcios aprende. \\(q\\) : Voc\u00ea aprendeu. Logo, \\(p\\) : voc\u00ea resolveu todos os exerc\u00edcios\". Veja que, se algu\u00e9m aprender (o que torna \\(q\\) verdadeiro) mas n\u00e3o fizer todos os exerc\u00edcios (tornando \\(p\\) falso) quebra a linha de argumenta\u00e7\u00e3o e torna essa proposi\u00e7\u00e3o falsa. Outra fal\u00e1cia conhecida \u00e9 a nega\u00e7\u00e3o da hip\u00f3tese . Podemos construir ela como sendo \\([(p \\rightarrow q) \\land \\neg p] \\rightarrow \\neg q\\) . A primeira vista, parece certo, mas n\u00e3o \u00e9. Regras de Infer\u00eancia Coment\u00e1rio: Eu achei que essa parte foi um pouco negligenciada no curso. Devo voltar aqui para expandir esse conte\u00fado mais tarde. Por enquanto, temos essa tabela de refer\u00eancia. Regra de Infer\u00eancia Nome Nota \\(\\forall x P(x) \\rightarrow P(c)\\) Intancia\u00e7\u00e3o Universal c espec\u00edfico \\(P(c) \\rightarrow \\forall x P(x)\\) Generaliza\u00e7\u00e3o Universal c arbitr\u00e1rio \\(\\exists x P(x) \\rightarrow P(c)\\) Instancia\u00e7\u00e3o Existencial c espec\u00edfico e n\u00e3o conhecido \\(P(c) \\rightarrow \\exists x P(x)\\) Generaliza\u00e7\u00e3o Existencial c espec\u00edfico e conhecido Indu\u00e7\u00e3o Matem\u00e1tica A dedu\u00e7\u00e3o \u00e9 o processo de, a partir de premissas verdadeiras, determinar as conclus\u00f5es verdadeiras necessariamente oriundas dessas premissas. Ou seja, \u00e9 o processo de, partindo de um princ\u00edpio geral se chegar em um caso especial . O processo reverso \u00e9 chamado de indu\u00e7\u00e3o . Partir do caso espec\u00edfico para um princ\u00edpio anterior geral. A indu\u00e7\u00e3o pode ser usada para comprovar teoremas que se relacionam com um n\u00famero arbitr\u00e1rio de elementos (ou mesmo infinitos elementos). Basicamente, a demonstra\u00e7\u00e3o por indu\u00e7\u00e3o consiste em dois passos: Passo b\u00e1sico (provar para \\(P(n=1)\\) ) Passo indutivo (Provar que \\(P(k) \\implies P(k+1)\\) ) Temos que ter cuidado com o passo b\u00e1sico. Afirmar que \\(P(n=1)\\) \u00e9 verdadeiro n\u00e3o \u00e9 provar. Similarmente, no passo indutivo, tamb\u00e9m n\u00e3o podemos assumir que \\(P(k)\\) \u00e9 verdade sem tomar muito cuidado. O ideial \u00e9 que \\(P(k)\\) seja evidentemente verdadeira. Indu\u00e7\u00e3o Forte Similar ao processo de prova por indu\u00e7\u00e3o simples. A indu\u00e7\u00e3o forte possui 2 passos: Provar que \\(P(n=1)\\) \u00e9 verdadeiro Provar que \\(P(1) \\land P(2) \\land \\dots \\land P(k) \\implies P(k+1)\\) Ao contr\u00e1rio do que o nome sugere, a indu\u00e7\u00e3o forte \u00e9 mais flex\u00edvel que a indu\u00e7\u00e3o simples. O material \u00e9 um pouco obtuso nesse tema, ent\u00e3o vamos ter que revisar essa se\u00e7\u00e3o posteriormente. Recurs\u00e3o As vezes precisamos lidar com sequ\u00eancias, conjuntos ou fun\u00e7\u00f5es que n\u00e3o s\u00e3o defin\u00edveis facilmente. Para conseguirmos um tipo \u00fatil de defini\u00e7\u00e3o, podemos usar um processo chamado de recurs\u00e3o em que definimos um objeto pela sua caracter\u00edstica de composi\u00e7\u00e3o. Para uma sequ\u00eancia definida recursivamente, podemos usar a indu\u00e7\u00e3o para provar proposi\u00e7\u00f5es que fa\u00e7am uso dela. Para um conjunto , primeiro definimos os elementos iniciais e depois fornecemos uma regra para constru\u00e7\u00e3o de novos elementos. Para demonstra\u00e7\u00f5es com conjuntos recursivos, usamos um m\u00e9todo de prova chamado indu\u00e7\u00e3o estrutural. Para uma fun\u00e7\u00e3o , primeiro definimos o passo b\u00e1sico e depois uma rega para encontrar o valor da fun\u00e7\u00e3o no seu dom\u00ednio definido. Um exemplo famoso disso s\u00e3o os n\u00famero de Fibonacci onde temos \\(f_0 = 0, f_1 = 1\\) e \\(f_n = f_{n-1} + f_{n-2} \\forall n = 2,3,4,\\dots\\) . Existe uma rela\u00e7\u00e3o entre a recurs\u00e3o e a indu\u00e7\u00e3o pois, geralmente, objetos constru\u00eddos recursivamente s\u00e3o demonstrados por meio de indu\u00e7\u00e3o matem\u00e1tica. Especifica\u00e7\u00e3o de Sistemas A especifica\u00e7\u00e3o de sistemas \u00e9 a capacidade de traduzir linguagem natural para linguagem l\u00f3gica. Bibliografia HUNTER, David J. Fundamentos de Matem\u00e1tica Discreta . Rio de Janeiro: LTC, 2011 ROSEN, Keneth H. Discrete Mathematics and its Applications . New York: McGraw-Hill, 2019","title":"L\u00f3gica Computacional"},{"location":"nav/PUC/eixo1/logica_comp/#assuntos","text":"Pensamento L\u00f3gico Defini\u00e7\u00f5es Subconjuntos Opera\u00e7\u00f5es sobre Conjuntos Princ\u00edpios da L\u00f3gica Proposicional Conectivos L\u00f3gicos Tabela Verdade e Equival\u00eancia L\u00f3gica Predicados e Quantificadores Ligando Vari\u00e1veis Nega\u00e7\u00f5es Pensamento Anal\u00edtico Provas de Teoremas Regras de Infer\u00eancia Argumentos V\u00e1lidos Indu\u00e7\u00e3o Matem\u00e1tica Indu\u00e7\u00e3o Forte Recurs\u00e3o Especifica\u00e7\u00e3o de Sistemas Bibliografia","title":"Assuntos"},{"location":"nav/PUC/eixo1/logica_comp/#pensamento-logico","text":"A primeira parte eu j\u00e1 cobri, de maneira mais aprofundada, no projeto matem\u00e1tica. Se quiserem ver um material mais completo, podem conferir na Bibliografia ou no meu Projeto Matem\u00e1tica . Provavelmente, essa se\u00e7\u00e3o inteira ser\u00e1 deletada no futuro e todo o conte\u00fado dela ser\u00e1 desenvolvido pelo projeto matem\u00e1tica.","title":"Pensamento L\u00f3gico"},{"location":"nav/PUC/eixo1/logica_comp/#definicoes","text":"Aqui vai ficar apenas uma lista de todos os conceitos explicados nesse t\u00f3pico. Se algu\u00e9m tiver alguma d\u00favida sobre eles, recomendo ler a bibliografia indicada ou o projeto matem\u00e1tica. Conjunto Elemento Pertencimento e Igualdade Propriedades dos conjuntos Conjunto vazio Tipos de defini\u00e7\u00f5es de conjuntos (chaves, set builder notation, recurs\u00e3o, caracter\u00edstica)","title":"Defini\u00e7\u00f5es"},{"location":"nav/PUC/eixo1/logica_comp/#subconjuntos","text":"Nota\u00e7\u00e3o \\((A \\subset B)\\) Diagrama de Venn Conjunto Pot\u00eancia (Power Set) Sequ\u00eancias (lista de objetos ordenados)","title":"Subconjuntos"},{"location":"nav/PUC/eixo1/logica_comp/#operacoes-sobre-conjuntos","text":"Cardinalidade \\((|{1,5,3}| = 3)\\) Emparelhamento: Se X e Y possuem a mesmo cardinal, ao ligarmos cada elemento de X a um elemento de Y, dizemos que os conjuntos est\u00e3o emparelhados Produto Cartesiano: \\(A \\times B = \\{(a,b) | a \\in A \\land b \\in B\\}\\) Conjunto Universo/Universal Propriedades dos Conjuntos: Comutatividade Associatividade Distributividade Uni\u00e3o e Interse\u00e7\u00e3o com Universo Complemento Duplo Idempot\u00eancia Lei de DeMorgan Absor\u00e7\u00e3o Diferen\u00e7a de Conjuntos Uni\u00e3o e Interse\u00e7\u00e3o com Vazio Uni\u00e3o e Interse\u00e7\u00e3o com complemento Complementos de U e vazio Conjunto Disjuntos ( \\(A \\cap B = \\emptyset\\) ) Parti\u00e7\u00e3o ( \\(A = A_1 \\cup A_2 \\dots \\cup A_n\\) )","title":"Opera\u00e7\u00f5es sobre Conjuntos"},{"location":"nav/PUC/eixo1/logica_comp/#principios-da-logica-proposicional","text":"L\u00f3gica: Ramo da Filosofia, Matem\u00e1tica e Ci\u00eancia da Computa\u00e7\u00e3o que lida com infer\u00eancias v\u00e1lidas Hip\u00f3teses vedadeiras \\(\\rightarrow\\) Conclus\u00f5es Verdadeiras Asser\u00e7\u00e3o: Uma afirma\u00e7\u00e3o declarativa Proposi\u00e7\u00e3o: Uma asser\u00e7\u00e3o verdadeira ou falsa mas n\u00e3o ambos Vari\u00e1veis Proposicionais: \u00c9 a vari\u00e1vel atribu\u00edda \u00e0 alguma proposi\u00e7\u00e3o Proposi\u00e7\u00f5es Compostas: Proposi\u00e7\u00f5es ligadas por operadores l\u00f3gicos Tabela Verdade","title":"Princ\u00edpios da L\u00f3gica Proposicional"},{"location":"nav/PUC/eixo1/logica_comp/#conectivos-logicos","text":"Conectivos: Criam novas proposi\u00e7\u00f5es a partir de duas ou mais proposi\u00e7\u00f5es Nega\u00e7\u00e3o ( \\(\\neq\\) ) Conjun\u00e7\u00e3o ( \\(\\land\\) ) Disjun\u00e7\u00e3o ( \\(\\lor\\) ) Disjun\u00e7\u00e3o Exclusva ( \\(\\oplus\\) ) Condicional ou Implica\u00e7\u00e3o ( \\(p \\rightarrow q\\) ). Onde p \u00e9 a hip\u00f3tese e q \u00e9 a conclus\u00e3o Bicondicional ( \\(p \\rightarrow q \\land q \\rightarrow p\\) ) ou ( \\(p \\leftrightarrow q\\) ) Proposi\u00e7\u00f5es Compostas Ordem de Preced\u00eancia em Proposi\u00e7\u00f5es Compostas: Nega\u00e7\u00e3o Conjun\u00e7\u00e3o Disjun\u00e7\u00e3o Implica\u00e7\u00e3o Implica\u00e7\u00e3o Dupla","title":"Conectivos L\u00f3gicos"},{"location":"nav/PUC/eixo1/logica_comp/#tabela-verdade-e-equivalencia-logica","text":"Esse assunto eu realmente recomendo o material do projeto matem\u00e1tica no site Economia Mainstream. Tautologia: Uma proposi\u00e7\u00e3o que sempre ser\u00e1 verdadeira Contradi\u00e7\u00e3o ou Absurdo: Proposi\u00e7\u00e3o sempre falsa Conting\u00eancia: Proposi\u00e7\u00e3o cujo valor ser\u00e1 definido pelas suas vari\u00e1veis proposicionais Equival\u00eancia L\u00f3gica: Se duas proposi\u00e7\u00f5es possuem a mesma tabela verdade, elas s\u00e3o equivalentes L\u00f3gica Proposicional - Senten\u00e7as objetivas e n\u00e3o amb\u00edguas, circuitos l\u00f3gicos, automa\u00e7\u00e3o de processos e etc","title":"Tabela Verdade e Equival\u00eancia L\u00f3gica"},{"location":"nav/PUC/eixo1/logica_comp/#predicados-e-quantificadores","text":"A proposi\u00e7\u00e3o \\(x > 3\\) possui dois componentes: \\(x\\) \u00e9 chamado de sujeito \\(>3\\) \u00e9 chamado de predicado \\(P(x)\\) \u00e9 a nota\u00e7\u00e3o para uma declara\u00e7\u00e3o com predicado \\(P\\) e sujeito \\(x\\) A validade de uma proposi\u00e7\u00e3o desse tipo depende inteiramente do valor do sujeito Quantificador universal: \\(\\{ \\forall x \\in \\mathbb{R} : P(X)\\} = \\{P(x_1) \\land P(x_2) \\land \\dots\\}\\) Quantificador existencial: \\(\\{\\exists x \\in \\mathbb{R} : P(X)\\} = \\{P(x_1) \\lor P(x_2) \\lor \\dots\\}\\)","title":"Predicados e Quantificadores"},{"location":"nav/PUC/eixo1/logica_comp/#ligando-variaveis","text":"Uma vari\u00e1vel \u00e9 dita amarrada quando est\u00e1 atrelada a algum quantificador ou quando algum valor \u00e9 atribu\u00eddo a ela Se uma vari\u00e1vel n\u00e3o est\u00e1 amarrada, ent\u00e3o dizemos que ela est\u00e1 livre Um proposi\u00e7\u00e3o s\u00f3 existe se todas as suas vari\u00e1veis estiverem amarradas Quando atribu\u00edmos um quantificador a uma vari\u00e1veis, dizemos que estamos definindo o seu escopo \\(\\exists x (P(x) \\land Q(x)) \\lor \\forall x R(x)\\) : \u00c9 uma proposi\u00e7\u00e3o cujo primeiro escopo \u00e9 dado por \\(\\exists x\\) e o segundo \u00e9 dado por \\(\\forall x\\)","title":"Ligando Vari\u00e1veis"},{"location":"nav/PUC/eixo1/logica_comp/#negacoes","text":"\\(\\neg \\forall P(x) = \\exists x \\neg P(x)\\) \\(\\neg \\exists x Q(x) = \\forall x \\neg Q(x)\\)","title":"Nega\u00e7\u00f5es"},{"location":"nav/PUC/eixo1/logica_comp/#pensamento-analitico","text":"","title":"Pensamento Anal\u00edtico"},{"location":"nav/PUC/eixo1/logica_comp/#provas-de-teoremas","text":"Um teorema \u00e9 uma declara\u00e7\u00e3o em que pode-se demonstrar a sua validade de maneira l\u00f3gica. Esse processo \u00e9 chamado de prova e obedece aos construdos l\u00f3gicos que aprendemos na primeira parte desse microfundamento. Sempre que temos um teorema, podemos reduzir sua estrutura em dois componentes: Sua hip\u00f3tese ( \\(p\\) ) e sua conclus\u00e3o ( \\(q\\) ). A prova do teorema \u00e9 justamente a comprova\u00e7\u00e3o que, a partir da hip\u00f3tese, podemos chegar na conclus\u00e3o proposta. A habilidade de comprovar teoremas \u00e9 a real linguagem da matem\u00e1tica. Requer muita criatividade, l\u00f3gica e capacidade de ser claro na exposi\u00e7\u00e3o dos argumentos. A constru\u00e7\u00e3o de provas matem\u00e1ticas deve ter um conjunto de ferramentas que podemos elencar: Axiomas/Postulados Teoremas j\u00e1 provados Hip\u00f3teses Proposi\u00e7\u00f5es derivadas as anteriores segundo as regras de infer\u00eancia","title":"Provas de Teoremas"},{"location":"nav/PUC/eixo1/logica_comp/#regras-de-inferencia","text":"as regras de infer\u00eancia s\u00e3o as regras que garantem a obten\u00e7\u00e3o de novas informa\u00e7\u00f5es a partir de informa\u00e7\u00f5es anteriores e, simultaneamente, o respeito \u00e0s regras l\u00f3gicas. O modus ponens (modo de afirmar) \u00e9 a regra de infer\u00eancia fundamental. Sua l\u00f3gica \u00e9 a seguinte: Data a tautologia \\((p \\land (p \\rightarrow q)) \\rightarrow q\\) Se \\(p\\) for verdade, ent\u00e3o, a tautologia nos diz que ser\u00e1 verdade que \\(p \\rightarrow q\\) O que por fim, nos garante que \\(q\\) seja o resultado alcan\u00e7ado com a verdade de \\(p\\) A escrita desse argumento \u00e9 com a coloca\u00e7\u00e3o das verdades na parte de cima de uma linha horizontal e das conclus\u00f5es na parte de baixo. \\(p\\) \\(p \\rightarrow q\\) \\(\\therefore q\\) Esse \" \\(\\therefore\\) \" significa \"portanto\". Al\u00e9m da regra fundamental, n\u00f3s temos uma grande quantidade de outras regras importantes para constru\u00e7\u00e3o de provas de teoremas. Abaixo podemos ver uma tabela com v\u00e1rias delas. Tautologia Nome \\(p \\rightarrow (p \\lor q)\\) Adi\u00e7\u00e3o \\((p \\land q) \\rightarrow p\\) Simplifica\u00e7\u00e3o \\(((p) \\land (q)) \\rightarrow (p \\land q)\\) Conjun\u00e7\u00e3o \\([p \\land (p \\rightarrow q)] \\rightarrow q\\) Modus Ponens \\([\\neg q \\land (p \\rightarrow q)] \\rightarrow \\neg p\\) Modus Tollens \\([(p \\rightarrow q) \\land (q \\rightarrow r)] \\rightarrow (p \\rightarrow r)\\) Silogismo hipot\u00e9tico \\([(p \\lor q) \\land \\neg p] \\rightarrow q\\) Silogismo disjuntivo \\([(p \\lor q) \\land (\\neg p \\lor r)]\\) Resolu\u00e7\u00e3o","title":"Regras de Infer\u00eancia"},{"location":"nav/PUC/eixo1/logica_comp/#argumentos-validos","text":"Na l\u00f3gica proposicional, um argumento \u00e9 dito valido se sempre que as hip\u00f3teses forem verdadeiras, a conclus\u00e3o ser\u00e1, obrigatoriamente, verdadeira. Em nota\u00e7\u00e3o formal dizemos que \\(p_1 \\land \\dots \\land p_n \\rightarrow q\\) A demonstra\u00e7\u00e3o da validade de um argumento depende de como as hip\u00f3teses se conectam com as conclus\u00f5es sempre de maneira l\u00f3gica segundo o correto uso dos conectivos l\u00f3gicos j\u00e1 estudados. Em tese, a constru\u00e7\u00e3o de uma tabela verdade \u00e9 sempre poss\u00edvel para um n\u00famero arbitr\u00e1rio de hip\u00f3teses, o problema disso, \u00e9 que o tamanho dessa tabela cresce na raz\u00e3o de \\(2^n\\) sendo \\(n\\) a quantidade de hip\u00f3teses. Para superarmos esse problema, fazemos grande uso das regras de infer\u00eancia. Uma premissa falsa aplicada a uma argumenta\u00e7\u00e3o logicamente correta gera conclus\u00f5es falsas. Ent\u00e3o a validade das premissas tamb\u00e9m pode ser um motivo de cuidado na hora de construirmos teoremas. Uma fal\u00e1cia \u00e9 um tipo de erro argumentativo que, \u00e0 primeira vista, at\u00e9 se parece com um argumento v\u00e1lido, mas possui algum erro na sua constru\u00e7\u00e3o. Um exemplo \u00e9 a fal\u00e1cia da afirma\u00e7\u00e3o da conclus\u00e3o que pode ser expressa como \\([(p \\rightarrow q) \\land q] \\rightarrow p\\) . Essa express\u00e3o \u00e9 falsa quando \\(p\\) \u00e9 falso e \\(q\\) verdadeiro. Um exemplo em linguagem natural dessa fal\u00e1cia \u00e9 \" \\(p \\rightarrow q\\) : Quem resolve todos os exerc\u00edcios aprende. \\(q\\) : Voc\u00ea aprendeu. Logo, \\(p\\) : voc\u00ea resolveu todos os exerc\u00edcios\". Veja que, se algu\u00e9m aprender (o que torna \\(q\\) verdadeiro) mas n\u00e3o fizer todos os exerc\u00edcios (tornando \\(p\\) falso) quebra a linha de argumenta\u00e7\u00e3o e torna essa proposi\u00e7\u00e3o falsa. Outra fal\u00e1cia conhecida \u00e9 a nega\u00e7\u00e3o da hip\u00f3tese . Podemos construir ela como sendo \\([(p \\rightarrow q) \\land \\neg p] \\rightarrow \\neg q\\) . A primeira vista, parece certo, mas n\u00e3o \u00e9.","title":"Argumentos V\u00e1lidos"},{"location":"nav/PUC/eixo1/logica_comp/#regras-de-inferencia_1","text":"Coment\u00e1rio: Eu achei que essa parte foi um pouco negligenciada no curso. Devo voltar aqui para expandir esse conte\u00fado mais tarde. Por enquanto, temos essa tabela de refer\u00eancia. Regra de Infer\u00eancia Nome Nota \\(\\forall x P(x) \\rightarrow P(c)\\) Intancia\u00e7\u00e3o Universal c espec\u00edfico \\(P(c) \\rightarrow \\forall x P(x)\\) Generaliza\u00e7\u00e3o Universal c arbitr\u00e1rio \\(\\exists x P(x) \\rightarrow P(c)\\) Instancia\u00e7\u00e3o Existencial c espec\u00edfico e n\u00e3o conhecido \\(P(c) \\rightarrow \\exists x P(x)\\) Generaliza\u00e7\u00e3o Existencial c espec\u00edfico e conhecido","title":"Regras de Infer\u00eancia"},{"location":"nav/PUC/eixo1/logica_comp/#inducao-matematica","text":"A dedu\u00e7\u00e3o \u00e9 o processo de, a partir de premissas verdadeiras, determinar as conclus\u00f5es verdadeiras necessariamente oriundas dessas premissas. Ou seja, \u00e9 o processo de, partindo de um princ\u00edpio geral se chegar em um caso especial . O processo reverso \u00e9 chamado de indu\u00e7\u00e3o . Partir do caso espec\u00edfico para um princ\u00edpio anterior geral. A indu\u00e7\u00e3o pode ser usada para comprovar teoremas que se relacionam com um n\u00famero arbitr\u00e1rio de elementos (ou mesmo infinitos elementos). Basicamente, a demonstra\u00e7\u00e3o por indu\u00e7\u00e3o consiste em dois passos: Passo b\u00e1sico (provar para \\(P(n=1)\\) ) Passo indutivo (Provar que \\(P(k) \\implies P(k+1)\\) ) Temos que ter cuidado com o passo b\u00e1sico. Afirmar que \\(P(n=1)\\) \u00e9 verdadeiro n\u00e3o \u00e9 provar. Similarmente, no passo indutivo, tamb\u00e9m n\u00e3o podemos assumir que \\(P(k)\\) \u00e9 verdade sem tomar muito cuidado. O ideial \u00e9 que \\(P(k)\\) seja evidentemente verdadeira.","title":"Indu\u00e7\u00e3o Matem\u00e1tica"},{"location":"nav/PUC/eixo1/logica_comp/#inducao-forte","text":"Similar ao processo de prova por indu\u00e7\u00e3o simples. A indu\u00e7\u00e3o forte possui 2 passos: Provar que \\(P(n=1)\\) \u00e9 verdadeiro Provar que \\(P(1) \\land P(2) \\land \\dots \\land P(k) \\implies P(k+1)\\) Ao contr\u00e1rio do que o nome sugere, a indu\u00e7\u00e3o forte \u00e9 mais flex\u00edvel que a indu\u00e7\u00e3o simples. O material \u00e9 um pouco obtuso nesse tema, ent\u00e3o vamos ter que revisar essa se\u00e7\u00e3o posteriormente.","title":"Indu\u00e7\u00e3o Forte"},{"location":"nav/PUC/eixo1/logica_comp/#recursao","text":"As vezes precisamos lidar com sequ\u00eancias, conjuntos ou fun\u00e7\u00f5es que n\u00e3o s\u00e3o defin\u00edveis facilmente. Para conseguirmos um tipo \u00fatil de defini\u00e7\u00e3o, podemos usar um processo chamado de recurs\u00e3o em que definimos um objeto pela sua caracter\u00edstica de composi\u00e7\u00e3o. Para uma sequ\u00eancia definida recursivamente, podemos usar a indu\u00e7\u00e3o para provar proposi\u00e7\u00f5es que fa\u00e7am uso dela. Para um conjunto , primeiro definimos os elementos iniciais e depois fornecemos uma regra para constru\u00e7\u00e3o de novos elementos. Para demonstra\u00e7\u00f5es com conjuntos recursivos, usamos um m\u00e9todo de prova chamado indu\u00e7\u00e3o estrutural. Para uma fun\u00e7\u00e3o , primeiro definimos o passo b\u00e1sico e depois uma rega para encontrar o valor da fun\u00e7\u00e3o no seu dom\u00ednio definido. Um exemplo famoso disso s\u00e3o os n\u00famero de Fibonacci onde temos \\(f_0 = 0, f_1 = 1\\) e \\(f_n = f_{n-1} + f_{n-2} \\forall n = 2,3,4,\\dots\\) . Existe uma rela\u00e7\u00e3o entre a recurs\u00e3o e a indu\u00e7\u00e3o pois, geralmente, objetos constru\u00eddos recursivamente s\u00e3o demonstrados por meio de indu\u00e7\u00e3o matem\u00e1tica.","title":"Recurs\u00e3o"},{"location":"nav/PUC/eixo1/logica_comp/#especificacao-de-sistemas","text":"A especifica\u00e7\u00e3o de sistemas \u00e9 a capacidade de traduzir linguagem natural para linguagem l\u00f3gica.","title":"Especifica\u00e7\u00e3o de Sistemas"},{"location":"nav/PUC/eixo1/logica_comp/#bibliografia","text":"HUNTER, David J. Fundamentos de Matem\u00e1tica Discreta . Rio de Janeiro: LTC, 2011 ROSEN, Keneth H. Discrete Mathematics and its Applications . New York: McGraw-Hill, 2019","title":"Bibliografia"},{"location":"nav/PUC/eixo1/matematica_basica/","text":"hljs.initHighlightingOnLoad(); Como o escopo dessa mat\u00e9ria \u00e9 super b\u00e1sico. Eu nem vou me dar o trabalho de resumir. Se quiserem ver um material mais completo, podem conferir na Bibliografia ou no meu Projeto Matem\u00e1tica . Bibliografia GERSTING, Judith L. Fundamentos matem\u00e1ticos para a ci\u00eancia da computa\u00e7\u00e3o . 7.Rio de Janeiro LTC 2016 1 recurso online ISBN 9788521633303 HUNTER, David J. Fundamentos de matem\u00e1tica discreta . Rio de Janeiro LTC 2011 1 recurso online ISBN 9788521635246 LIMA, Diana Maia de. Matem\u00e1tica aplicada \u00e0 inform\u00e1tica . Porto Alegre Bookman 2015 1 recurso online ISBN 9788582603178 STEWART, James. C\u00e1lculo , v. 1. 8.ed. S\u00e3o Paulo (SP): Cengage Learning, 2017 E-book ISBN 9788522126859 MENEZES, Paulo Blauth. Aprendendo matem\u00e1tica discreta com exerc\u00edcios , v.19. Porto Alegre Bookman 2011 ISBN 9788577805105 ROSEN, Kenneth H. Matem\u00e1tica discreta e suas aplica\u00e7\u00f5es . Porto Alegre ArtMed 2010 ISBN 9788563308399 SIM\u00d5ES-PEREIRA, Jos\u00e9 Maunel dos Santos. Introdu\u00e7\u00e3o \u00e0 Matem\u00e1tica Combinat\u00f3ria . Editora Interci\u00cancia 338 ISBN 9788571932920 \u00c1VILA, Geraldo; ARA\u00daJO, Luis Cl\u00e1udio Lopes de. C\u00e1lculo: ilustrado, pr\u00e1tico e descomplicado . Rio de Janeiro, RJ: LTC - Livros Tecnicos e Cientificos, 2012. E-book ISBN 978-85-216-2128- GUIDORIZZI, Hamilton Luiz. Um curso de c\u00e1lculo, v. 1. 6 . Rio de Janeiro LTC 2018 1 recurso online ISBN 9788521635574","title":"Matem\u00e1tica B\u00e1sica"},{"location":"nav/PUC/eixo1/matematica_basica/#bibliografia","text":"GERSTING, Judith L. Fundamentos matem\u00e1ticos para a ci\u00eancia da computa\u00e7\u00e3o . 7.Rio de Janeiro LTC 2016 1 recurso online ISBN 9788521633303 HUNTER, David J. Fundamentos de matem\u00e1tica discreta . Rio de Janeiro LTC 2011 1 recurso online ISBN 9788521635246 LIMA, Diana Maia de. Matem\u00e1tica aplicada \u00e0 inform\u00e1tica . Porto Alegre Bookman 2015 1 recurso online ISBN 9788582603178 STEWART, James. C\u00e1lculo , v. 1. 8.ed. S\u00e3o Paulo (SP): Cengage Learning, 2017 E-book ISBN 9788522126859 MENEZES, Paulo Blauth. Aprendendo matem\u00e1tica discreta com exerc\u00edcios , v.19. Porto Alegre Bookman 2011 ISBN 9788577805105 ROSEN, Kenneth H. Matem\u00e1tica discreta e suas aplica\u00e7\u00f5es . Porto Alegre ArtMed 2010 ISBN 9788563308399 SIM\u00d5ES-PEREIRA, Jos\u00e9 Maunel dos Santos. Introdu\u00e7\u00e3o \u00e0 Matem\u00e1tica Combinat\u00f3ria . Editora Interci\u00cancia 338 ISBN 9788571932920 \u00c1VILA, Geraldo; ARA\u00daJO, Luis Cl\u00e1udio Lopes de. C\u00e1lculo: ilustrado, pr\u00e1tico e descomplicado . Rio de Janeiro, RJ: LTC - Livros Tecnicos e Cientificos, 2012. E-book ISBN 978-85-216-2128- GUIDORIZZI, Hamilton Luiz. Um curso de c\u00e1lculo, v. 1. 6 . Rio de Janeiro LTC 2018 1 recurso online ISBN 9788521635574","title":"Bibliografia"},{"location":"nav/PUC/eixo1/organizacao_computadores/","text":"hljs.initHighlightingOnLoad(); Assuntos Fundamentos de Organiza\u00e7\u00e3o de Computadores Representa\u00e7\u00e3o de Dados e Sistemas Bin\u00e1rio Conceitos de L\u00f3gica Digital Circuitos L\u00f3gicos Digitais B\u00e1sicos Introdu\u00e7\u00e3o \u00e0 Organiza\u00e7\u00e3o de Computadores Unidade Central de Processamento - UCP Mem\u00f3ria Entrada e Sa\u00edda Arquitetura de Computadores Arquiteturas RISC e CISC Arquitetura do Conjunto de Instru\u00e7\u00f5es: Exemplo do MIPS Linguagem de Montagem Conceito de Pipeline de Instru\u00e7\u00f5es Paralelismo em N\u00edvel de Instru\u00e7\u00f5es e Processadores Bibliografia Fundamentos de Organiza\u00e7\u00e3o de Computadores Representa\u00e7\u00e3o de Dados e Sistemas Bin\u00e1rio Compreendendo o Sistema Decimal Os componentes eletr\u00f4nicos digitais s\u00f3 permitem dois estados de tens\u00e3o: 0 e 1. Isso implica que toda informa\u00e7\u00e3o manipulada pelos computadores \u00e9 representado em um sistema de numera\u00e7\u00e3o bin\u00e1ria que \u00e9 correlacionada com o n\u00edvel de tens\u00e3o nos componentes da m\u00e1quina. O nosso modelo de sistema num\u00e9rico usual \u00e9 o decimal (tamb\u00e9m chamado base 10). Ele \u00e9 um sistema posicional porque o peso do d\u00edgito \u00e9 dependente da posi\u00e7\u00e3o dele no n\u00famero. Por exemplo: \\(38_{10} = 3 \\times 10^1 + 8 \\times 10^0 = 30 + 8\\) \\(17,25_{10} = 10 \\times 10^1 + 7 \\times 10^0 + 2 \\times 10^{-1} + 5 \\times 10^{-2}\\) O subscrito indica o tipo de base usado. Uma caracter\u00edstica dos sistemas posicionais \u00e9 que o d\u00edgito mais a esquerda ser\u00e1 o mais significativa (MSB - Most Significant Bit) e os \u00e0 sua direita ser\u00e3o os LSB (Less Significant Bit). Conceitos de L\u00f3gica Digital Computadores s\u00e3o formados por componentes eletr\u00f4nicos. Os transistores e os diodos s\u00e3o usados para a constru\u00e7\u00e3o das portas l\u00f3gicas que nos permitem, atrav\u00e9s de circuitos el\u00e9tricos, replicar os operadores l\u00f3gicos da l\u00f3gica usados na algebra booleana. Assumindo valores em dois est\u00e1gios: 0 (de 0 a 0,6 volts) e 1 (entre 3,6 e 5 volts). Uma porta l\u00f3gica nada mais \u00e9 que um circuito que recebe sinais de entrada e, conforme a sua configura\u00e7\u00e3o, produz um sinal de sa\u00edda cujo valor \u00e9 dependente da entrada. Podemos categorizar as portas l\u00f3gicas em 3 grupos: Portas L\u00f3gicas B\u00e1sicas Opera\u00e7\u00e3o L\u00f3gica - AND Opera\u00e7\u00e3o L\u00f3gica - OR Opera\u00e7\u00e3o Inversora - NOT Fun\u00e7\u00f5es e Portas L\u00f3gicas Compostas Opera\u00e7\u00e3o L\u00f3gica - NAND (NOT-AND) Opera\u00e7\u00e3o L\u00f3gica - NOR (NOT-OR) Opera\u00e7\u00e3o L\u00f3gica - XOR (OR-EXCLUSIVA) Express\u00f5es L\u00f3gicas e Circuitos Digitais Eu j\u00e1 trabalhei bem a fundo a l\u00f3gica matem\u00e1tica no meu curso do Projeto Matem\u00e1tica. Voc\u00ea pode conferir no cap\u00edtulo 02 nesse link . A \u00fanica diferen\u00e7a \u00e9 que quando l\u00e1 for TRUE ou VERDADE, aqui ser\u00e1 1 e, claramente, quando l\u00e1 for FALSE ou FALSO, aqui ser\u00e1 0. Como nosso estudo nesse manual \u00e9 mais focado em An\u00e1lise e Desenvolvimento de Sistemas, vamos manter as anota\u00e7\u00f5es referentes \u00e0 transposi\u00e7\u00e3o da algebra booleana para os circuitos eletr\u00f4nicos. Mas caso haja alguma d\u00favida, a leitura do material acima \u00e9 recomendada. Operadores B\u00e1sicos Operadores Compostos Express\u00f5es L\u00f3gicas e Circuitos Podemos usar os operadores l\u00f3gicos para criar express\u00f5es do tipo $ Y = (A+B).C $ que pode ser lida como \"Y \u00e9 igual a (A ou B) e C\" 1 . Podemos tamb\u00e9m usar os diagramas de circuitos para representar exatamente essa mesma opra\u00e7\u00e3o l\u00f3gica. Para entender como cada input produz um resultado \u00e9 necess\u00e1rio usarmos uma tabela verdade que nos mostra todos os casos entre os inputs e os outputs. Desafio: Vamos olhar a tabela verdade abaixo: A B C Y 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 1 0 0 1 1 0 1 1 1 1 0 1 1 1 1 0 Qual fun\u00e7\u00e3o l\u00f3gica produz o resultado compat\u00edvel para a coluna Y? A resposta est\u00e1 na observa\u00e7\u00e3o cuidadosa dos valores. Podemos ver que sempre que tivermos algum valor 0 como input, o resultado ser\u00e1 1. Como existe essa altern\u00e2ncia, podemos ver que o operador de nega\u00e7\u00e3o est\u00e1 sendo usado. Al\u00e9m disso, se tiv\u00e9ssemos o operador \"ou\" aliado a um operador de nega\u00e7\u00e3o, na linha \\((0,0,1)\\) ter\u00edamos o resultado 1 que, ao ser negado, retornaria um resultado 0. Portanto, s\u00f3 nos resta acreditar que temos uma situa\u00e7\u00e3o de opera\u00e7\u00f5es do tipo \"e\" e de nega\u00e7\u00e3o. A essa estrutura damos o nome de \"NOT-AND\" ou \"NAND\". Em temos l\u00f3gicos formais, temos a express\u00e3o \\(\\neg (A \\land B \\land C)\\) e na nota\u00e7\u00e3o que usamos no curso, temos um \\(\\overline{(A . B . C)}\\) . Circuitos L\u00f3gicos Digitais B\u00e1sicos Com o uso das portas l\u00f3gicas, n\u00f3s podemos construir circuitos mais complexos e que desempenham fun\u00e7\u00f5es importantes para o funcionamento de um computador. Podemos agrupar esses circuitos (tamb\u00e9m chamados de m\u00f3dulos) em dois grupos: Circuitos L\u00f3gicos Combinacionais Multiplexadores Demultiplexadores Codificadores Decodificadores Circuitos Sequenciais Registradores Contadores Circuitos Combinacionais Os circuitos combinacionais s\u00e3o constru\u00eddos de maneira que o resultado obtido por ele \u00e9 condiconado ao input atual nas portas l\u00f3gicas que o comp\u00f5es. Para analizarmos um circuito composto de \\(n\\) portas l\u00f3gicas e \\(m\\) sa\u00eddas, podemos usar a tabela verdade, s\u00edmbolos gr\u00e1ficos no padr\u00e3o das portas que aprendemos antes e equa\u00e7\u00f5es booleanas que convertem a l\u00f3gica eletr\u00f4nica para a matem\u00e1tica. Observemos a tabela verdade abaixo: A B C F 0 0 0 0 0 0 1 0 0 1 0 1 0 1 1 1 1 0 0 0 1 0 1 0 1 1 0 1 1 1 1 0 Para criar a representa\u00e7\u00e3o do circuito l\u00f3gico que corresponde a coluna F, basta observarmos as condi\u00e7\u00f5es necess\u00e1rias para o valor 1 na referida coluna. Temos 3 eventos em que isso acontece. Podemos demonstrar essa rela\u00e7\u00e3o pode meio da seguinte equa\u00e7\u00e3o boolena: \\(F = \\overline{A} B \\overline{C} + \\overline{A} B C + A B \\overline{C}\\) A essa primeira maneira de escrita, damos o nome de Soma de Produtos ou Sum Of Products (SOP) . Uma outra forma de representarmos o circuito F \u00e9 se focarmos na negativa das condi\u00e7\u00f5es que retornam o valor 0. Desse modo, tamb\u00e9m podemos representar o circuito da seguite maneira: \\(F = \\overline{\\overline{A B C}} . \\overline{\\overline{A B} C} . \\overline{A \\overline{B C}} . \\overline{A \\overline{B} C} . \\overline{A B C}\\) Podemos visualizar essa condi\u00e7\u00e3o no diagrama abaixo. Ao aplicarmos o teorema de DeMorgan \\((\\overline{X1 . X2}) = \\overline{X1} + \\overline{X2}\\) nessa segunda vers\u00e3o podemos desenvolve-la at\u00e9 chegarmos em uma terceira configura\u00e7\u00e3o: \\(F = (A + B + C) . (A + B + \\overline{C}) . (\\overline{A} + B + C) . (\\overline{A} + B + \\overline{C}) . (\\overline{A} + \\overline{B} + \\overline{C})\\) Que chamamos de Produto das Somas ou Product of Sums (POS) . Coment\u00e1rio: O material do microfundamento \u00e9 consideravelmente reduzido nessa parte. Mas como estou perto da prova enquanto escrevo essa parte, terei que, por agora, reduzir a profundidade e seguir como \u00e9 dado pelo material da aula. Em tempo oportuno eu volto aqui e expando essa se\u00e7\u00e3o. Agora que entendemos um pouco melhor sobre cisrcuitos l\u00f3gicos combinacionais, vamos aprender mais sobre alguns circuitos desse tipo. Os multiplexadores s\u00e3o circuitos combinacioinais que selecionam \\(n\\) entradas a uma \u00fanica sa\u00edda por meio de suas linhas de sele\u00e7\u00e3o. Para cada duas entradas, ser\u00e3o necess\u00e1rias 1 linha de sele\u00e7\u00e3o. Os demultiplexadores s\u00e3o o oposto, ligando uma \u00fanica entrada para \\(n\\) sa\u00eddas. Um codificador normalmente s\u00f3 permite que uma das entradas esteja ativa a cada instante e sua fun\u00e7\u00e3o \u00e9 converter os valores de entrada em um n\u00famero bin\u00e1rio. Similarmente, um decodificador recebe um bin\u00e1rio como entrada e a sa\u00edda ser\u00e1 alguma linha previamente definida. Circuitos Sequenciais Por outro lado, os circuitos sequenciais usam elementos armazenadores chamados latches e flip-flops e possuem a capacidade de armazenamento de informa\u00e7\u00f5es. Um latch \u00e9 um circuito capaz de armazenar o valor de 1 bit e pode ser constru\u00eddo com 2 portas NOR ou NAND como na imagem abaixo. A entrada S \u00e9 chamada de Set e atribui um valor ao sistema. A porta R \u00e9 chamada de Reset e retorna o valor 0 para o nosso circuito. Se ambos s\u00e3o 0, o nosso sistema retorna um status inalterado memorizando o estado anterior. Com o latch podemos usar o controle de tempo (chamado de clock ) para controlarmos o comportamento oscilante de alguns circuitos sequenciais mais complexos. Os circuitos sequenciais s\u00e3o criados com o uso dos latchs e sinais de controle por clock. S\u00e3o muito relevantes para os computadores pois permitem a capacidade de memoriza\u00e7\u00e3o de informa\u00e7\u00e3o na mem\u00f3ria de trabalho. Aqui, n\u00e3o estamos falando dos discos r\u00edgidos ou mem\u00f3ria flash. Existem dois tipos de circuitos sequenciais muito importantes para a estrutura dos computadores modernos. O primeiro deles \u00e9 o registradores que s\u00e3o usados para memorizar temporariamente informa\u00e7\u00f5es em mem\u00f3ria maiores que 1 bit (as de 1 bit podem ser armazenadas diretamente pelo latch). Os contadores usam o clock para a contagem da passagem do tempo. Introdu\u00e7\u00e3o \u00e0 Organiza\u00e7\u00e3o de Computadores A medida que os computadores foram evoluindo, a representa\u00e7\u00e3o das suas partes por meio das portas digitais se tornou invi\u00e1vel devido ao n\u00famero exponencial de portas que faziam parte de cada nova gera\u00e7\u00e3o de computadores. Desse modo, a representa\u00e7\u00e3o por meio da hierarquia de subsistemas se tornou mais adequada. O objetivo \u00e9 conseguirmos compreender como cada subsistema se interliga com os demais e desempenha fun\u00e7\u00f5es espec\u00edficas para o correto funcionamento do equipamento. Para prosseguirmos, \u00e9 necess\u00e1rio definirmos o que seria esse \"correto funcionamento\" dos computadores. Em suma, podemos afirmar que um computador deve realizar 4 fun\u00e7\u00f5es: Processamento de Dados - Produzir nova informa\u00e7\u00e3o a partir de informa\u00e7\u00e3o anterior Armazenamento de Dados - Capacidade de memorizar tanto no prazo de trabalho quanto no longo prazo Transfer\u00eancia de Dados - Envio das informa\u00e7\u00f5es por meio dos dispositivos de entrada e sa\u00edda Controle - Para a garantia das 3 fun\u00e7\u00f5es acima Para realizar esses trabalhos, podemos dividir o computador moderno nos seguintes subsistemas: Unidade Central de Processamento (CPU) - Que faz o controle de toda a opera\u00e7\u00e3o do computador Mem\u00f3ria Principal - Conectada por meio de um barramento ao CPU, armazena os dados necess\u00e1rios para o CPU realizar as opera\u00e7\u00f5es desejadas Entrada e Sa\u00edda de Dados - S\u00e3o os elementos que inputam informa\u00e7\u00f5es ao CPU e retiram dele os resultados para o mundo exterior Barramento - Meio f\u00edsico de comunica\u00e7\u00e3o entre os subsistemas do computador Organiza\u00e7\u00e3o x Arquitetura Embora esses conceitos sejam muito parecidos. Podemos definir a organiza\u00e7\u00e3o de computadores como a descri\u00e7\u00e3o de computadores por meio dos seus subsistemas, suas fun\u00e7\u00f5es e interconex\u00f5es. Por sua vez, a arquitetura de computadores est\u00e1 relacionada \u00e0 conex\u00e3o entre o projeto de computador e a execu\u00e7\u00e3o dos programas, ou seja, \u00e9 o estudo de como uma mudan\u00e7a no design de um computador impacta na execu\u00e7\u00e3o dos programas. Uma mesma arquitetura pode ser implementada em v\u00e1rias organiza\u00e7\u00f5es poss\u00edveis. A arquitetura tem foco na abstra\u00e7\u00e3o do computador e a organiza\u00e7\u00e3o tem foco na implementa\u00e7\u00e3o. Para facilitar a diferencia\u00e7\u00e3o dos termos, vamos elencar alguns t\u00f3picos de estudo dessas \u00e1reas. Organiza\u00e7\u00e3o de Computadores Implementa\u00e7\u00e3o de hardware Implementa\u00e7\u00e3o de sistemas de controle que transmitem a execu\u00e7\u00e3o das instru\u00e7\u00f5es Comunica\u00e7\u00e3o entre o computador e seus perif\u00e9ricos Tecnologia usada pra a mem\u00f3ria Arquitetura de Computadores Conjunto de instru\u00e7\u00f5es que a CPU processa O formato das instru\u00e7\u00f5es Maneiras de endere\u00e7amento de mem\u00f3ria Representa\u00e7\u00e3o dos tipos de dados usados nas instru\u00e7\u00f5es Organiza\u00e7\u00e3o B\u00e1sica de um Computador Digital - Modelo de Von Neumann Antigamente, os programas executados pelos computadores eram feitos por meio do arranjo f\u00edsico dos seus componentes. A programa\u00e7\u00e3o era feita diretamente no hardware. contudo, uma nova arquitetura foi necess\u00e1ria porque se buscava a constru\u00e7\u00e3o de um mecanismo que permitisse, ao mesmo tempo, o salvamento tanto dos dados quanto das instru\u00e7\u00f5es necess\u00e1rias para o processamento dos mesmo. Foi nesse contexto que a arquitetura de Von Neumann foi constru\u00edda. Ela \u00e9 constitu\u00edda de, basicamente, 3 componentes principais interligados por um barramento: CPU Mem\u00f3ria Principal Dispositivos de Entrada e sa\u00edda Unidade Central de Processamento - UCP Na se\u00e7\u00e3o passada, n\u00f3s vimos que a arquitetura de Von Neumann possui o CPU (tamb\u00e9m chamado de processador) como um dos seus componentes. Durante um ciclo de execu\u00e7\u00e3o , o processador deve buscar as instru\u00e7\u00f5es na mem\u00f3ria, decodific\u00e1-la e execut\u00e1-la. Para entender melhor como ele faz tudo isso, podemos subdividi-lo nas seguintes partes: Unidade de Controle - \u00c9 quem faz a busca na mem\u00f3ria e permite a execu\u00e7\u00e3o das instru\u00e7\u00f5es (programas) Unidade L\u00f3gica e Aritm\u00e9tica (ULA) - Executa as instru\u00e7\u00f5es enviadas pela unidade de controle referentes \u00e0s opera\u00e7\u00f5es l\u00f3gicas e aritm\u00e9ticas Registradores - S\u00e3o componentes de mem\u00f3ria de extrema velocidade de leitura mas baixa disponibilidade. Essa mem\u00f3ria \u00e9 usada temporariamente para auxiliar o ciclo de execu\u00e7\u00e3o Ciclo de Execu\u00e7\u00e3o de Instru\u00e7\u00f5es As instru\u00e7\u00f5es sempre s\u00e3o executadas sequencialmente. Quem controle o fluxo de qual instru\u00e7\u00e3o ser\u00e1 executada a cada ciclo \u00e9 um registrador chamado controlador de programas (PC) . Ele armazena o endere\u00e7o da pr\u00f3xima instru\u00e7\u00e3o a ser executada e, a cada ciclo, \u00e9 reescrito com o novo endere\u00e7o de execu\u00e7\u00e3o. O ciclo de execu\u00e7\u00e3o \u00e9 composto seguintes etapas: Busca da pr\u00f3xima execu\u00e7\u00e3o - O PC indica o endere\u00e7o na mem\u00f3ria da instru\u00e7\u00e3o a ser executada. Esse endere\u00e7o \u00e9 carregado em outro registrador chamado registrador de instru\u00e7\u00f5es (RI) e ent\u00e3o o PC recebe o endere\u00e7o da pr\u00f3xima instru\u00e7\u00e3o Decodifica\u00e7\u00e3o da instru\u00e7\u00e3o - o endere\u00e7o armazenado no RI (tamb\u00e9m chamado de opcode ) \u00e9 lido pela unidade de controle e o comando \u00e0 ULA \u00e9 feito para execu\u00e7\u00e3o da instru\u00e7\u00e3o Busca dos operandos - A unidade de controle busca todos os dados necess\u00e1rios \u00e0 execu\u00e7\u00e3o da instru\u00e7\u00e3o por meio do envio de sinais atrav\u00e9s do barramento 2 Execu\u00e7\u00e3o da Instru\u00e7\u00e3o - A ULA, de posse dos dados, faz a execu\u00e7\u00e3o da instru\u00e7\u00e3o lendo os operandos carregados em mem\u00f3ria pela unidade de controle Repeti\u00e7\u00e3o do processo Mem\u00f3ria Idealmente, a mem\u00f3ria deveria ser super r\u00e1pida e abundante. O problema \u00e9 que existe um trade-off entre essas duas qualidades. Quanto mais r\u00e1pida \u00e9 a leitura, mais cara \u00e9 a mem\u00f3ria. Esse \u00e9 o motivo de, na arquitetura dos computadores atuais, existirem diversos tipos de mem\u00f3ria. A ordem de velocidade \u00e9 dada por: Registradores Memoria Cache Memoria Principal Memoria Secund\u00e1ria As primeiras s\u00e3o as mem\u00f3rias mais r\u00e1pidas e caras. As demais, est\u00e3o as mais lentas e baratas. A mem\u00f3ria principal \u00e9 a mem\u00f3ria RAM e ROM dos nossos computadores. Dela, a CPU l\u00ea as instru\u00e7\u00f5es escritas em alguma linguagem de programa\u00e7\u00e3o e \u00e9 nela que o processador salva o resultado das opera\u00e7\u00f5es. Para entender como a mem\u00f3ria principal e funciona, basta pensarmos em um conjunto de pequenas c\u00e9lulas (posi\u00e7\u00f5es) de armazenamento de informa\u00e7\u00e3o. Todas as c\u00e9lulas da mem\u00f3ria possuem o mesmo tamanho (medido em quantidade de bits). Os endere\u00e7os s\u00e3o os identificadores da posi\u00e7\u00e3o f\u00edsica de cada c\u00e9lula no material de armazenamento (disco magn\u00e9tico ou chip). Se soubermos a quantidade de bits em cada c\u00e9lula e a quantidade de c\u00e9lulas, saberemos a capacidade de armazenamento do dispositivo por meio do c\u00e1lculo \\(\\textrm{Capacidade} = 2^{ \\textrm{Numero de Celulas}} * \\textrm{Numero de bits por celula}\\) A mem\u00f3ria principal pode ser divida em mem\u00f3ria RAM - Random Access Memory , que pode ser lida e apagada a qualquer momento mas n\u00e3o \u00e9 capaz de armazenar os dados ap\u00f3s o desligamento do computador, e a mem\u00f3ria ROM - Read Only Memory que n\u00e3o pode ser alterada na execu\u00e7\u00e3o do programa mas se mant\u00e9m ap\u00f3s o desligamento do computador. Coment\u00e1rio: A mem\u00f3ria RAM ainda \u00e9 subdividida em outras mem\u00f3rias mas veremos isso em uma atualiza\u00e7\u00e3o desse curso. A mem\u00f3ria secund\u00e1ria \u00e9 o HD e o SSD dos nossos computadores. O processador s\u00f3 faz uso dela por meio de dispositivos de entrada e sa\u00edda. A vantagem dela \u00e9 o seu pre\u00e7o que \u00e9 infinitamente menor que as mem\u00f3rias mais r\u00e1pidas. Entrada e Sa\u00edda S\u00e3o os componentes que permitem os usu\u00e1rios acessar e visualizar os resultados dos ciclos de processamento. E/S de entrada - Teclado, Mouse, Scanner ... E/S de sa\u00edda - Impressoras, Monitores, Caixas de Som ... Interface de E/S - S\u00e3o os programas que intermediam a comunica\u00e7\u00e3o entre o CPU e o dispositivos Existem alguns tipos de comunica\u00e7\u00f5es entre os dispositivos de Entrada e Sa\u00edda mas n\u00f3s vamos parar por aqui. Arquitetura de Computadores Arquiteturas RISC e CISC Como o processador exerce um papel central na atividade de um computador moderno, n\u00e3o \u00e9 nada estranho se preocupar muito sobre como ele \u00e9 capaz de compreender as instru\u00e7\u00f5es e executar. Na verdade, existe um campo espec\u00edfico de pesquisa chamado arquitetura de instru\u00e7\u00f5es do processador . Esse campo estuda o formato das instru\u00e7\u00f5es, os c\u00f3digos de opera\u00e7\u00e3o, os registradores, a mem\u00f3ria de dados e outros t\u00f3picos relacionados a atividade desse componente. Na primeira gera\u00e7\u00e3o de processadores, o conjunto de opera\u00e7\u00f5es era reduzido para simplifica\u00e7\u00e3o da constru\u00e7\u00e3o desse componente. Na d\u00e9cada de 60, a quantidade de opera\u00e7\u00f5es aumentou junto com a complexidade dos processadores. A essa fam\u00edlia d\u00e1-se o nome de CISC - Complex Instruction Set Computer . Os computadores da fam\u00edlia CISC possuem uma maior quantidade de instru\u00e7\u00f5es, contudo, o seu ciclo de processamento \u00e9 mais lento. O exemplo dessa fam\u00edlia de processadores \u00e9 a Intel: 286, 386, 486 e Pentium. No final da d\u00e9cada de 80, os processadores com um conjunto reduzido de instru\u00e7\u00f5es voltaram a serem utilizados sob o nome de RISC - Reduced Instruction Set Computer . A ideia era a de melhorar o desempenho dos processadores via simplifica\u00e7\u00e3o e ganho de velocidade. Os exemplos s\u00e3o os processadores MIPS e a arquitetura ARM (muito usados nos smartphones). Hoje em dia os processadores possuem ambas as abordagens implementadas simultaneamente. Arquitetura do Conjunto de Instru\u00e7\u00f5es: Exemplo do MIPS No t\u00f3pico anterior, nosso foco foi na hist\u00f3ria dos desenhos f\u00edsicos dos processadores. Agora, nossa aten\u00e7\u00e3o ser\u00e1 voltada para a arquitetura das instru\u00e7\u00f5es, ou seja, as opera\u00e7\u00f5es nativas que os processadores j\u00e1 vem de f\u00e1brica capazes de fazer. Diferente da arquitetura f\u00edsica, o mercado acabou por convergir para um padr\u00e3o relativamente comum de arquitetura de instru\u00e7\u00f5es b\u00e1sicas. Como exemplo, o material cita o Microprocessor Without Interlocked Pipeline Stages - MIPS . Desenvolvido na d\u00e9cada de 80, o MIPS foi implementado mesmo antes da RISC ser criada. Hoje em dia, podemo encontrar essa arquitetura de opare\u00e7\u00f5es em equipamentos da Cisco, Nintendo, Toshiba, Sony e etc. A arquitetura do conjunto de instru\u00e7\u00f5es define os tipos de instru\u00e7\u00f5es execut\u00e1veis pelo processador, o formato de cada instru\u00e7\u00e3o, o tamanho em bits delas, o m\u00e9todos de endere\u00e7amento e outras taregas importantes para o funcionamento desse componente. Podemos elencar algumas classes de instru\u00e7\u00f5es que o MIPS 32 bits \u00e9 capaz de executar: Opera\u00e7\u00f5es Aritm\u00e9ticas Opera\u00e7\u00f5es L\u00f3gicas Transfer\u00eancia de Dados Desvios Condicionais Desvios Incondicionais Linguagem de Montagem J\u00e1 sabemos que o processador s\u00f3 trabalha com n\u00famero em bin\u00e1rio, entretanto, tamb\u00e9m sabemos que os programas s\u00e3o escritos em linguagens de programa\u00e7\u00e3o que n\u00e3o s\u00e3o, definitivamente, escritas em bin\u00e1rio. Existe uma linguagem que est\u00e1 mais pr\u00f3xima do bin\u00e1rio mas ao mesmo tempo pode ser lida (com a devida pr\u00e1tica do leitor) e escrita para constru\u00e7\u00e3o de programas. Essa linguagem \u00e9 a linguagem assembly ou de montagem . Em assembly, cada instru\u00e7\u00e3o \u00e9 definida por um mnem\u00f4nico (ADD, SUB, LW, SW, ...) que indica um operador nativo do processador. Cada instru\u00e7\u00e3o dessa possui um correspondente em bin\u00e1rio do lado do processador de modo que \u00e9 poss\u00edvel converter de um para o outro por um programa chamado assembler ou montador . No MIPS, cada instru\u00e7\u00e3o assembly \u00e9 convertida em um bin\u00e1rio de 32 bits no formato RIJ. O assembly cont\u00e9m um conjunto de classes de instru\u00e7\u00f5es que, a primeira vista, se parecem muito com qualquer linguagem de alto n\u00edvel: Instru\u00e7\u00f5es Aritm\u00e9ticas add $t1, $t2, $t3 \u00e9 igual a t1 = t2 + t3 sub $t1, $t2, $t3 \u00e9 igual a t1 = t2 - t3 addi $t1, $t2, 10 \u00e9 igual a t1 = t2 + 10 Instru\u00e7\u00f5es L\u00f3gicas and $s1, $s2, $t0 \u00e9 igual a s1 = s2 AND t0 or $s1, $s2, $t0 \u00e9 igual a s1 = t2 OR t0 Instru\u00e7\u00f5es de Uso de Mem\u00f3ria lw $t0, 0($s3) \u00e9 igual a t0 receber valor de s3 sw $t0, 0($s3) \u00e9 igual a t0 \u00e9 armazenado em s3 Instru\u00e7\u00f5es de Controle de Fluxo # Codigo em C # Codigo em Assembly if (i == j) bne $s3, $s4, Else # vai pra else se s3 != s4 f = g + h; add $s0, $s1, $s2 # f=g+h else j Exit # salto para Exit f = h - h; Else: sub $s0, $s1, $s2 Exit: J\u00e1 conseguimos ver que em assembly \u00e9 necess\u00e1rio mais linhas quando comparamos a uma linguagem de alto n\u00edvel. Para finalizar, vamos comparar a declara\u00e7\u00e3o de uma fun\u00e7\u00e3o em C e em assembly. // c # Constru\u00e7\u00e3o da mesma fun\u00e7\u00e3o em C int func ( int g , int h , int i , int j ) { int f ; f = ( g + h ) - ( i + j ); return f ; } # Constru\u00e7\u00e3o da mesma fun\u00e7\u00e3o em assembly func : add t0 , a0 , a1 # t0 recebe g + h add t1 , a2 , a3 # t1 recebe i + j sub s0 , t0 , t1 # s0 recebe t0 - t1 add v0 , s0 , zero # v0 recebe s0 + 0 jr ra # retorna o resultado Dica: Caso, em algum momento da sua vida, voc\u00ea precise programar em assembly, uma boa dica \u00e9 usar o simulador/IDE MARS - MIPS Assembler and Runtime Simulator. Dispon\u00edvel nesse link . Conceito de Pipeline de Instru\u00e7\u00f5es A essa altura, j\u00e1 compreendemos relativamente bem como um processador \u00e9 capaz de trabalhar e como a ordem da execu\u00e7\u00e3o das instru\u00e7\u00f5es \u00e9 relevante para o trabalho dele. Entretanto, existem etapas de processamento que n\u00e3o s\u00e3o necessariamente encadeadas, ou seja, n\u00e3o dependem uma do resultado da outra. Diante dessa constata\u00e7\u00e3o, o conceito de pipeline surge como uma t\u00e9cnica de otimiza\u00e7\u00e3o que executa instru\u00e7\u00f5es simultaneamente parecido com uma linha de montagem industrial. O pipeline pode ser pensando como uma \"trilha\" que o processador possui para trabalhar a cada ciclo de clock. Nos processadores modernos, temos v\u00e1rias linhas de trabalho simult\u00e2neo que podem ser usadas para paralelismo de tarefas. Se pensarmos que, para cada instru\u00e7\u00e3o, o processador deve passar pelos 6 est\u00e1gios abaixo: FI - Fetch Instruction/Busca da Instru\u00e7\u00e3o DI - Decodifica\u00e7\u00e3o da Instru\u00e7\u00e3o CO - C\u00e1lculo dos Endere\u00e7os dos Operandos BO - Busca do Operandos EI - Execu\u00e7\u00e3o da Instru\u00e7\u00e3o WO - Armazenamento do Operando Destino A cada ciclo de clock, ent\u00e3o, ao inv\u00e9s de termos um \u00fanico programa sendo executado por uma linha de pipeline do processador, podemos separar esse programa em unidades menores independentes que executam, cada uma em uma linha pr\u00f3pria, suas etapas paralelamente a cada ciclo de clock. Abaixo n\u00f3s temos uma tabela demonstrando o ganho de tempo com o uso dessa t\u00e9cnica para duas instru\u00e7\u00f5es. 0 1 2 3 4 5 6 7 Instru\u00e7\u00e3o 1 FI DI CO FO EI WO Instru\u00e7\u00e3o 2 FI DI CO FO EI WO Podemos ver que as duas instru\u00e7\u00f5es estar\u00e3o finalizadas em apenas 7 ciclos de clock. Sem o paralelismo, ter\u00edamos levado 12 ciclos para completar essas mesmas duas instru\u00e7\u00f5es. Paralelismo em N\u00edvel de Instru\u00e7\u00f5es e Processadores Existem dois tipos de paralelismo para obten\u00e7\u00e3o de desempenho sem aumento do clock do processador: Existem duas abordagens t\u00edpicas para o paralelismo a n\u00edvel de instru\u00e7\u00e3o: Superpipeline - H\u00e1 uma quebra de est\u00e1gios de pipeline em est\u00e1gios menores que 1 clock mas. Um exemplo \u00e9 o MIPS R4000 que \u00e9 um RISC com Superpipeline. Superescalar - M\u00faltiplas unidades funcionais independentes que executam mais de uma instru\u00e7\u00e3o por clock. \u00c9 como se houvesse mais de um pipeline dentro do processador. Os intel x86 usam essa t\u00e9cnica. Paralelismo a n\u00edvel de processador \u00c9 feito pelo uso de v\u00e1rios processadores ao mesmo tempo. E existem duas classes de computadores com essa abordagem: Multiprocessadores - Sistema com mais de uma CPU que compartilham a mem\u00f3ria principal por meio de um processo coordenado. Podem ser implementados por barramento \u00fanico ou mem\u00f3rias locais. CPUs fortemente acompladas. Multicomputadores - Sistema com computadores interligados em rede com alguma topologia. O foco est\u00e1 na comunica\u00e7\u00e3o entre eles. Processadores fracamente acoplados. Bibliografia Bibliografia B\u00e1sica STALLINGS, William. Arquitetura e organiza\u00e7\u00e3o de computadores . 10. ed. S\u00e3o Paulo: Pearson, c2018. E-book. ISBN 9788543020532 CORR\u00caA, Ana Grasielle Dion\u00edsio (Org.). Organiza\u00e7\u00e3o e arquitetura de computadores . S\u00e3o Paulo: Pearson, 2017. E-book. ISBN 9788543020327 PATTERSON, David A. Organiza\u00e7\u00e3o e projeto de computadores a interface hardware/software . Rio de Janeiro, GEN LTC 2017. 1 recurso online. ISBN 9788595152908 TANENBAUM, Andrew S.; AUSTIN, Todd. Organiza\u00e7\u00e3o estruturada de computadores . 6. ed. S\u00e3o Paulo, SP: Pearson Education do Brasil, 2013. E-book. ISBN 9788581435398 MONTEIRO, M\u00e1rio A. Introdu\u00e7\u00e3o \u00e0 organiza\u00e7\u00e3o de computadores . 5. ed. Rio de Janeiro: LTC - Livros T\u00e9cnicos e Cient\u00edficos, c2007. E-book. ISBN 978-85-216-1973-4 Sempre que voc\u00ea est\u00e1 vendo uma tela de loading, \u00e9 isso que est\u00e1 acontecendo no seu computador. Paralelismo a n\u00edvel de instru\u00e7\u00e3o \u21a9 Sempre que voc\u00ea est\u00e1 vendo uma tela de loading, \u00e9 isso que est\u00e1 acontecendo no seu computador. \u21a9","title":"Organiza\u00e7\u00e3o de Computadores"},{"location":"nav/PUC/eixo1/organizacao_computadores/#assuntos","text":"Fundamentos de Organiza\u00e7\u00e3o de Computadores Representa\u00e7\u00e3o de Dados e Sistemas Bin\u00e1rio Conceitos de L\u00f3gica Digital Circuitos L\u00f3gicos Digitais B\u00e1sicos Introdu\u00e7\u00e3o \u00e0 Organiza\u00e7\u00e3o de Computadores Unidade Central de Processamento - UCP Mem\u00f3ria Entrada e Sa\u00edda Arquitetura de Computadores Arquiteturas RISC e CISC Arquitetura do Conjunto de Instru\u00e7\u00f5es: Exemplo do MIPS Linguagem de Montagem Conceito de Pipeline de Instru\u00e7\u00f5es Paralelismo em N\u00edvel de Instru\u00e7\u00f5es e Processadores Bibliografia","title":"Assuntos"},{"location":"nav/PUC/eixo1/organizacao_computadores/#fundamentos-de-organizacao-de-computadores","text":"","title":"Fundamentos de Organiza\u00e7\u00e3o de Computadores"},{"location":"nav/PUC/eixo1/organizacao_computadores/#representacao-de-dados-e-sistemas-binario","text":"","title":"Representa\u00e7\u00e3o de Dados e Sistemas Bin\u00e1rio"},{"location":"nav/PUC/eixo1/organizacao_computadores/#compreendendo-o-sistema-decimal","text":"Os componentes eletr\u00f4nicos digitais s\u00f3 permitem dois estados de tens\u00e3o: 0 e 1. Isso implica que toda informa\u00e7\u00e3o manipulada pelos computadores \u00e9 representado em um sistema de numera\u00e7\u00e3o bin\u00e1ria que \u00e9 correlacionada com o n\u00edvel de tens\u00e3o nos componentes da m\u00e1quina. O nosso modelo de sistema num\u00e9rico usual \u00e9 o decimal (tamb\u00e9m chamado base 10). Ele \u00e9 um sistema posicional porque o peso do d\u00edgito \u00e9 dependente da posi\u00e7\u00e3o dele no n\u00famero. Por exemplo: \\(38_{10} = 3 \\times 10^1 + 8 \\times 10^0 = 30 + 8\\) \\(17,25_{10} = 10 \\times 10^1 + 7 \\times 10^0 + 2 \\times 10^{-1} + 5 \\times 10^{-2}\\) O subscrito indica o tipo de base usado. Uma caracter\u00edstica dos sistemas posicionais \u00e9 que o d\u00edgito mais a esquerda ser\u00e1 o mais significativa (MSB - Most Significant Bit) e os \u00e0 sua direita ser\u00e3o os LSB (Less Significant Bit).","title":"Compreendendo o Sistema Decimal"},{"location":"nav/PUC/eixo1/organizacao_computadores/#conceitos-de-logica-digital","text":"Computadores s\u00e3o formados por componentes eletr\u00f4nicos. Os transistores e os diodos s\u00e3o usados para a constru\u00e7\u00e3o das portas l\u00f3gicas que nos permitem, atrav\u00e9s de circuitos el\u00e9tricos, replicar os operadores l\u00f3gicos da l\u00f3gica usados na algebra booleana. Assumindo valores em dois est\u00e1gios: 0 (de 0 a 0,6 volts) e 1 (entre 3,6 e 5 volts). Uma porta l\u00f3gica nada mais \u00e9 que um circuito que recebe sinais de entrada e, conforme a sua configura\u00e7\u00e3o, produz um sinal de sa\u00edda cujo valor \u00e9 dependente da entrada. Podemos categorizar as portas l\u00f3gicas em 3 grupos: Portas L\u00f3gicas B\u00e1sicas Opera\u00e7\u00e3o L\u00f3gica - AND Opera\u00e7\u00e3o L\u00f3gica - OR Opera\u00e7\u00e3o Inversora - NOT Fun\u00e7\u00f5es e Portas L\u00f3gicas Compostas Opera\u00e7\u00e3o L\u00f3gica - NAND (NOT-AND) Opera\u00e7\u00e3o L\u00f3gica - NOR (NOT-OR) Opera\u00e7\u00e3o L\u00f3gica - XOR (OR-EXCLUSIVA) Express\u00f5es L\u00f3gicas e Circuitos Digitais Eu j\u00e1 trabalhei bem a fundo a l\u00f3gica matem\u00e1tica no meu curso do Projeto Matem\u00e1tica. Voc\u00ea pode conferir no cap\u00edtulo 02 nesse link . A \u00fanica diferen\u00e7a \u00e9 que quando l\u00e1 for TRUE ou VERDADE, aqui ser\u00e1 1 e, claramente, quando l\u00e1 for FALSE ou FALSO, aqui ser\u00e1 0. Como nosso estudo nesse manual \u00e9 mais focado em An\u00e1lise e Desenvolvimento de Sistemas, vamos manter as anota\u00e7\u00f5es referentes \u00e0 transposi\u00e7\u00e3o da algebra booleana para os circuitos eletr\u00f4nicos. Mas caso haja alguma d\u00favida, a leitura do material acima \u00e9 recomendada.","title":"Conceitos de L\u00f3gica Digital"},{"location":"nav/PUC/eixo1/organizacao_computadores/#operadores-basicos","text":"","title":"Operadores B\u00e1sicos"},{"location":"nav/PUC/eixo1/organizacao_computadores/#operadores-compostos","text":"","title":"Operadores Compostos"},{"location":"nav/PUC/eixo1/organizacao_computadores/#expressoes-logicas-e-circuitos","text":"Podemos usar os operadores l\u00f3gicos para criar express\u00f5es do tipo $ Y = (A+B).C $ que pode ser lida como \"Y \u00e9 igual a (A ou B) e C\" 1 . Podemos tamb\u00e9m usar os diagramas de circuitos para representar exatamente essa mesma opra\u00e7\u00e3o l\u00f3gica. Para entender como cada input produz um resultado \u00e9 necess\u00e1rio usarmos uma tabela verdade que nos mostra todos os casos entre os inputs e os outputs.","title":"Express\u00f5es L\u00f3gicas e Circuitos"},{"location":"nav/PUC/eixo1/organizacao_computadores/#desafio-vamos-olhar-a-tabela-verdade-abaixo","text":"A B C Y 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 1 0 0 1 1 0 1 1 1 1 0 1 1 1 1 0 Qual fun\u00e7\u00e3o l\u00f3gica produz o resultado compat\u00edvel para a coluna Y? A resposta est\u00e1 na observa\u00e7\u00e3o cuidadosa dos valores. Podemos ver que sempre que tivermos algum valor 0 como input, o resultado ser\u00e1 1. Como existe essa altern\u00e2ncia, podemos ver que o operador de nega\u00e7\u00e3o est\u00e1 sendo usado. Al\u00e9m disso, se tiv\u00e9ssemos o operador \"ou\" aliado a um operador de nega\u00e7\u00e3o, na linha \\((0,0,1)\\) ter\u00edamos o resultado 1 que, ao ser negado, retornaria um resultado 0. Portanto, s\u00f3 nos resta acreditar que temos uma situa\u00e7\u00e3o de opera\u00e7\u00f5es do tipo \"e\" e de nega\u00e7\u00e3o. A essa estrutura damos o nome de \"NOT-AND\" ou \"NAND\". Em temos l\u00f3gicos formais, temos a express\u00e3o \\(\\neg (A \\land B \\land C)\\) e na nota\u00e7\u00e3o que usamos no curso, temos um \\(\\overline{(A . B . C)}\\) .","title":"Desafio: Vamos olhar a tabela verdade abaixo:"},{"location":"nav/PUC/eixo1/organizacao_computadores/#circuitos-logicos-digitais-basicos","text":"Com o uso das portas l\u00f3gicas, n\u00f3s podemos construir circuitos mais complexos e que desempenham fun\u00e7\u00f5es importantes para o funcionamento de um computador. Podemos agrupar esses circuitos (tamb\u00e9m chamados de m\u00f3dulos) em dois grupos: Circuitos L\u00f3gicos Combinacionais Multiplexadores Demultiplexadores Codificadores Decodificadores Circuitos Sequenciais Registradores Contadores","title":"Circuitos L\u00f3gicos Digitais B\u00e1sicos"},{"location":"nav/PUC/eixo1/organizacao_computadores/#circuitos-combinacionais","text":"Os circuitos combinacionais s\u00e3o constru\u00eddos de maneira que o resultado obtido por ele \u00e9 condiconado ao input atual nas portas l\u00f3gicas que o comp\u00f5es. Para analizarmos um circuito composto de \\(n\\) portas l\u00f3gicas e \\(m\\) sa\u00eddas, podemos usar a tabela verdade, s\u00edmbolos gr\u00e1ficos no padr\u00e3o das portas que aprendemos antes e equa\u00e7\u00f5es booleanas que convertem a l\u00f3gica eletr\u00f4nica para a matem\u00e1tica. Observemos a tabela verdade abaixo: A B C F 0 0 0 0 0 0 1 0 0 1 0 1 0 1 1 1 1 0 0 0 1 0 1 0 1 1 0 1 1 1 1 0 Para criar a representa\u00e7\u00e3o do circuito l\u00f3gico que corresponde a coluna F, basta observarmos as condi\u00e7\u00f5es necess\u00e1rias para o valor 1 na referida coluna. Temos 3 eventos em que isso acontece. Podemos demonstrar essa rela\u00e7\u00e3o pode meio da seguinte equa\u00e7\u00e3o boolena: \\(F = \\overline{A} B \\overline{C} + \\overline{A} B C + A B \\overline{C}\\) A essa primeira maneira de escrita, damos o nome de Soma de Produtos ou Sum Of Products (SOP) . Uma outra forma de representarmos o circuito F \u00e9 se focarmos na negativa das condi\u00e7\u00f5es que retornam o valor 0. Desse modo, tamb\u00e9m podemos representar o circuito da seguite maneira: \\(F = \\overline{\\overline{A B C}} . \\overline{\\overline{A B} C} . \\overline{A \\overline{B C}} . \\overline{A \\overline{B} C} . \\overline{A B C}\\) Podemos visualizar essa condi\u00e7\u00e3o no diagrama abaixo. Ao aplicarmos o teorema de DeMorgan \\((\\overline{X1 . X2}) = \\overline{X1} + \\overline{X2}\\) nessa segunda vers\u00e3o podemos desenvolve-la at\u00e9 chegarmos em uma terceira configura\u00e7\u00e3o: \\(F = (A + B + C) . (A + B + \\overline{C}) . (\\overline{A} + B + C) . (\\overline{A} + B + \\overline{C}) . (\\overline{A} + \\overline{B} + \\overline{C})\\) Que chamamos de Produto das Somas ou Product of Sums (POS) . Coment\u00e1rio: O material do microfundamento \u00e9 consideravelmente reduzido nessa parte. Mas como estou perto da prova enquanto escrevo essa parte, terei que, por agora, reduzir a profundidade e seguir como \u00e9 dado pelo material da aula. Em tempo oportuno eu volto aqui e expando essa se\u00e7\u00e3o. Agora que entendemos um pouco melhor sobre cisrcuitos l\u00f3gicos combinacionais, vamos aprender mais sobre alguns circuitos desse tipo. Os multiplexadores s\u00e3o circuitos combinacioinais que selecionam \\(n\\) entradas a uma \u00fanica sa\u00edda por meio de suas linhas de sele\u00e7\u00e3o. Para cada duas entradas, ser\u00e3o necess\u00e1rias 1 linha de sele\u00e7\u00e3o. Os demultiplexadores s\u00e3o o oposto, ligando uma \u00fanica entrada para \\(n\\) sa\u00eddas. Um codificador normalmente s\u00f3 permite que uma das entradas esteja ativa a cada instante e sua fun\u00e7\u00e3o \u00e9 converter os valores de entrada em um n\u00famero bin\u00e1rio. Similarmente, um decodificador recebe um bin\u00e1rio como entrada e a sa\u00edda ser\u00e1 alguma linha previamente definida.","title":"Circuitos Combinacionais"},{"location":"nav/PUC/eixo1/organizacao_computadores/#circuitos-sequenciais","text":"Por outro lado, os circuitos sequenciais usam elementos armazenadores chamados latches e flip-flops e possuem a capacidade de armazenamento de informa\u00e7\u00f5es. Um latch \u00e9 um circuito capaz de armazenar o valor de 1 bit e pode ser constru\u00eddo com 2 portas NOR ou NAND como na imagem abaixo. A entrada S \u00e9 chamada de Set e atribui um valor ao sistema. A porta R \u00e9 chamada de Reset e retorna o valor 0 para o nosso circuito. Se ambos s\u00e3o 0, o nosso sistema retorna um status inalterado memorizando o estado anterior. Com o latch podemos usar o controle de tempo (chamado de clock ) para controlarmos o comportamento oscilante de alguns circuitos sequenciais mais complexos. Os circuitos sequenciais s\u00e3o criados com o uso dos latchs e sinais de controle por clock. S\u00e3o muito relevantes para os computadores pois permitem a capacidade de memoriza\u00e7\u00e3o de informa\u00e7\u00e3o na mem\u00f3ria de trabalho. Aqui, n\u00e3o estamos falando dos discos r\u00edgidos ou mem\u00f3ria flash. Existem dois tipos de circuitos sequenciais muito importantes para a estrutura dos computadores modernos. O primeiro deles \u00e9 o registradores que s\u00e3o usados para memorizar temporariamente informa\u00e7\u00f5es em mem\u00f3ria maiores que 1 bit (as de 1 bit podem ser armazenadas diretamente pelo latch). Os contadores usam o clock para a contagem da passagem do tempo.","title":"Circuitos Sequenciais"},{"location":"nav/PUC/eixo1/organizacao_computadores/#introducao-a-organizacao-de-computadores","text":"A medida que os computadores foram evoluindo, a representa\u00e7\u00e3o das suas partes por meio das portas digitais se tornou invi\u00e1vel devido ao n\u00famero exponencial de portas que faziam parte de cada nova gera\u00e7\u00e3o de computadores. Desse modo, a representa\u00e7\u00e3o por meio da hierarquia de subsistemas se tornou mais adequada. O objetivo \u00e9 conseguirmos compreender como cada subsistema se interliga com os demais e desempenha fun\u00e7\u00f5es espec\u00edficas para o correto funcionamento do equipamento. Para prosseguirmos, \u00e9 necess\u00e1rio definirmos o que seria esse \"correto funcionamento\" dos computadores. Em suma, podemos afirmar que um computador deve realizar 4 fun\u00e7\u00f5es: Processamento de Dados - Produzir nova informa\u00e7\u00e3o a partir de informa\u00e7\u00e3o anterior Armazenamento de Dados - Capacidade de memorizar tanto no prazo de trabalho quanto no longo prazo Transfer\u00eancia de Dados - Envio das informa\u00e7\u00f5es por meio dos dispositivos de entrada e sa\u00edda Controle - Para a garantia das 3 fun\u00e7\u00f5es acima Para realizar esses trabalhos, podemos dividir o computador moderno nos seguintes subsistemas: Unidade Central de Processamento (CPU) - Que faz o controle de toda a opera\u00e7\u00e3o do computador Mem\u00f3ria Principal - Conectada por meio de um barramento ao CPU, armazena os dados necess\u00e1rios para o CPU realizar as opera\u00e7\u00f5es desejadas Entrada e Sa\u00edda de Dados - S\u00e3o os elementos que inputam informa\u00e7\u00f5es ao CPU e retiram dele os resultados para o mundo exterior Barramento - Meio f\u00edsico de comunica\u00e7\u00e3o entre os subsistemas do computador","title":"Introdu\u00e7\u00e3o \u00e0 Organiza\u00e7\u00e3o de Computadores"},{"location":"nav/PUC/eixo1/organizacao_computadores/#organizacao-x-arquitetura","text":"Embora esses conceitos sejam muito parecidos. Podemos definir a organiza\u00e7\u00e3o de computadores como a descri\u00e7\u00e3o de computadores por meio dos seus subsistemas, suas fun\u00e7\u00f5es e interconex\u00f5es. Por sua vez, a arquitetura de computadores est\u00e1 relacionada \u00e0 conex\u00e3o entre o projeto de computador e a execu\u00e7\u00e3o dos programas, ou seja, \u00e9 o estudo de como uma mudan\u00e7a no design de um computador impacta na execu\u00e7\u00e3o dos programas. Uma mesma arquitetura pode ser implementada em v\u00e1rias organiza\u00e7\u00f5es poss\u00edveis. A arquitetura tem foco na abstra\u00e7\u00e3o do computador e a organiza\u00e7\u00e3o tem foco na implementa\u00e7\u00e3o. Para facilitar a diferencia\u00e7\u00e3o dos termos, vamos elencar alguns t\u00f3picos de estudo dessas \u00e1reas. Organiza\u00e7\u00e3o de Computadores Implementa\u00e7\u00e3o de hardware Implementa\u00e7\u00e3o de sistemas de controle que transmitem a execu\u00e7\u00e3o das instru\u00e7\u00f5es Comunica\u00e7\u00e3o entre o computador e seus perif\u00e9ricos Tecnologia usada pra a mem\u00f3ria Arquitetura de Computadores Conjunto de instru\u00e7\u00f5es que a CPU processa O formato das instru\u00e7\u00f5es Maneiras de endere\u00e7amento de mem\u00f3ria Representa\u00e7\u00e3o dos tipos de dados usados nas instru\u00e7\u00f5es","title":"Organiza\u00e7\u00e3o x Arquitetura"},{"location":"nav/PUC/eixo1/organizacao_computadores/#organizacao-basica-de-um-computador-digital-modelo-de-von-neumann","text":"Antigamente, os programas executados pelos computadores eram feitos por meio do arranjo f\u00edsico dos seus componentes. A programa\u00e7\u00e3o era feita diretamente no hardware. contudo, uma nova arquitetura foi necess\u00e1ria porque se buscava a constru\u00e7\u00e3o de um mecanismo que permitisse, ao mesmo tempo, o salvamento tanto dos dados quanto das instru\u00e7\u00f5es necess\u00e1rias para o processamento dos mesmo. Foi nesse contexto que a arquitetura de Von Neumann foi constru\u00edda. Ela \u00e9 constitu\u00edda de, basicamente, 3 componentes principais interligados por um barramento: CPU Mem\u00f3ria Principal Dispositivos de Entrada e sa\u00edda","title":"Organiza\u00e7\u00e3o B\u00e1sica de um Computador Digital - Modelo de Von Neumann"},{"location":"nav/PUC/eixo1/organizacao_computadores/#unidade-central-de-processamento-ucp","text":"Na se\u00e7\u00e3o passada, n\u00f3s vimos que a arquitetura de Von Neumann possui o CPU (tamb\u00e9m chamado de processador) como um dos seus componentes. Durante um ciclo de execu\u00e7\u00e3o , o processador deve buscar as instru\u00e7\u00f5es na mem\u00f3ria, decodific\u00e1-la e execut\u00e1-la. Para entender melhor como ele faz tudo isso, podemos subdividi-lo nas seguintes partes: Unidade de Controle - \u00c9 quem faz a busca na mem\u00f3ria e permite a execu\u00e7\u00e3o das instru\u00e7\u00f5es (programas) Unidade L\u00f3gica e Aritm\u00e9tica (ULA) - Executa as instru\u00e7\u00f5es enviadas pela unidade de controle referentes \u00e0s opera\u00e7\u00f5es l\u00f3gicas e aritm\u00e9ticas Registradores - S\u00e3o componentes de mem\u00f3ria de extrema velocidade de leitura mas baixa disponibilidade. Essa mem\u00f3ria \u00e9 usada temporariamente para auxiliar o ciclo de execu\u00e7\u00e3o","title":"Unidade Central de Processamento - UCP"},{"location":"nav/PUC/eixo1/organizacao_computadores/#ciclo-de-execucao-de-instrucoes","text":"As instru\u00e7\u00f5es sempre s\u00e3o executadas sequencialmente. Quem controle o fluxo de qual instru\u00e7\u00e3o ser\u00e1 executada a cada ciclo \u00e9 um registrador chamado controlador de programas (PC) . Ele armazena o endere\u00e7o da pr\u00f3xima instru\u00e7\u00e3o a ser executada e, a cada ciclo, \u00e9 reescrito com o novo endere\u00e7o de execu\u00e7\u00e3o. O ciclo de execu\u00e7\u00e3o \u00e9 composto seguintes etapas: Busca da pr\u00f3xima execu\u00e7\u00e3o - O PC indica o endere\u00e7o na mem\u00f3ria da instru\u00e7\u00e3o a ser executada. Esse endere\u00e7o \u00e9 carregado em outro registrador chamado registrador de instru\u00e7\u00f5es (RI) e ent\u00e3o o PC recebe o endere\u00e7o da pr\u00f3xima instru\u00e7\u00e3o Decodifica\u00e7\u00e3o da instru\u00e7\u00e3o - o endere\u00e7o armazenado no RI (tamb\u00e9m chamado de opcode ) \u00e9 lido pela unidade de controle e o comando \u00e0 ULA \u00e9 feito para execu\u00e7\u00e3o da instru\u00e7\u00e3o Busca dos operandos - A unidade de controle busca todos os dados necess\u00e1rios \u00e0 execu\u00e7\u00e3o da instru\u00e7\u00e3o por meio do envio de sinais atrav\u00e9s do barramento 2 Execu\u00e7\u00e3o da Instru\u00e7\u00e3o - A ULA, de posse dos dados, faz a execu\u00e7\u00e3o da instru\u00e7\u00e3o lendo os operandos carregados em mem\u00f3ria pela unidade de controle Repeti\u00e7\u00e3o do processo","title":"Ciclo de Execu\u00e7\u00e3o de Instru\u00e7\u00f5es"},{"location":"nav/PUC/eixo1/organizacao_computadores/#memoria","text":"Idealmente, a mem\u00f3ria deveria ser super r\u00e1pida e abundante. O problema \u00e9 que existe um trade-off entre essas duas qualidades. Quanto mais r\u00e1pida \u00e9 a leitura, mais cara \u00e9 a mem\u00f3ria. Esse \u00e9 o motivo de, na arquitetura dos computadores atuais, existirem diversos tipos de mem\u00f3ria. A ordem de velocidade \u00e9 dada por: Registradores Memoria Cache Memoria Principal Memoria Secund\u00e1ria As primeiras s\u00e3o as mem\u00f3rias mais r\u00e1pidas e caras. As demais, est\u00e3o as mais lentas e baratas. A mem\u00f3ria principal \u00e9 a mem\u00f3ria RAM e ROM dos nossos computadores. Dela, a CPU l\u00ea as instru\u00e7\u00f5es escritas em alguma linguagem de programa\u00e7\u00e3o e \u00e9 nela que o processador salva o resultado das opera\u00e7\u00f5es. Para entender como a mem\u00f3ria principal e funciona, basta pensarmos em um conjunto de pequenas c\u00e9lulas (posi\u00e7\u00f5es) de armazenamento de informa\u00e7\u00e3o. Todas as c\u00e9lulas da mem\u00f3ria possuem o mesmo tamanho (medido em quantidade de bits). Os endere\u00e7os s\u00e3o os identificadores da posi\u00e7\u00e3o f\u00edsica de cada c\u00e9lula no material de armazenamento (disco magn\u00e9tico ou chip). Se soubermos a quantidade de bits em cada c\u00e9lula e a quantidade de c\u00e9lulas, saberemos a capacidade de armazenamento do dispositivo por meio do c\u00e1lculo \\(\\textrm{Capacidade} = 2^{ \\textrm{Numero de Celulas}} * \\textrm{Numero de bits por celula}\\) A mem\u00f3ria principal pode ser divida em mem\u00f3ria RAM - Random Access Memory , que pode ser lida e apagada a qualquer momento mas n\u00e3o \u00e9 capaz de armazenar os dados ap\u00f3s o desligamento do computador, e a mem\u00f3ria ROM - Read Only Memory que n\u00e3o pode ser alterada na execu\u00e7\u00e3o do programa mas se mant\u00e9m ap\u00f3s o desligamento do computador. Coment\u00e1rio: A mem\u00f3ria RAM ainda \u00e9 subdividida em outras mem\u00f3rias mas veremos isso em uma atualiza\u00e7\u00e3o desse curso. A mem\u00f3ria secund\u00e1ria \u00e9 o HD e o SSD dos nossos computadores. O processador s\u00f3 faz uso dela por meio de dispositivos de entrada e sa\u00edda. A vantagem dela \u00e9 o seu pre\u00e7o que \u00e9 infinitamente menor que as mem\u00f3rias mais r\u00e1pidas.","title":"Mem\u00f3ria"},{"location":"nav/PUC/eixo1/organizacao_computadores/#entrada-e-saida","text":"S\u00e3o os componentes que permitem os usu\u00e1rios acessar e visualizar os resultados dos ciclos de processamento. E/S de entrada - Teclado, Mouse, Scanner ... E/S de sa\u00edda - Impressoras, Monitores, Caixas de Som ... Interface de E/S - S\u00e3o os programas que intermediam a comunica\u00e7\u00e3o entre o CPU e o dispositivos Existem alguns tipos de comunica\u00e7\u00f5es entre os dispositivos de Entrada e Sa\u00edda mas n\u00f3s vamos parar por aqui.","title":"Entrada e Sa\u00edda"},{"location":"nav/PUC/eixo1/organizacao_computadores/#arquitetura-de-computadores","text":"","title":"Arquitetura de Computadores"},{"location":"nav/PUC/eixo1/organizacao_computadores/#arquiteturas-risc-e-cisc","text":"Como o processador exerce um papel central na atividade de um computador moderno, n\u00e3o \u00e9 nada estranho se preocupar muito sobre como ele \u00e9 capaz de compreender as instru\u00e7\u00f5es e executar. Na verdade, existe um campo espec\u00edfico de pesquisa chamado arquitetura de instru\u00e7\u00f5es do processador . Esse campo estuda o formato das instru\u00e7\u00f5es, os c\u00f3digos de opera\u00e7\u00e3o, os registradores, a mem\u00f3ria de dados e outros t\u00f3picos relacionados a atividade desse componente. Na primeira gera\u00e7\u00e3o de processadores, o conjunto de opera\u00e7\u00f5es era reduzido para simplifica\u00e7\u00e3o da constru\u00e7\u00e3o desse componente. Na d\u00e9cada de 60, a quantidade de opera\u00e7\u00f5es aumentou junto com a complexidade dos processadores. A essa fam\u00edlia d\u00e1-se o nome de CISC - Complex Instruction Set Computer . Os computadores da fam\u00edlia CISC possuem uma maior quantidade de instru\u00e7\u00f5es, contudo, o seu ciclo de processamento \u00e9 mais lento. O exemplo dessa fam\u00edlia de processadores \u00e9 a Intel: 286, 386, 486 e Pentium. No final da d\u00e9cada de 80, os processadores com um conjunto reduzido de instru\u00e7\u00f5es voltaram a serem utilizados sob o nome de RISC - Reduced Instruction Set Computer . A ideia era a de melhorar o desempenho dos processadores via simplifica\u00e7\u00e3o e ganho de velocidade. Os exemplos s\u00e3o os processadores MIPS e a arquitetura ARM (muito usados nos smartphones). Hoje em dia os processadores possuem ambas as abordagens implementadas simultaneamente.","title":"Arquiteturas RISC e CISC"},{"location":"nav/PUC/eixo1/organizacao_computadores/#arquitetura-do-conjunto-de-instrucoes-exemplo-do-mips","text":"No t\u00f3pico anterior, nosso foco foi na hist\u00f3ria dos desenhos f\u00edsicos dos processadores. Agora, nossa aten\u00e7\u00e3o ser\u00e1 voltada para a arquitetura das instru\u00e7\u00f5es, ou seja, as opera\u00e7\u00f5es nativas que os processadores j\u00e1 vem de f\u00e1brica capazes de fazer. Diferente da arquitetura f\u00edsica, o mercado acabou por convergir para um padr\u00e3o relativamente comum de arquitetura de instru\u00e7\u00f5es b\u00e1sicas. Como exemplo, o material cita o Microprocessor Without Interlocked Pipeline Stages - MIPS . Desenvolvido na d\u00e9cada de 80, o MIPS foi implementado mesmo antes da RISC ser criada. Hoje em dia, podemo encontrar essa arquitetura de opare\u00e7\u00f5es em equipamentos da Cisco, Nintendo, Toshiba, Sony e etc. A arquitetura do conjunto de instru\u00e7\u00f5es define os tipos de instru\u00e7\u00f5es execut\u00e1veis pelo processador, o formato de cada instru\u00e7\u00e3o, o tamanho em bits delas, o m\u00e9todos de endere\u00e7amento e outras taregas importantes para o funcionamento desse componente. Podemos elencar algumas classes de instru\u00e7\u00f5es que o MIPS 32 bits \u00e9 capaz de executar: Opera\u00e7\u00f5es Aritm\u00e9ticas Opera\u00e7\u00f5es L\u00f3gicas Transfer\u00eancia de Dados Desvios Condicionais Desvios Incondicionais","title":"Arquitetura do Conjunto de Instru\u00e7\u00f5es: Exemplo do MIPS"},{"location":"nav/PUC/eixo1/organizacao_computadores/#linguagem-de-montagem","text":"J\u00e1 sabemos que o processador s\u00f3 trabalha com n\u00famero em bin\u00e1rio, entretanto, tamb\u00e9m sabemos que os programas s\u00e3o escritos em linguagens de programa\u00e7\u00e3o que n\u00e3o s\u00e3o, definitivamente, escritas em bin\u00e1rio. Existe uma linguagem que est\u00e1 mais pr\u00f3xima do bin\u00e1rio mas ao mesmo tempo pode ser lida (com a devida pr\u00e1tica do leitor) e escrita para constru\u00e7\u00e3o de programas. Essa linguagem \u00e9 a linguagem assembly ou de montagem . Em assembly, cada instru\u00e7\u00e3o \u00e9 definida por um mnem\u00f4nico (ADD, SUB, LW, SW, ...) que indica um operador nativo do processador. Cada instru\u00e7\u00e3o dessa possui um correspondente em bin\u00e1rio do lado do processador de modo que \u00e9 poss\u00edvel converter de um para o outro por um programa chamado assembler ou montador . No MIPS, cada instru\u00e7\u00e3o assembly \u00e9 convertida em um bin\u00e1rio de 32 bits no formato RIJ. O assembly cont\u00e9m um conjunto de classes de instru\u00e7\u00f5es que, a primeira vista, se parecem muito com qualquer linguagem de alto n\u00edvel: Instru\u00e7\u00f5es Aritm\u00e9ticas add $t1, $t2, $t3 \u00e9 igual a t1 = t2 + t3 sub $t1, $t2, $t3 \u00e9 igual a t1 = t2 - t3 addi $t1, $t2, 10 \u00e9 igual a t1 = t2 + 10 Instru\u00e7\u00f5es L\u00f3gicas and $s1, $s2, $t0 \u00e9 igual a s1 = s2 AND t0 or $s1, $s2, $t0 \u00e9 igual a s1 = t2 OR t0 Instru\u00e7\u00f5es de Uso de Mem\u00f3ria lw $t0, 0($s3) \u00e9 igual a t0 receber valor de s3 sw $t0, 0($s3) \u00e9 igual a t0 \u00e9 armazenado em s3 Instru\u00e7\u00f5es de Controle de Fluxo # Codigo em C # Codigo em Assembly if (i == j) bne $s3, $s4, Else # vai pra else se s3 != s4 f = g + h; add $s0, $s1, $s2 # f=g+h else j Exit # salto para Exit f = h - h; Else: sub $s0, $s1, $s2 Exit: J\u00e1 conseguimos ver que em assembly \u00e9 necess\u00e1rio mais linhas quando comparamos a uma linguagem de alto n\u00edvel. Para finalizar, vamos comparar a declara\u00e7\u00e3o de uma fun\u00e7\u00e3o em C e em assembly. // c # Constru\u00e7\u00e3o da mesma fun\u00e7\u00e3o em C int func ( int g , int h , int i , int j ) { int f ; f = ( g + h ) - ( i + j ); return f ; } # Constru\u00e7\u00e3o da mesma fun\u00e7\u00e3o em assembly func : add t0 , a0 , a1 # t0 recebe g + h add t1 , a2 , a3 # t1 recebe i + j sub s0 , t0 , t1 # s0 recebe t0 - t1 add v0 , s0 , zero # v0 recebe s0 + 0 jr ra # retorna o resultado Dica: Caso, em algum momento da sua vida, voc\u00ea precise programar em assembly, uma boa dica \u00e9 usar o simulador/IDE MARS - MIPS Assembler and Runtime Simulator. Dispon\u00edvel nesse link .","title":"Linguagem de Montagem"},{"location":"nav/PUC/eixo1/organizacao_computadores/#conceito-de-pipeline-de-instrucoes","text":"A essa altura, j\u00e1 compreendemos relativamente bem como um processador \u00e9 capaz de trabalhar e como a ordem da execu\u00e7\u00e3o das instru\u00e7\u00f5es \u00e9 relevante para o trabalho dele. Entretanto, existem etapas de processamento que n\u00e3o s\u00e3o necessariamente encadeadas, ou seja, n\u00e3o dependem uma do resultado da outra. Diante dessa constata\u00e7\u00e3o, o conceito de pipeline surge como uma t\u00e9cnica de otimiza\u00e7\u00e3o que executa instru\u00e7\u00f5es simultaneamente parecido com uma linha de montagem industrial. O pipeline pode ser pensando como uma \"trilha\" que o processador possui para trabalhar a cada ciclo de clock. Nos processadores modernos, temos v\u00e1rias linhas de trabalho simult\u00e2neo que podem ser usadas para paralelismo de tarefas. Se pensarmos que, para cada instru\u00e7\u00e3o, o processador deve passar pelos 6 est\u00e1gios abaixo: FI - Fetch Instruction/Busca da Instru\u00e7\u00e3o DI - Decodifica\u00e7\u00e3o da Instru\u00e7\u00e3o CO - C\u00e1lculo dos Endere\u00e7os dos Operandos BO - Busca do Operandos EI - Execu\u00e7\u00e3o da Instru\u00e7\u00e3o WO - Armazenamento do Operando Destino A cada ciclo de clock, ent\u00e3o, ao inv\u00e9s de termos um \u00fanico programa sendo executado por uma linha de pipeline do processador, podemos separar esse programa em unidades menores independentes que executam, cada uma em uma linha pr\u00f3pria, suas etapas paralelamente a cada ciclo de clock. Abaixo n\u00f3s temos uma tabela demonstrando o ganho de tempo com o uso dessa t\u00e9cnica para duas instru\u00e7\u00f5es. 0 1 2 3 4 5 6 7 Instru\u00e7\u00e3o 1 FI DI CO FO EI WO Instru\u00e7\u00e3o 2 FI DI CO FO EI WO Podemos ver que as duas instru\u00e7\u00f5es estar\u00e3o finalizadas em apenas 7 ciclos de clock. Sem o paralelismo, ter\u00edamos levado 12 ciclos para completar essas mesmas duas instru\u00e7\u00f5es.","title":"Conceito de Pipeline de Instru\u00e7\u00f5es"},{"location":"nav/PUC/eixo1/organizacao_computadores/#paralelismo-em-nivel-de-instrucoes-e-processadores","text":"Existem dois tipos de paralelismo para obten\u00e7\u00e3o de desempenho sem aumento do clock do processador: Existem duas abordagens t\u00edpicas para o paralelismo a n\u00edvel de instru\u00e7\u00e3o: Superpipeline - H\u00e1 uma quebra de est\u00e1gios de pipeline em est\u00e1gios menores que 1 clock mas. Um exemplo \u00e9 o MIPS R4000 que \u00e9 um RISC com Superpipeline. Superescalar - M\u00faltiplas unidades funcionais independentes que executam mais de uma instru\u00e7\u00e3o por clock. \u00c9 como se houvesse mais de um pipeline dentro do processador. Os intel x86 usam essa t\u00e9cnica. Paralelismo a n\u00edvel de processador \u00c9 feito pelo uso de v\u00e1rios processadores ao mesmo tempo. E existem duas classes de computadores com essa abordagem: Multiprocessadores - Sistema com mais de uma CPU que compartilham a mem\u00f3ria principal por meio de um processo coordenado. Podem ser implementados por barramento \u00fanico ou mem\u00f3rias locais. CPUs fortemente acompladas. Multicomputadores - Sistema com computadores interligados em rede com alguma topologia. O foco est\u00e1 na comunica\u00e7\u00e3o entre eles. Processadores fracamente acoplados.","title":"Paralelismo em N\u00edvel de Instru\u00e7\u00f5es e Processadores"},{"location":"nav/PUC/eixo1/organizacao_computadores/#bibliografia","text":"Bibliografia B\u00e1sica STALLINGS, William. Arquitetura e organiza\u00e7\u00e3o de computadores . 10. ed. S\u00e3o Paulo: Pearson, c2018. E-book. ISBN 9788543020532 CORR\u00caA, Ana Grasielle Dion\u00edsio (Org.). Organiza\u00e7\u00e3o e arquitetura de computadores . S\u00e3o Paulo: Pearson, 2017. E-book. ISBN 9788543020327 PATTERSON, David A. Organiza\u00e7\u00e3o e projeto de computadores a interface hardware/software . Rio de Janeiro, GEN LTC 2017. 1 recurso online. ISBN 9788595152908 TANENBAUM, Andrew S.; AUSTIN, Todd. Organiza\u00e7\u00e3o estruturada de computadores . 6. ed. S\u00e3o Paulo, SP: Pearson Education do Brasil, 2013. E-book. ISBN 9788581435398 MONTEIRO, M\u00e1rio A. Introdu\u00e7\u00e3o \u00e0 organiza\u00e7\u00e3o de computadores . 5. ed. Rio de Janeiro: LTC - Livros T\u00e9cnicos e Cient\u00edficos, c2007. E-book. ISBN 978-85-216-1973-4 Sempre que voc\u00ea est\u00e1 vendo uma tela de loading, \u00e9 isso que est\u00e1 acontecendo no seu computador. Paralelismo a n\u00edvel de instru\u00e7\u00e3o \u21a9 Sempre que voc\u00ea est\u00e1 vendo uma tela de loading, \u00e9 isso que est\u00e1 acontecendo no seu computador. \u21a9","title":"Bibliografia"},{"location":"nav/PUC/eixo1/pensamento_comp/","text":"hljs.initHighlightingOnLoad();","title":"Pensamento Computacional"},{"location":"nav/PUC/eixo1/projeto_dev_web_frontend/","text":"hljs.initHighlightingOnLoad();","title":"Projeto 1 - Web Fron-End"},{"location":"nav/setup/colors/","text":"January 17, 2023 Changing the colors Color scheme Default: light theme: theme_style: light light dark Primary color Default: black theme: colors: primary: black black blue green yellow orange purple red white Text color Default: black theme: colors: text: black black blue green yellow orange purple red white Title color Default: black theme: colors: title: black black blue green yellow orange purple red white Background color Default: white theme: colors: background: white black blue green yellow orange purple red white","title":"Colors"},{"location":"nav/setup/colors/#changing-the-colors","text":"","title":"Changing the colors"},{"location":"nav/setup/colors/#color-scheme","text":"Default: light theme: theme_style: light light dark","title":"Color scheme"},{"location":"nav/setup/colors/#primary-color","text":"Default: black theme: colors: primary: black black blue green yellow orange purple red white","title":"Primary color"},{"location":"nav/setup/colors/#text-color","text":"Default: black theme: colors: text: black black blue green yellow orange purple red white","title":"Text color"},{"location":"nav/setup/colors/#title-color","text":"Default: black theme: colors: title: black black blue green yellow orange purple red white","title":"Title color"},{"location":"nav/setup/colors/#background-color","text":"Default: white theme: colors: background: white black blue green yellow orange purple red white","title":"Background color"},{"location":"nav/setup/components/","text":"January 21, 2023 Enable and Disable Components Site Name Default: true theme: components: site_name: true true false Title Default: true theme: components: title: true true false Menu Default: true theme: components: menu: true true false Preview Default: true theme: components: preview: true true false Footer Default: true theme: components: footer: true true false","title":"Components"},{"location":"nav/setup/components/#enable-and-disable-components","text":"","title":"Enable and Disable Components"},{"location":"nav/setup/components/#site-name","text":"Default: true theme: components: site_name: true true false","title":"Site Name"},{"location":"nav/setup/components/#title","text":"Default: true theme: components: title: true true false","title":"Title"},{"location":"nav/setup/components/#menu","text":"Default: true theme: components: menu: true true false","title":"Menu"},{"location":"nav/setup/components/#preview","text":"Default: true theme: components: preview: true true false","title":"Preview"},{"location":"nav/setup/components/#footer","text":"Default: true theme: components: footer: true true false","title":"Footer"},{"location":"nav/setup/favicon/","text":"January 17, 2023 Changing the favicon theme: favicon: assets/favicon.ico","title":"Favicon"},{"location":"nav/setup/favicon/#changing-the-favicon","text":"theme: favicon: assets/favicon.ico","title":"Changing the favicon"},{"location":"nav/setup/fonts/","text":"January 17, 2023 Changing the fonts Site name style Default: normal theme: site_name_style: normal normal bold italic scratched underline overline Title style Default: bold theme: title_style: bold normal bold italic scratched underline overline","title":"Fonts"},{"location":"nav/setup/fonts/#changing-the-fonts","text":"","title":"Changing the fonts"},{"location":"nav/setup/fonts/#site-name-style","text":"Default: normal theme: site_name_style: normal normal bold italic scratched underline overline","title":"Site name style"},{"location":"nav/setup/fonts/#title-style","text":"Default: bold theme: title_style: bold normal bold italic scratched underline overline","title":"Title style"},{"location":"nav/setup/logo/","text":"January 17, 2023 Changing the logo theme: logo: assets/logo.png","title":"Logo"},{"location":"nav/setup/logo/#changing-the-logo","text":"theme: logo: assets/logo.png","title":"Changing the logo"}]}